--------------------------------------------
-- Export file for user OSECD             --
-- Created by wmjs on 2016/9/26, 14:27:44 --
--------------------------------------------

set define off
spool jiaowei.log

prompt
prompt Creating table BRT_JYM1CPUZ_HIS
prompt ===============================
prompt
create table OSECD.BRT_JYM1CPUZ_HIS
(
  yysbh CHAR(4) not null,
  jylxz CHAR(2) not null,
  gsbhz CHAR(4) not null,
  ldbhz CHAR(4) not null,
  xlbhz CHAR(4) not null,
  zdbhz CHAR(4) not null,
  zddmz CHAR(8) not null,
  czyzz CHAR(8) not null,
  jczbz CHAR(1) default '0' not null,
  lshzz CHAR(6) not null,
  pzhzz CHAR(6) not null,
  pchzz CHAR(6) not null,
  ckhzz CHAR(12) not null,
  kcsdm CHAR(4) not null,
  khzzz VARCHAR2(20) not null,
  kmhzz CHAR(8),
  csnzz CHAR(8) not null,
  krzmz CHAR(8),
  xplxz CHAR(2) not null,
  kzlxz CHAR(2) not null,
  klxzz CHAR(2) not null,
  jyjsq NUMBER(6) not null,
  jyrqz CHAR(8) not null,
  jysjz CHAR(6) not null,
  jyjez NUMBER(14) default 0 not null,
  jyqye NUMBER(14) default 0 not null,
  psamz CHAR(12) not null,
  psamj NUMBER(6) default 0 not null,
  taczz CHAR(8) default '00000000' not null,
  lrbzz CHAR(1) default '0' not null,
  lrczy CHAR(8),
  lrsjz DATE,
  hcbsz CHAR(1) default '0' not null,
  bzzzz VARCHAR2(40),
  zzfsz CHAR(1) default '0' not null,
  ztzzz CHAR(2) default '00' not null,
  xtsjz DATE default SYSDATE not null,
  jsbsz CHAR(1) default '0' not null,
  jssjz DATE,
  mxwjm VARCHAR2(255),
  yyhzz CHAR(1) default '0' not null,
  qsrqz CHAR(8),
  tzbsz CHAR(2),
  qshzz CHAR(1) default '0' not null,
  cwlxz CHAR(5) default '00000',
  wjclb CHAR(2) default '00' not null,
  ccjez NUMBER(14) default 0,
  jzxlz CHAR(4),
  jzbhz CHAR(4),
  jzdmz CHAR(8),
  jzrqz CHAR(8),
  jzsjz CHAR(6)
)
partition by range (JYRQZ)
(
  partition P_201502 values less than ('20150301')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201503 values less than ('20150401')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201504 values less than ('20150501')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201505 values less than ('20150601')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201506 values less than ('20150701')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201507 values less than ('20150801')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201508 values less than ('20150901')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201509 values less than ('20151001')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201510 values less than ('20151101')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201511 values less than ('20151201')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201512 values less than ('20160101')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201601 values less than ('20160201')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201602 values less than ('20160301')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201603 values less than ('20160401')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201604 values less than ('20160501')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201605 values less than ('20160601')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201606 values less than ('20160701')
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.BRT_JYM1CPUZ_HIS
  is 'brt刷卡数据（公交）';
comment on column OSECD.BRT_JYM1CPUZ_HIS.yysbh
  is '运营商编号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jylxz
  is '交易类型：交易类型表
';
comment on column OSECD.BRT_JYM1CPUZ_HIS.gsbhz
  is '公司号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.ldbhz
  is '路队号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.xlbhz
  is '线路号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.zdbhz
  is '站点编号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.zddmz
  is '终端代码';
comment on column OSECD.BRT_JYM1CPUZ_HIS.czyzz
  is '操作员号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jczbz
  is '进出站标志。0-进站,1-出站';
comment on column OSECD.BRT_JYM1CPUZ_HIS.lshzz
  is '流水号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.pzhzz
  is '凭证号：验证终端漏交易';
comment on column OSECD.BRT_JYM1CPUZ_HIS.pchzz
  is '批次号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.ckhzz
  is '参考号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.kcsdm
  is '卡内城市代码，卡片所属城市（互联互通）';
comment on column OSECD.BRT_JYM1CPUZ_HIS.khzzz
  is '卡号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.kmhzz
  is '卡面号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.csnzz
  is 'csn';
comment on column OSECD.BRT_JYM1CPUZ_HIS.krzmz
  is '卡认证码';
comment on column OSECD.BRT_JYM1CPUZ_HIS.xplxz
  is '芯片类型';
comment on column OSECD.BRT_JYM1CPUZ_HIS.kzlxz
  is '卡主类型（M1主卡类型00）';
comment on column OSECD.BRT_JYM1CPUZ_HIS.klxzz
  is '卡子类型';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jyjsq
  is '交易计数器(钱包和月票共用)';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jyrqz
  is '交易日期';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jysjz
  is '交易时间';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jyjez
  is '交易金额/次数';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jyqye
  is '交易前卡余额/余次';
comment on column OSECD.BRT_JYM1CPUZ_HIS.psamz
  is 'psam卡号/pki卡号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.psamj
  is 'psam交易计数器，M1卡时全为0';
comment on column OSECD.BRT_JYM1CPUZ_HIS.taczz
  is 'tac-算法终端规划';
comment on column OSECD.BRT_JYM1CPUZ_HIS.lrbzz
  is '录入标识，0自动1手工';
comment on column OSECD.BRT_JYM1CPUZ_HIS.lrczy
  is '录入操作员';
comment on column OSECD.BRT_JYM1CPUZ_HIS.lrsjz
  is '录入时间';
comment on column OSECD.BRT_JYM1CPUZ_HIS.hcbsz
  is '换乘标识值。0-未换乘 1-第一阶段换乘 2-第二阶段换乘';
comment on column OSECD.BRT_JYM1CPUZ_HIS.bzzzz
  is '备注';
comment on column OSECD.BRT_JYM1CPUZ_HIS.zzfsz
  is '结算方式:0-自动1-强扎';
comment on column OSECD.BRT_JYM1CPUZ_HIS.ztzzz
  is '00：正常；01：冲正；02：撤消；03：异常';
comment on column OSECD.BRT_JYM1CPUZ_HIS.xtsjz
  is '系统时间';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jsbsz
  is '结算标识。0-未结算1-结算平2-终端多3-主机多';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jssjz
  is '结算时间';
comment on column OSECD.BRT_JYM1CPUZ_HIS.mxwjm
  is '明细文件名';
comment on column OSECD.BRT_JYM1CPUZ_HIS.yyhzz
  is '运营汇总标识。0-未汇总1-已汇总';
comment on column OSECD.BRT_JYM1CPUZ_HIS.qsrqz
  is '清算日期：清分日期记录中读入';
comment on column OSECD.BRT_JYM1CPUZ_HIS.tzbsz
  is '调整标识
 00:   确认  01：可疑
;  02：调整失败;
03：调整确认
;  04：调整拒付';
comment on column OSECD.BRT_JYM1CPUZ_HIS.qshzz
  is '清算汇总标识。0-未汇总1-已汇总';
comment on column OSECD.BRT_JYM1CPUZ_HIS.cwlxz
  is '清算可疑原因';
comment on column OSECD.BRT_JYM1CPUZ_HIS.wjclb
  is '文件处理标识 00--未处理  01---处理中 10 --已完成';
comment on column OSECD.BRT_JYM1CPUZ_HIS.ccjez
  is '充次金额';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jzxlz
  is '进站线路';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jzbhz
  is '进站站点编号';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jzdmz
  is '进站终端代码';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jzrqz
  is '进站日期';
comment on column OSECD.BRT_JYM1CPUZ_HIS.jzsjz
  is '进站时间';
create index OSECD.IDX_JYM1CPUZ_HIS_QSRQZ2 on OSECD.BRT_JYM1CPUZ_HIS (JYRQZ, JZBHZ, JCZBZ)
  local;

prompt
prompt Creating table BSVCBUSARRLFTDATALD
prompt ==================================
prompt
create table OSECD.BSVCBUSARRLFTDATALD
(
  busrdid        NUMBER(20) not null,
  datatype       VARCHAR2(3) not null,
  routeid        VARCHAR2(20) not null,
  subrouteid     VARCHAR2(20),
  segmentid      VARCHAR2(20),
  busid          VARCHAR2(36),
  productid      NUMBER(10) not null,
  stationseqnum  NUMBER(3),
  stationnum     VARCHAR2(10),
  actdatetime    DATE,
  arractdatetime DATE,
  arrrecdatetime DATE,
  lftactdatetime DATE,
  lftrecdatetime DATE,
  onpnum         NUMBER(4),
  offpnum        NUMBER(4),
  leftpnum       NUMBER(4),
  arrgpsmile     NUMBER(13,2),
  lftgpsmile     NUMBER(13,2),
  cardid         NVARCHAR2(20),
  busselfid      NVARCHAR2(20),
  stationid      VARCHAR2(36),
  sngserialid    NUMBER(3),
  routename      VARCHAR2(20),
  routecode      VARCHAR2(20),
  begintime      DATE,
  endtime        DATE,
  recdate        DATE default sysdate,
  actdatetime2   VARCHAR2(8)
)
partition by range (ACTDATETIME)
(
  partition P_201501 values less than (TO_DATE(' 2015-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201502 values less than (TO_DATE(' 2015-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201503 values less than (TO_DATE(' 2015-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201504 values less than (TO_DATE(' 2015-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201505 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201506 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201507 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201508 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201509 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201510 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201511 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201512 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201601 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201603 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201604 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201605 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201606 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201607 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201610 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.BSVCBUSARRLFTDATALD
  is '到离站数据分析';
comment on column OSECD.BSVCBUSARRLFTDATALD.busrdid
  is '唯一号';
comment on column OSECD.BSVCBUSARRLFTDATALD.datatype
  is '数据类型 3,GPS;4,到离站;55,违规;47,DSRC检到离场;71,GPS到离场;53,开关门;';
comment on column OSECD.BSVCBUSARRLFTDATALD.routeid
  is '线路号';
comment on column OSECD.BSVCBUSARRLFTDATALD.subrouteid
  is '子线号';
comment on column OSECD.BSVCBUSARRLFTDATALD.segmentid
  is '单程号';
comment on column OSECD.BSVCBUSARRLFTDATALD.busid
  is '车辆ID';
comment on column OSECD.BSVCBUSARRLFTDATALD.productid
  is '车载机编号';
comment on column OSECD.BSVCBUSARRLFTDATALD.stationseqnum
  is '顺序号';
comment on column OSECD.BSVCBUSARRLFTDATALD.stationnum
  is '站点统一编号';
comment on column OSECD.BSVCBUSARRLFTDATALD.actdatetime
  is '业务时间（为到离中间的时间）';
comment on column OSECD.BSVCBUSARRLFTDATALD.arractdatetime
  is '到站业务时间';
comment on column OSECD.BSVCBUSARRLFTDATALD.arrrecdatetime
  is '到站记录时间';
comment on column OSECD.BSVCBUSARRLFTDATALD.lftactdatetime
  is '离站业务时间';
comment on column OSECD.BSVCBUSARRLFTDATALD.lftrecdatetime
  is '离站记录时间';
comment on column OSECD.BSVCBUSARRLFTDATALD.onpnum
  is '上客数';
comment on column OSECD.BSVCBUSARRLFTDATALD.offpnum
  is '下客数';
comment on column OSECD.BSVCBUSARRLFTDATALD.leftpnum
  is '载客数';
comment on column OSECD.BSVCBUSARRLFTDATALD.arrgpsmile
  is '到站GPS里程';
comment on column OSECD.BSVCBUSARRLFTDATALD.lftgpsmile
  is '离站GPS里程';
comment on column OSECD.BSVCBUSARRLFTDATALD.cardid
  is '车牌号';
comment on column OSECD.BSVCBUSARRLFTDATALD.busselfid
  is '自编号';
comment on column OSECD.BSVCBUSARRLFTDATALD.stationid
  is '站点ID';
comment on column OSECD.BSVCBUSARRLFTDATALD.sngserialid
  is '单程号';
comment on column OSECD.BSVCBUSARRLFTDATALD.routename
  is '线路名称';
comment on column OSECD.BSVCBUSARRLFTDATALD.routecode
  is '线路编码';
comment on column OSECD.BSVCBUSARRLFTDATALD.begintime
  is '计算客流开始时间';
comment on column OSECD.BSVCBUSARRLFTDATALD.endtime
  is '计算客流结束时间';
comment on column OSECD.BSVCBUSARRLFTDATALD.recdate
  is '记录时间';
comment on column OSECD.BSVCBUSARRLFTDATALD.actdatetime2
  is '时间（用于时段计算）';
create index OSECD.IX_BSVCBUSARRLFTDATA1 on OSECD.BSVCBUSARRLFTDATALD (ACTDATETIME)
  local;
create index OSECD.IX_BSVCBUSARRLFTDATA2 on OSECD.BSVCBUSARRLFTDATALD (ROUTEID)
  local;
create index OSECD.IX_BSVCBUSARRLFTDATA3 on OSECD.BSVCBUSARRLFTDATALD (BUSID)
  local;
create index OSECD.IX_BSVCBUSARRLFTDATA4 on OSECD.BSVCBUSARRLFTDATALD (ARRACTDATETIME, LFTACTDATETIME)
  local;

prompt
prompt Creating table BSVCBUSARRLFTLD5
prompt ===============================
prompt
create table OSECD.BSVCBUSARRLFTLD5
(
  busrdid           NUMBER(16) not null,
  datatype          VARCHAR2(3) not null,
  routeid           NUMBER(8) not null,
  subrouteid        NUMBER(8),
  productid         NUMBER(10) not null,
  stationseqnum     NUMBER(3),
  stationnum        VARCHAR2(10),
  isarrlft          CHAR(1),
  actdatetime       DATE not null,
  recdatetime       DATE default sysdate not null,
  writeid           NUMBER(8) not null,
  isappend          CHAR(1),
  bussid            VARCHAR2(3),
  longitude         NUMBER(9,6),
  latitude          NUMBER(9,6),
  altitude          NUMBER(9,6),
  gpsspeed          NUMBER(6,2),
  sensorspeed       NUMBER(6,2),
  rotationangle     NUMBER(6,2),
  stationtype       VARCHAR2(2),
  ismanulopt        CHAR(1),
  packcode          NUMBER(3),
  smcode            NUMBER(4),
  onpnum            NUMBER(4),
  offpnum           NUMBER(4),
  leftpnum          NUMBER(4),
  tptdata           NUMBER(4,2),
  doorstate         VARCHAR2(3),
  peccancytype      VARCHAR2(20),
  peccancytime      DATE,
  standardvalue     NUMBER,
  peccancyvalue     NUMBER,
  gpsmile           NUMBER(13,2),
  checked           CHAR(1),
  assedate          DATE,
  assessor          VARCHAR2(20),
  busid             VARCHAR2(20),
  driverid          VARCHAR2(20),
  busrrid           VARCHAR2(20),
  reservechar1      VARCHAR2(50),
  reservechar2      VARCHAR2(50),
  reservechar3      VARCHAR2(50),
  reservechar4      VARCHAR2(50),
  reservechar5      VARCHAR2(50),
  reservechar6      VARCHAR2(50),
  reservechar7      VARCHAR2(50),
  reservechar8      VARCHAR2(50),
  reservechar9      VARCHAR2(50),
  reservechar10     VARCHAR2(50),
  issvrappend       CHAR(1) default '0',
  svrappendtime     DATE,
  state             CHAR(1),
  reservechar11     VARCHAR2(50),
  reservechar12     VARCHAR2(50),
  reservechar13     VARCHAR2(50),
  reservechar15     VARCHAR2(50),
  peccancystarttime DATE,
  peccancyendtime   DATE,
  peccancymaxvalue  NUMBER,
  peccancyavgvalue  NUMBER
)
partition by range (ACTDATETIME)
(
  partition P_20160801 values less than (TO_DATE(' 2016-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160901 values less than (TO_DATE(' 2016-09-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160913 values less than (TO_DATE(' 2016-09-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160914 values less than (TO_DATE(' 2016-09-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160915 values less than (TO_DATE(' 2016-09-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160916 values less than (TO_DATE(' 2016-09-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160917 values less than (TO_DATE(' 2016-09-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160918 values less than (TO_DATE(' 2016-09-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160919 values less than (TO_DATE(' 2016-09-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160920 values less than (TO_DATE(' 2016-09-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160921 values less than (TO_DATE(' 2016-09-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160922 values less than (TO_DATE(' 2016-09-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160923 values less than (TO_DATE(' 2016-09-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160924 values less than (TO_DATE(' 2016-09-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160925 values less than (TO_DATE(' 2016-09-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160926 values less than (TO_DATE(' 2016-09-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160927 values less than (TO_DATE(' 2016-09-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160928 values less than (TO_DATE(' 2016-09-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160929 values less than (TO_DATE(' 2016-09-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160930 values less than (TO_DATE(' 2016-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161001 values less than (TO_DATE(' 2016-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161002 values less than (TO_DATE(' 2016-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161003 values less than (TO_DATE(' 2016-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161004 values less than (TO_DATE(' 2016-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161005 values less than (TO_DATE(' 2016-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161006 values less than (TO_DATE(' 2016-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161007 values less than (TO_DATE(' 2016-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161008 values less than (TO_DATE(' 2016-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161009 values less than (TO_DATE(' 2016-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161010 values less than (TO_DATE(' 2016-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161011 values less than (TO_DATE(' 2016-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161012 values less than (TO_DATE(' 2016-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161013 values less than (TO_DATE(' 2016-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161014 values less than (TO_DATE(' 2016-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161015 values less than (TO_DATE(' 2016-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161016 values less than (TO_DATE(' 2016-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161017 values less than (TO_DATE(' 2016-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161018 values less than (TO_DATE(' 2016-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161019 values less than (TO_DATE(' 2016-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161020 values less than (TO_DATE(' 2016-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161021 values less than (TO_DATE(' 2016-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161022 values less than (TO_DATE(' 2016-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161023 values less than (TO_DATE(' 2016-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161024 values less than (TO_DATE(' 2016-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161025 values less than (TO_DATE(' 2016-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161026 values less than (TO_DATE(' 2016-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161027 values less than (TO_DATE(' 2016-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161028 values less than (TO_DATE(' 2016-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161029 values less than (TO_DATE(' 2016-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161030 values less than (TO_DATE(' 2016-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161031 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on column OSECD.BSVCBUSARRLFTLD5.busrdid
  is '唯一号';
comment on column OSECD.BSVCBUSARRLFTLD5.datatype
  is '数据类型 3,GPS;4,到离站;55,违规;47,DSRC检到离场;71,GPS到离场;53,开关门;';
comment on column OSECD.BSVCBUSARRLFTLD5.routeid
  is '线路号';
comment on column OSECD.BSVCBUSARRLFTLD5.subrouteid
  is '子线号';
comment on column OSECD.BSVCBUSARRLFTLD5.productid
  is '车载机编号';
comment on column OSECD.BSVCBUSARRLFTLD5.stationseqnum
  is '顺序号';
comment on column OSECD.BSVCBUSARRLFTLD5.stationnum
  is '站点统一编号';
comment on column OSECD.BSVCBUSARRLFTLD5.isarrlft
  is '到离站 1,到;2,离';
comment on column OSECD.BSVCBUSARRLFTLD5.actdatetime
  is '业务时间';
comment on column OSECD.BSVCBUSARRLFTLD5.recdatetime
  is '记录时间';
comment on column OSECD.BSVCBUSARRLFTLD5.writeid
  is '存储服务号';
comment on column OSECD.BSVCBUSARRLFTLD5.isappend
  is '是否补录 0,直接上传;1,GPRS补发;3,场站DSRC补发;5,站台上报到离站;8,第二链路实时上传;9,第二链路补发上传';
comment on column OSECD.BSVCBUSARRLFTLD5.bussid
  is '运营类型';
comment on column OSECD.BSVCBUSARRLFTLD5.longitude
  is '经度';
comment on column OSECD.BSVCBUSARRLFTLD5.latitude
  is '纬度';
comment on column OSECD.BSVCBUSARRLFTLD5.altitude
  is '海拔';
comment on column OSECD.BSVCBUSARRLFTLD5.gpsspeed
  is 'GPS速度';
comment on column OSECD.BSVCBUSARRLFTLD5.sensorspeed
  is '传感器速度';
comment on column OSECD.BSVCBUSARRLFTLD5.rotationangle
  is '方向角';
comment on column OSECD.BSVCBUSARRLFTLD5.stationtype
  is '站点类型';
comment on column OSECD.BSVCBUSARRLFTLD5.ismanulopt
  is '自动报站标志 A,自动;M,手动;';
comment on column OSECD.BSVCBUSARRLFTLD5.packcode
  is '包流水号';
comment on column OSECD.BSVCBUSARRLFTLD5.smcode
  is '短语代码';
comment on column OSECD.BSVCBUSARRLFTLD5.onpnum
  is '上客数';
comment on column OSECD.BSVCBUSARRLFTLD5.offpnum
  is '下客数';
comment on column OSECD.BSVCBUSARRLFTLD5.leftpnum
  is '载客数';
comment on column OSECD.BSVCBUSARRLFTLD5.tptdata
  is '车内温度';
comment on column OSECD.BSVCBUSARRLFTLD5.doorstate
  is '开关门状态';
comment on column OSECD.BSVCBUSARRLFTLD5.peccancytype
  is '违规类型';
comment on column OSECD.BSVCBUSARRLFTLD5.peccancytime
  is '违规时间';
comment on column OSECD.BSVCBUSARRLFTLD5.standardvalue
  is '违规标准 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.BSVCBUSARRLFTLD5.peccancyvalue
  is '违规值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.BSVCBUSARRLFTLD5.gpsmile
  is 'GPS里程';
comment on column OSECD.BSVCBUSARRLFTLD5.checked
  is '是否免核';
comment on column OSECD.BSVCBUSARRLFTLD5.assedate
  is '免核日期';
comment on column OSECD.BSVCBUSARRLFTLD5.assessor
  is '免核人';
comment on column OSECD.BSVCBUSARRLFTLD5.busid
  is '车辆ID';
comment on column OSECD.BSVCBUSARRLFTLD5.driverid
  is '驾驶员ID';
comment on column OSECD.BSVCBUSARRLFTLD5.busrrid
  is '车次序号';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar1
  is '字符型预留字段1 - 投币箱编号; 服务检测违规数据的数据库ID';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar2
  is '字符型预留字段2 - 投币数量';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar3
  is '字符型预留字段3';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar4
  is '字符型预留字段4';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar5
  is '字符型预留字段5';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar6
  is '字符型预留字段6';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar7
  is '字符型预留字段7';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar8
  is '字符型预留字段8';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar9
  is '字符型预留字段9';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar10
  is '字符型预留字段10';
comment on column OSECD.BSVCBUSARRLFTLD5.issvrappend
  is '存储服务自动补交标志 - 数据入库失败后,存储服务保存到文件然后再补交 0,非补交(直接入库);1,补交;';
comment on column OSECD.BSVCBUSARRLFTLD5.svrappendtime
  is '存储服务自动补交时间';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar11
  is '字符型预留字段11 - 企业上传的车辆ID(无锡用)';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar12
  is '字符型预留字段12 - 企业上传的线路ID(无锡用)';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar13
  is '字符型预留字段13 - 企业上传的子线路ID(无锡用)';
comment on column OSECD.BSVCBUSARRLFTLD5.reservechar15
  is '字符型预留字段15';
comment on column OSECD.BSVCBUSARRLFTLD5.peccancystarttime
  is '违规开始时间';
comment on column OSECD.BSVCBUSARRLFTLD5.peccancyendtime
  is '违规结束时间';
comment on column OSECD.BSVCBUSARRLFTLD5.peccancymaxvalue
  is '违规最高值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.BSVCBUSARRLFTLD5.peccancyavgvalue
  is '违规平均值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
create index OSECD.IX_BSVCBUSARRLFTLD5_EXPORT1 on OSECD.BSVCBUSARRLFTLD5 (ROUTEID, PRODUCTID, ACTDATETIME)
  local;

prompt
prompt Creating table BSVCBUSARRLFTLD5TEMP
prompt ===================================
prompt
create table OSECD.BSVCBUSARRLFTLD5TEMP
(
  busrdid       NUMBER(16) not null,
  datatype      VARCHAR2(3) not null,
  routeid       NUMBER(8) not null,
  subrouteid    NUMBER(8),
  productid     NUMBER(10) not null,
  stationseqnum NUMBER(3),
  stationnum    VARCHAR2(10),
  isarrlft      CHAR(1),
  actdatetime   DATE not null,
  recdatetime   DATE default sysdate not null,
  writeid       NUMBER(8) not null,
  isappend      CHAR(1),
  bussid        VARCHAR2(3),
  longitude     NUMBER(9,6),
  latitude      NUMBER(9,6),
  altitude      NUMBER(9,6),
  gpsspeed      NUMBER(6,2),
  sensorspeed   NUMBER(6,2),
  rotationangle NUMBER(6,2),
  stationtype   VARCHAR2(2),
  ismanulopt    CHAR(1),
  packcode      NUMBER(3),
  smcode        NUMBER(4),
  onpnum        NUMBER(4),
  offpnum       NUMBER(4),
  leftpnum      NUMBER(4),
  tptdata       NUMBER(4,2),
  doorstate     VARCHAR2(3),
  peccancytype  VARCHAR2(20),
  peccancytime  DATE,
  standardvalue NUMBER,
  peccancyvalue NUMBER,
  gpsmile       NUMBER(13,2),
  checked       CHAR(1),
  assedate      DATE,
  assessor      VARCHAR2(20),
  busid         VARCHAR2(20),
  driverid      VARCHAR2(20),
  busrrid       VARCHAR2(20),
  reservechar1  VARCHAR2(50),
  reservechar2  VARCHAR2(50),
  reservechar3  VARCHAR2(50),
  reservechar4  VARCHAR2(50),
  reservechar5  VARCHAR2(50),
  reservechar6  VARCHAR2(50),
  reservechar7  VARCHAR2(50),
  reservechar8  VARCHAR2(50),
  reservechar9  VARCHAR2(50),
  reservechar10 VARCHAR2(50),
  state         CHAR(1) default '0'
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BSVCBUSARRLFTLD5TEMP
  is '到离站时间临时表(用于计算到离站时间和刷卡数据)';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.busrdid
  is '唯一号';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.datatype
  is '数据类型 3,GPS;4,到离站;55,违规;47,DSRC检到离场;71,GPS到离场;53,开关门;';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.routeid
  is '线路号';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.subrouteid
  is '子线号';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.productid
  is '车载机编号';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.stationseqnum
  is '顺序号';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.stationnum
  is '站点统一编号';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.isarrlft
  is '到离站 1,到;2,离';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.actdatetime
  is '业务时间';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.recdatetime
  is '记录时间';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.writeid
  is '存储服务号';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.isappend
  is '是否补录 0,直接上传;1,GPRS补发;3,场站DSRC补发;5,站台上报到离站;';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.bussid
  is '运营类型';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.longitude
  is '经度';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.latitude
  is '纬度';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.altitude
  is '海拔';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.gpsspeed
  is 'GPS速度';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.sensorspeed
  is '传感器速度';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.rotationangle
  is '方向角';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.stationtype
  is '站点类型';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.ismanulopt
  is '自动报站标志 A,自动;M,手动;';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.packcode
  is '包流水号';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.smcode
  is '短语代码';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.onpnum
  is '上客数';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.offpnum
  is '下客数';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.leftpnum
  is '载客数';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.tptdata
  is '车内温度';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.doorstate
  is '开关门状态';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.peccancytype
  is '违规类型';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.peccancytime
  is '违规时间';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.standardvalue
  is '违规标准 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.peccancyvalue
  is '违规值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.gpsmile
  is 'GPS里程';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.checked
  is '是否免核';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.assedate
  is '免核日期';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.assessor
  is '免核人';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.busid
  is '车辆ID';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.driverid
  is '驾驶员ID';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.busrrid
  is '车次序号';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.reservechar1
  is '字符型预留字段1 - 投币箱编号; 服务检测违规数据的数据库ID';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.reservechar2
  is '字符型预留字段2 - 投币数量';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.reservechar3
  is '字符型预留字段3';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.reservechar4
  is '字符型预留字段4';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.reservechar5
  is '字符型预留字段5';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.reservechar6
  is '字符型预留字段6';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.reservechar7
  is '字符型预留字段7';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.reservechar8
  is '字符型预留字段8';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.reservechar9
  is '字符型预留字段9';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.reservechar10
  is '字符型预留字段10';
comment on column OSECD.BSVCBUSARRLFTLD5TEMP.state
  is '存储服务自动补交标志 - 数据入库失败后,存储服务保存到文件然后再补交 0,非补交(直接入库);1,补交;';
create index OSECD.IX_BUSARRLFT on OSECD.BSVCBUSARRLFTLD5TEMP (ROUTEID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IX_BUSARRLFTTEMP on OSECD.BSVCBUSARRLFTLD5TEMP (DATATYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IX_BUSARRLFTTEMP1 on OSECD.BSVCBUSARRLFTLD5TEMP (ACTDATETIME, ISARRLFT)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BSVCBUSARRLFTLD5_ROU
prompt ===================================
prompt
create table OSECD.BSVCBUSARRLFTLD5_ROU
(
  routeid     VARCHAR2(36) not null,
  stationno   VARCHAR2(36) not null,
  isarrlft    VARCHAR2(3),
  actdatetime DATE,
  routename   NVARCHAR2(20),
  busid       VARCHAR2(36),
  busselfid   NVARCHAR2(20),
  nextarrtime DATE,
  cardid      NVARCHAR2(20),
  gpsmile     NUMBER,
  lastleatime DATE,
  lastarrtime DATE
)
tablespace TBS_OSECD_ARRLFT
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.routeid
  is '线路编号';
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.stationno
  is '站点编号';
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.isarrlft
  is '到离站标志';
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.actdatetime
  is '本站到站时间';
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.routename
  is '线路名称';
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.busid
  is '车辆编号';
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.busselfid
  is '车辆自编号';
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.nextarrtime
  is '下站到站时间';
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.cardid
  is '下站离站时间';
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.gpsmile
  is 'GPS里程';
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.lastleatime
  is '上站离站时间';
comment on column OSECD.BSVCBUSARRLFTLD5_ROU.lastarrtime
  is '上站到站时间';
create index OSECD.IX_BSVCBUSARRLFTLD5_ROU on OSECD.BSVCBUSARRLFTLD5_ROU (BUSID, ISARRLFT, ACTDATETIME)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IX_BSVCBUSARRLFTLD5_ROU1 on OSECD.BSVCBUSARRLFTLD5_ROU (NEXTARRTIME, BUSSELFID, ACTDATETIME)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BSVCBUSCANALARMDATA
prompt ==================================
prompt
create table OSECD.BSVCBUSCANALARMDATA
(
  canalarmdataid NUMBER(16) not null,
  routeid        NUMBER(8),
  productid      NUMBER(10) not null,
  actdatetime    DATE not null,
  recdatetime    DATE default sysdate not null,
  writeid        NUMBER(8),
  isappend       CHAR(1),
  alarmtype      VARCHAR2(3) not null,
  alarmvalue     VARCHAR2(50),
  issvrappend    CHAR(1) default '0',
  svrappendtime  DATE,
  verifystatus   CHAR(1) default '0',
  stateupdate    DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BSVCBUSCANALARMDATA
  is 'CAN报警数据表，存储车载机上传的CAN报警数据';
comment on column OSECD.BSVCBUSCANALARMDATA.canalarmdataid
  is '唯一号';
comment on column OSECD.BSVCBUSCANALARMDATA.routeid
  is '线路号';
comment on column OSECD.BSVCBUSCANALARMDATA.productid
  is '车载机编号';
comment on column OSECD.BSVCBUSCANALARMDATA.actdatetime
  is '业务时间';
comment on column OSECD.BSVCBUSCANALARMDATA.recdatetime
  is '记录时间';
comment on column OSECD.BSVCBUSCANALARMDATA.writeid
  is '存储服务号';
comment on column OSECD.BSVCBUSCANALARMDATA.isappend
  is '0 正常，1 GPRS补发';
comment on column OSECD.BSVCBUSCANALARMDATA.alarmtype
  is '报警类型，1 水温 2 机油压力 3 制动气压 4 电压 5 油量 6 空滤 7 机滤 8 油滤 9 缓速器 10 ABS 11 水位 12 仓温';
comment on column OSECD.BSVCBUSCANALARMDATA.alarmvalue
  is '报警数值';
comment on column OSECD.BSVCBUSCANALARMDATA.issvrappend
  is '存储服务自动补交标志 - 数据入库失败后,存储服务保存到文件然后再补交 0,非补交(直接入库);1,补交;';
comment on column OSECD.BSVCBUSCANALARMDATA.svrappendtime
  is '存储服务自动补交时间';
comment on column OSECD.BSVCBUSCANALARMDATA.verifystatus
  is '状态(0待处理，1已处理)
';
comment on column OSECD.BSVCBUSCANALARMDATA.stateupdate
  is '状态更新时间';
alter table OSECD.BSVCBUSCANALARMDATA
  add constraint PK_CANALARMDATAID primary key (CANALARMDATAID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BSVCBUSCANDATA
prompt =============================
prompt
create table OSECD.BSVCBUSCANDATA
(
  candataid     NUMBER(16) not null,
  routeid       NUMBER(8),
  productid     NUMBER(10) not null,
  actdatetime   DATE not null,
  protocoltype  VARCHAR2(3),
  recdatetime   DATE default sysdate not null,
  writeid       NUMBER(8),
  isappend      CHAR(1),
  canpgn        NUMBER(10) not null,
  canspn1       VARCHAR2(50),
  canspn2       VARCHAR2(50),
  canspn3       VARCHAR2(50),
  canspn4       VARCHAR2(50),
  canspn5       VARCHAR2(50),
  canspn6       VARCHAR2(50),
  canspn7       VARCHAR2(50),
  canspn8       VARCHAR2(50),
  canspn9       VARCHAR2(50),
  canspn10      VARCHAR2(50),
  canspn11      VARCHAR2(50),
  canspn12      VARCHAR2(50),
  canspn13      VARCHAR2(50),
  canspn14      VARCHAR2(50),
  canspn15      VARCHAR2(50),
  canspn16      VARCHAR2(50),
  canspn17      VARCHAR2(50),
  canspn18      VARCHAR2(50),
  canspn19      VARCHAR2(50),
  canspn20      VARCHAR2(50),
  canspn21      VARCHAR2(50),
  canspn22      VARCHAR2(50),
  canspn23      VARCHAR2(50),
  canspn24      VARCHAR2(50),
  canspn25      VARCHAR2(50),
  canspn26      VARCHAR2(50),
  canspn27      VARCHAR2(50),
  canspn28      VARCHAR2(50),
  canspn29      VARCHAR2(50),
  canspn30      VARCHAR2(50),
  canspn31      VARCHAR2(50),
  canspn32      VARCHAR2(50),
  canspn33      VARCHAR2(50),
  canspn34      VARCHAR2(50),
  canspn35      VARCHAR2(50),
  canspn36      VARCHAR2(50),
  canspn37      VARCHAR2(50),
  canspn38      VARCHAR2(50),
  canspn39      VARCHAR2(50),
  canspn40      VARCHAR2(50),
  canspn41      VARCHAR2(50),
  canspn42      VARCHAR2(50),
  canspn43      VARCHAR2(50),
  canspn44      VARCHAR2(50),
  canspn45      VARCHAR2(50),
  canspn46      VARCHAR2(50),
  canspn47      VARCHAR2(50),
  canspn48      VARCHAR2(50),
  canspn49      VARCHAR2(50),
  canspn50      VARCHAR2(50),
  issvrappend   CHAR(1) default '0',
  svrappendtime DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BSVCBUSCANDATA
  is 'CAN数据表，存储车载机上传的CAN数据';
comment on column OSECD.BSVCBUSCANDATA.candataid
  is '唯一号';
comment on column OSECD.BSVCBUSCANDATA.routeid
  is '线路号';
comment on column OSECD.BSVCBUSCANDATA.productid
  is '车载机编号';
comment on column OSECD.BSVCBUSCANDATA.actdatetime
  is '业务时间';
comment on column OSECD.BSVCBUSCANDATA.protocoltype
  is '协议类型，1 海信系统测试 2 上海张江用协议 3 威帝协议 4 欧科佳协议 5 本安协议';
comment on column OSECD.BSVCBUSCANDATA.recdatetime
  is '记录时间';
comment on column OSECD.BSVCBUSCANDATA.writeid
  is '存储服务号';
comment on column OSECD.BSVCBUSCANDATA.isappend
  is '0 正常，1 GPRS补发';
comment on column OSECD.BSVCBUSCANDATA.canpgn
  is '参数组编号';
comment on column OSECD.BSVCBUSCANDATA.canspn1
  is '参数编号1的值';
comment on column OSECD.BSVCBUSCANDATA.canspn2
  is '参数编号2的值';
comment on column OSECD.BSVCBUSCANDATA.canspn3
  is '参数编号3的值';
comment on column OSECD.BSVCBUSCANDATA.canspn4
  is '参数编号4的值';
comment on column OSECD.BSVCBUSCANDATA.canspn5
  is '参数编号5的值';
comment on column OSECD.BSVCBUSCANDATA.canspn6
  is '参数编号6的值';
comment on column OSECD.BSVCBUSCANDATA.canspn7
  is '参数编号7的值';
comment on column OSECD.BSVCBUSCANDATA.canspn8
  is '参数编号8的值';
comment on column OSECD.BSVCBUSCANDATA.canspn9
  is '参数编号9的值';
comment on column OSECD.BSVCBUSCANDATA.canspn10
  is '参数编号10的值';
comment on column OSECD.BSVCBUSCANDATA.canspn11
  is '参数编号11的值';
comment on column OSECD.BSVCBUSCANDATA.canspn12
  is '参数编号12的值';
comment on column OSECD.BSVCBUSCANDATA.canspn13
  is '参数编号13的值';
comment on column OSECD.BSVCBUSCANDATA.canspn14
  is '参数编号14的值';
comment on column OSECD.BSVCBUSCANDATA.canspn15
  is '参数编号15的值';
comment on column OSECD.BSVCBUSCANDATA.canspn16
  is '参数编号16的值';
comment on column OSECD.BSVCBUSCANDATA.canspn17
  is '参数编号17的值';
comment on column OSECD.BSVCBUSCANDATA.canspn18
  is '参数编号18的值';
comment on column OSECD.BSVCBUSCANDATA.canspn19
  is '参数编号19的值';
comment on column OSECD.BSVCBUSCANDATA.canspn20
  is '参数编号20的值';
comment on column OSECD.BSVCBUSCANDATA.canspn21
  is '参数编号21的值';
comment on column OSECD.BSVCBUSCANDATA.canspn22
  is '参数编号22的值';
comment on column OSECD.BSVCBUSCANDATA.canspn23
  is '参数编号23的值';
comment on column OSECD.BSVCBUSCANDATA.canspn24
  is '参数编号24的值';
comment on column OSECD.BSVCBUSCANDATA.canspn25
  is '参数编号25的值';
comment on column OSECD.BSVCBUSCANDATA.canspn26
  is '参数编号26的值';
comment on column OSECD.BSVCBUSCANDATA.canspn27
  is '参数编号27的值';
comment on column OSECD.BSVCBUSCANDATA.canspn28
  is '参数编号28的值';
comment on column OSECD.BSVCBUSCANDATA.canspn29
  is '参数编号29的值';
comment on column OSECD.BSVCBUSCANDATA.canspn30
  is '参数编号30的值';
comment on column OSECD.BSVCBUSCANDATA.canspn31
  is '参数编号31的值';
comment on column OSECD.BSVCBUSCANDATA.canspn32
  is '参数编号32的值';
comment on column OSECD.BSVCBUSCANDATA.canspn33
  is '参数编号33的值';
comment on column OSECD.BSVCBUSCANDATA.canspn34
  is '参数编号34的值';
comment on column OSECD.BSVCBUSCANDATA.canspn35
  is '参数编号35的值';
comment on column OSECD.BSVCBUSCANDATA.canspn36
  is '参数编号36的值';
comment on column OSECD.BSVCBUSCANDATA.canspn37
  is '参数编号37的值';
comment on column OSECD.BSVCBUSCANDATA.canspn38
  is '参数编号38的值';
comment on column OSECD.BSVCBUSCANDATA.canspn39
  is '参数编号39的值';
comment on column OSECD.BSVCBUSCANDATA.canspn40
  is '参数编号40的值';
comment on column OSECD.BSVCBUSCANDATA.canspn41
  is '参数编号41的值';
comment on column OSECD.BSVCBUSCANDATA.canspn42
  is '参数编号42的值';
comment on column OSECD.BSVCBUSCANDATA.canspn43
  is '参数编号43的值';
comment on column OSECD.BSVCBUSCANDATA.canspn44
  is '参数编号44的值';
comment on column OSECD.BSVCBUSCANDATA.canspn45
  is '参数编号45的值';
comment on column OSECD.BSVCBUSCANDATA.canspn46
  is '参数编号46的值';
comment on column OSECD.BSVCBUSCANDATA.canspn47
  is '参数编号47的值';
comment on column OSECD.BSVCBUSCANDATA.canspn48
  is '参数编号48的值';
comment on column OSECD.BSVCBUSCANDATA.canspn49
  is '参数编号49的值';
comment on column OSECD.BSVCBUSCANDATA.canspn50
  is '参数编号50的值';
comment on column OSECD.BSVCBUSCANDATA.issvrappend
  is '存储服务自动补交标志 - 数据入库失败后,存储服务保存到文件然后再补交 0,非补交(直接入库);1,补交;';
comment on column OSECD.BSVCBUSCANDATA.svrappendtime
  is '存储服务自动补交时间';

prompt
prompt Creating table BSVCBUSCANDETECTDATA
prompt ===================================
prompt
create table OSECD.BSVCBUSCANDETECTDATA
(
  candetectdataid NUMBER(16) not null,
  routeid         NUMBER(8),
  productid       NUMBER(10) not null,
  detecttype      VARCHAR2(3) not null,
  detectstarttime DATE not null,
  detectendtime   DATE not null,
  detectstdx      NUMBER,
  detectstdy      NUMBER,
  isappend        CHAR(1),
  longitude       NUMBER(9,6),
  latitude        NUMBER(9,6),
  recdatetime     DATE default sysdate not null,
  writeid         NUMBER(8),
  issvrappend     CHAR(1) default '0',
  svrappendtime   DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BSVCBUSCANDETECTDATA
  is '存储驾驶行为检测（通过CAN数据检测）';
comment on column OSECD.BSVCBUSCANDETECTDATA.candetectdataid
  is '唯一号';
comment on column OSECD.BSVCBUSCANDETECTDATA.routeid
  is '线路号';
comment on column OSECD.BSVCBUSCANDETECTDATA.productid
  is '车载机编号';
comment on column OSECD.BSVCBUSCANDETECTDATA.detecttype
  is '检测类型，1 超速行车 2 发动机超转 3 急加速4 急减速 5 绿区驾驶 6 怠速 7 空挡滑行 8 怠速空调';
comment on column OSECD.BSVCBUSCANDETECTDATA.detectstarttime
  is '检测开始时间';
comment on column OSECD.BSVCBUSCANDETECTDATA.detectendtime
  is '检测结束时间';
comment on column OSECD.BSVCBUSCANDETECTDATA.detectstdx
  is '检测标准X';
comment on column OSECD.BSVCBUSCANDETECTDATA.detectstdy
  is '检测标准Y';
comment on column OSECD.BSVCBUSCANDETECTDATA.isappend
  is '0 正常，1 GPRS补发';
comment on column OSECD.BSVCBUSCANDETECTDATA.longitude
  is '经度';
comment on column OSECD.BSVCBUSCANDETECTDATA.latitude
  is '纬度';
comment on column OSECD.BSVCBUSCANDETECTDATA.recdatetime
  is '记录时间';
comment on column OSECD.BSVCBUSCANDETECTDATA.writeid
  is '存储服务号';
comment on column OSECD.BSVCBUSCANDETECTDATA.issvrappend
  is '存储服务自动补交标志 - 数据入库失败后,存储服务保存到文件然后再补交 0,非补交(直接入库);1,补交;';
comment on column OSECD.BSVCBUSCANDETECTDATA.svrappendtime
  is '存储服务自动补交时间';

prompt
prompt Creating table BSVCBUSEMPDUTYLD5
prompt ================================
prompt
create table OSECD.BSVCBUSEMPDUTYLD5
(
  busempdutyid  NUMBER(16) not null,
  datatype      VARCHAR2(3) not null,
  routeid       NUMBER(8) not null,
  subrouteid    NUMBER(8),
  productid     NUMBER(10) not null,
  stationseqnum NUMBER(3),
  stationnum    VARCHAR2(10),
  actdatetime   DATE not null,
  recdatetime   DATE default sysdate not null,
  writeid       NUMBER(8) not null,
  isappend      CHAR(1),
  longitude     NUMBER(9,6),
  latitude      NUMBER(9,6),
  gpsspeed      NUMBER(6,2),
  operatetype   CHAR(1),
  iccardid      VARCHAR2(8),
  cardid        VARCHAR2(20),
  bussid        VARCHAR2(3),
  packcode      NUMBER(3),
  gpsmile       NUMBER(11),
  devtype       VARCHAR2(3),
  dutytype      CHAR(1),
  reservechar3  VARCHAR2(50),
  reservechar4  VARCHAR2(50),
  reservechar1  VARCHAR2(50),
  reservechar2  VARCHAR2(50),
  reservechar5  VARCHAR2(50),
  reservechar6  VARCHAR2(50),
  reservechar7  VARCHAR2(50),
  reservechar8  VARCHAR2(50),
  reservechar9  VARCHAR2(50),
  reservechar10 VARCHAR2(50)
)
tablespace TBS_OSECD_ARRLFT
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BSVCBUSEMPDUTYLD5
  is '考勤数据表，存储车载考勤数据、考勤机考勤数据';
comment on column OSECD.BSVCBUSEMPDUTYLD5.busempdutyid
  is '唯一号';
comment on column OSECD.BSVCBUSEMPDUTYLD5.datatype
  is '数据类型 68,打卡;';
comment on column OSECD.BSVCBUSEMPDUTYLD5.routeid
  is '线路号';
comment on column OSECD.BSVCBUSEMPDUTYLD5.subrouteid
  is '子线号';
comment on column OSECD.BSVCBUSEMPDUTYLD5.productid
  is '车载机编号';
comment on column OSECD.BSVCBUSEMPDUTYLD5.stationseqnum
  is '顺序号';
comment on column OSECD.BSVCBUSEMPDUTYLD5.stationnum
  is '站点统一编号';
comment on column OSECD.BSVCBUSEMPDUTYLD5.actdatetime
  is '业务时间';
comment on column OSECD.BSVCBUSEMPDUTYLD5.recdatetime
  is '记录时间';
comment on column OSECD.BSVCBUSEMPDUTYLD5.writeid
  is '存储服务号';
comment on column OSECD.BSVCBUSEMPDUTYLD5.isappend
  is '是否补录 0,直接上传;1,GPRS补发;3,场站DSRC补发;5,站台上报到离站;8,第二链路实时上传;9,第二链路补发上传';
comment on column OSECD.BSVCBUSEMPDUTYLD5.longitude
  is '经度';
comment on column OSECD.BSVCBUSEMPDUTYLD5.latitude
  is '纬度';
comment on column OSECD.BSVCBUSEMPDUTYLD5.gpsspeed
  is 'GPS速度';
comment on column OSECD.BSVCBUSEMPDUTYLD5.operatetype
  is '打卡类型 1,上班登记;2,下班登记;3,加油登记;4,维修登记;5,业务确认;6,发车;';
comment on column OSECD.BSVCBUSEMPDUTYLD5.iccardid
  is '卡号';
comment on column OSECD.BSVCBUSEMPDUTYLD5.cardid
  is '人员工号';
comment on column OSECD.BSVCBUSEMPDUTYLD5.bussid
  is '运营类型';
comment on column OSECD.BSVCBUSEMPDUTYLD5.packcode
  is '包流水号';
comment on column OSECD.BSVCBUSEMPDUTYLD5.gpsmile
  is 'GPS里程';
comment on column OSECD.BSVCBUSEMPDUTYLD5.devtype
  is '车载机1；场站机12；站务22';
comment on column OSECD.BSVCBUSEMPDUTYLD5.dutytype
  is '0表示打卡考勤，卡号存储在ICCARDID字段；1表示输工号考勤，CARDID字段存储员工工号';
comment on column OSECD.BSVCBUSEMPDUTYLD5.reservechar3
  is '字符型预留字段3';
comment on column OSECD.BSVCBUSEMPDUTYLD5.reservechar4
  is '字符型预留字段4';
comment on column OSECD.BSVCBUSEMPDUTYLD5.reservechar1
  is '字符型预留字段1 - 剩余油量 单位升;';
comment on column OSECD.BSVCBUSEMPDUTYLD5.reservechar2
  is '字符型预留字段2 - 班别 字典项目WORKDAYTYPE中维护';
comment on column OSECD.BSVCBUSEMPDUTYLD5.reservechar5
  is '字符型预留字段5';
comment on column OSECD.BSVCBUSEMPDUTYLD5.reservechar6
  is '字符型预留字段6';
comment on column OSECD.BSVCBUSEMPDUTYLD5.reservechar7
  is '字符型预留字段7';
comment on column OSECD.BSVCBUSEMPDUTYLD5.reservechar8
  is '字符型预留字段8';
comment on column OSECD.BSVCBUSEMPDUTYLD5.reservechar9
  is '字符型预留字段9';
comment on column OSECD.BSVCBUSEMPDUTYLD5.reservechar10
  is '字符型预留字段10';
create index OSECD.IX_BSVCBUSEMPDUTYLD5 on OSECD.BSVCBUSEMPDUTYLD5 (ACTDATETIME, DATATYPE, ROUTEID, PRODUCTID)
  tablespace TBS_OSECD_ARRLFT
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BSVCBUSLASTARRLFTLD5
prompt ===================================
prompt
create table OSECD.BSVCBUSLASTARRLFTLD5
(
  busrdid       NUMBER(16) not null,
  datatype      VARCHAR2(3) not null,
  routeid       NUMBER(8) not null,
  subrouteid    NUMBER(8),
  productid     NUMBER(10) not null,
  stationseqnum NUMBER(3),
  stationnum    VARCHAR2(10),
  isarrlft      CHAR(1),
  actdatetime   DATE not null,
  recdatetime   DATE default sysdate not null,
  writeid       NUMBER(8) not null,
  isappend      CHAR(1),
  bussid        VARCHAR2(3),
  longitude     NUMBER(9,6),
  latitude      NUMBER(9,6),
  altitude      NUMBER(9,6),
  gpsspeed      NUMBER(6,2),
  sensorspeed   NUMBER(6,2),
  rotationangle NUMBER(6,2),
  stationtype   VARCHAR2(2),
  ismanulopt    CHAR(1),
  packcode      NUMBER(3),
  smcode        NUMBER(4),
  onpnum        NUMBER(4),
  offpnum       NUMBER(4),
  leftpnum      NUMBER(4),
  tptdata       NUMBER(4,2),
  doorstate     VARCHAR2(3),
  peccancytype  VARCHAR2(20),
  peccancytime  DATE,
  standardvalue NUMBER,
  peccancyvalue NUMBER,
  gpsmile       NUMBER(13,2),
  checked       CHAR(1),
  assedate      DATE,
  assessor      VARCHAR2(20),
  busid         VARCHAR2(20),
  driverid      VARCHAR2(20),
  busrrid       VARCHAR2(20),
  reservechar1  VARCHAR2(50),
  reservechar2  VARCHAR2(50),
  reservechar3  VARCHAR2(50),
  reservechar4  VARCHAR2(50),
  reservechar5  VARCHAR2(50),
  reservechar6  VARCHAR2(50),
  reservechar7  VARCHAR2(50),
  reservechar8  VARCHAR2(50),
  reservechar9  VARCHAR2(50),
  reservechar10 VARCHAR2(50)
)
tablespace TBS_OSECD_ARRLFT
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BSVCBUSLASTARRLFTLD5
  is '最新到离站数据表，存储每个车辆最新一个到离站数据';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.busrdid
  is '唯一号';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.datatype
  is '数据类型 3,GPS;4,到离站;55,违规;47,DSRC检到离场;71,GPS到离场;53,开关门;';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.routeid
  is '线路号';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.subrouteid
  is '子线号';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.productid
  is '车载机编号';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.stationseqnum
  is '顺序号';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.stationnum
  is '站点统一编号';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.isarrlft
  is '到离站 1,到;2,离';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.actdatetime
  is '业务时间';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.recdatetime
  is '记录时间';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.writeid
  is '存储服务号';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.isappend
  is '是否补录 0,直接上传;1,GPRS补发;3,场站DSRC补发;5,站台上报到离站;';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.bussid
  is '运营类型';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.longitude
  is '经度';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.latitude
  is '纬度';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.altitude
  is '海拔';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.gpsspeed
  is 'GPS速度';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.sensorspeed
  is '传感器速度';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.rotationangle
  is '方向角';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.stationtype
  is '站点类型';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.ismanulopt
  is '自动报站标志 A,自动;M,手动;';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.packcode
  is '包流水号';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.smcode
  is '短语代码';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.onpnum
  is '上客数';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.offpnum
  is '下客数';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.leftpnum
  is '载客数';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.tptdata
  is '车内温度';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.doorstate
  is '开关门状态';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.peccancytype
  is '违规类型';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.peccancytime
  is '违规时间';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.standardvalue
  is '违规标准 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.peccancyvalue
  is '违规值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.gpsmile
  is 'GPS里程';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.checked
  is '是否免核';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.assedate
  is '免核日期';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.assessor
  is '免核人';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.busid
  is '车辆ID';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.driverid
  is '驾驶员ID';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.busrrid
  is '车次序号';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.reservechar1
  is '字符型预留字段1 - 投币箱编号; 服务检测违规数据的数据库ID';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.reservechar2
  is '字符型预留字段2 - 投币数量';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.reservechar3
  is '字符型预留字段3';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.reservechar4
  is '字符型预留字段4';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.reservechar5
  is '字符型预留字段5';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.reservechar6
  is '字符型预留字段6';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.reservechar7
  is '字符型预留字段7';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.reservechar8
  is '字符型预留字段8';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.reservechar9
  is '字符型预留字段9';
comment on column OSECD.BSVCBUSLASTARRLFTLD5.reservechar10
  is '字符型预留字段10';
create index OSECD.INDEX_LASTARRLEV on OSECD.BSVCBUSLASTARRLFTLD5 (ROUTEID, PRODUCTID)
  tablespace TBS_OSECD_ARRLFT
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.INDEX_LASTARRLEV2 on OSECD.BSVCBUSLASTARRLFTLD5 (PRODUCTID)
  tablespace TBS_OSECD_ARRLFT
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BSVCBUSLASTPOSITIONDATALD5
prompt =========================================
prompt
create table OSECD.BSVCBUSLASTPOSITIONDATALD5
(
  busrdid       NUMBER(16) not null,
  datatype      VARCHAR2(3) not null,
  routeid       NUMBER(8) not null,
  subrouteid    NUMBER(8),
  productid     NUMBER(10) not null,
  stationseqnum NUMBER(3),
  stationnum    VARCHAR2(10),
  isarrlft      CHAR(1),
  actdatetime   DATE not null,
  recdatetime   DATE default sysdate not null,
  writeid       NUMBER(8) not null,
  isappend      CHAR(1),
  bussid        VARCHAR2(3),
  longitude     NUMBER(9,6),
  latitude      NUMBER(9,6),
  altitude      NUMBER(9,6),
  gpsspeed      NUMBER(6,2),
  sensorspeed   NUMBER(6,2),
  rotationangle NUMBER(6,2),
  stationtype   VARCHAR2(2),
  ismanulopt    CHAR(1),
  packcode      NUMBER(3),
  smcode        NUMBER(4),
  onpnum        NUMBER(4),
  offpnum       NUMBER(4),
  leftpnum      NUMBER(4),
  tptdata       NUMBER(4,2),
  doorstate     VARCHAR2(3),
  peccancytype  VARCHAR2(20),
  peccancytime  DATE,
  standardvalue NUMBER,
  peccancyvalue NUMBER,
  gpsmile       NUMBER(13,2),
  reservechar1  VARCHAR2(50),
  reservechar2  VARCHAR2(50),
  reservechar3  VARCHAR2(50),
  reservechar4  VARCHAR2(50),
  reservechar5  VARCHAR2(50),
  reservechar6  VARCHAR2(50),
  reservechar7  VARCHAR2(50),
  reservechar8  VARCHAR2(50),
  reservechar9  VARCHAR2(50),
  reservechar10 VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BSVCBUSLASTPOSITIONDATALD5
  is '车辆最新位置表，存储每个车辆上传的最新一个经纬度数据';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.busrdid
  is '唯一号';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.datatype
  is '数据类型 3,GPS;4,到离站;55,违规;47,DSRC检到离场;71,GPS到离场;53,开关门;';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.routeid
  is '线路号';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.subrouteid
  is '子线号';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.productid
  is '车载机编号';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.stationseqnum
  is '顺序号';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.stationnum
  is '站点统一编号';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.isarrlft
  is '到离站 1,到;2,离';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.actdatetime
  is '业务时间';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.recdatetime
  is '记录时间';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.writeid
  is '存储服务号';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.isappend
  is '是否补录 0,直接上传;1,GPRS补发;3,场站DSRC补发;5,站台上报到离站;';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.bussid
  is '运营类型';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.longitude
  is '经度';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.latitude
  is '纬度';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.altitude
  is '海拔';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.gpsspeed
  is 'GPS速度';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.sensorspeed
  is '传感器速度';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.rotationangle
  is '方向角';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.stationtype
  is '站点类型';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.ismanulopt
  is '自动报站标志 A,自动;M,手动;';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.packcode
  is '包流水号';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.smcode
  is '短语代码';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.onpnum
  is '上客数';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.offpnum
  is '下客数';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.leftpnum
  is '载客数';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.tptdata
  is '车内温度';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.doorstate
  is '开关门状态';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.peccancytype
  is '违规类型';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.peccancytime
  is '违规时间';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.standardvalue
  is '违规标准 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.peccancyvalue
  is '违规值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.gpsmile
  is 'GPS里程';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.reservechar1
  is '字符型预留字段1 - 传感器里程 单位千米; 服务检测违规数据的数据库ID;票箱编号';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.reservechar2
  is '字符型预留字段2 - 剩余油量 单位升;投币数量';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.reservechar3
  is '字符型预留字段3';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.reservechar4
  is '字符型预留字段4';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.reservechar5
  is '字符型预留字段5';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.reservechar6
  is '字符型预留字段6';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.reservechar7
  is '字符型预留字段7';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.reservechar8
  is '字符型预留字段8';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.reservechar9
  is '字符型预留字段9';
comment on column OSECD.BSVCBUSLASTPOSITIONDATALD5.reservechar10
  is '字符型预留字段10';
create unique index OSECD.INDEX_LASTPOSITION on OSECD.BSVCBUSLASTPOSITIONDATALD5 (PRODUCTID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.INDEX_LASTPOSITION1 on OSECD.BSVCBUSLASTPOSITIONDATALD5 (DATATYPE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BSVCBUSRUNDATALD5
prompt ================================
prompt
create table OSECD.BSVCBUSRUNDATALD5
(
  busrdid           NUMBER(16) not null,
  datatype          VARCHAR2(3),
  routeid           NUMBER(8),
  subrouteid        NUMBER(8),
  productid         NUMBER(10),
  stationseqnum     NUMBER(3),
  stationnum        VARCHAR2(10),
  isarrlft          CHAR(1),
  actdatetime       DATE,
  recdatetime       DATE default sysdate,
  writeid           NUMBER(8),
  isappend          CHAR(1),
  bussid            VARCHAR2(3),
  longitude         NUMBER(9,6),
  latitude          NUMBER(9,6),
  altitude          NUMBER(9,6),
  gpsspeed          NUMBER(6,2),
  sensorspeed       NUMBER(6,2),
  rotationangle     NUMBER(6,2),
  stationtype       VARCHAR2(2),
  ismanulopt        CHAR(1),
  packcode          NUMBER(3),
  smcode            NUMBER(4),
  onpnum            NUMBER(4),
  offpnum           NUMBER(4),
  leftpnum          NUMBER(4),
  tptdata           NUMBER(4,2),
  doorstate         VARCHAR2(3),
  peccancytype      VARCHAR2(20),
  peccancytime      DATE,
  standardvalue     NUMBER,
  peccancyvalue     NUMBER,
  gpsmile           NUMBER(13,2),
  reservechar1      VARCHAR2(50),
  reservechar2      VARCHAR2(50),
  reservechar3      VARCHAR2(50),
  reservechar4      VARCHAR2(50),
  reservechar5      VARCHAR2(50),
  reservechar6      VARCHAR2(50),
  reservechar7      VARCHAR2(50),
  reservechar8      VARCHAR2(50),
  reservechar9      VARCHAR2(50),
  reservechar10     VARCHAR2(50),
  issvrappend       CHAR(1) default '0',
  svrappendtime     DATE,
  reservechar11     VARCHAR2(50),
  reservechar13     VARCHAR2(50),
  reservechar15     VARCHAR2(50),
  reservechar16     VARCHAR2(50),
  peccancystarttime DATE,
  peccancyendtime   DATE,
  peccancymaxvalue  NUMBER
)
partition by range (ACTDATETIME)
(
  partition P_20160701 values less than (TO_DATE(' 2016-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160702 values less than (TO_DATE(' 2016-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160703 values less than (TO_DATE(' 2016-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160704 values less than (TO_DATE(' 2016-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160705 values less than (TO_DATE(' 2016-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160706 values less than (TO_DATE(' 2016-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160707 values less than (TO_DATE(' 2016-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160708 values less than (TO_DATE(' 2016-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160709 values less than (TO_DATE(' 2016-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160710 values less than (TO_DATE(' 2016-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160711 values less than (TO_DATE(' 2016-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160712 values less than (TO_DATE(' 2016-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160713 values less than (TO_DATE(' 2016-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160714 values less than (TO_DATE(' 2016-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160715 values less than (TO_DATE(' 2016-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160716 values less than (TO_DATE(' 2016-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160717 values less than (TO_DATE(' 2016-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160718 values less than (TO_DATE(' 2016-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160719 values less than (TO_DATE(' 2016-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160720 values less than (TO_DATE(' 2016-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160721 values less than (TO_DATE(' 2016-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160722 values less than (TO_DATE(' 2016-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160723 values less than (TO_DATE(' 2016-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160724 values less than (TO_DATE(' 2016-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160725 values less than (TO_DATE(' 2016-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160726 values less than (TO_DATE(' 2016-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160727 values less than (TO_DATE(' 2016-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160728 values less than (TO_DATE(' 2016-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160729 values less than (TO_DATE(' 2016-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160730 values less than (TO_DATE(' 2016-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160731 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160801 values less than (TO_DATE(' 2016-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160802 values less than (TO_DATE(' 2016-08-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160803 values less than (TO_DATE(' 2016-08-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160804 values less than (TO_DATE(' 2016-08-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160805 values less than (TO_DATE(' 2016-08-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160806 values less than (TO_DATE(' 2016-08-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160807 values less than (TO_DATE(' 2016-08-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160808 values less than (TO_DATE(' 2016-08-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160809 values less than (TO_DATE(' 2016-08-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160810 values less than (TO_DATE(' 2016-08-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160811 values less than (TO_DATE(' 2016-08-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160812 values less than (TO_DATE(' 2016-08-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160813 values less than (TO_DATE(' 2016-08-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160814 values less than (TO_DATE(' 2016-08-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160815 values less than (TO_DATE(' 2016-08-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160816 values less than (TO_DATE(' 2016-08-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160817 values less than (TO_DATE(' 2016-08-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160818 values less than (TO_DATE(' 2016-08-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160819 values less than (TO_DATE(' 2016-08-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160820 values less than (TO_DATE(' 2016-08-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160821 values less than (TO_DATE(' 2016-08-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160822 values less than (TO_DATE(' 2016-08-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160823 values less than (TO_DATE(' 2016-08-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160824 values less than (TO_DATE(' 2016-08-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160825 values less than (TO_DATE(' 2016-08-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160826 values less than (TO_DATE(' 2016-08-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160827 values less than (TO_DATE(' 2016-08-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161001 values less than (TO_DATE(' 2016-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161016 values less than (TO_DATE(' 2016-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161017 values less than (TO_DATE(' 2016-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161018 values less than (TO_DATE(' 2016-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161019 values less than (TO_DATE(' 2016-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161020 values less than (TO_DATE(' 2016-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161021 values less than (TO_DATE(' 2016-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161022 values less than (TO_DATE(' 2016-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161023 values less than (TO_DATE(' 2016-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161024 values less than (TO_DATE(' 2016-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161025 values less than (TO_DATE(' 2016-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161026 values less than (TO_DATE(' 2016-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161027 values less than (TO_DATE(' 2016-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161028 values less than (TO_DATE(' 2016-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161029 values less than (TO_DATE(' 2016-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161030 values less than (TO_DATE(' 2016-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161031 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on column OSECD.BSVCBUSRUNDATALD5.busrdid
  is '唯一号';
comment on column OSECD.BSVCBUSRUNDATALD5.datatype
  is '数据类型 3,GPS;4,到离站;55,违规;47,DSRC检到离场;71,GPS到离场;53,开关门;';
comment on column OSECD.BSVCBUSRUNDATALD5.routeid
  is '线路号';
comment on column OSECD.BSVCBUSRUNDATALD5.subrouteid
  is '子线号';
comment on column OSECD.BSVCBUSRUNDATALD5.productid
  is '车载机编号';
comment on column OSECD.BSVCBUSRUNDATALD5.stationseqnum
  is '顺序号';
comment on column OSECD.BSVCBUSRUNDATALD5.stationnum
  is '站点统一编号';
comment on column OSECD.BSVCBUSRUNDATALD5.isarrlft
  is '到离站 1,到;2,离';
comment on column OSECD.BSVCBUSRUNDATALD5.actdatetime
  is '业务时间';
comment on column OSECD.BSVCBUSRUNDATALD5.recdatetime
  is '记录时间';
comment on column OSECD.BSVCBUSRUNDATALD5.writeid
  is '存储服务号';
comment on column OSECD.BSVCBUSRUNDATALD5.isappend
  is '是否补录 0,直接上传;1,GPRS补发;3,场站DSRC补发;5,站台上报到离站;';
comment on column OSECD.BSVCBUSRUNDATALD5.bussid
  is '运营类型';
comment on column OSECD.BSVCBUSRUNDATALD5.longitude
  is '经度';
comment on column OSECD.BSVCBUSRUNDATALD5.latitude
  is '纬度';
comment on column OSECD.BSVCBUSRUNDATALD5.altitude
  is '海拔';
comment on column OSECD.BSVCBUSRUNDATALD5.gpsspeed
  is 'GPS速度';
comment on column OSECD.BSVCBUSRUNDATALD5.sensorspeed
  is '传感器速度';
comment on column OSECD.BSVCBUSRUNDATALD5.rotationangle
  is '方向角';
comment on column OSECD.BSVCBUSRUNDATALD5.stationtype
  is '站点类型';
comment on column OSECD.BSVCBUSRUNDATALD5.ismanulopt
  is '自动报站标志 A,自动;M,手动;';
comment on column OSECD.BSVCBUSRUNDATALD5.packcode
  is '包流水号';
comment on column OSECD.BSVCBUSRUNDATALD5.smcode
  is '短语代码';
comment on column OSECD.BSVCBUSRUNDATALD5.onpnum
  is '上客数';
comment on column OSECD.BSVCBUSRUNDATALD5.offpnum
  is '下客数';
comment on column OSECD.BSVCBUSRUNDATALD5.leftpnum
  is '载客数';
comment on column OSECD.BSVCBUSRUNDATALD5.tptdata
  is '车内温度';
comment on column OSECD.BSVCBUSRUNDATALD5.doorstate
  is '开关门状态';
comment on column OSECD.BSVCBUSRUNDATALD5.peccancytype
  is '违规类型';
comment on column OSECD.BSVCBUSRUNDATALD5.peccancytime
  is '违规时间';
comment on column OSECD.BSVCBUSRUNDATALD5.standardvalue
  is '违规标准 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.BSVCBUSRUNDATALD5.peccancyvalue
  is '违规值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.BSVCBUSRUNDATALD5.gpsmile
  is 'GPS里程';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar1
  is '字符型预留字段1 - 传感器里程 单位千米; 服务检测违规数据的数据库ID';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar2
  is '字符型预留字段2 - 剩余油量 单位升';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar3
  is '字符型预留字段3 - 车载终端ID(深圳用)';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar4
  is '字符型预留字段4 - 所属车辆ID(深圳用)';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar5
  is '字符型预留字段5 - 所属线路ID(深圳用)';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar6
  is '字符型预留字段6 - 所属子线路ID(深圳用)';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar7
  is '字符型预留字段7 - 组织名称编码(深圳用)';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar8
  is '字符型预留字段8 - 行车记录仪速度(深圳用)';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar9
  is '字符型预留字段9 - 存储服务自动补交标志 - 数据入库失败后,存储服务保存到文件然后再补交 0,非补交(直接入库);1,补交;';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar10
  is '字符型预留字段10 - 存储服务自动补交时间';
comment on column OSECD.BSVCBUSRUNDATALD5.issvrappend
  is '存储服务自动补交标志 - 数据入库失败后,存储服务保存到文件然后再补交 0,非补交(直接入库);1,补交;';
comment on column OSECD.BSVCBUSRUNDATALD5.svrappendtime
  is '存储服务自动补交时间';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar11
  is '字符型预留字段11 - 企业上传的车辆ID(无锡用)';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar13
  is '字符型预留字段13 - 企业上传的子线路ID(无锡用)';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar15
  is '字符型预留字段15';
comment on column OSECD.BSVCBUSRUNDATALD5.reservechar16
  is '字符型预留字段16';
comment on column OSECD.BSVCBUSRUNDATALD5.peccancystarttime
  is '违规开始时间';
comment on column OSECD.BSVCBUSRUNDATALD5.peccancyendtime
  is '违规结束时间';
comment on column OSECD.BSVCBUSRUNDATALD5.peccancymaxvalue
  is '违规最高值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
create index OSECD.IX_BSVCBUSRUNDATALD5 on OSECD.BSVCBUSRUNDATALD5 (ACTDATETIME, DATATYPE, ROUTEID, PRODUCTID)
  local;

prompt
prompt Creating table BSVCBUSRUNSTATE_SZ
prompt =================================
prompt
create table OSECD.BSVCBUSRUNSTATE_SZ
(
  recordid          NUMBER(16) not null,
  strterminalid     VARCHAR2(32),
  strbusid          VARCHAR2(8),
  strrouteid        VARCHAR2(8),
  strsubrouteid     VARCHAR2(8),
  orgnamenum        VARCHAR2(3),
  invalid           VARCHAR2(3),
  longitude         NUMBER(9,6),
  latitude          NUMBER(9,6),
  altitude          NUMBER(4),
  actdatetime       DATE not null,
  recdatetime       DATE,
  writeid           NUMBER(8),
  gpsspeed          NUMBER(6,2),
  rotationangle     NUMBER(6,2),
  tachographspeed   NUMBER(6,2),
  tachographmileage NUMBER(13,2),
  productid         NUMBER(10) not null,
  routeid           NUMBER(8),
  subrouteid        NUMBER(8),
  runstatecode1     CHAR(1),
  runstatecode2     CHAR(1),
  runstatecode3     CHAR(1),
  runstatecode4     CHAR(1),
  runstatecode5     CHAR(1),
  runstatecode6     CHAR(1),
  runstatecode7     CHAR(1),
  runstatecode8     CHAR(1),
  runstatecode9     CHAR(1),
  runstatecode10    CHAR(1),
  runstatecode11    CHAR(1),
  runstatecode12    CHAR(1),
  runstatecode13    CHAR(1),
  runstatecode14    CHAR(1),
  runstatecode15    CHAR(1),
  runstatecode16    CHAR(1),
  runstatecode17    CHAR(1),
  runstatecode18    CHAR(1),
  runstatecode19    CHAR(1),
  runstatecode20    CHAR(1),
  runstatecode21    CHAR(1),
  runstatecode22    CHAR(1),
  runstatecode23    CHAR(1),
  runstatecode24    CHAR(1),
  runstatecode25    CHAR(1),
  runstatecode26    CHAR(1),
  runstatecode27    CHAR(1),
  runstatecode28    CHAR(1),
  runstatecode29    CHAR(1),
  runstatecode30    CHAR(1),
  runstatecode31    CHAR(1),
  runstatecode32    CHAR(1),
  issvrappend       CHAR(1) default '0',
  svrappendtime     DATE
)
tablespace TBS_OSECD_BSVC
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BSVCBUSRUNSTATE_SZ
  is '车辆营运状态数据表（深圳使用），存储深圳平台协议的营运状态';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.recordid
  is '唯一号';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.strterminalid
  is '车载终端ID，字符串格式';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.strbusid
  is '所属车辆ID，字符串格式';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.strrouteid
  is '所属线路ID，字符串格式';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.strsubrouteid
  is '所属子线路ID，字符串格式';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.orgnamenum
  is '组织名称编码';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.invalid
  is '卫星定位状态， 0为已定位，1为未定位';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.longitude
  is '卫星定位经度';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.latitude
  is '卫星定位纬度';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.altitude
  is '卫星定位高程，单位：米';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.actdatetime
  is '卫星定位时间';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.recdatetime
  is '记录时间';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.writeid
  is '存储服务号';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.gpsspeed
  is '卫星定位速度，单位：米每秒';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.rotationangle
  is '卫星定位方向，单位：度';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.tachographspeed
  is '行驶记录仪速度，单位：千米每小时';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.tachographmileage
  is '行驶记录仪里程，单位：千米';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.productid
  is '海信企标，车载机编号';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.routeid
  is '海信企标线路号';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.subrouteid
  is '海信企标子线路号';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode1
  is '0 在线路上,1 不在线路上';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode2
  is '0 运营,1 非运营';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode3
  is '0 离站,1 到站';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode4
  is '0 门关,1 门开';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode5
  is '0 上行,1 下行';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode6
  is '0 起终点外,1 起终点内';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode7
  is '0 停车场外,1 停车场内';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode8
  is '0 卫星定位有效,1 卫星定位无效';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode9
  is '0 链路正常,1 链路断开';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode10
  is '0 超速,1 非超速';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode11
  is '0 非包车,1 包车';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode12
  is '0 省电模式,1 正常模式';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode13
  is '0 正常,1 不停站';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode14
  is '0 正常,1 滞站';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode15
  is '0 非中途校时点,1 中途校时点';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode16
  is '0 非标杆点,1 标杆点';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode21
  is '0 非重点区域,1 重点区域';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode22
  is '0 非保养,1 保养';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode23
  is '0 非维修,1 维修';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.runstatecode24
  is '0 非加油,1 加油';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.issvrappend
  is '存储服务自动补交标志 - 数据入库失败后,存储服务保存到文件然后再补交 0,非补交(直接入库);1,补交;';
comment on column OSECD.BSVCBUSRUNSTATE_SZ.svrappendtime
  is '存储服务自动补交时间';

prompt
prompt Creating table BSVCDEVMALRPTLD5
prompt ===============================
prompt
create table OSECD.BSVCDEVMALRPTLD5
(
  devmalrptid      VARCHAR2(20) not null,
  productcode      NUMBER(10) not null,
  devmaltime       DATE not null,
  devmaltype       VARCHAR2(3) not null,
  productid        NUMBER(10) not null,
  routeid          NUMBER(8) not null,
  softver          NUMBER(8),
  writeid          NUMBER(8),
  recdate          DATE,
  memos            VARCHAR2(40),
  result           NVARCHAR2(3) default '0',
  issvrappend      CHAR(1) default '0',
  svrappendtime    DATE,
  terminaltypecode VARCHAR2(3),
  devcategorytype  VARCHAR2(3),
  devcode          VARCHAR2(3),
  devversion       VARCHAR2(50)
)
tablespace TBS_OSECD_ARRLFT
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 12M
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BSVCDEVMALRPTLD5
  is '设备故障报告表';
comment on column OSECD.BSVCDEVMALRPTLD5.devmalrptid
  is '序号';
comment on column OSECD.BSVCDEVMALRPTLD5.productcode
  is '设备产品号';
comment on column OSECD.BSVCDEVMALRPTLD5.devmaltime
  is '故障时间';
comment on column OSECD.BSVCDEVMALRPTLD5.devmaltype
  is '故障类型，参考APT2协议';
comment on column OSECD.BSVCDEVMALRPTLD5.productid
  is '车辆ID';
comment on column OSECD.BSVCDEVMALRPTLD5.routeid
  is '设备线路号';
comment on column OSECD.BSVCDEVMALRPTLD5.softver
  is '客户端程序的版本号';
comment on column OSECD.BSVCDEVMALRPTLD5.writeid
  is '记录者';
comment on column OSECD.BSVCDEVMALRPTLD5.recdate
  is '记录时间';
comment on column OSECD.BSVCDEVMALRPTLD5.memos
  is '备注';
comment on column OSECD.BSVCDEVMALRPTLD5.result
  is '处理结果:0 未处理 1 已处理 2 不处理';
comment on column OSECD.BSVCDEVMALRPTLD5.issvrappend
  is '存储服务自动补交标志 - 数据入库失败后,存储服务保存到文件然后再补交 0,非补交(直接入库);1,补交;';
comment on column OSECD.BSVCDEVMALRPTLD5.svrappendtime
  is '存储服务自动补交时间';
comment on column OSECD.BSVCDEVMALRPTLD5.terminaltypecode
  is '终端类型编号 1,车载终端;2,电子站牌（站台控制系统）;14，发车屏（场站控制系统）';
comment on column OSECD.BSVCDEVMALRPTLD5.devcategorytype
  is '设备类型，参考APT2协议';
comment on column OSECD.BSVCDEVMALRPTLD5.devcode
  is '设备编号，参考APT2协议';
comment on column OSECD.BSVCDEVMALRPTLD5.devversion
  is '设备软件/固件版本，参考APT2协议';
alter table OSECD.BSVCDEVMALRPTLD5
  add constraint PK_BSVCDEVMALRTPLD5 primary key (DEVMALRPTID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 5M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ARRANGEWORKSHIFTLD
prompt ====================================
prompt
create table OSECD.BZ_ARRANGEWORKSHIFTLD
(
  arrangewsid  VARCHAR2(36) not null,
  orgid        VARCHAR2(36),
  routeid      VARCHAR2(20) not null,
  shiftnum     NVARCHAR2(4),
  groupnum     CHAR(1) not null,
  driverid     VARCHAR2(36),
  stewardid    VARCHAR2(36),
  busid        VARCHAR2(36),
  onworktime1  DATE not null,
  offworktime1 DATE not null,
  onworktime2  DATE,
  offworktime2 DATE,
  seqnum       NUMBER(3),
  execdate     DATE not null
)
partition by range (EXECDATE)
(
  partition P_201501 values less than (TO_DATE(' 2015-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201502 values less than (TO_DATE(' 2015-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201503 values less than (TO_DATE(' 2015-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201504 values less than (TO_DATE(' 2015-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201505 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201506 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201507 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201508 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201509 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201510 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201511 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201512 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201601 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201602 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201603 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201604 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201605 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201606 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201607 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201610 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.BZ_ARRANGEWORKSHIFTLD
  is '线路配车排班表';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.arrangewsid
  is '线路排班表序号';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.orgid
  is '组织编号';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.routeid
  is '线路编号';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.shiftnum
  is '班次';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.groupnum
  is '早晚班';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.driverid
  is '驾驶员ID';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.stewardid
  is '乘务员ID';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.busid
  is '车辆编号';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.onworktime1
  is '上班时间1';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.offworktime1
  is '下班时间1';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.onworktime2
  is '上班时间2';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.offworktime2
  is '下班时间2';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.seqnum
  is '车次数';
comment on column OSECD.BZ_ARRANGEWORKSHIFTLD.execdate
  is '执行日期';
create index OSECD.PK_ARRANGEWORKSHIFT on OSECD.BZ_ARRANGEWORKSHIFTLD (ARRANGEWSID)
  local;

prompt
prompt Creating table BZ_ASSESSTASK
prompt ============================
prompt
create table OSECD.BZ_ASSESSTASK
(
  assesstaskid VARCHAR2(50) not null,
  taskcode     VARCHAR2(10),
  tasktype     VARCHAR2(100),
  taskname     NVARCHAR2(100),
  isactive     CHAR(1) default 1,
  memos        NVARCHAR2(255),
  created      DATE,
  createby     VARCHAR2(50),
  updated      DATE,
  updateby     VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ASSESSTASK
  is '运营考核企业数据上报任务表';
comment on column OSECD.BZ_ASSESSTASK.assesstaskid
  is '运营考核企业数据上报任务主键ID';
comment on column OSECD.BZ_ASSESSTASK.taskcode
  is '业务代码';
comment on column OSECD.BZ_ASSESSTASK.tasktype
  is '业务类型';
comment on column OSECD.BZ_ASSESSTASK.taskname
  is '业务说明';
comment on column OSECD.BZ_ASSESSTASK.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ASSESSTASK.memos
  is '备注';
comment on column OSECD.BZ_ASSESSTASK.created
  is '创建日期';
comment on column OSECD.BZ_ASSESSTASK.createby
  is '创建者';
comment on column OSECD.BZ_ASSESSTASK.updated
  is '更新日期';
comment on column OSECD.BZ_ASSESSTASK.updateby
  is '更新者';
alter table OSECD.BZ_ASSESSTASK
  add constraint PK_ASSESSTASKID primary key (ASSESSTASKID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ASSESSTASKFUNCTION
prompt ====================================
prompt
create table OSECD.BZ_ASSESSTASKFUNCTION
(
  assesstaskfunctionid VARCHAR2(50) not null,
  assesstaskid         VARCHAR2(50),
  rundate              DATE,
  rundatechar          VARCHAR2(50),
  datatype             CHAR(1) default 1,
  orgid                VARCHAR2(50),
  startdate            DATE,
  enddate              DATE,
  isactive             CHAR(1) default 1,
  openstatus           CHAR(1) default 1,
  openby               VARCHAR2(50),
  opendate             DATE,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  memos                NVARCHAR2(255),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ASSESSTASKFUNCTION
  is '运营考核企业数据上报权限配置表';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.assesstaskfunctionid
  is '运营考核企业数据上报权限配置主键ID';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.assesstaskid
  is '对应运营考核企业数据上报任务主键ID';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.rundate
  is '业务月份(时间格式，每月1号)';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.rundatechar
  is '业务月份(字符格式，X年X月)';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.datatype
  is '数据类型(1通用，2针对具体企业)';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.orgid
  is '企业ID(DATATYPE为2时保存该字段)';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.startdate
  is '开始日期';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.enddate
  is '结束日期';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.openstatus
  is '当前状态(0关闭，1开放)';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.openby
  is '权限开放/关闭人';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.opendate
  is '权限开放/关闭时间';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.verifyby
  is '审核人';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.verifydate
  is '审核时间';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.memos
  is '备注';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.created
  is '创建日期';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.createby
  is '创建者';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.updated
  is '更新日期';
comment on column OSECD.BZ_ASSESSTASKFUNCTION.updateby
  is '更新者';
alter table OSECD.BZ_ASSESSTASKFUNCTION
  add constraint PK_ASSESSTASKFUNCTIONID primary key (ASSESSTASKFUNCTIONID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSACCIDENTINFOLD
prompt ===================================
prompt
create table OSECD.BZ_BUSACCIDENTINFOLD
(
  recordid            VARCHAR2(36) not null,
  orgid               VARCHAR2(36),
  routeid             VARCHAR2(20),
  busid               VARCHAR2(36),
  driverid            VARCHAR2(36),
  accidenttime        DATE,
  accidentroad        NVARCHAR2(20),
  accidentbystationid VARCHAR2(20),
  drivingyears        NUMBER(2) default 0,
  busyears            NUMBER(2) default 0,
  accidengweather     NVARCHAR2(20),
  accidengdegree      NVARCHAR2(20),
  injuredcount        NUMBER(4),
  diedcount           NUMBER(4),
  dutyside            NVARCHAR2(20),
  economicloss        NUMBER(6,2),
  accidentdes         NVARCHAR2(1000),
  accidenttype        VARCHAR2(2)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSACCIDENTINFOLD
  is '行车事故记录表';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.recordid
  is '记录ID';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.orgid
  is '组织编号';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.routeid
  is '线路编号';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.busid
  is '车辆ID';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.driverid
  is '驾驶员ID';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.accidenttime
  is '事故发生时间';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.accidentroad
  is '发生事故地点';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.accidentbystationid
  is '事故发生最近站点';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.drivingyears
  is '驾驶员驾龄';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.busyears
  is '车龄';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.accidengweather
  is '天气情况（取字典表定义）';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.accidengdegree
  is '事故重大程度（取字典表中定义）';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.injuredcount
  is '受伤人数';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.diedcount
  is '死亡人数';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.dutyside
  is '责任归属（取字典表定义）';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.economicloss
  is '经济损失（万元）';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.accidentdes
  is '事故说明';
comment on column OSECD.BZ_BUSACCIDENTINFOLD.accidenttype
  is '事故类型';
alter table OSECD.BZ_BUSACCIDENTINFOLD
  add constraint PK_BUSACCIDENTINFO primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSACCIDENTINFOLDTEMP
prompt =======================================
prompt
create table OSECD.BZ_BUSACCIDENTINFOLDTEMP
(
  fileid                VARCHAR2(60) not null,
  infoid                VARCHAR2(36),
  orgname               NVARCHAR2(60),
  routename             VARCHAR2(60),
  cardid                NVARCHAR2(20),
  drivername            VARCHAR2(20),
  accidenttime          DATE,
  accidentroad          NVARCHAR2(20),
  accidentbystationname VARCHAR2(60),
  drivingyears          NUMBER(2),
  busyears              NUMBER(2),
  accidengweather       NVARCHAR2(20),
  accidengdegree        NVARCHAR2(20),
  injuredcount          NUMBER(4),
  diedcount             NUMBER(4),
  dutyside              NVARCHAR2(20),
  economicloss          NUMBER(6,2),
  updated               DATE,
  accidentdes           NVARCHAR2(1000)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSACCIDENTINFOLDTEMP
  is '安全事故信息临时表';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.fileid
  is '文件编号';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.infoid
  is '安全事故信息编号';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.orgname
  is '组织名称';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.routename
  is '线路名称';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.cardid
  is '车牌号';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.drivername
  is '驾驶员';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.accidenttime
  is '事故发生时间';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.accidentroad
  is '发生事故道路名称';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.accidentbystationname
  is '事故发生最近站点';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.drivingyears
  is '驾驶员驾龄';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.busyears
  is '车龄';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.accidengweather
  is '天气情况';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.accidengdegree
  is '事故重大程度';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.injuredcount
  is '受伤人数';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.diedcount
  is '死亡人数';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.dutyside
  is '责任归属（取字典表定义）';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.economicloss
  is '经济损失（万元）';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.updated
  is '更新时间';
comment on column OSECD.BZ_BUSACCIDENTINFOLDTEMP.accidentdes
  is '事故描述';

prompt
prompt Creating table BZ_BUSCOST
prompt =========================
prompt
create table OSECD.BZ_BUSCOST
(
  recordid     VARCHAR2(36) not null,
  orgid        VARCHAR2(36),
  routeid      VARCHAR2(20),
  busid        VARCHAR2(36),
  costfstype   VARCHAR2(2),
  oiltype      VARCHAR2(2),
  costcount    NUMBER(10),
  totalcost    NUMBER(10,2),
  recdate      DATE default sysdate,
  memos        VARCHAR2(255),
  repairtype   CHAR(1),
  conservetype CHAR(1),
  buscardid    VARCHAR2(20),
  actdate      DATE
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSCOST
  is '车辆成本表';
comment on column OSECD.BZ_BUSCOST.recordid
  is '记录ID';
comment on column OSECD.BZ_BUSCOST.orgid
  is '组织编号';
comment on column OSECD.BZ_BUSCOST.routeid
  is '线路编号';
comment on column OSECD.BZ_BUSCOST.busid
  is '车辆编号';
comment on column OSECD.BZ_BUSCOST.costfstype
  is '成本类型';
comment on column OSECD.BZ_BUSCOST.oiltype
  is '燃油类型';
comment on column OSECD.BZ_BUSCOST.costcount
  is '成本数量';
comment on column OSECD.BZ_BUSCOST.totalcost
  is '成本金额';
comment on column OSECD.BZ_BUSCOST.recdate
  is '记录日期';
comment on column OSECD.BZ_BUSCOST.memos
  is '备注';
comment on column OSECD.BZ_BUSCOST.repairtype
  is '维修类型';
comment on column OSECD.BZ_BUSCOST.conservetype
  is '保养类型';
comment on column OSECD.BZ_BUSCOST.buscardid
  is '车牌号';
comment on column OSECD.BZ_BUSCOST.actdate
  is '业务时间';
create index OSECD.IDX_COST on OSECD.BZ_BUSCOST (ORGID, ROUTEID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_BUSCOST
  add constraint PK_COST primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSDISPLANLD
prompt ==============================
prompt
create table OSECD.BZ_BUSDISPLANLD
(
  displandid     VARCHAR2(36) not null,
  orgid          VARCHAR2(36),
  routeid        VARCHAR2(20) default 0 not null,
  subrouteid     VARCHAR2(20) default 0 not null,
  segmentid      VARCHAR2(36) default 0 not null,
  busid          VARCHAR2(36),
  busselfid      NVARCHAR2(20),
  driverid       VARCHAR2(36),
  dirvername     NVARCHAR2(40),
  stewardid      VARCHAR2(20),
  stewardname    NVARCHAR2(40),
  shiftnum       NVARCHAR2(4) default 0 not null,
  leavetime      DATE,
  arrivetime     DATE,
  seqtype        CHAR(1),
  sequencenum    NUMBER(3),
  milenum        NUMBER(10,2),
  startstationid VARCHAR2(36),
  endstationid   VARCHAR2(36),
  groupnum       CHAR(1),
  seqnum         NUMBER(5,2) default 1,
  isactive       CHAR(1),
  rectype        CHAR(1),
  rundate        DATE,
  memos          NVARCHAR2(255),
  created        DATE,
  createdby      VARCHAR2(36),
  updated        DATE,
  updatedby      VARCHAR2(36)
)
partition by range (RUNDATE)
(
  partition P_201502 values less than (TO_DATE(' 2015-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201503 values less than (TO_DATE(' 2015-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201504 values less than (TO_DATE(' 2015-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201505 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201506 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201507 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201508 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201509 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201510 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201511 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201512 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201601 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201602 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201603 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201604 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201605 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201606 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201607 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201610 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.BZ_BUSDISPLANLD
  is '线路发车计划表';
comment on column OSECD.BZ_BUSDISPLANLD.displandid
  is '发车记录编号';
comment on column OSECD.BZ_BUSDISPLANLD.orgid
  is '组织编号';
comment on column OSECD.BZ_BUSDISPLANLD.routeid
  is '线路号';
comment on column OSECD.BZ_BUSDISPLANLD.subrouteid
  is '子线号';
comment on column OSECD.BZ_BUSDISPLANLD.segmentid
  is '单程号';
comment on column OSECD.BZ_BUSDISPLANLD.busid
  is '车辆编号';
comment on column OSECD.BZ_BUSDISPLANLD.busselfid
  is '车辆自编号';
comment on column OSECD.BZ_BUSDISPLANLD.driverid
  is '司机编号';
comment on column OSECD.BZ_BUSDISPLANLD.dirvername
  is '司机姓名';
comment on column OSECD.BZ_BUSDISPLANLD.stewardid
  is '乘务员编号';
comment on column OSECD.BZ_BUSDISPLANLD.stewardname
  is '乘务员姓名';
comment on column OSECD.BZ_BUSDISPLANLD.shiftnum
  is '班次';
comment on column OSECD.BZ_BUSDISPLANLD.leavetime
  is '离站时间';
comment on column OSECD.BZ_BUSDISPLANLD.arrivetime
  is '到站时间';
comment on column OSECD.BZ_BUSDISPLANLD.seqtype
  is '班次类型';
comment on column OSECD.BZ_BUSDISPLANLD.sequencenum
  is '车次序号';
comment on column OSECD.BZ_BUSDISPLANLD.milenum
  is '里程';
comment on column OSECD.BZ_BUSDISPLANLD.startstationid
  is '起始站点';
comment on column OSECD.BZ_BUSDISPLANLD.endstationid
  is '终止站点';
comment on column OSECD.BZ_BUSDISPLANLD.groupnum
  is '早晚班';
comment on column OSECD.BZ_BUSDISPLANLD.seqnum
  is '车次数';
comment on column OSECD.BZ_BUSDISPLANLD.isactive
  is '是否有效';
comment on column OSECD.BZ_BUSDISPLANLD.rectype
  is '营运类型';
comment on column OSECD.BZ_BUSDISPLANLD.rundate
  is '执行日期';
comment on column OSECD.BZ_BUSDISPLANLD.memos
  is '备注';
comment on column OSECD.BZ_BUSDISPLANLD.created
  is '创建日期';
comment on column OSECD.BZ_BUSDISPLANLD.createdby
  is '创建者';
comment on column OSECD.BZ_BUSDISPLANLD.updated
  is '更新日期';
comment on column OSECD.BZ_BUSDISPLANLD.updatedby
  is '更新者';
create index OSECD.DISPLAN_PK on OSECD.BZ_BUSDISPLANLD (DISPLANDID)
  local;
create index OSECD.IDX_BUSDISPLAN on OSECD.BZ_BUSDISPLANLD (RUNDATE)
  local;

prompt
prompt Creating table BZ_BUSLOGINDETAIL
prompt ================================
prompt
create table OSECD.BZ_BUSLOGINDETAIL
(
  logid        VARCHAR2(36) not null,
  busid        VARCHAR2(36),
  buscardno    VARCHAR2(10),
  logintime    DATE,
  logouttime   DATE,
  onlinehours  NUMBER(10,4),
  packagecount NUMBER default 0,
  gpscount     NUMBER default 0,
  recdate      DATE default SYSDATE,
  routeid      VARCHAR2(20),
  ondate       DATE,
  sendcode     VARCHAR2(2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSLOGINDETAIL
  is '车辆上下线明细';
comment on column OSECD.BZ_BUSLOGINDETAIL.logid
  is 'ID';
comment on column OSECD.BZ_BUSLOGINDETAIL.busid
  is 'BUSID';
comment on column OSECD.BZ_BUSLOGINDETAIL.buscardno
  is '车牌号';
comment on column OSECD.BZ_BUSLOGINDETAIL.logintime
  is '上线时间';
comment on column OSECD.BZ_BUSLOGINDETAIL.logouttime
  is '离线时间';
comment on column OSECD.BZ_BUSLOGINDETAIL.onlinehours
  is '在线时长（H）';
comment on column OSECD.BZ_BUSLOGINDETAIL.packagecount
  is '发送数据包数';
comment on column OSECD.BZ_BUSLOGINDETAIL.gpscount
  is 'GPS数量';
comment on column OSECD.BZ_BUSLOGINDETAIL.recdate
  is '记录时间';
comment on column OSECD.BZ_BUSLOGINDETAIL.routeid
  is 'ROUTEID';
comment on column OSECD.BZ_BUSLOGINDETAIL.ondate
  is '统计日期';
comment on column OSECD.BZ_BUSLOGINDETAIL.sendcode
  is '发送方代码';

prompt
prompt Creating table BZ_BUSOILLD
prompt ==========================
prompt
create table OSECD.BZ_BUSOILLD
(
  recordid  VARCHAR2(36) not null,
  orgid     VARCHAR2(36),
  orgname   VARCHAR2(80),
  routeid   VARCHAR2(36),
  routename VARCHAR2(80),
  busid     VARCHAR2(36),
  busselfid VARCHAR2(10),
  oil_type  VARCHAR2(2),
  oil_num   NUMBER(10,3),
  oil_money NUMBER(10,3),
  oil_price NUMBER(6,3),
  rundate   DATE not null,
  recdate   DATE default sysdate
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSOILLD
  is '车辆加油记录';
comment on column OSECD.BZ_BUSOILLD.recordid
  is 'ID';
comment on column OSECD.BZ_BUSOILLD.orgid
  is '组织ID';
comment on column OSECD.BZ_BUSOILLD.orgname
  is '组织名称';
comment on column OSECD.BZ_BUSOILLD.routeid
  is '线路ID';
comment on column OSECD.BZ_BUSOILLD.routename
  is '线路名称';
comment on column OSECD.BZ_BUSOILLD.busid
  is '车辆ID';
comment on column OSECD.BZ_BUSOILLD.busselfid
  is '车辆自编号';
comment on column OSECD.BZ_BUSOILLD.oil_type
  is '燃油类型';
comment on column OSECD.BZ_BUSOILLD.oil_num
  is '数量';
comment on column OSECD.BZ_BUSOILLD.oil_money
  is '金额';
comment on column OSECD.BZ_BUSOILLD.oil_price
  is '价格';
comment on column OSECD.BZ_BUSOILLD.rundate
  is '运营日期';
comment on column OSECD.BZ_BUSOILLD.recdate
  is '记录日期';
create index OSECD.IX_BUSOIL on OSECD.BZ_BUSOILLD (RUNDATE, ORGID, ROUTEID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_BUSOILLD
  add constraint PK_BUSOIL primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSONLINE
prompt ===========================
prompt
create table OSECD.BZ_BUSONLINE
(
  id             VARCHAR2(36) not null,
  busruncount    NUMBER(8) default 0 not null,
  busonlinecount NUMBER(8) default 0 not null,
  busonsvrcount  NUMBER(8) default 0,
  recdate        DATE default sysdate not null,
  busunruncount  NUMBER(8) default 0
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.BZ_BUSONLINE.busruncount
  is '运营在线数';
comment on column OSECD.BZ_BUSONLINE.busonlinecount
  is '车辆在线数（GPS数据）';
comment on column OSECD.BZ_BUSONLINE.busonsvrcount
  is '车辆在线数（通讯服务）';
comment on column OSECD.BZ_BUSONLINE.busunruncount
  is '非运营在线数';
create index OSECD.IDX_BUSONLINE on OSECD.BZ_BUSONLINE (RECDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSPLANLD
prompt ===========================
prompt
create table OSECD.BZ_BUSPLANLD
(
  planid      VARCHAR2(36) not null,
  planname    NVARCHAR2(50),
  status      CHAR(1),
  orgid       VARCHAR2(36),
  routeid     VARCHAR2(20),
  createdate  DATE,
  startdate   DATE,
  enddate     DATE,
  memos       NVARCHAR2(255),
  confirmdate DATE
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSPLANLD
  is '线路计划表';
comment on column OSECD.BZ_BUSPLANLD.planid
  is '计划编号';
comment on column OSECD.BZ_BUSPLANLD.planname
  is '计划名称';
comment on column OSECD.BZ_BUSPLANLD.status
  is '计划状态（n:新建；r:申请发布；d:发布；c:注销；l:逻辑删除，主表做逻辑删除，做个删除标记，从表做物理删除，删除后计划不再可用）';
comment on column OSECD.BZ_BUSPLANLD.orgid
  is '组织编号';
comment on column OSECD.BZ_BUSPLANLD.routeid
  is '线路编号';
comment on column OSECD.BZ_BUSPLANLD.createdate
  is '创建日期';
comment on column OSECD.BZ_BUSPLANLD.startdate
  is '生效开始日期';
comment on column OSECD.BZ_BUSPLANLD.enddate
  is '生效结束日期';
comment on column OSECD.BZ_BUSPLANLD.memos
  is '备注';
comment on column OSECD.BZ_BUSPLANLD.confirmdate
  is '审批日期';
alter table OSECD.BZ_BUSPLANLD
  add constraint PK_BUSPLAN primary key (PLANID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSPLANSEQLD
prompt ==============================
prompt
create table OSECD.BZ_BUSPLANSEQLD
(
  plansid         VARCHAR2(36) not null,
  routeid         VARCHAR2(20) not null,
  subrouteid      VARCHAR2(20) not null,
  segmentid       VARCHAR2(36) not null,
  planid          VARCHAR2(36) not null,
  shiftnum        NVARCHAR2(4),
  groupnum        CHAR(1),
  leavetime       DATE,
  arrivetime      DATE,
  leavestationid  VARCHAR2(36),
  arrivestationid VARCHAR2(36),
  rectype         VARCHAR2(2),
  mileage         NUMBER(10,2),
  seqcount        NUMBER(3,2)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSPLANSEQLD
  is '线路运行计划车次表';
comment on column OSECD.BZ_BUSPLANSEQLD.plansid
  is '运行计划序号';
comment on column OSECD.BZ_BUSPLANSEQLD.routeid
  is '线路编号';
comment on column OSECD.BZ_BUSPLANSEQLD.subrouteid
  is '子线路编号';
comment on column OSECD.BZ_BUSPLANSEQLD.segmentid
  is '单程编号';
comment on column OSECD.BZ_BUSPLANSEQLD.planid
  is '运行计划ID';
comment on column OSECD.BZ_BUSPLANSEQLD.shiftnum
  is '班次号';
comment on column OSECD.BZ_BUSPLANSEQLD.groupnum
  is '组号，1上午班，2下午班';
comment on column OSECD.BZ_BUSPLANSEQLD.leavetime
  is '发车时间';
comment on column OSECD.BZ_BUSPLANSEQLD.arrivetime
  is '到达时间';
comment on column OSECD.BZ_BUSPLANSEQLD.leavestationid
  is '始发站ID';
comment on column OSECD.BZ_BUSPLANSEQLD.arrivestationid
  is '终点站ID';
comment on column OSECD.BZ_BUSPLANSEQLD.rectype
  is '车次类型';
comment on column OSECD.BZ_BUSPLANSEQLD.mileage
  is '车次里程';
comment on column OSECD.BZ_BUSPLANSEQLD.seqcount
  is '营运车次数';
alter table OSECD.BZ_BUSPLANSEQLD
  add constraint PK_BUSPLANSEQ primary key (PLANSID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSRUNINCOME
prompt ==============================
prompt
create table OSECD.BZ_BUSRUNINCOME
(
  busrunincomeid       VARCHAR2(50) not null,
  datatype             CHAR(1) default 1,
  busrunincomeuploadid VARCHAR2(50),
  rundate              DATE,
  orgid                VARCHAR2(50),
  routeid              VARCHAR2(50),
  subrouteid           VARCHAR2(50),
  segmentid            VARCHAR2(50),
  busid                VARCHAR2(50),
  stationid            VARCHAR2(50),
  routefare            NUMBER(8,2) default 0,
  cardamount           NUMBER(8,2) default 0,
  cashamount           NUMBER(8,2) default 0,
  isactive             CHAR(1) default 1,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  verifymemos          NVARCHAR2(255),
  memos                NVARCHAR2(255),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSRUNINCOME
  is '车辆营运票款收入表';
comment on column OSECD.BZ_BUSRUNINCOME.busrunincomeid
  is '车辆营运票款收入主键ID';
comment on column OSECD.BZ_BUSRUNINCOME.datatype
  is '数据类别(0批量导入，1人工录入)';
comment on column OSECD.BZ_BUSRUNINCOME.busrunincomeuploadid
  is '对应车辆营运票款收入上传记录主键ID';
comment on column OSECD.BZ_BUSRUNINCOME.rundate
  is '营运日期';
comment on column OSECD.BZ_BUSRUNINCOME.orgid
  is '企业ID';
comment on column OSECD.BZ_BUSRUNINCOME.routeid
  is '线路ID';
comment on column OSECD.BZ_BUSRUNINCOME.subrouteid
  is '子线路ID(预留)';
comment on column OSECD.BZ_BUSRUNINCOME.segmentid
  is '单程ID(预留)';
comment on column OSECD.BZ_BUSRUNINCOME.busid
  is '车辆ID';
comment on column OSECD.BZ_BUSRUNINCOME.stationid
  is '站点ID(预留)';
comment on column OSECD.BZ_BUSRUNINCOME.routefare
  is '线路平均票价(元，预留)';
comment on column OSECD.BZ_BUSRUNINCOME.cardamount
  is '刷卡收入总金额(元)';
comment on column OSECD.BZ_BUSRUNINCOME.cashamount
  is '现金收入总金额(元)';
comment on column OSECD.BZ_BUSRUNINCOME.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_BUSRUNINCOME.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_BUSRUNINCOME.verifyby
  is '审核人';
comment on column OSECD.BZ_BUSRUNINCOME.verifydate
  is '审核时间';
comment on column OSECD.BZ_BUSRUNINCOME.verifymemos
  is '审核备注';
comment on column OSECD.BZ_BUSRUNINCOME.memos
  is '备注';
comment on column OSECD.BZ_BUSRUNINCOME.created
  is '创建日期';
comment on column OSECD.BZ_BUSRUNINCOME.createby
  is '创建者';
comment on column OSECD.BZ_BUSRUNINCOME.updated
  is '更新日期';
comment on column OSECD.BZ_BUSRUNINCOME.updateby
  is '更新者';
alter table OSECD.BZ_BUSRUNINCOME
  add constraint PK_BUSRUNINCOMEID primary key (BUSRUNINCOMEID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSRUNINCOMEUPLOAD
prompt ====================================
prompt
create table OSECD.BZ_BUSRUNINCOMEUPLOAD
(
  busrunincomeuploadid VARCHAR2(50) not null,
  orgid                VARCHAR2(50),
  routeid              VARCHAR2(50),
  filename             NVARCHAR2(255),
  filesize             NUMBER(10),
  datacount            NUMBER(10),
  uploadedby           VARCHAR2(50),
  uploadeddate         DATE,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  memos                NVARCHAR2(255),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSRUNINCOMEUPLOAD
  is '车辆营运票款收入上传记录表';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.busrunincomeuploadid
  is '车辆营运票款收入上传记录主键ID';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.orgid
  is '企业ID(预留)';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.routeid
  is '线路ID(预留)';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.filename
  is '上传文件名称';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.filesize
  is '上传文件大小(字节)';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.datacount
  is '上传数据条数';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.uploadedby
  is '上传人';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.uploadeddate
  is '上传时间';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.verifyby
  is '审核人';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.verifydate
  is '审核时间';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.memos
  is '备注';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.created
  is '创建日期';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.createby
  is '创建者';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.updated
  is '更新日期';
comment on column OSECD.BZ_BUSRUNINCOMEUPLOAD.updateby
  is '更新者';
alter table OSECD.BZ_BUSRUNINCOMEUPLOAD
  add constraint PK_BUSRUNINCOMEUPLOADID primary key (BUSRUNINCOMEUPLOADID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSRUNINCOME_TEMP
prompt ===================================
prompt
create table OSECD.BZ_BUSRUNINCOME_TEMP
(
  busrunincometempid   VARCHAR2(50) not null,
  uploadfileid         VARCHAR2(50) not null,
  datatype             CHAR(1) default 1,
  busrunincomeuploadid VARCHAR2(50),
  rundate              DATE,
  orgid                VARCHAR2(50),
  routeid              VARCHAR2(50),
  subrouteid           VARCHAR2(50),
  segmentid            VARCHAR2(50),
  busid                VARCHAR2(50),
  stationid            VARCHAR2(50),
  routefare            NUMBER(8,2) default 0,
  cardamount           NUMBER(8,2) default 0,
  cashamount           NUMBER(8,2) default 0,
  isactive             CHAR(1) default 1,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  verifymemos          NVARCHAR2(255),
  memos                NVARCHAR2(255),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSRUNINCOME_TEMP
  is '车辆营运票款收入临时记录表(上传用)';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.busrunincometempid
  is '车辆营运票款收入临时记录主键ID';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.uploadfileid
  is '对应上传文件主键ID';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.datatype
  is '数据类别(0批量导入，1人工录入)';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.busrunincomeuploadid
  is '对应车辆营运票款收入上传记录主键ID';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.rundate
  is '营运日期';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.orgid
  is '企业ID';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.routeid
  is '线路ID';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.subrouteid
  is '子线路ID(预留)';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.segmentid
  is '单程ID(预留)';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.busid
  is '车辆ID';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.stationid
  is '站点ID(预留)';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.routefare
  is '线路平均票价(元，预留)';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.cardamount
  is '刷卡收入总金额(元)';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.cashamount
  is '现金收入总金额(元)';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.verifyby
  is '审核人';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.verifydate
  is '审核时间';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.verifymemos
  is '审核备注';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.memos
  is '备注';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.created
  is '创建日期';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.createby
  is '创建者';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.updated
  is '更新日期';
comment on column OSECD.BZ_BUSRUNINCOME_TEMP.updateby
  is '更新者';
alter table OSECD.BZ_BUSRUNINCOME_TEMP
  add constraint PK_BUSRUNINCOMETEMPID primary key (BUSRUNINCOMETEMPID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSRUNRECORDLD
prompt ================================
prompt
create table OSECD.BZ_BUSRUNRECORDLD
(
  busrrid          VARCHAR2(36) not null,
  orgid            VARCHAR2(36),
  routeid          VARCHAR2(20) not null,
  subrouteid       VARCHAR2(20),
  segmentid        VARCHAR2(36),
  rectype          CHAR(1) not null,
  busid            VARCHAR2(36) not null,
  driverid         VARCHAR2(36),
  bussid           VARCHAR2(3) not null,
  stewardid        VARCHAR2(36),
  startstationid   VARCHAR2(36),
  endstationid     VARCHAR2(36),
  leavetime        DATE,
  arrivetime       DATE,
  islate           CHAR(1),
  rundatadate      DATE,
  miletypeid       VARCHAR2(2) not null,
  milenum          NUMBER(10,2),
  recdate          DATE,
  seqnum           NUMBER(5,2) default 1,
  avgspeed         NUMBER(15) default 0,
  seqtime          NUMBER(15) default 0,
  gpsmile          NUMBER(10,2),
  memos            NVARCHAR2(255),
  isactive         CHAR(1),
  created          DATE,
  createdby        VARCHAR2(36),
  updated          DATE,
  updatedby        VARCHAR2(36),
  stoptime         NUMBER(5,2),
  stopnum          NUMBER(3),
  stationnum       NUMBER(3),
  sectrate         NUMBER(5,2),
  displanid        VARCHAR2(36),
  datasource       NUMBER(10),
  planstarttime    DATE,
  planendtime      DATE,
  intervalflag     CHAR(1),
  shifttype        CHAR(1),
  shiftperiod      NUMBER(5,1),
  buscardno        NVARCHAR2(50),
  intervalperiod   NUMBER,
  stationrate      NUMBER,
  isfullflag       CHAR(1),
  isendflag        CHAR(1),
  isstartflag      CHAR(1),
  planstartstation VARCHAR2(36),
  planendstation   VARCHAR2(36),
  busselfid        VARCHAR2(20)
)
partition by range (RUNDATADATE)
(
  partition P_201506 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201507 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201508 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201509 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201510 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201511 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201512 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201601 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201602 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201603 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201604 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201605 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201606 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201607 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201610 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.BZ_BUSRUNRECORDLD
  is '车辆发车记录表';
comment on column OSECD.BZ_BUSRUNRECORDLD.busrrid
  is '序号';
comment on column OSECD.BZ_BUSRUNRECORDLD.orgid
  is '组织编号';
comment on column OSECD.BZ_BUSRUNRECORDLD.routeid
  is '线路';
comment on column OSECD.BZ_BUSRUNRECORDLD.subrouteid
  is '子线路';
comment on column OSECD.BZ_BUSRUNRECORDLD.segmentid
  is '单程线路ID';
comment on column OSECD.BZ_BUSRUNRECORDLD.rectype
  is '车次类型：1营运，2非营运';
comment on column OSECD.BZ_BUSRUNRECORDLD.busid
  is '车辆ID';
comment on column OSECD.BZ_BUSRUNRECORDLD.driverid
  is '驾驶员ID';
comment on column OSECD.BZ_BUSRUNRECORDLD.bussid
  is '车辆状态ID（字典表busstatetype）';
comment on column OSECD.BZ_BUSRUNRECORDLD.stewardid
  is '乘务员';
comment on column OSECD.BZ_BUSRUNRECORDLD.startstationid
  is '出发站点';
comment on column OSECD.BZ_BUSRUNRECORDLD.endstationid
  is '目的站点';
comment on column OSECD.BZ_BUSRUNRECORDLD.leavetime
  is '发车时间（带实际日期）';
comment on column OSECD.BZ_BUSRUNRECORDLD.arrivetime
  is '到站时间（带实际日期）';
comment on column OSECD.BZ_BUSRUNRECORDLD.islate
  is '早晚点（字典表0，准点，1晚点，2早点，3不予考核）';
comment on column OSECD.BZ_BUSRUNRECORDLD.rundatadate
  is '营运日期（不带时间）';
comment on column OSECD.BZ_BUSRUNRECORDLD.miletypeid
  is '里程类型（10营运载客，11包车载客20加油21保养22维修23充气24出入库30教练40公务90其他）';
comment on column OSECD.BZ_BUSRUNRECORDLD.milenum
  is '产生的里程';
comment on column OSECD.BZ_BUSRUNRECORDLD.recdate
  is '记录时间';
comment on column OSECD.BZ_BUSRUNRECORDLD.seqnum
  is '车次个数（可能多一个驾驶员分担一个车次）';
comment on column OSECD.BZ_BUSRUNRECORDLD.avgspeed
  is '车次平均运行速度（米/秒）';
comment on column OSECD.BZ_BUSRUNRECORDLD.seqtime
  is '车次累计运行时间（分钟）';
comment on column OSECD.BZ_BUSRUNRECORDLD.gpsmile
  is 'GPS里程';
comment on column OSECD.BZ_BUSRUNRECORDLD.memos
  is '备注';
comment on column OSECD.BZ_BUSRUNRECORDLD.isactive
  is '是否有效';
comment on column OSECD.BZ_BUSRUNRECORDLD.created
  is '创建日期';
comment on column OSECD.BZ_BUSRUNRECORDLD.createdby
  is '创建者';
comment on column OSECD.BZ_BUSRUNRECORDLD.updated
  is '更新日期';
comment on column OSECD.BZ_BUSRUNRECORDLD.updatedby
  is '更新者';
comment on column OSECD.BZ_BUSRUNRECORDLD.stoptime
  is '停站时间';
comment on column OSECD.BZ_BUSRUNRECORDLD.stopnum
  is '报站个数';
comment on column OSECD.BZ_BUSRUNRECORDLD.stationnum
  is '站点个数';
comment on column OSECD.BZ_BUSRUNRECORDLD.sectrate
  is '区间准点率';
comment on column OSECD.BZ_BUSRUNRECORDLD.displanid
  is '发车计划编号';
comment on column OSECD.BZ_BUSRUNRECORDLD.datasource
  is '数据来源（0同步 1录入 2到离站计算 3GPS计算 ）';
comment on column OSECD.BZ_BUSRUNRECORDLD.planstarttime
  is '计划发车时间';
comment on column OSECD.BZ_BUSRUNRECORDLD.planendtime
  is '计划到达时间';
comment on column OSECD.BZ_BUSRUNRECORDLD.intervalflag
  is '发车间隔是否合格 0 否 1是';
comment on column OSECD.BZ_BUSRUNRECORDLD.shifttype
  is '班次类型 F首班 L 末班 M 中间班次 ）';
comment on column OSECD.BZ_BUSRUNRECORDLD.shiftperiod
  is '班次间隔(分）';
comment on column OSECD.BZ_BUSRUNRECORDLD.buscardno
  is '车牌号';
comment on column OSECD.BZ_BUSRUNRECORDLD.intervalperiod
  is '发车间隔值';
comment on column OSECD.BZ_BUSRUNRECORDLD.stationrate
  is '报站率';
comment on column OSECD.BZ_BUSRUNRECORDLD.isfullflag
  is '是否完整班次';
comment on column OSECD.BZ_BUSRUNRECORDLD.isendflag
  is '是否到达末站 0/1';
comment on column OSECD.BZ_BUSRUNRECORDLD.isstartflag
  is '是否首站发车 0/1';
comment on column OSECD.BZ_BUSRUNRECORDLD.planstartstation
  is '计划出发站点';
comment on column OSECD.BZ_BUSRUNRECORDLD.planendstation
  is '计划目的站点';
comment on column OSECD.BZ_BUSRUNRECORDLD.busselfid
  is '车辆自编号';
create index OSECD.IX_BUSRUNREC1 on OSECD.BZ_BUSRUNRECORDLD (RUNDATADATE, ARRIVETIME, LEAVETIME)
  local;
create index OSECD.IX_BUSRUNREC2 on OSECD.BZ_BUSRUNRECORDLD (RUNDATADATE, ROUTEID, BUSID)
  local;
create index OSECD.IX_BUSRUNREC3 on OSECD.BZ_BUSRUNRECORDLD (RUNDATADATE, DISPLANID)
  local;
create index OSECD.IX_RUNDATADATE on OSECD.BZ_BUSRUNRECORDLD (RUNDATADATE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSRUNRECORDLD0928_1031
prompt =========================================
prompt
create table OSECD.BZ_BUSRUNRECORDLD0928_1031
(
  busrrid        VARCHAR2(36) not null,
  orgid          VARCHAR2(36),
  routeid        VARCHAR2(20) not null,
  subrouteid     VARCHAR2(20),
  segmentid      VARCHAR2(36),
  rectype        CHAR(1) not null,
  busid          VARCHAR2(36) not null,
  driverid       VARCHAR2(36),
  bussid         VARCHAR2(3) not null,
  stewardid      VARCHAR2(36),
  startstationid VARCHAR2(36),
  endstationid   VARCHAR2(36),
  leavetime      DATE,
  arrivetime     DATE,
  islate         CHAR(1),
  rundatadate    DATE,
  miletypeid     VARCHAR2(2) not null,
  milenum        NUMBER(10,2),
  recdate        DATE,
  seqnum         NUMBER(5,2),
  avgspeed       NUMBER(15),
  seqtime        NUMBER(15),
  gpsmile        NUMBER(10,2),
  memos          NVARCHAR2(255),
  isactive       CHAR(1),
  created        DATE,
  createdby      VARCHAR2(36),
  updated        DATE,
  updatedby      VARCHAR2(36),
  stoptime       NUMBER(5,2),
  stopnum        NUMBER(3),
  stationnum     NUMBER(3),
  sectrate       NUMBER(5,2),
  displanid      VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSRUNRECORDLDTEMP
prompt ====================================
prompt
create table OSECD.BZ_BUSRUNRECORDLDTEMP
(
  busrrid        VARCHAR2(36) not null,
  orgid          VARCHAR2(36),
  routeid        VARCHAR2(20) not null,
  subrouteid     VARCHAR2(20),
  segmentid      VARCHAR2(36),
  rectype        CHAR(1) not null,
  busid          VARCHAR2(36) not null,
  driverid       VARCHAR2(36),
  bussid         VARCHAR2(3) not null,
  stewardid      VARCHAR2(36),
  startstationid VARCHAR2(36),
  endstationid   VARCHAR2(36),
  leavetime      DATE,
  arrivetime     DATE,
  islate         CHAR(1),
  rundatadate    DATE,
  miletypeid     VARCHAR2(2) not null,
  milenum        NUMBER(10,2),
  recdate        DATE,
  seqnum         NUMBER(5,2) default 1,
  avgspeed       NUMBER(15) default 0,
  seqtime        NUMBER(15) default 0,
  gpsmile        NUMBER(10,2),
  memos          NVARCHAR2(255),
  isactive       CHAR(1),
  created        DATE,
  createdby      VARCHAR2(36),
  updated        DATE,
  updatedby      VARCHAR2(36),
  stoptime       NUMBER(5,2),
  stopnum        NUMBER(3),
  stationnum     NUMBER(3),
  sectrate       NUMBER(5,2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSRUNRECORDLDTEMP
  is '车辆发车记录表';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.busrrid
  is '序号';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.orgid
  is '组织编号';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.routeid
  is '线路';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.subrouteid
  is '子线路';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.segmentid
  is '单程线路ID';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.rectype
  is '车次类型：1营运，2非营运';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.busid
  is '车辆ID';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.driverid
  is '驾驶员ID';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.bussid
  is '车辆状态ID（字典表busstatetype）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.stewardid
  is '乘务员';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.startstationid
  is '出发站点';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.endstationid
  is '目的站点';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.leavetime
  is '发车时间（带实际日期）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.arrivetime
  is '到站时间（带实际日期）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.islate
  is '早晚点（字典表0，准点，1晚点，2早点，3不予考核）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.rundatadate
  is '营运日期（不带时间）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.miletypeid
  is '里程类型（10营运载客，11包车载客20加油21保养22维修23充气24出入库30教练40公务90其他）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.milenum
  is '产生的里程';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.recdate
  is '记录时间';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.seqnum
  is '车次个数（可能多一个驾驶员分担一个车次）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.avgspeed
  is '车次平均运行速度（米/秒）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.seqtime
  is '车次累计运行时间（分钟）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.gpsmile
  is 'GPS里程';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.memos
  is '备注';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.isactive
  is '是否有效';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.created
  is '创建日期';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.createdby
  is '创建者';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.updated
  is '更新日期';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.updatedby
  is '更新者';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.stoptime
  is '停站时间';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.stopnum
  is '报站个数';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.stationnum
  is '站点个数';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP.sectrate
  is '区间准点率';
create index OSECD.INX_BUSRUNRECTEMP on OSECD.BZ_BUSRUNRECORDLDTEMP (BUSID, DRIVERID, ROUTEID, RUNDATADATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.PK_BUSRUNRECTEMP on OSECD.BZ_BUSRUNRECORDLDTEMP (RUNDATADATE, LEAVETIME, ARRIVETIME)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSRUNRECORDLDTEMP1
prompt =====================================
prompt
create table OSECD.BZ_BUSRUNRECORDLDTEMP1
(
  busrrid        VARCHAR2(36) not null,
  orgid          VARCHAR2(36),
  routeid        VARCHAR2(20) not null,
  subrouteid     VARCHAR2(20),
  segmentid      VARCHAR2(36),
  rectype        CHAR(1) not null,
  busid          VARCHAR2(36) not null,
  driverid       VARCHAR2(36),
  bussid         VARCHAR2(3) not null,
  stewardid      VARCHAR2(36),
  startstationid VARCHAR2(36),
  endstationid   VARCHAR2(36),
  leavetime      DATE,
  arrivetime     DATE,
  islate         CHAR(1),
  rundatadate    DATE,
  miletypeid     VARCHAR2(2) not null,
  milenum        NUMBER(10,2),
  recdate        DATE,
  seqnum         NUMBER(5,2) default 1,
  avgspeed       NUMBER(15) default 0,
  seqtime        NUMBER(15) default 0,
  gpsmile        NUMBER(10,2),
  memos          NVARCHAR2(255),
  isactive       CHAR(1),
  created        DATE,
  createdby      VARCHAR2(36),
  updated        DATE,
  updatedby      VARCHAR2(36),
  stoptime       NUMBER(5,2),
  stopnum        NUMBER(3),
  stationnum     NUMBER(3),
  sectrate       NUMBER(5,2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSRUNRECORDLDTEMP1
  is '车辆发车记录表';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.busrrid
  is '序号';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.orgid
  is '组织编号';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.routeid
  is '线路';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.subrouteid
  is '子线路';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.segmentid
  is '单程线路ID';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.rectype
  is '车次类型：1营运，2非营运';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.busid
  is '车辆ID';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.driverid
  is '驾驶员ID';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.bussid
  is '车辆状态ID（字典表busstatetype）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.stewardid
  is '乘务员';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.startstationid
  is '出发站点';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.endstationid
  is '目的站点';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.leavetime
  is '发车时间（带实际日期）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.arrivetime
  is '到站时间（带实际日期）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.islate
  is '早晚点（字典表0，准点，1晚点，2早点，3不予考核）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.rundatadate
  is '营运日期（不带时间）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.miletypeid
  is '里程类型（10营运载客，11包车载客20加油21保养22维修23充气24出入库30教练40公务90其他）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.milenum
  is '产生的里程';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.recdate
  is '记录时间';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.seqnum
  is '车次个数（可能多一个驾驶员分担一个车次）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.avgspeed
  is '车次平均运行速度（米/秒）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.seqtime
  is '车次累计运行时间（分钟）';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.gpsmile
  is 'GPS里程';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.memos
  is '备注';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.isactive
  is '是否有效';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.created
  is '创建日期';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.createdby
  is '创建者';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.updated
  is '更新日期';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.updatedby
  is '更新者';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.stoptime
  is '停站时间';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.stopnum
  is '报站个数';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.stationnum
  is '站点个数';
comment on column OSECD.BZ_BUSRUNRECORDLDTEMP1.sectrate
  is '区间准点率';
create index OSECD.INX_BUSRUNRECTEMP1 on OSECD.BZ_BUSRUNRECORDLDTEMP1 (BUSID, DRIVERID, ROUTEID, RUNDATADATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.PK_BUSRUNRECTEMP1 on OSECD.BZ_BUSRUNRECORDLDTEMP1 (RUNDATADATE, LEAVETIME, ARRIVETIME)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSRUNRECORDLD_PKG
prompt ====================================
prompt
create table OSECD.BZ_BUSRUNRECORDLD_PKG
(
  busrrid          VARCHAR2(36) not null,
  orgid            VARCHAR2(36),
  routeid          VARCHAR2(20) not null,
  subrouteid       VARCHAR2(20),
  segmentid        VARCHAR2(36),
  rectype          CHAR(1) not null,
  busid            VARCHAR2(36) not null,
  driverid         VARCHAR2(36),
  bussid           VARCHAR2(3) not null,
  stewardid        VARCHAR2(36),
  startstationid   VARCHAR2(36),
  endstationid     VARCHAR2(36),
  leavetime        DATE,
  arrivetime       DATE,
  islate           CHAR(1),
  rundatadate      DATE,
  miletypeid       VARCHAR2(2) not null,
  milenum          NUMBER(10,2),
  recdate          DATE,
  seqnum           NUMBER(5,2) default 1,
  avgspeed         NUMBER(15) default 0,
  seqtime          NUMBER(15) default 0,
  gpsmile          NUMBER(10,2),
  memos            NVARCHAR2(255),
  isactive         CHAR(1),
  created          DATE,
  createdby        VARCHAR2(36),
  updated          DATE,
  updatedby        VARCHAR2(36),
  stoptime         NUMBER(5,2),
  stopnum          NUMBER(3),
  stationnum       NUMBER(3),
  sectrate         NUMBER(5,2),
  displanid        VARCHAR2(36),
  datasource       NUMBER(10) default 0,
  shifttype        CHAR(1) default 'L',
  shiftperiod      NUMBER(5,1) default 0,
  planstarttime    DATE,
  planendtime      DATE,
  stationrate      NUMBER(5,2),
  intervalflag     CHAR(1),
  isfullflag       CHAR(1),
  isendflag        CHAR(1),
  isstartflag      CHAR(1),
  planstartstation VARCHAR2(36),
  planendstation   VARCHAR2(36),
  intervalperiod   NUMBER,
  buscardno        NVARCHAR2(50),
  routename        VARCHAR2(50),
  segmentname      VARCHAR2(50),
  busselfid        VARCHAR2(20)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSRUNRECORDLD_PKG
  is '车辆发车记录（用于数据结存）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.busrrid
  is '序号';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.orgid
  is '组织编号';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.routeid
  is '线路';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.subrouteid
  is '子线路';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.segmentid
  is '单程线路ID';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.rectype
  is '车次类型：1营运，2非营运';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.busid
  is '车辆ID';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.driverid
  is '驾驶员ID';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.bussid
  is '车辆状态ID（字典表BUSSTATETYPE）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.stewardid
  is '乘务员';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.startstationid
  is '出发站点';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.endstationid
  is '目的站点';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.leavetime
  is '发车时间（带实际日期）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.arrivetime
  is '到站时间（带实际日期）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.islate
  is '早晚点（字典表0，准点，1晚点，2早点，3不予考核）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.rundatadate
  is '营运日期（不带时间）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.miletypeid
  is '里程类型（10营运载客，11包车载客20加油21保养22维修23充气24出入库30教练40公务90其他）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.milenum
  is '产生的里程';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.recdate
  is '记录时间';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.seqnum
  is '车次个数（可能多一个驾驶员分担一个车次）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.avgspeed
  is '车次平均运行速度（米/秒）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.seqtime
  is '车次累计运行时间（分钟）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.gpsmile
  is 'GPS里程';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.memos
  is '备注';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.isactive
  is '是否有效';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.created
  is '创建日期';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.createdby
  is '创建者';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.updated
  is '更新日期';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.updatedby
  is '更新者';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.stoptime
  is '停站时间';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.stopnum
  is '报站个数';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.stationnum
  is '站点个数';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.sectrate
  is '可信度';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.displanid
  is '发车计划编号';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.datasource
  is '数据来源（0同步 1录入 2到离站计算 3GPS计算 ）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.shifttype
  is '班次类型 F首班 L 末班 M 中间班次';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.shiftperiod
  is '班次间隔，首班为零';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.intervalflag
  is '间隔有效标志（0，等于间隔，1，大于标准间隔,2小于间隔）';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.isfullflag
  is '是否完整班次';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.planstartstation
  is '计划出发站点';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.planendstation
  is '计划目的站点';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.intervalperiod
  is '发车间隔值';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.buscardno
  is '车牌号';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.routename
  is '线路名称';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.segmentname
  is '单程名称';
comment on column OSECD.BZ_BUSRUNRECORDLD_PKG.busselfid
  is '车辆自编号';
create index OSECD.IX_BUSRUNRECPKG1 on OSECD.BZ_BUSRUNRECORDLD_PKG (BUSID, DRIVERID, ROUTEID, RUNDATADATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IX_BUSRUNRECPKG2 on OSECD.BZ_BUSRUNRECORDLD_PKG (RUNDATADATE, LEAVETIME, ARRIVETIME)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_BUSSHIFTCHECKLD
prompt =================================
prompt
create table OSECD.BZ_BUSSHIFTCHECKLD
(
  busrrid          VARCHAR2(36) not null,
  orgid            VARCHAR2(36),
  routeid          VARCHAR2(20) not null,
  subrouteid       VARCHAR2(20),
  segmentid        VARCHAR2(36),
  rectype          CHAR(1) not null,
  busid            VARCHAR2(36) not null,
  driverid         VARCHAR2(36),
  routeshifttype   VARCHAR2(3) not null,
  stewardid        VARCHAR2(36),
  startstationid   VARCHAR2(36),
  endstationid     VARCHAR2(36),
  begintime        DATE,
  endtime          DATE,
  islate           CHAR(1),
  rundatadate      DATE,
  miletypeid       VARCHAR2(2) not null,
  milenum          NUMBER(10,2),
  recdate          DATE,
  seqnum           NUMBER(5,2) default 1,
  avgspeed         NUMBER(15) default 0,
  seqtime          NUMBER(15) default 0,
  gpsmile          NUMBER(10,2),
  memos            NVARCHAR2(255),
  isactive         CHAR(1),
  created          DATE,
  createdby        VARCHAR2(36),
  updated          DATE,
  updatedby        VARCHAR2(36),
  stoptime         NUMBER(5,2),
  stopnum          NUMBER(3),
  stationnum       NUMBER(3),
  sectrate         NUMBER(5,2),
  stationrate      NUMBER(5,2),
  datasource       NUMBER(10) default 0,
  planstartstation VARCHAR2(36),
  planendstation   VARCHAR2(36),
  isstartflag      CHAR(1),
  isendflag        CHAR(1),
  isfullflag       CHAR(1),
  shiftperiod      NUMBER(5,1),
  periodflag       CHAR(1),
  isfullcheck      CHAR(1),
  periodcheck      CHAR(1),
  ischeck          CHAR(1) default '0',
  checkman         VARCHAR2(36),
  standperiod      NUMBER(5,1) default 0,
  shifttype        VARCHAR2(2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_BUSSHIFTCHECKLD
  is '车辆班次审核表';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.busrrid
  is 'ID';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.orgid
  is '组织编号';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.routeid
  is '线路';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.subrouteid
  is '子线路';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.segmentid
  is '单程线路ID';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.rectype
  is '车次类型：1营运，2非营运';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.busid
  is '车辆ID';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.driverid
  is '驾驶员ID';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.routeshifttype
  is '线路营运类型 1 上下行 2 环形';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.stewardid
  is '乘务员';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.startstationid
  is '实际出发站点';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.endstationid
  is '实际终点站点';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.begintime
  is '实际发车时间（带实际日期）';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.endtime
  is '实际到站时间（带实际日期）';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.islate
  is '早晚点（字典表0，准点，1晚点，2早点，3不予考核）';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.rundatadate
  is '营运日期（不带时间）';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.miletypeid
  is '里程类型（10营运载客，11包车载客20加油21保养22维修23充气24出入库30教练40公务90其他）';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.milenum
  is '班次里程，单位千米';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.recdate
  is '记录时间';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.seqnum
  is '车次个数(如果多余一个驾驶员，各驾驶员分享车次数和为1）';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.avgspeed
  is '车次平均运行速度（米/秒）';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.seqtime
  is '车次累计运行时间（分钟）';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.gpsmile
  is 'GPS里程';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.memos
  is '备注';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.isactive
  is '是否有效';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.created
  is '创建日期';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.createdby
  is '创建者';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.updated
  is '更新日期';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.updatedby
  is '更新者';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.stoptime
  is '停站时间';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.stopnum
  is '报站个数';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.stationnum
  is '单程站点个数';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.sectrate
  is '区间准点率';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.stationrate
  is '报站率\班次可信度';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.datasource
  is '数据来源（0调度系统同步 1手工录入 2到离站计算 ）';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.planstartstation
  is '计划首站';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.planendstation
  is '计划末站';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.isstartflag
  is '是否首站发车 0/1';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.isendflag
  is '是否到达末站 0/1';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.isfullflag
  is '车次是否完整 0/1';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.shiftperiod
  is '班次间隔（分）,首班间隔为零';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.periodflag
  is '间隔是否合格 0/1';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.isfullcheck
  is '车次是否完整确认过的';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.periodcheck
  is '间隔是否合格确认过的';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.ischeck
  is '是否确认 0/1';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.checkman
  is '确认人';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.standperiod
  is '标准间隔';
comment on column OSECD.BZ_BUSSHIFTCHECKLD.shifttype
  is '班次类型 F首班 L 末班 M 中间班';
create index OSECD.IX_BUSSHIFTCHECK on OSECD.BZ_BUSSHIFTCHECKLD (RUNDATADATE, ORGID, ROUTEID, BUSID)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_CASHINCOME
prompt ============================
prompt
create table OSECD.BZ_CASHINCOME
(
  recordid      VARCHAR2(36) not null,
  orgid         VARCHAR2(36),
  routeid       VARCHAR2(20),
  busid         VARCHAR2(36),
  stationid     VARCHAR2(36),
  sourcefrom    CHAR(1),
  ticketsort    CHAR(1),
  iccardtype    VARCHAR2(3),
  totalincome   NUMBER(10,2),
  passengerflow NUMBER(10),
  recdate       DATE default sysdate,
  rundate       DATE,
  orgname       VARCHAR2(80),
  routename     VARCHAR2(80),
  busselfid     VARCHAR2(10)
)
partition by range (RUNDATE)
(
  partition P_201401 values less than (TO_DATE(' 2014-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201402 values less than (TO_DATE(' 2014-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201403 values less than (TO_DATE(' 2014-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201404 values less than (TO_DATE(' 2014-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201405 values less than (TO_DATE(' 2014-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201406 values less than (TO_DATE(' 2014-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201407 values less than (TO_DATE(' 2014-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201408 values less than (TO_DATE(' 2014-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201409 values less than (TO_DATE(' 2014-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201410 values less than (TO_DATE(' 2014-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201411 values less than (TO_DATE(' 2014-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201412 values less than (TO_DATE(' 2015-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201501 values less than (TO_DATE(' 2015-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201502 values less than (TO_DATE(' 2015-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201503 values less than (TO_DATE(' 2015-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201504 values less than (TO_DATE(' 2015-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201505 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201506 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201507 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201508 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201509 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201510 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201511 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201512 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201601 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201602 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201603 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201604 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201605 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201606 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.BZ_CASHINCOME
  is '车辆收入结存表';
comment on column OSECD.BZ_CASHINCOME.recordid
  is '记录ID';
comment on column OSECD.BZ_CASHINCOME.orgid
  is '组织编号';
comment on column OSECD.BZ_CASHINCOME.routeid
  is '线路编号';
comment on column OSECD.BZ_CASHINCOME.busid
  is '车辆编号';
comment on column OSECD.BZ_CASHINCOME.stationid
  is '站点编号';
comment on column OSECD.BZ_CASHINCOME.sourcefrom
  is '数据来源(1表示车辆票箱，2表示站点售票，3表示包车)';
comment on column OSECD.BZ_CASHINCOME.ticketsort
  is '票款分类(1表示现金，2表示IC卡)';
comment on column OSECD.BZ_CASHINCOME.iccardtype
  is 'IC卡类型，取字典表数据';
comment on column OSECD.BZ_CASHINCOME.totalincome
  is '总收入';
comment on column OSECD.BZ_CASHINCOME.passengerflow
  is '客流量';
comment on column OSECD.BZ_CASHINCOME.recdate
  is '记录日期';
comment on column OSECD.BZ_CASHINCOME.rundate
  is '运营日期';
comment on column OSECD.BZ_CASHINCOME.orgname
  is '组织名称';
comment on column OSECD.BZ_CASHINCOME.routename
  is '线路名称';
comment on column OSECD.BZ_CASHINCOME.busselfid
  is '车辆自编号';
create index OSECD.IDX_INCOME on OSECD.BZ_CASHINCOME (RUNDATE, ORGID, ROUTEID)
  local;
alter table OSECD.BZ_CASHINCOME
  add constraint PK_INCOME primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_COMPLAINTRECORD
prompt =================================
prompt
create table OSECD.BZ_COMPLAINTRECORD
(
  complaintrecordid   VARCHAR2(50) not null,
  datatype            CHAR(1) default 0,
  complainttype       CHAR(1) default 0,
  complaintdate       DATE,
  objecttype          CHAR(1),
  orgid               VARCHAR2(50),
  routeid             VARCHAR2(50),
  subrouteid          VARCHAR2(50),
  segmentid           VARCHAR2(50),
  busid               VARCHAR2(50),
  empid               VARCHAR2(50),
  empname             NVARCHAR2(50),
  complaintcontent    NVARCHAR2(255),
  psgname             NVARCHAR2(50),
  psgphone            NVARCHAR2(255),
  psgaddress          NVARCHAR2(255),
  recorddate          DATE,
  complaintstatus     CHAR(1),
  isaccepted          CHAR(1),
  accepteddate        DATE,
  orgdealdate         DATE,
  orgdealcontent      NVARCHAR2(255),
  tcdealdate          DATE,
  tcdealcontent       NVARCHAR2(255),
  isreplied           CHAR(1),
  replieddate         DATE,
  psgissatisfied      CHAR(1),
  psgcontent          NVARCHAR2(255),
  endeddate           DATE,
  svassesscriterionid VARCHAR2(50),
  criteriontype       CHAR(1),
  criterionvalue      NUMBER(8,2) default 0,
  memos               NVARCHAR2(255),
  isactive            CHAR(1) default 1,
  verifystatus        CHAR(1) default 0,
  verifyby            VARCHAR2(50),
  verifydate          DATE,
  created             DATE,
  createby            VARCHAR2(50),
  updated             DATE,
  updateby            VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_COMPLAINTRECORD
  is '行业投诉记录表';
comment on column OSECD.BZ_COMPLAINTRECORD.complaintrecordid
  is '行业投诉记录主键ID';
comment on column OSECD.BZ_COMPLAINTRECORD.datatype
  is '投诉数据来源类别(对应字典COMPLAINTDATATYPE，0系统录入，1热线系统)';
comment on column OSECD.BZ_COMPLAINTRECORD.complainttype
  is '投诉类别(对应字典COMPLAINTTYPE，0投诉，1表扬，2建议)';
comment on column OSECD.BZ_COMPLAINTRECORD.complaintdate
  is '投诉时间';
comment on column OSECD.BZ_COMPLAINTRECORD.objecttype
  is '投诉对象类别(对应字典SVAOBJECTTYPE，1企业，2线路，3车辆，4人员)';
comment on column OSECD.BZ_COMPLAINTRECORD.orgid
  is '企业ID';
comment on column OSECD.BZ_COMPLAINTRECORD.routeid
  is '线路ID';
comment on column OSECD.BZ_COMPLAINTRECORD.subrouteid
  is '子线路ID(预留)';
comment on column OSECD.BZ_COMPLAINTRECORD.segmentid
  is '单程ID(预留)';
comment on column OSECD.BZ_COMPLAINTRECORD.busid
  is '车辆ID';
comment on column OSECD.BZ_COMPLAINTRECORD.empid
  is '人员ID(预留)';
comment on column OSECD.BZ_COMPLAINTRECORD.empname
  is '人员姓名';
comment on column OSECD.BZ_COMPLAINTRECORD.complaintcontent
  is '投诉内容';
comment on column OSECD.BZ_COMPLAINTRECORD.psgname
  is '投诉人姓名';
comment on column OSECD.BZ_COMPLAINTRECORD.psgphone
  is '投诉人联系方式';
comment on column OSECD.BZ_COMPLAINTRECORD.psgaddress
  is '投诉人联系地址';
comment on column OSECD.BZ_COMPLAINTRECORD.recorddate
  is '录入时间';
comment on column OSECD.BZ_COMPLAINTRECORD.complaintstatus
  is '处理状态(对应字典COMPLAINTSTATUS，1投诉受理，2企业处理，3TC确认，4回复乘客，5处理完成)';
comment on column OSECD.BZ_COMPLAINTRECORD.isaccepted
  is '是否已受理(0未受理，1已受理)';
comment on column OSECD.BZ_COMPLAINTRECORD.accepteddate
  is '受理时间';
comment on column OSECD.BZ_COMPLAINTRECORD.orgdealdate
  is '企业处理时间';
comment on column OSECD.BZ_COMPLAINTRECORD.orgdealcontent
  is '企业处理意见';
comment on column OSECD.BZ_COMPLAINTRECORD.tcdealdate
  is 'TC处理时间';
comment on column OSECD.BZ_COMPLAINTRECORD.tcdealcontent
  is 'TC处理意见';
comment on column OSECD.BZ_COMPLAINTRECORD.isreplied
  is '是否已回复乘客(0未回复，1已回复)';
comment on column OSECD.BZ_COMPLAINTRECORD.replieddate
  is '回复乘客时间';
comment on column OSECD.BZ_COMPLAINTRECORD.psgissatisfied
  is '乘客是否满意(0不满意，1满意)';
comment on column OSECD.BZ_COMPLAINTRECORD.psgcontent
  is '乘客回复意见';
comment on column OSECD.BZ_COMPLAINTRECORD.endeddate
  is '投诉处理完成时间';
comment on column OSECD.BZ_COMPLAINTRECORD.svassesscriterionid
  is '对应服务质量考核标准主键ID';
comment on column OSECD.BZ_COMPLAINTRECORD.criteriontype
  is '考核评价方式(对应字典CRITERIONTYPE，0扣分，1加分)';
comment on column OSECD.BZ_COMPLAINTRECORD.criterionvalue
  is '考核评价分值';
comment on column OSECD.BZ_COMPLAINTRECORD.memos
  is '备注';
comment on column OSECD.BZ_COMPLAINTRECORD.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_COMPLAINTRECORD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_COMPLAINTRECORD.verifyby
  is '审核人';
comment on column OSECD.BZ_COMPLAINTRECORD.verifydate
  is '审核时间';
comment on column OSECD.BZ_COMPLAINTRECORD.created
  is '创建日期';
comment on column OSECD.BZ_COMPLAINTRECORD.createby
  is '创建者';
comment on column OSECD.BZ_COMPLAINTRECORD.updated
  is '更新日期';
comment on column OSECD.BZ_COMPLAINTRECORD.updateby
  is '更新者';
alter table OSECD.BZ_COMPLAINTRECORD
  add constraint PK_COMPLAINTRECORDID primary key (COMPLAINTRECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_COMPLAINTSLD
prompt ==============================
prompt
create table OSECD.BZ_COMPLAINTSLD
(
  recordid        VARCHAR2(36) not null,
  orgid           VARCHAR2(36),
  routeid         VARCHAR2(36),
  routename       VARCHAR2(60),
  busid           VARCHAR2(36),
  busselfid       VARCHAR2(20),
  cardid          VARCHAR2(20),
  driverid        VARCHAR2(36),
  drivername      VARCHAR2(20),
  acceptancetime  DATE,
  complaints_type VARCHAR2(2),
  complaints_desc VARCHAR2(2000),
  isaccepted      CHAR(1),
  handledtime     DATE,
  isreply         CHAR(1),
  issatisfied     CHAR(1)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.BZ_COMPLAINTSLD.recordid
  is '记录编号';
comment on column OSECD.BZ_COMPLAINTSLD.orgid
  is '组织编号';
comment on column OSECD.BZ_COMPLAINTSLD.routeid
  is '线路编号';
comment on column OSECD.BZ_COMPLAINTSLD.routename
  is '线路名称';
comment on column OSECD.BZ_COMPLAINTSLD.busid
  is '车辆编号';
comment on column OSECD.BZ_COMPLAINTSLD.busselfid
  is '车辆自编号';
comment on column OSECD.BZ_COMPLAINTSLD.cardid
  is '车牌号';
comment on column OSECD.BZ_COMPLAINTSLD.drivername
  is '驾驶员姓名';
comment on column OSECD.BZ_COMPLAINTSLD.acceptancetime
  is '受理时间';
comment on column OSECD.BZ_COMPLAINTSLD.complaints_type
  is '投诉类型。1-服务态度差、2-不安全行驶、3-到站不停车下客、4-擅自改道行驶、5-乘务员不报站、6-多收费、7-不准点、8-拒载、9-偷班、10-甩站';
comment on column OSECD.BZ_COMPLAINTSLD.complaints_desc
  is '投诉描述';
comment on column OSECD.BZ_COMPLAINTSLD.isaccepted
  is '是否受理。1是,0否';
comment on column OSECD.BZ_COMPLAINTSLD.handledtime
  is '处理时间';
comment on column OSECD.BZ_COMPLAINTSLD.isreply
  is '是否回复。1是,0否';
comment on column OSECD.BZ_COMPLAINTSLD.issatisfied
  is '是否满意。1是,0否';
create index OSECD.IX_COMPLAINTS on OSECD.BZ_COMPLAINTSLD (HANDLEDTIME, ORGID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_COMPLAINTSLD
  add constraint PK_RECORDID primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_COSTACCOUNTINGCRITERION
prompt =========================================
prompt
create table OSECD.BZ_COSTACCOUNTINGCRITERION
(
  costaccountingcriterionid VARCHAR2(50) not null,
  regioncode                VARCHAR2(50) default 0,
  costaccvehicletypeid      VARCHAR2(50),
  costaccountingitemid      VARCHAR2(50),
  criterionvalue            NUMBER(8,2),
  criterionunit             CHAR(1) default 0,
  startndate                DATE,
  enddate                   DATE,
  orgid                     VARCHAR2(50),
  routeid                   VARCHAR2(50),
  subrouteid                VARCHAR2(50),
  segmentid                 VARCHAR2(50),
  isactive                  CHAR(1) default 1,
  verifystatus              CHAR(1) default 0,
  verifyby                  VARCHAR2(50),
  verifydate                DATE,
  verifymemos               NVARCHAR2(255),
  memos                     NVARCHAR2(255),
  created                   DATE,
  createby                  VARCHAR2(50),
  updated                   DATE,
  updateby                  VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_COSTACCOUNTINGCRITERION
  is '成本补贴核算标准记录表';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.costaccountingcriterionid
  is '成本补贴核算标准主键ID';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.regioncode
  is '辖区代码(对应字典REGIONAREA)';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.costaccvehicletypeid
  is '对应成本补贴核算车型主键ID';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.costaccountingitemid
  is '对应成本补贴核算项目主键ID';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.criterionvalue
  is '项目标准值';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.criterionunit
  is '单位(预留，0元，1比例)';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.startndate
  is '有效开始日期';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.enddate
  is '有效结束日期';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.orgid
  is '企业ID(预留)';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.routeid
  is '线路ID(预留)';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.subrouteid
  is '子线路ID(预留)';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.segmentid
  is '单程ID(预留)';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.verifyby
  is '审核人';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.verifydate
  is '审核时间';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.verifymemos
  is '审核备注';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.memos
  is '备注';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.created
  is '创建日期';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.createby
  is '创建者';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.updated
  is '更新日期';
comment on column OSECD.BZ_COSTACCOUNTINGCRITERION.updateby
  is '更新者';
alter table OSECD.BZ_COSTACCOUNTINGCRITERION
  add constraint PK_COSTACCOUNTINGCRITERIONID primary key (COSTACCOUNTINGCRITERIONID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_COSTACCOUNTINGITEM
prompt ====================================
prompt
create table OSECD.BZ_COSTACCOUNTINGITEM
(
  costaccountingitemid VARCHAR2(50) not null,
  regioncode           VARCHAR2(50) default 0,
  itemno               NUMBER(8),
  itemname             NVARCHAR2(200),
  itemtype             VARCHAR2(10) default 1,
  itemlevel            CHAR(1) default 1,
  costaccitemname      NVARCHAR2(200),
  iscostaccitem        CHAR(1) default 1,
  startndate           DATE,
  enddate              DATE,
  orgid                VARCHAR2(50),
  routeid              VARCHAR2(50),
  subrouteid           VARCHAR2(50),
  segmentid            VARCHAR2(50),
  parentitemid         VARCHAR2(50),
  isactive             CHAR(1) default 1,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  verifymemos          NVARCHAR2(255),
  memos                NVARCHAR2(255),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_COSTACCOUNTINGITEM
  is '成本补贴核算项目记录表';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.costaccountingitemid
  is '成本补贴核算项目主键ID';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.regioncode
  is '辖区代码(对应字典REGIONAREA)';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.itemno
  is '核算项目序号';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.itemname
  is '核算项目名称';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.itemtype
  is '成本核算项目类别(对应字典COSTACCITEMTYPE，1日车均费用，2百公里费用，3平均百公里燃耗，4燃耗比例)';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.itemlevel
  is '成本核算项目等级(对应字典COSTACCITEMLEVEL，1单项成本，2多项合计)';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.costaccitemname
  is '对应成本核算项目名称';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.iscostaccitem
  is '是否成本核算项目(0否，1是)';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.startndate
  is '有效开始日期';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.enddate
  is '有效结束日期';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.orgid
  is '企业ID(预留)';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.routeid
  is '线路ID(预留)';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.subrouteid
  is '子线路ID(预留)';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.segmentid
  is '单程ID(预留)';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.parentitemid
  is '上级项目ID(预留)';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.verifyby
  is '审核人';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.verifydate
  is '审核时间';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.verifymemos
  is '审核备注';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.memos
  is '备注';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.created
  is '创建日期';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.createby
  is '创建者';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.updated
  is '更新日期';
comment on column OSECD.BZ_COSTACCOUNTINGITEM.updateby
  is '更新者';
alter table OSECD.BZ_COSTACCOUNTINGITEM
  add constraint PK_COSTACCOUNTINGITEMID primary key (COSTACCOUNTINGITEMID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_COSTACCVEHICLEARCHIVE
prompt =======================================
prompt
create table OSECD.BZ_COSTACCVEHICLEARCHIVE
(
  costaccvehiclearchiveid VARCHAR2(50) not null,
  regioncode              VARCHAR2(50) default 0,
  costaccvehicletypeid    VARCHAR2(50),
  orgid                   VARCHAR2(50),
  routeid                 VARCHAR2(50),
  subrouteid              VARCHAR2(50),
  segmentid               VARCHAR2(50),
  busid                   VARCHAR2(50),
  isactive                CHAR(1) default 1,
  verifystatus            CHAR(1) default 0,
  verifyby                VARCHAR2(50),
  verifydate              DATE,
  verifymemos             NVARCHAR2(255),
  memos                   NVARCHAR2(255),
  created                 DATE,
  createby                VARCHAR2(50),
  updated                 DATE,
  updateby                VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_COSTACCVEHICLEARCHIVE
  is '成本补贴核算车辆归档表';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.costaccvehiclearchiveid
  is '成本补贴核算车辆归档主键ID';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.regioncode
  is '辖区代码(对应字典REGIONAREA)';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.costaccvehicletypeid
  is '对应成本补贴核算车型主键ID';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.orgid
  is '企业ID';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.routeid
  is '线路ID';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.subrouteid
  is '子线路ID(预留)';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.segmentid
  is '单程ID(预留)';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.busid
  is '车辆ID';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.verifyby
  is '审核人';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.verifydate
  is '审核时间';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.verifymemos
  is '审核备注';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.memos
  is '备注';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.created
  is '创建日期';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.createby
  is '创建者';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.updated
  is '更新日期';
comment on column OSECD.BZ_COSTACCVEHICLEARCHIVE.updateby
  is '更新者';
alter table OSECD.BZ_COSTACCVEHICLEARCHIVE
  add constraint PK_COSTACCVEHICLEARCHIVEID primary key (COSTACCVEHICLEARCHIVEID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_COSTACCVEHICLETYPE
prompt ====================================
prompt
create table OSECD.BZ_COSTACCVEHICLETYPE
(
  costaccvehicletypeid VARCHAR2(50) not null,
  regioncode           VARCHAR2(50) default 0,
  vehicletypename      NVARCHAR2(200),
  startndate           DATE,
  enddate              DATE,
  orgid                VARCHAR2(50),
  routeid              VARCHAR2(50),
  subrouteid           VARCHAR2(50),
  segmentid            VARCHAR2(50),
  buslengthmin         NUMBER(8,2),
  buslengthmax         NUMBER(8,2),
  busfueltype          VARCHAR2(10),
  busagemin            NUMBER(8),
  busagemax            NUMBER(8),
  usedatemin           DATE,
  usedatemax           DATE,
  ismorningrushhour    CHAR(1),
  isnightrushhour      CHAR(1),
  issingleseq          CHAR(1),
  isactive             CHAR(1) default 1,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  verifymemos          NVARCHAR2(255),
  memos                NVARCHAR2(255),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_COSTACCVEHICLETYPE
  is '成本补贴核算车型记录表';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.costaccvehicletypeid
  is '成本补贴核算车型主键ID';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.regioncode
  is '辖区代码(对应字典REGIONAREA)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.vehicletypename
  is '车型描述';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.startndate
  is '有效开始日期';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.enddate
  is '有效结束日期';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.orgid
  is '企业ID(预留)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.routeid
  is '线路ID(预留)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.subrouteid
  is '子线路ID(预留)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.segmentid
  is '单程ID(预留)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.buslengthmin
  is '车辆长度最小值(米)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.buslengthmax
  is '车辆长度最大值(米)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.busfueltype
  is '车辆燃料类型(对应字典FUELTYPE)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.busagemin
  is '车龄最小值(年)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.busagemax
  is '车龄最大值(年)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.usedatemin
  is '车辆启用日期最小值';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.usedatemax
  is '车辆启用日期最大值';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.ismorningrushhour
  is '是否早高峰(0否，1是)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.isnightrushhour
  is '是否晚高峰(0否，1是)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.issingleseq
  is '是否单班(0否，1是)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.verifyby
  is '审核人';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.verifydate
  is '审核时间';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.verifymemos
  is '审核备注';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.memos
  is '备注';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.created
  is '创建日期';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.createby
  is '创建者';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.updated
  is '更新日期';
comment on column OSECD.BZ_COSTACCVEHICLETYPE.updateby
  is '更新者';
alter table OSECD.BZ_COSTACCVEHICLETYPE
  add constraint PK_COSTACCVEHICLETYPEID primary key (COSTACCVEHICLETYPEID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_COSTS
prompt =======================
prompt
create table OSECD.BZ_COSTS
(
  recordid   VARCHAR2(36) not null,
  orgid      VARCHAR2(36),
  routeid    VARCHAR2(20),
  busid      VARCHAR2(36),
  buscardid  VARCHAR2(20),
  costfstype VARCHAR2(2),
  costcount  NUMBER(10) default 0,
  totalcost  NUMBER(10,2) default 0,
  actdate    DATE,
  recdate    DATE default SYSDATE,
  memos      VARCHAR2(255)
)
partition by range (ACTDATE)
(
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.BZ_COSTS
  is '其他成本表';
comment on column OSECD.BZ_COSTS.recordid
  is '记录ID';
comment on column OSECD.BZ_COSTS.orgid
  is '组织编号';
comment on column OSECD.BZ_COSTS.routeid
  is '线路编号';
comment on column OSECD.BZ_COSTS.busid
  is '车辆编号';
comment on column OSECD.BZ_COSTS.buscardid
  is '车牌号';
comment on column OSECD.BZ_COSTS.costfstype
  is '成本类型,字典COSTTYPE';
comment on column OSECD.BZ_COSTS.costcount
  is '成本数量';
comment on column OSECD.BZ_COSTS.totalcost
  is '成本金额';
comment on column OSECD.BZ_COSTS.actdate
  is '业务时间';
comment on column OSECD.BZ_COSTS.recdate
  is '记录日期';
comment on column OSECD.BZ_COSTS.memos
  is '备注';

prompt
prompt Creating table BZ_DISPATCHCOMMAND
prompt =================================
prompt
create table OSECD.BZ_DISPATCHCOMMAND
(
  recordid         VARCHAR2(36) not null,
  dispatchid       VARCHAR2(36),
  emergencyeventid VARCHAR2(36),
  dispatchdesc     VARCHAR2(1000),
  dispatchorgid    VARCHAR2(36),
  sendtime         DATE,
  sendstatus       VARCHAR2(2),
  answerstatus     VARCHAR2(2),
  created          DATE,
  createdby        VARCHAR2(36),
  updated          DATE,
  updatedby        VARCHAR2(36)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_DISPATCHCOMMAND
  is '调动命令发送记录表';
comment on column OSECD.BZ_DISPATCHCOMMAND.recordid
  is '记录编号';
comment on column OSECD.BZ_DISPATCHCOMMAND.dispatchid
  is '调度命令编号';
comment on column OSECD.BZ_DISPATCHCOMMAND.emergencyeventid
  is '应急事件编号';
comment on column OSECD.BZ_DISPATCHCOMMAND.dispatchdesc
  is '调度命令描述';
comment on column OSECD.BZ_DISPATCHCOMMAND.dispatchorgid
  is '调度命令接收公司';
comment on column OSECD.BZ_DISPATCHCOMMAND.sendtime
  is '调度命令发送时间';
comment on column OSECD.BZ_DISPATCHCOMMAND.sendstatus
  is '调度命令发送状态，1-待发送，2-已发送';
comment on column OSECD.BZ_DISPATCHCOMMAND.answerstatus
  is '调度命令应答状态，1-待应答，2-同意执行，3-拒绝执行';
comment on column OSECD.BZ_DISPATCHCOMMAND.created
  is '创建时间';
comment on column OSECD.BZ_DISPATCHCOMMAND.createdby
  is '创建人';
comment on column OSECD.BZ_DISPATCHCOMMAND.updated
  is '更新时间';
comment on column OSECD.BZ_DISPATCHCOMMAND.updatedby
  is '更新人';
create index OSECD.IX_DISPATCH on OSECD.BZ_DISPATCHCOMMAND (EMERGENCYEVENTID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_DISPATCHCOMMAND
  add constraint PK_DISPATCH primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_DRIVERDUTYLD
prompt ==============================
prompt
create table OSECD.BZ_DRIVERDUTYLD
(
  dutyid               VARCHAR2(25) not null,
  routeid              NUMBER(8) not null,
  empid                VARCHAR2(20) not null,
  execdate             DATE,
  onworktime           DATE,
  offworktime          DATE,
  realonworktime       DATE,
  realoffworktime      DATE,
  executestate         VARCHAR2(1),
  onworkdisparitytime  VARCHAR2(4),
  offworkdisparitytime VARCHAR2(4),
  onworkstatus         VARCHAR2(2),
  offworkstatus        VARCHAR2(2),
  recdate              DATE default sysdate,
  avoidchecktype       VARCHAR2(2),
  memo                 VARCHAR2(256),
  isactive             CHAR(1),
  isaptscheck          VARCHAR2(2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_DRIVERDUTYLD
  is '驾驶员考勤信息表';
comment on column OSECD.BZ_DRIVERDUTYLD.dutyid
  is '序号';
comment on column OSECD.BZ_DRIVERDUTYLD.routeid
  is '线路ID';
comment on column OSECD.BZ_DRIVERDUTYLD.empid
  is '员工ID';
comment on column OSECD.BZ_DRIVERDUTYLD.execdate
  is '执行日期';
comment on column OSECD.BZ_DRIVERDUTYLD.onworktime
  is '上班时间';
comment on column OSECD.BZ_DRIVERDUTYLD.offworktime
  is '下班时间';
comment on column OSECD.BZ_DRIVERDUTYLD.realonworktime
  is '实际上班时间';
comment on column OSECD.BZ_DRIVERDUTYLD.realoffworktime
  is '实际下班时间';
comment on column OSECD.BZ_DRIVERDUTYLD.executestate
  is '执行状态';
comment on column OSECD.BZ_DRIVERDUTYLD.onworkdisparitytime
  is '员工实际刷卡时间与计划上班时间之差值(分钟)';
comment on column OSECD.BZ_DRIVERDUTYLD.offworkdisparitytime
  is '员工实际刷卡时间与计划下班时间之差值(分钟)';
comment on column OSECD.BZ_DRIVERDUTYLD.onworkstatus
  is '上班考勤状态 0--正常 1--迟到';
comment on column OSECD.BZ_DRIVERDUTYLD.offworkstatus
  is '下班考勤状态 0--正常 1--早退';
comment on column OSECD.BZ_DRIVERDUTYLD.recdate
  is '记录时间';
comment on column OSECD.BZ_DRIVERDUTYLD.avoidchecktype
  is '默认0表示不免核，1表示免核上班，2表示免核下班，3表示上下班全免';
comment on column OSECD.BZ_DRIVERDUTYLD.memo
  is '备注';
comment on column OSECD.BZ_DRIVERDUTYLD.isactive
  is '是否有效';
comment on column OSECD.BZ_DRIVERDUTYLD.isaptscheck
  is '是否企业确认：0-未确认，1-已确认';
alter table OSECD.BZ_DRIVERDUTYLD
  add constraint PK_DRIVERDUTY primary key (DUTYID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_DRIVESTAND
prompt ============================
prompt
create table OSECD.BZ_DRIVESTAND
(
  recid       VARCHAR2(36),
  busid       VARCHAR2(10),
  buscardid   VARCHAR2(10),
  violdate    DATE,
  empid       VARCHAR2(20),
  empname     VARCHAR2(20),
  violatetype VARCHAR2(2),
  violatename VARCHAR2(200),
  result      VARCHAR2(1),
  relultmeno  VARCHAR2(200)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_DRIVESTAND
  is '行车规范表';
comment on column OSECD.BZ_DRIVESTAND.recid
  is 'ID';
comment on column OSECD.BZ_DRIVESTAND.busid
  is '车辆ID';
comment on column OSECD.BZ_DRIVESTAND.buscardid
  is '车牌号';
comment on column OSECD.BZ_DRIVESTAND.violdate
  is '日期';
comment on column OSECD.BZ_DRIVESTAND.empid
  is '员工号';
comment on column OSECD.BZ_DRIVESTAND.empname
  is '员工姓名';
comment on column OSECD.BZ_DRIVESTAND.violatetype
  is '违章类型';
comment on column OSECD.BZ_DRIVESTAND.violatename
  is '违章说明';
comment on column OSECD.BZ_DRIVESTAND.result
  is '是否处理 1已处理 0 未处理';
comment on column OSECD.BZ_DRIVESTAND.relultmeno
  is '处理结果';

prompt
prompt Creating table BZ_EMERGENCYCONTACTS
prompt ===================================
prompt
create table OSECD.BZ_EMERGENCYCONTACTS
(
  emergencycontactsid VARCHAR2(50) not null,
  empname             NVARCHAR2(100),
  empsex              CHAR(1),
  emporg              NVARCHAR2(255),
  empaddress          NVARCHAR2(255),
  empemail            NVARCHAR2(255),
  cellphoneno         NVARCHAR2(255),
  cellphoneno2        NVARCHAR2(255),
  telephoneno         NVARCHAR2(255),
  telephoneno2        NVARCHAR2(255),
  isactive            CHAR(1) default 1,
  verifystatus        CHAR(1) default 0,
  verifyby            VARCHAR2(50),
  verifydate          DATE,
  memos               NVARCHAR2(255),
  created             DATE,
  createby            VARCHAR2(50),
  updated             DATE,
  updateby            VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_EMERGENCYCONTACTS
  is '应急通讯录管理表';
comment on column OSECD.BZ_EMERGENCYCONTACTS.emergencycontactsid
  is '应急通讯录主键ID';
comment on column OSECD.BZ_EMERGENCYCONTACTS.empname
  is '联系人姓名';
comment on column OSECD.BZ_EMERGENCYCONTACTS.empsex
  is '联系人性别(对应字典SEX，1男，2女)';
comment on column OSECD.BZ_EMERGENCYCONTACTS.emporg
  is '联系人单位';
comment on column OSECD.BZ_EMERGENCYCONTACTS.empaddress
  is '联系人地址';
comment on column OSECD.BZ_EMERGENCYCONTACTS.empemail
  is '联系人邮件';
comment on column OSECD.BZ_EMERGENCYCONTACTS.cellphoneno
  is '联系人手机';
comment on column OSECD.BZ_EMERGENCYCONTACTS.cellphoneno2
  is '联系人手机2(备用)';
comment on column OSECD.BZ_EMERGENCYCONTACTS.telephoneno
  is '联系人座机';
comment on column OSECD.BZ_EMERGENCYCONTACTS.telephoneno2
  is '联系人座机2(备用)';
comment on column OSECD.BZ_EMERGENCYCONTACTS.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_EMERGENCYCONTACTS.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_EMERGENCYCONTACTS.verifyby
  is '审核人';
comment on column OSECD.BZ_EMERGENCYCONTACTS.verifydate
  is '审核时间';
comment on column OSECD.BZ_EMERGENCYCONTACTS.memos
  is '备注';
comment on column OSECD.BZ_EMERGENCYCONTACTS.created
  is '创建日期';
comment on column OSECD.BZ_EMERGENCYCONTACTS.createby
  is '创建者';
comment on column OSECD.BZ_EMERGENCYCONTACTS.updated
  is '更新日期';
comment on column OSECD.BZ_EMERGENCYCONTACTS.updateby
  is '更新者';
alter table OSECD.BZ_EMERGENCYCONTACTS
  add constraint PK_EMERGENCYCONTACTSID primary key (EMERGENCYCONTACTSID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_EMERGENCYDETAIL
prompt =================================
prompt
create table OSECD.BZ_EMERGENCYDETAIL
(
  emergencydetailid  VARCHAR2(50) not null,
  emergencyrelatedid VARCHAR2(50),
  datatype           CHAR(1) default 1,
  routeid            VARCHAR2(50),
  routename          NVARCHAR2(255),
  orgid              VARCHAR2(50),
  busid              VARCHAR2(50),
  buscard            NVARCHAR2(50),
  startdate          DATE,
  enddate            DATE,
  isactive           CHAR(1) default 1,
  verifystatus       CHAR(1) default 0,
  verifyby           VARCHAR2(50),
  verifydate         DATE,
  memos              NVARCHAR2(255),
  created            DATE,
  createby           VARCHAR2(50),
  updated            DATE,
  updateby           VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_EMERGENCYDETAIL
  is '应急保障监管线路详情表';
comment on column OSECD.BZ_EMERGENCYDETAIL.emergencydetailid
  is '应急保障监管线路详情主键ID';
comment on column OSECD.BZ_EMERGENCYDETAIL.emergencyrelatedid
  is '对应应急保障监管任务项目关系主键ID';
comment on column OSECD.BZ_EMERGENCYDETAIL.datatype
  is '数据类别(1仅监管线路，2监管线路及车辆)';
comment on column OSECD.BZ_EMERGENCYDETAIL.routeid
  is '监管线路ID';
comment on column OSECD.BZ_EMERGENCYDETAIL.routename
  is '监管线路名称';
comment on column OSECD.BZ_EMERGENCYDETAIL.orgid
  is '所属企业ID';
comment on column OSECD.BZ_EMERGENCYDETAIL.busid
  is '监管车辆ID';
comment on column OSECD.BZ_EMERGENCYDETAIL.buscard
  is '监管车辆车牌号';
comment on column OSECD.BZ_EMERGENCYDETAIL.startdate
  is '监管开始时间';
comment on column OSECD.BZ_EMERGENCYDETAIL.enddate
  is '监管结束时间';
comment on column OSECD.BZ_EMERGENCYDETAIL.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_EMERGENCYDETAIL.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_EMERGENCYDETAIL.verifyby
  is '审核人';
comment on column OSECD.BZ_EMERGENCYDETAIL.verifydate
  is '审核时间';
comment on column OSECD.BZ_EMERGENCYDETAIL.memos
  is '备注';
comment on column OSECD.BZ_EMERGENCYDETAIL.created
  is '创建日期';
comment on column OSECD.BZ_EMERGENCYDETAIL.createby
  is '创建者';
comment on column OSECD.BZ_EMERGENCYDETAIL.updated
  is '更新日期';
comment on column OSECD.BZ_EMERGENCYDETAIL.updateby
  is '更新者';
alter table OSECD.BZ_EMERGENCYDETAIL
  add constraint PK_EMERGENCYDETAILID primary key (EMERGENCYDETAILID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_EMERGENCYEVENT
prompt ================================
prompt
create table OSECD.BZ_EMERGENCYEVENT
(
  emergencyeventid VARCHAR2(50) not null,
  eventname        NVARCHAR2(255),
  emergencytypeid  VARCHAR2(50),
  eventgrade       CHAR(1),
  startdate        DATE,
  enddate          DATE,
  eventplace       NVARCHAR2(255),
  bottomleftlon    NUMBER(10,5),
  bottomleftlat    NUMBER(10,5),
  toprightlon      NUMBER(10,5),
  toprightlat      NUMBER(10,5),
  weatherstate     NVARCHAR2(200),
  eventloss        NVARCHAR2(255),
  hurtnum          NUMBER(10),
  deadnum          NUMBER(10),
  lossamount       NUMBER(10,2),
  eventcontent     NVARCHAR2(255),
  inputedby        VARCHAR2(50),
  inputeddate      DATE,
  emergencyplanid  VARCHAR2(50),
  actstartdate     DATE,
  actenddate       DATE,
  actunit          NVARCHAR2(200),
  eventstatus      CHAR(1),
  realcrowd        NUMBER(8),
  realroutenum     NUMBER(8),
  realbusnum       NUMBER(8),
  realmaterial     NVARCHAR2(255),
  realorg          NVARCHAR2(255),
  commander        NVARCHAR2(255),
  subcommander     NVARCHAR2(255),
  dealcontent      NVARCHAR2(255),
  isactive         CHAR(1) default 1,
  verifystatus     CHAR(1) default 0,
  verifyby         VARCHAR2(50),
  verifydate       DATE,
  memos            NVARCHAR2(255),
  created          DATE,
  createby         VARCHAR2(50),
  updated          DATE,
  updateby         VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_EMERGENCYEVENT
  is '应急事件记录表';
comment on column OSECD.BZ_EMERGENCYEVENT.emergencyeventid
  is '应急事件主键ID';
comment on column OSECD.BZ_EMERGENCYEVENT.eventname
  is '应急事件名称';
comment on column OSECD.BZ_EMERGENCYEVENT.emergencytypeid
  is '对应应急事件类型主键ID';
comment on column OSECD.BZ_EMERGENCYEVENT.eventgrade
  is '事件等级(对应字典，4一般(Ⅳ级)、3较重(Ⅲ级)、2严重(Ⅱ级)、1特别严重(Ⅰ级))';
comment on column OSECD.BZ_EMERGENCYEVENT.startdate
  is '事件开始(发生)时间';
comment on column OSECD.BZ_EMERGENCYEVENT.enddate
  is '事件结束时间';
comment on column OSECD.BZ_EMERGENCYEVENT.eventplace
  is '事件地点(区域)描述';
comment on column OSECD.BZ_EMERGENCYEVENT.bottomleftlon
  is '项目区域左下经度';
comment on column OSECD.BZ_EMERGENCYEVENT.bottomleftlat
  is '项目区域左下纬度';
comment on column OSECD.BZ_EMERGENCYEVENT.toprightlon
  is '项目区域右上经度';
comment on column OSECD.BZ_EMERGENCYEVENT.toprightlat
  is '项目区域右上纬度';
comment on column OSECD.BZ_EMERGENCYEVENT.weatherstate
  is '天气情况';
comment on column OSECD.BZ_EMERGENCYEVENT.eventloss
  is '事件损失描述';
comment on column OSECD.BZ_EMERGENCYEVENT.hurtnum
  is '受伤人数(人)';
comment on column OSECD.BZ_EMERGENCYEVENT.deadnum
  is '死亡人数(人)';
comment on column OSECD.BZ_EMERGENCYEVENT.lossamount
  is '损失总金额(元)';
comment on column OSECD.BZ_EMERGENCYEVENT.eventcontent
  is '事件内容描述';
comment on column OSECD.BZ_EMERGENCYEVENT.inputedby
  is '事件录入人';
comment on column OSECD.BZ_EMERGENCYEVENT.inputeddate
  is '事件录入时间';
comment on column OSECD.BZ_EMERGENCYEVENT.emergencyplanid
  is '对应应急预案主键ID';
comment on column OSECD.BZ_EMERGENCYEVENT.actstartdate
  is '应急响应启动时间';
comment on column OSECD.BZ_EMERGENCYEVENT.actenddate
  is '应急响应完成时间';
comment on column OSECD.BZ_EMERGENCYEVENT.actunit
  is '应急响应单位';
comment on column OSECD.BZ_EMERGENCYEVENT.eventstatus
  is '事件应急处理状态(0未响应，1进行中，2已完成)';
comment on column OSECD.BZ_EMERGENCYEVENT.realcrowd
  is '疏散人数(人)';
comment on column OSECD.BZ_EMERGENCYEVENT.realroutenum
  is '投入应急线路数(条)';
comment on column OSECD.BZ_EMERGENCYEVENT.realbusnum
  is '投入应急车辆数(辆)';
comment on column OSECD.BZ_EMERGENCYEVENT.realmaterial
  is '投入应急物资';
comment on column OSECD.BZ_EMERGENCYEVENT.realorg
  is '参与应急单位';
comment on column OSECD.BZ_EMERGENCYEVENT.commander
  is '应急指挥小组组长';
comment on column OSECD.BZ_EMERGENCYEVENT.subcommander
  is '应急指挥小组成员';
comment on column OSECD.BZ_EMERGENCYEVENT.dealcontent
  is '应急处置方法';
comment on column OSECD.BZ_EMERGENCYEVENT.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_EMERGENCYEVENT.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_EMERGENCYEVENT.verifyby
  is '审核人';
comment on column OSECD.BZ_EMERGENCYEVENT.verifydate
  is '审核时间';
comment on column OSECD.BZ_EMERGENCYEVENT.memos
  is '备注';
comment on column OSECD.BZ_EMERGENCYEVENT.created
  is '创建日期';
comment on column OSECD.BZ_EMERGENCYEVENT.createby
  is '创建者';
comment on column OSECD.BZ_EMERGENCYEVENT.updated
  is '更新日期';
comment on column OSECD.BZ_EMERGENCYEVENT.updateby
  is '更新者';
alter table OSECD.BZ_EMERGENCYEVENT
  add constraint PK_EMERGENCYEVENTID primary key (EMERGENCYEVENTID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_EMERGENCYEVENTAREA
prompt ====================================
prompt
create table OSECD.BZ_EMERGENCYEVENTAREA
(
  emergencyeventareaid VARCHAR2(50) not null,
  emergencyeventid     VARCHAR2(50),
  areatype             CHAR(1) default 1,
  areadesc             NVARCHAR2(255),
  stationid            VARCHAR2(50),
  bottomleftlon        NUMBER(10,5),
  bottomleftlat        NUMBER(10,5),
  toprightlon          NUMBER(10,5),
  toprightlat          NUMBER(10,5),
  isactive             CHAR(1) default 1,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  memos                NVARCHAR2(255),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_EMERGENCYEVENTAREA
  is '应急事件区域表';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.emergencyeventareaid
  is '应急事件区域主键ID';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.emergencyeventid
  is '对应应急事件主键ID';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.areatype
  is '区域类型(1人工绘制，2固定站点)';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.areadesc
  is '事件地点(区域)描述';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.stationid
  is '站点ID';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.bottomleftlon
  is '区域左下经度';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.bottomleftlat
  is '区域左下纬度';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.toprightlon
  is '区域右上经度';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.toprightlat
  is '区域右上纬度';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.verifyby
  is '审核人';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.verifydate
  is '审核时间';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.memos
  is '备注';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.created
  is '创建日期';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.createby
  is '创建者';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.updated
  is '更新日期';
comment on column OSECD.BZ_EMERGENCYEVENTAREA.updateby
  is '更新者';
alter table OSECD.BZ_EMERGENCYEVENTAREA
  add constraint PK_EMERGENCYEVENTAREAID primary key (EMERGENCYEVENTAREAID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_EMERGENCYITEM
prompt ===============================
prompt
create table OSECD.BZ_EMERGENCYITEM
(
  emergencyitemid VARCHAR2(50) not null,
  itemno          NUMBER(10),
  itemname        NVARCHAR2(255),
  itemplace       NVARCHAR2(255),
  bottomleftlon   NUMBER(10,5),
  bottomleftlat   NUMBER(10,5),
  toprightlon     NUMBER(10,5),
  toprightlat     NUMBER(10,5),
  isactive        CHAR(1) default 1,
  verifystatus    CHAR(1) default 0,
  verifyby        VARCHAR2(50),
  verifydate      DATE,
  memos           NVARCHAR2(255),
  created         DATE,
  createby        VARCHAR2(50),
  updated         DATE,
  updateby        VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_EMERGENCYITEM
  is '应急保障监管项目表';
comment on column OSECD.BZ_EMERGENCYITEM.emergencyitemid
  is '应急保障监管项目主键ID';
comment on column OSECD.BZ_EMERGENCYITEM.itemno
  is '项目编号';
comment on column OSECD.BZ_EMERGENCYITEM.itemname
  is '项目名称(如场站、站点或重点监控区域)';
comment on column OSECD.BZ_EMERGENCYITEM.itemplace
  is '项目区域地点';
comment on column OSECD.BZ_EMERGENCYITEM.bottomleftlon
  is '项目区域左下经度';
comment on column OSECD.BZ_EMERGENCYITEM.bottomleftlat
  is '项目区域左下纬度';
comment on column OSECD.BZ_EMERGENCYITEM.toprightlon
  is '项目区域右上经度';
comment on column OSECD.BZ_EMERGENCYITEM.toprightlat
  is '项目区域右上纬度';
comment on column OSECD.BZ_EMERGENCYITEM.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_EMERGENCYITEM.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_EMERGENCYITEM.verifyby
  is '审核人';
comment on column OSECD.BZ_EMERGENCYITEM.verifydate
  is '审核时间';
comment on column OSECD.BZ_EMERGENCYITEM.memos
  is '备注';
comment on column OSECD.BZ_EMERGENCYITEM.created
  is '创建日期';
comment on column OSECD.BZ_EMERGENCYITEM.createby
  is '创建者';
comment on column OSECD.BZ_EMERGENCYITEM.updated
  is '更新日期';
comment on column OSECD.BZ_EMERGENCYITEM.updateby
  is '更新者';
alter table OSECD.BZ_EMERGENCYITEM
  add constraint PK_EMERGENCYITEMID primary key (EMERGENCYITEMID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_EMERGENCYPLAN
prompt ===============================
prompt
create table OSECD.BZ_EMERGENCYPLAN
(
  emergencyplanid  VARCHAR2(50) not null,
  planname         NVARCHAR2(255),
  emergencytypeid  VARCHAR2(50),
  eventgrade       CHAR(1),
  eventplace       NVARCHAR2(255),
  bottomleftlon    NUMBER(10,5),
  bottomleftlat    NUMBER(10,5),
  toprightlon      NUMBER(10,5),
  toprightlat      NUMBER(10,5),
  plancrowd        NUMBER(8),
  planroutenum     NUMBER(8),
  planbusnum       NUMBER(8),
  planorg          NVARCHAR2(255),
  commander        NVARCHAR2(255),
  subcommander     NVARCHAR2(255),
  plancontent      NVARCHAR2(255),
  planlargecontent NVARCHAR2(255),
  madedatetime     DATE,
  madeunit         NVARCHAR2(255),
  madeby           NVARCHAR2(255),
  startdate        DATE,
  enddate          DATE,
  isactive         CHAR(1) default 1,
  verifystatus     CHAR(1) default 0,
  verifyby         VARCHAR2(50),
  verifydate       DATE,
  memos            NVARCHAR2(255),
  created          DATE,
  createby         VARCHAR2(50),
  updated          DATE,
  updateby         VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_EMERGENCYPLAN
  is '应急事件预案表';
comment on column OSECD.BZ_EMERGENCYPLAN.emergencyplanid
  is '应急事件预案主键ID';
comment on column OSECD.BZ_EMERGENCYPLAN.planname
  is '应急预案名称';
comment on column OSECD.BZ_EMERGENCYPLAN.emergencytypeid
  is '对应应急事件类型主键ID';
comment on column OSECD.BZ_EMERGENCYPLAN.eventgrade
  is '对应事件等级(对应字典，4一般(Ⅳ级)、3较大(Ⅲ级)、2重大(Ⅱ级)、1特别重大(Ⅰ级))';
comment on column OSECD.BZ_EMERGENCYPLAN.eventplace
  is '事件地点(区域)描述';
comment on column OSECD.BZ_EMERGENCYPLAN.bottomleftlon
  is '项目区域左下经度';
comment on column OSECD.BZ_EMERGENCYPLAN.bottomleftlat
  is '项目区域左下纬度';
comment on column OSECD.BZ_EMERGENCYPLAN.toprightlon
  is '项目区域右上经度';
comment on column OSECD.BZ_EMERGENCYPLAN.toprightlat
  is '项目区域右上纬度';
comment on column OSECD.BZ_EMERGENCYPLAN.plancrowd
  is '预估疏散人数';
comment on column OSECD.BZ_EMERGENCYPLAN.planroutenum
  is '计划参与应急线路数(条)';
comment on column OSECD.BZ_EMERGENCYPLAN.planbusnum
  is '计划参与应急车辆数(辆)';
comment on column OSECD.BZ_EMERGENCYPLAN.planorg
  is '计划参与应急单位';
comment on column OSECD.BZ_EMERGENCYPLAN.commander
  is '应急指挥小组组长';
comment on column OSECD.BZ_EMERGENCYPLAN.subcommander
  is '应急指挥小组成员';
comment on column OSECD.BZ_EMERGENCYPLAN.plancontent
  is '预案内容描述';
comment on column OSECD.BZ_EMERGENCYPLAN.planlargecontent
  is '预案内容文档';
comment on column OSECD.BZ_EMERGENCYPLAN.madedatetime
  is '编制时间';
comment on column OSECD.BZ_EMERGENCYPLAN.madeunit
  is '编制单位';
comment on column OSECD.BZ_EMERGENCYPLAN.madeby
  is '编制人';
comment on column OSECD.BZ_EMERGENCYPLAN.startdate
  is '预案有效开始日期';
comment on column OSECD.BZ_EMERGENCYPLAN.enddate
  is '预案有效结束日期';
comment on column OSECD.BZ_EMERGENCYPLAN.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_EMERGENCYPLAN.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_EMERGENCYPLAN.verifyby
  is '审核人';
comment on column OSECD.BZ_EMERGENCYPLAN.verifydate
  is '审核时间';
comment on column OSECD.BZ_EMERGENCYPLAN.memos
  is '备注';
comment on column OSECD.BZ_EMERGENCYPLAN.created
  is '创建日期';
comment on column OSECD.BZ_EMERGENCYPLAN.createby
  is '创建者';
comment on column OSECD.BZ_EMERGENCYPLAN.updated
  is '更新日期';
comment on column OSECD.BZ_EMERGENCYPLAN.updateby
  is '更新者';
alter table OSECD.BZ_EMERGENCYPLAN
  add constraint PK_EMERGENCYPLANID primary key (EMERGENCYPLANID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_EMERGENCYRECORD
prompt =================================
prompt
create table OSECD.BZ_EMERGENCYRECORD
(
  emergencyrecordid VARCHAR2(50) not null,
  emergencyname     NVARCHAR2(255),
  startdate         DATE,
  enddate           DATE,
  isactive          CHAR(1) default 1,
  verifystatus      CHAR(1) default 0,
  verifyby          VARCHAR2(50),
  verifydate        DATE,
  memos             NVARCHAR2(255),
  created           DATE,
  createby          VARCHAR2(50),
  updated           DATE,
  updateby          VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_EMERGENCYRECORD
  is '应急保障监管任务表';
comment on column OSECD.BZ_EMERGENCYRECORD.emergencyrecordid
  is '应急保障监管任务主键ID';
comment on column OSECD.BZ_EMERGENCYRECORD.emergencyname
  is '应急保障监管任务名称';
comment on column OSECD.BZ_EMERGENCYRECORD.startdate
  is '任务开始时间';
comment on column OSECD.BZ_EMERGENCYRECORD.enddate
  is '任务结束时间';
comment on column OSECD.BZ_EMERGENCYRECORD.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_EMERGENCYRECORD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_EMERGENCYRECORD.verifyby
  is '审核人';
comment on column OSECD.BZ_EMERGENCYRECORD.verifydate
  is '审核时间';
comment on column OSECD.BZ_EMERGENCYRECORD.memos
  is '备注';
comment on column OSECD.BZ_EMERGENCYRECORD.created
  is '创建日期';
comment on column OSECD.BZ_EMERGENCYRECORD.createby
  is '创建者';
comment on column OSECD.BZ_EMERGENCYRECORD.updated
  is '更新日期';
comment on column OSECD.BZ_EMERGENCYRECORD.updateby
  is '更新者';
alter table OSECD.BZ_EMERGENCYRECORD
  add constraint PK_EMERGENCYRECORDID primary key (EMERGENCYRECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_EMERGENCYRELATED
prompt ==================================
prompt
create table OSECD.BZ_EMERGENCYRELATED
(
  emergencyrelatedid VARCHAR2(50) not null,
  emergencyrecordid  VARCHAR2(50),
  emergencyitemid    VARCHAR2(50),
  sequenceno         NUMBER(10),
  startdate          DATE,
  enddate            DATE,
  isactive           CHAR(1) default 1,
  verifystatus       CHAR(1) default 0,
  verifyby           VARCHAR2(50),
  verifydate         DATE,
  memos              NVARCHAR2(255),
  created            DATE,
  createby           VARCHAR2(50),
  updated            DATE,
  updateby           VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_EMERGENCYRELATED
  is '应急保障监管任务项目关系表';
comment on column OSECD.BZ_EMERGENCYRELATED.emergencyrelatedid
  is '应急保障监管任务项目关系主键ID';
comment on column OSECD.BZ_EMERGENCYRELATED.emergencyrecordid
  is '对应应急保障监管任务主键ID';
comment on column OSECD.BZ_EMERGENCYRELATED.emergencyitemid
  is '对应应急保障监管项目主键ID';
comment on column OSECD.BZ_EMERGENCYRELATED.sequenceno
  is '序号';
comment on column OSECD.BZ_EMERGENCYRELATED.startdate
  is '项目监管开始时间';
comment on column OSECD.BZ_EMERGENCYRELATED.enddate
  is '项目监管结束时间';
comment on column OSECD.BZ_EMERGENCYRELATED.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_EMERGENCYRELATED.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_EMERGENCYRELATED.verifyby
  is '审核人';
comment on column OSECD.BZ_EMERGENCYRELATED.verifydate
  is '审核时间';
comment on column OSECD.BZ_EMERGENCYRELATED.memos
  is '备注';
comment on column OSECD.BZ_EMERGENCYRELATED.created
  is '创建日期';
comment on column OSECD.BZ_EMERGENCYRELATED.createby
  is '创建者';
comment on column OSECD.BZ_EMERGENCYRELATED.updated
  is '更新日期';
comment on column OSECD.BZ_EMERGENCYRELATED.updateby
  is '更新者';
alter table OSECD.BZ_EMERGENCYRELATED
  add constraint PK_EMERGENCYRELATEDID primary key (EMERGENCYRELATEDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_EMERGENCYRPC
prompt ==============================
prompt
create table OSECD.BZ_EMERGENCYRPC
(
  emergencyrpcid      VARCHAR2(50) not null,
  emergencyplanid     VARCHAR2(50),
  emergencycontactsid VARCHAR2(50),
  iscommander         CHAR(1),
  isactive            CHAR(1) default 1,
  verifystatus        CHAR(1) default 0,
  verifyby            VARCHAR2(50),
  verifydate          DATE,
  memos               NVARCHAR2(255),
  created             DATE,
  createby            VARCHAR2(50),
  updated             DATE,
  updateby            VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_EMERGENCYRPC
  is '应急预案通讯录关系表';
comment on column OSECD.BZ_EMERGENCYRPC.emergencyrpcid
  is '应急预案通讯录关系主键ID';
comment on column OSECD.BZ_EMERGENCYRPC.emergencyplanid
  is '应急事件预案主键ID';
comment on column OSECD.BZ_EMERGENCYRPC.emergencycontactsid
  is '应急通讯录主键ID';
comment on column OSECD.BZ_EMERGENCYRPC.iscommander
  is '是否指挥组长';
comment on column OSECD.BZ_EMERGENCYRPC.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_EMERGENCYRPC.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_EMERGENCYRPC.verifyby
  is '审核人';
comment on column OSECD.BZ_EMERGENCYRPC.verifydate
  is '审核时间';
comment on column OSECD.BZ_EMERGENCYRPC.memos
  is '备注';
comment on column OSECD.BZ_EMERGENCYRPC.created
  is '创建日期';
comment on column OSECD.BZ_EMERGENCYRPC.createby
  is '创建者';
comment on column OSECD.BZ_EMERGENCYRPC.updated
  is '更新日期';
comment on column OSECD.BZ_EMERGENCYRPC.updateby
  is '更新者';
alter table OSECD.BZ_EMERGENCYRPC
  add constraint PK_EMERGENCYRPCID primary key (EMERGENCYRPCID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_EMERGENCYSCHEDULE
prompt ===================================
prompt
create table OSECD.BZ_EMERGENCYSCHEDULE
(
  emergencyscheduleid VARCHAR2(50) not null,
  emergencyeventid    VARCHAR2(50),
  orgid               VARCHAR2(50),
  routeid             VARCHAR2(50),
  busid               VARCHAR2(50),
  buscardid           NVARCHAR2(20),
  runstartdate        DATE,
  runenddate          DATE,
  plancapacity        NUMBER(8),
  planstartdate       DATE,
  planinterval        NUMBER(8),
  isactive            CHAR(1) default 1,
  verifystatus        CHAR(1) default 0,
  verifyby            VARCHAR2(50),
  verifydate          DATE,
  memos               NVARCHAR2(255),
  created             DATE,
  createby            VARCHAR2(50),
  updated             DATE,
  updateby            VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_EMERGENCYSCHEDULE
  is '应急事件计划排班表';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.emergencyscheduleid
  is '应急事件计划排班主键ID';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.emergencyeventid
  is '对应应急事件主键ID';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.orgid
  is '组织ID';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.routeid
  is '线路ID';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.busid
  is '车辆ID';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.buscardid
  is '车牌号';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.runstartdate
  is '计划班次执行时间';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.runenddate
  is '计划班次完成时间';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.plancapacity
  is '计划载客数(人)';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.planstartdate
  is '计划开始疏散时间';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.planinterval
  is '计划班次发车间隔(单位：分钟)';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.verifyby
  is '审核人';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.verifydate
  is '审核时间';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.memos
  is '备注';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.created
  is '创建日期';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.createby
  is '创建者';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.updated
  is '更新日期';
comment on column OSECD.BZ_EMERGENCYSCHEDULE.updateby
  is '更新者';
alter table OSECD.BZ_EMERGENCYSCHEDULE
  add constraint PK_EMERGENCYSCHEDULEID primary key (EMERGENCYSCHEDULEID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_EMERGENCYTYPE
prompt ===============================
prompt
create table OSECD.BZ_EMERGENCYTYPE
(
  emergencytypeid VARCHAR2(50) not null,
  typegrade       CHAR(1),
  typecode        VARCHAR2(20),
  typename        NVARCHAR2(200),
  typeno          NUMBER(8),
  parenttypeid    VARCHAR2(50),
  isactive        CHAR(1) default 1,
  verifystatus    CHAR(1) default 0,
  verifyby        VARCHAR2(50),
  verifydate      DATE,
  memos           NVARCHAR2(255),
  created         DATE,
  createby        VARCHAR2(50),
  updated         DATE,
  updateby        VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_EMERGENCYTYPE
  is '应急事件类型表';
comment on column OSECD.BZ_EMERGENCYTYPE.emergencytypeid
  is '应急事件类型主键ID';
comment on column OSECD.BZ_EMERGENCYTYPE.typegrade
  is '类型级别(1一级，2二级，3三级)';
comment on column OSECD.BZ_EMERGENCYTYPE.typecode
  is '类型代码';
comment on column OSECD.BZ_EMERGENCYTYPE.typename
  is '类型名称';
comment on column OSECD.BZ_EMERGENCYTYPE.typeno
  is '类型序号';
comment on column OSECD.BZ_EMERGENCYTYPE.parenttypeid
  is '上级类型主键ID';
comment on column OSECD.BZ_EMERGENCYTYPE.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_EMERGENCYTYPE.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_EMERGENCYTYPE.verifyby
  is '审核人';
comment on column OSECD.BZ_EMERGENCYTYPE.verifydate
  is '审核时间';
comment on column OSECD.BZ_EMERGENCYTYPE.memos
  is '备注';
comment on column OSECD.BZ_EMERGENCYTYPE.created
  is '创建日期';
comment on column OSECD.BZ_EMERGENCYTYPE.createby
  is '创建者';
comment on column OSECD.BZ_EMERGENCYTYPE.updated
  is '更新日期';
comment on column OSECD.BZ_EMERGENCYTYPE.updateby
  is '更新者';
alter table OSECD.BZ_EMERGENCYTYPE
  add constraint PK_EMERGENCYTYPEID primary key (EMERGENCYTYPEID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_FAKESEQUENCELD
prompt ================================
prompt
create table OSECD.BZ_FAKESEQUENCELD
(
  fakesequenceid  VARCHAR2(36) not null,
  orgid           VARCHAR2(36),
  routeid         VARCHAR2(20),
  fakecause       NVARCHAR2(255),
  fakecausedetail NVARCHAR2(255),
  fakemile        NUMBER(5,2),
  driverid        VARCHAR2(36),
  busid           VARCHAR2(36),
  plansendtime    DATE,
  planendtime     DATE,
  rundate         DATE
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_FAKESEQUENCELD
  is '烂班基础信息表';
comment on column OSECD.BZ_FAKESEQUENCELD.fakesequenceid
  is '烂班记录ID';
comment on column OSECD.BZ_FAKESEQUENCELD.orgid
  is '组织编号';
comment on column OSECD.BZ_FAKESEQUENCELD.routeid
  is '线路编号';
comment on column OSECD.BZ_FAKESEQUENCELD.fakecause
  is '烂班原因';
comment on column OSECD.BZ_FAKESEQUENCELD.fakecausedetail
  is '烂班原因明细';
comment on column OSECD.BZ_FAKESEQUENCELD.fakemile
  is '烂班里程';
comment on column OSECD.BZ_FAKESEQUENCELD.driverid
  is '驾驶员编号';
comment on column OSECD.BZ_FAKESEQUENCELD.busid
  is '车辆编号';
comment on column OSECD.BZ_FAKESEQUENCELD.plansendtime
  is '计划发车时间';
comment on column OSECD.BZ_FAKESEQUENCELD.planendtime
  is '计划到达时间';
comment on column OSECD.BZ_FAKESEQUENCELD.rundate
  is '营运日期';
alter table OSECD.BZ_FAKESEQUENCELD
  add constraint PK_FAKESEQUENCEINFO primary key (FAKESEQUENCEID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_FILEDETAIL
prompt ============================
prompt
create table OSECD.BZ_FILEDETAIL
(
  filedetailid   VARCHAR2(50) not null,
  relatedissueid VARCHAR2(50),
  filecategory   VARCHAR2(100),
  filedetailno   NVARCHAR2(20),
  filedetailname NVARCHAR2(255),
  filedetailsize NUMBER(10),
  filedetailpath NVARCHAR2(255),
  isactive       CHAR(1),
  startdate      DATE,
  enddate        DATE,
  uploadedby     VARCHAR2(50),
  uploadeddate   DATE,
  memos          NVARCHAR2(255),
  created        DATE,
  createby       VARCHAR2(50),
  updated        DATE,
  updateby       VARCHAR2(50)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_FILEDETAIL
  is '上传文件详情表';
comment on column OSECD.BZ_FILEDETAIL.filedetailid
  is '上传文件详情主键ID';
comment on column OSECD.BZ_FILEDETAIL.relatedissueid
  is '对应业务数据表主键ID';
comment on column OSECD.BZ_FILEDETAIL.filecategory
  is '对应业务分类(按对应业务分类统一自定义)';
comment on column OSECD.BZ_FILEDETAIL.filedetailno
  is '文件编号';
comment on column OSECD.BZ_FILEDETAIL.filedetailname
  is '文件名称';
comment on column OSECD.BZ_FILEDETAIL.filedetailsize
  is '文件大小(字节)';
comment on column OSECD.BZ_FILEDETAIL.filedetailpath
  is '文件在服务器上的存储路径';
comment on column OSECD.BZ_FILEDETAIL.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_FILEDETAIL.startdate
  is '有效开始日期';
comment on column OSECD.BZ_FILEDETAIL.enddate
  is '有效结束日期';
comment on column OSECD.BZ_FILEDETAIL.uploadedby
  is '上传人';
comment on column OSECD.BZ_FILEDETAIL.uploadeddate
  is '上传时间';
comment on column OSECD.BZ_FILEDETAIL.memos
  is '备注';
comment on column OSECD.BZ_FILEDETAIL.created
  is '创建日期';
comment on column OSECD.BZ_FILEDETAIL.createby
  is '创建者';
comment on column OSECD.BZ_FILEDETAIL.updated
  is '更新日期';
comment on column OSECD.BZ_FILEDETAIL.updateby
  is '更新者';
alter table OSECD.BZ_FILEDETAIL
  add constraint PK_FILEDETAILID primary key (FILEDETAILID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_FILERECORD
prompt ============================
prompt
create table OSECD.BZ_FILERECORD
(
  filerecordid   VARCHAR2(50) not null,
  filerecordname NVARCHAR2(100),
  filerecordno   VARCHAR2(20),
  orgid          VARCHAR2(50),
  isopen         CHAR(1),
  isactive       CHAR(1),
  startdate      DATE,
  enddate        DATE,
  memos          NVARCHAR2(255),
  created        DATE,
  createby       VARCHAR2(50),
  updated        DATE,
  updateby       VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_FILERECORD
  is '上传文件记录表';
comment on column OSECD.BZ_FILERECORD.filerecordid
  is '上传文件记录主键ID';
comment on column OSECD.BZ_FILERECORD.filerecordname
  is '文件记录名称';
comment on column OSECD.BZ_FILERECORD.filerecordno
  is '文件记录编号';
comment on column OSECD.BZ_FILERECORD.orgid
  is '所属组织';
comment on column OSECD.BZ_FILERECORD.isopen
  is '是否开放(0否，1是)';
comment on column OSECD.BZ_FILERECORD.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_FILERECORD.startdate
  is '有效开始日期';
comment on column OSECD.BZ_FILERECORD.enddate
  is '有效结束日期';
comment on column OSECD.BZ_FILERECORD.memos
  is '备注';
comment on column OSECD.BZ_FILERECORD.created
  is '创建日期';
comment on column OSECD.BZ_FILERECORD.createby
  is '创建者';
comment on column OSECD.BZ_FILERECORD.updated
  is '更新日期';
comment on column OSECD.BZ_FILERECORD.updateby
  is '更新者';
alter table OSECD.BZ_FILERECORD
  add constraint PK_FILERECORDID primary key (FILERECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_FINANCIALSUBSIDY
prompt ==================================
prompt
create table OSECD.BZ_FINANCIALSUBSIDY
(
  subsidyid    VARCHAR2(36) not null,
  orgid        VARCHAR2(36),
  orgname      NVARCHAR2(60),
  subsidyfrom  VARCHAR2(2),
  subsidytype  VARCHAR2(2),
  subsidymoney NUMBER,
  isactive     VARCHAR2(2),
  created      DATE,
  createdby    VARCHAR2(36),
  updated      DATE,
  updatedby    VARCHAR2(36),
  actdate      DATE
)
partition by range (ACTDATE)
(
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_BZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.BZ_FINANCIALSUBSIDY
  is '财政补贴明细信息表';
comment on column OSECD.BZ_FINANCIALSUBSIDY.subsidyid
  is '记录编号';
comment on column OSECD.BZ_FINANCIALSUBSIDY.orgid
  is '组织编号';
comment on column OSECD.BZ_FINANCIALSUBSIDY.orgname
  is '组织名称';
comment on column OSECD.BZ_FINANCIALSUBSIDY.subsidyfrom
  is '补贴来源';
comment on column OSECD.BZ_FINANCIALSUBSIDY.subsidytype
  is '补贴类型';
comment on column OSECD.BZ_FINANCIALSUBSIDY.subsidymoney
  is '补贴金额';
comment on column OSECD.BZ_FINANCIALSUBSIDY.isactive
  is '是否有效';
comment on column OSECD.BZ_FINANCIALSUBSIDY.created
  is '创建时间';
comment on column OSECD.BZ_FINANCIALSUBSIDY.createdby
  is '创建者';
comment on column OSECD.BZ_FINANCIALSUBSIDY.updated
  is '更新时间';
comment on column OSECD.BZ_FINANCIALSUBSIDY.updatedby
  is '更新者';
comment on column OSECD.BZ_FINANCIALSUBSIDY.actdate
  is '业务日期';
create index OSECD.IX_SUBSIDY on OSECD.BZ_FINANCIALSUBSIDY (ACTDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_FINANCIALSUBSIDY
  add constraint PK_SUBSIDY primary key (SUBSIDYID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_FSTLSTSHIFTSTATION
prompt ====================================
prompt
create table OSECD.BZ_FSTLSTSHIFTSTATION
(
  busrrid      VARCHAR2(36) not null,
  orgid        VARCHAR2(36),
  routeid      VARCHAR2(20) not null,
  subrouteid   VARCHAR2(20),
  segmentid    VARCHAR2(36),
  rundate      DATE,
  stationid    VARCHAR2(36),
  stationname  VARCHAR2(50),
  rundirection VARCHAR2(2) not null,
  plantime     DATE,
  acttime      DATE,
  islate       CHAR(1),
  busid        VARCHAR2(36) not null,
  buscardno    VARCHAR2(20),
  recdate      DATE,
  memos        VARCHAR2(255),
  difminute    NUMBER(5,1),
  fstlst       CHAR(1),
  routename    VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_FSTLSTSHIFTSTATION
  is '首末班站点准点明细';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.busrrid
  is '序号';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.orgid
  is '组织编号';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.routeid
  is '线路';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.subrouteid
  is '子线路';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.segmentid
  is '单程线路ID';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.rundate
  is '营运日期（不带时间）';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.stationid
  is '站点ID';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.stationname
  is '站点名称';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.rundirection
  is '运行方向 1 上行 2 下行 3 环形';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.plantime
  is '计划时间';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.acttime
  is '实际时间';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.islate
  is '是否准点，1 准点，0 不准点';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.busid
  is '车辆ID';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.buscardno
  is '车牌号';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.recdate
  is '记录时间';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.memos
  is '备注';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.difminute
  is '偏差时间';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.fstlst
  is '首末班标志 F 首班 L末班';
comment on column OSECD.BZ_FSTLSTSHIFTSTATION.routename
  is '线路名称';
create index OSECD.IX_FSTLSTSTATION on OSECD.BZ_FSTLSTSHIFTSTATION (RUNDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_FUEL_LOCALPROVIDE
prompt ===================================
prompt
create table OSECD.BZ_FUEL_LOCALPROVIDE
(
  fuellocalprovideid   VARCHAR2(50) not null,
  orgname              VARCHAR2(50),
  orgid                VARCHAR2(40),
  year                 DATE,
  quarter              NUMBER(1),
  largebusstartcount   NUMBER(5),
  middlebusstartcount  NUMBER(5),
  newenergystartocunt  NUMBER(5),
  largebusendcount     NUMBER(5),
  middlebusendcount    NUMBER(5),
  newenergyendocunt    NUMBER(5),
  largebuscount        NUMBER(5),
  middlbusecount       NUMBER(5),
  largebussubsity      NUMBER(15,2),
  middlebussubsity     NUMBER(15,2),
  paidsubsity          NUMBER(15,2),
  duesubsity           NUMBER(15,2),
  totalsubsity         NUMBER(15,2),
  actualsubsity        NUMBER(15,2),
  largeadvancesubsity  NUMBER(15,2),
  mideleadvancesubsity NUMBER(15,2),
  advancesubsity       NUMBER(15,2),
  actualadvancesubsity NUMBER(15,2),
  uploadtime           DATE default SYSDATE,
  uploadby             VARCHAR2(50)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_FUEL_LOCALPROVIDE
  is '地方燃油补贴发放及预拨情况';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.fuellocalprovideid
  is '地方燃油补贴发放ID';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.orgname
  is '组织名称';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.orgid
  is '组织ID';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.year
  is '年份';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.quarter
  is '季度';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.largebusstartcount
  is '季度初大巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.middlebusstartcount
  is '季度初中巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.newenergystartocunt
  is '季度初新能源车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.largebusendcount
  is '季度初大巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.middlebusendcount
  is '季度末中巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.newenergyendocunt
  is '季度末新能源车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.largebuscount
  is '大巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.middlbusecount
  is '中巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.largebussubsity
  is '大巴补贴额';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.middlebussubsity
  is '中巴补贴额';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.paidsubsity
  is '已预拨油补';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.duesubsity
  is '应拨油补';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.totalsubsity
  is '油补总额';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.actualsubsity
  is '实际拨付';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.largeadvancesubsity
  is '大巴应预拨油补';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.mideleadvancesubsity
  is '中巴应预拨油补';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.advancesubsity
  is '应预拨油补总额';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.actualadvancesubsity
  is '实际预拨油补';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.uploadtime
  is '上传时间';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE.uploadby
  is '上传人';
alter table OSECD.BZ_FUEL_LOCALPROVIDE
  add constraint PK_FUELLOCALPROVIDEID primary key (FUELLOCALPROVIDEID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_FUEL_LOCALPROVIDE_COMMIT
prompt ==========================================
prompt
create table OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT
(
  fileid               VARCHAR2(36),
  fuellocalprovideid   VARCHAR2(50) not null,
  orgname              VARCHAR2(50),
  orgid                VARCHAR2(40),
  year                 DATE,
  quarter              NUMBER(1),
  largebusstartcount   NUMBER(5),
  middlebusstartcount  NUMBER(5),
  newenergystartocunt  NUMBER(5),
  largebusendcount     NUMBER(5),
  middlebusendcount    NUMBER(5),
  newenergyendocunt    NUMBER(5),
  largebuscount        NUMBER(5),
  middlbusecount       NUMBER(5),
  largebussubsity      NUMBER(15,2),
  middlebussubsity     NUMBER(15,2),
  paidsubsity          NUMBER(15,2),
  duesubsity           NUMBER(15,2),
  totalsubsity         NUMBER(15,2),
  actualsubsity        NUMBER(15,2),
  largeadvancesubsity  NUMBER(15,2),
  mideleadvancesubsity NUMBER(15,2),
  advancesubsity       NUMBER(15,2),
  actualadvancesubsity NUMBER(15,2),
  uploadtime           DATE default SYSDATE,
  uploadby             VARCHAR2(50)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT
  is '地方燃油补贴发放及预拨情况';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.fuellocalprovideid
  is '地方燃油补贴发放ID';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.orgname
  is '组织名称';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.orgid
  is '组织ID';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.year
  is '年份';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.quarter
  is '季度';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.largebusstartcount
  is '季度初大巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.middlebusstartcount
  is '季度初中巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.newenergystartocunt
  is '季度初新能源车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.largebusendcount
  is '季度末大巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.middlebusendcount
  is '季度末中巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.newenergyendocunt
  is '季度末新能源车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.largebuscount
  is '大巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.middlbusecount
  is '中巴车辆数';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.largebussubsity
  is '大巴补贴额';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.middlebussubsity
  is '中巴补贴额';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.paidsubsity
  is '已预拨油补';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.duesubsity
  is '应拨油补';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.totalsubsity
  is '油补总额';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.actualsubsity
  is '实际拨付';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.largeadvancesubsity
  is '大巴应预拨油补';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.mideleadvancesubsity
  is '中巴应预拨油补';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.advancesubsity
  is '应预拨油补总额';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.actualadvancesubsity
  is '实际预拨油补';
comment on column OSECD.BZ_FUEL_LOCALPROVIDE_COMMIT.uploadtime
  is '上传时间';

prompt
prompt Creating table BZ_FUEL_NATIONALPROVIDE
prompt ======================================
prompt
create table OSECD.BZ_FUEL_NATIONALPROVIDE
(
  nationalfuelprovide  VARCHAR2(50) not null,
  orgname              VARCHAR2(50),
  orgid                VARCHAR2(40),
  year                 DATE,
  largecount           NUMBER(4),
  middlecount          NUMBER(4),
  standardcount        NUMBER(4),
  paidsubsity          NUMBER(15,2),
  duesubsity           NUMBER(15,2),
  totalsubsity         NUMBER(15,2),
  actualsubsity        NUMBER(15,2),
  dueadvancesubsity    NUMBER(15,2),
  actualadvancesubsity NUMBER(15,2),
  uploadtime           DATE default SYSDATE,
  uploadby             VARCHAR2(50)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_FUEL_NATIONALPROVIDE
  is '国家燃油补贴发放预拨情况';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.nationalfuelprovide
  is '国家燃油补贴发放ID';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.orgname
  is '组织名称';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.orgid
  is '组织ID';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.year
  is '年份';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.largecount
  is '大巴车辆数';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.middlecount
  is '中巴车辆数';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.standardcount
  is '折合标台数';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.paidsubsity
  is '已预拨油补';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.duesubsity
  is '应拨油补';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.totalsubsity
  is '油补总额';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.actualsubsity
  is '实际拨付';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.dueadvancesubsity
  is '应预拨油补';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.actualadvancesubsity
  is '实际预拨油补';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.uploadtime
  is '上传时间';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE.uploadby
  is '上传人';
alter table OSECD.BZ_FUEL_NATIONALPROVIDE
  add constraint PK_NATIONALFUELPROVIDE primary key (NATIONALFUELPROVIDE)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_FUEL_NATIONALPROVIDE_COMMIT
prompt =============================================
prompt
create table OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT
(
  fileid               VARCHAR2(36),
  nationalfuelprovide  VARCHAR2(50) not null,
  orgname              VARCHAR2(50),
  orgid                VARCHAR2(40),
  year                 DATE,
  largecount           NUMBER(4),
  middlecount          NUMBER(4),
  standardcount        NUMBER(4),
  paidsubsity          NUMBER(15,2),
  duesubsity           NUMBER(15,2),
  totalsubsity         NUMBER(15,2),
  actualsubsity        NUMBER(15,2),
  dueadvancesubsity    NUMBER(15,2),
  actualadvancesubsity NUMBER(15,2),
  uploadtime           DATE default SYSDATE,
  uploadby             VARCHAR2(50)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT
  is '国家燃油补贴发放预拨情况';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.nationalfuelprovide
  is '国家燃油补贴发放ID';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.orgname
  is '组织名称';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.orgid
  is '组织ID';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.year
  is '年份';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.largecount
  is '大巴车辆数';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.middlecount
  is '中巴车辆数';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.standardcount
  is '折合标台数';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.paidsubsity
  is '已预拨油补';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.duesubsity
  is '应拨油补';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.totalsubsity
  is '油补总额';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.actualsubsity
  is '实际拨付';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.dueadvancesubsity
  is '应预拨油补';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.actualadvancesubsity
  is '实际预拨油补';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.uploadtime
  is '上传时间';
comment on column OSECD.BZ_FUEL_NATIONALPROVIDE_COMMIT.uploadby
  is '上传人';

prompt
prompt Creating table BZ_FUEL_NATIONALUPLOAD
prompt =====================================
prompt
create table OSECD.BZ_FUEL_NATIONALUPLOAD
(
  nationalfueluploadid VARCHAR2(50) not null,
  orgname              VARCHAR2(50),
  orgid                VARCHAR2(40),
  year                 DATE,
  cardid               NVARCHAR2(20),
  busid                VARCHAR2(36),
  operationid          VARCHAR2(20),
  bustype              VARCHAR2(40),
  busage               NUMBER(5,2),
  emissionstandard     VARCHAR2(20),
  buslength            NUMBER(5,2),
  enginepower          NUMBER(5,2),
  fueltype             VARCHAR2(20),
  changetype           VARCHAR2(20),
  standardnumber       NUMBER(5,2),
  limittimeofyer       VARCHAR2(30),
  operateday           NUMBER(5,2),
  beginmileage         NUMBER(15,2),
  endmileage           NUMBER(15,2),
  totalmileage         NUMBER(15,2),
  averagefuel          NUMBER(5,2),
  totalfuel            NUMBER(15,2),
  uploadtime           DATE default SYSDATE,
  uploadby             VARCHAR2(50)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_FUEL_NATIONALUPLOAD
  is '国家燃油补贴申报上传';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.nationalfueluploadid
  is '国家燃油补贴申报上传ID';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.orgname
  is '组织名称';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.orgid
  is '组织ID';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.year
  is '年份';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.cardid
  is '车牌号';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.busid
  is '车辆ID';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.operationid
  is '营运证号';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.bustype
  is '车辆型号';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.busage
  is '车龄(年)';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.emissionstandard
  is '排放标准';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.buslength
  is '车长（米）';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.enginepower
  is '发动机功率（千瓦）';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.fueltype
  is '燃料类型';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.changetype
  is '变更情况';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.standardnumber
  is '标台数';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.limittimeofyer
  is '年运营期限';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.operateday
  is '实际运营天数';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.beginmileage
  is '年初公里';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.endmileage
  is '年末公里';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.totalmileage
  is '行驶里程';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.averagefuel
  is '平均单耗（升/百公里）';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.totalfuel
  is '油耗总量';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.uploadtime
  is '上传时间';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD.uploadby
  is '上传人';
alter table OSECD.BZ_FUEL_NATIONALUPLOAD
  add constraint PK_NATIONALFUELUPLOADID primary key (NATIONALFUELUPLOADID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_FUEL_NATIONALUPLOAD_COMMIT
prompt ============================================
prompt
create table OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT
(
  fileid               VARCHAR2(36),
  nationalfueluploadid VARCHAR2(50) not null,
  orgname              VARCHAR2(50),
  orgid                VARCHAR2(40),
  year                 DATE,
  cardid               NVARCHAR2(20),
  operationid          VARCHAR2(20),
  bustype              VARCHAR2(40),
  busage               NUMBER(5,2),
  emissionstandard     VARCHAR2(20),
  buslength            NUMBER(5,2),
  enginepower          NUMBER(5,2),
  fueltype             VARCHAR2(20),
  changetype           VARCHAR2(20),
  standardnumber       NUMBER(5,2),
  limittimeofyer       VARCHAR2(30),
  operateday           NUMBER(5,2),
  beginmileage         NUMBER(15,2),
  endmileage           NUMBER(15,2),
  totalmileage         NUMBER(15,2),
  averagefuel          NUMBER(5,2),
  totalfuel            NUMBER(15,2),
  uploadtime           DATE default SYSDATE,
  uploadby             VARCHAR2(50)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT
  is '国家燃油补贴申报上传';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.nationalfueluploadid
  is '国家燃油补贴申报上传ID';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.orgname
  is '组织名称';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.orgid
  is '组织ID';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.year
  is '年份';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.cardid
  is '车牌号';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.operationid
  is '营运证号';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.bustype
  is '车辆型号';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.busage
  is '车龄(年)';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.emissionstandard
  is '排放标准';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.buslength
  is '车长（米）';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.enginepower
  is '发动机功率（千瓦）';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.fueltype
  is '燃料类型';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.changetype
  is '变更情况';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.standardnumber
  is '标台数';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.limittimeofyer
  is '年运营期限';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.operateday
  is '实际运营天数';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.beginmileage
  is '年初公里';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.endmileage
  is '年末公里';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.totalmileage
  is '行驶里程';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.averagefuel
  is '平均单耗（升/百公里）';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.totalfuel
  is '油耗总量';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.uploadtime
  is '上传时间';
comment on column OSECD.BZ_FUEL_NATIONALUPLOAD_COMMIT.uploadby
  is '上传人';

prompt
prompt Creating table BZ_ICCARDINFOLD
prompt ==============================
prompt
create table OSECD.BZ_ICCARDINFOLD
(
  recordid     VARCHAR2(36) not null,
  routeid      VARCHAR2(20),
  busid        VARCHAR2(8),
  iccardid     VARCHAR2(8),
  consumedate  DATE,
  consumetime  DATE,
  consumemoney NUMBER(2),
  iccardtype   VARCHAR2(3),
  ischangebus  CHAR(1)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ICCARDINFOLD
  is 'IC卡刷卡记录表';
comment on column OSECD.BZ_ICCARDINFOLD.recordid
  is '记录ID';
comment on column OSECD.BZ_ICCARDINFOLD.routeid
  is '线路编号';
comment on column OSECD.BZ_ICCARDINFOLD.busid
  is '车辆编号';
comment on column OSECD.BZ_ICCARDINFOLD.iccardid
  is 'ID卡卡号';
comment on column OSECD.BZ_ICCARDINFOLD.consumedate
  is '刷卡日期';
comment on column OSECD.BZ_ICCARDINFOLD.consumetime
  is '刷卡时间';
comment on column OSECD.BZ_ICCARDINFOLD.consumemoney
  is '消费金额';
comment on column OSECD.BZ_ICCARDINFOLD.iccardtype
  is 'IC卡的类型（取字典表的定义）';
comment on column OSECD.BZ_ICCARDINFOLD.ischangebus
  is '是否换乘打卡（1是，0否）';
alter table OSECD.BZ_ICCARDINFOLD
  add constraint PK_ICCARDINFO primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ICCONSUME
prompt ===========================
prompt
create table OSECD.BZ_ICCONSUME
(
  recordid    VARCHAR2(36) not null,
  iccardid    VARCHAR2(36),
  consumedate DATE,
  consumetype VARCHAR2(2),
  consumenum  NUMBER,
  actualnum   NUMBER,
  routeid     VARCHAR2(36),
  routename   NVARCHAR2(20),
  busid       VARCHAR2(36),
  buscardid   NVARCHAR2(20),
  stationid   VARCHAR2(36),
  stationname NVARCHAR2(60)
)
partition by range (CONSUMEDATE)
(
  partition P_20150501 values less than (TO_DATE(' 2015-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.BZ_ICCONSUME
  is 'IC卡刷卡消费记录信息表（行业监管系统表）';
comment on column OSECD.BZ_ICCONSUME.recordid
  is '记录唯一编号';
comment on column OSECD.BZ_ICCONSUME.iccardid
  is 'IC卡编号';
comment on column OSECD.BZ_ICCONSUME.consumedate
  is '消费时间';
comment on column OSECD.BZ_ICCONSUME.consumetype
  is '消费类型（卡类型）';
comment on column OSECD.BZ_ICCONSUME.consumenum
  is '消费金额';
comment on column OSECD.BZ_ICCONSUME.actualnum
  is '实扣金额';
comment on column OSECD.BZ_ICCONSUME.routeid
  is '线路编号';
comment on column OSECD.BZ_ICCONSUME.routename
  is '线路名称';
comment on column OSECD.BZ_ICCONSUME.busid
  is '车辆编号';
comment on column OSECD.BZ_ICCONSUME.buscardid
  is '车牌号';
comment on column OSECD.BZ_ICCONSUME.stationid
  is '站点编号（上车站）';
comment on column OSECD.BZ_ICCONSUME.stationname
  is '站点名称（上车站）';
create index OSECD.IX_BZICCONSUME on OSECD.BZ_ICCONSUME (CONSUMEDATE)
  local;

prompt
prompt Creating table BZ_INCOME
prompt ========================
prompt
create table OSECD.BZ_INCOME
(
  recid       VARCHAR2(36),
  orgid       VARCHAR2(36),
  routeid     VARCHAR2(36),
  busid       VARCHAR2(36),
  buscardno   VARCHAR2(20),
  stationid   VARCHAR2(20),
  datatype    VARCHAR2(2),
  income      NUMBER,
  actdate     DATE,
  recdate     DATE default sysdate,
  stationname VARCHAR2(100),
  datesorce   CHAR(1) default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_INCOME
  is '收入表';
comment on column OSECD.BZ_INCOME.recid
  is 'ID';
comment on column OSECD.BZ_INCOME.orgid
  is '组织编号';
comment on column OSECD.BZ_INCOME.routeid
  is '线路编号';
comment on column OSECD.BZ_INCOME.busid
  is '车辆编号';
comment on column OSECD.BZ_INCOME.buscardno
  is '车牌号';
comment on column OSECD.BZ_INCOME.stationid
  is '站点编号';
comment on column OSECD.BZ_INCOME.datatype
  is '收入类型';
comment on column OSECD.BZ_INCOME.income
  is '收入金额';
comment on column OSECD.BZ_INCOME.actdate
  is '业务日期';
comment on column OSECD.BZ_INCOME.recdate
  is '录入日期';
comment on column OSECD.BZ_INCOME.stationname
  is '站点名称';
comment on column OSECD.BZ_INCOME.datesorce
  is '数据来源 0录入 1结存获得';

prompt
prompt Creating table BZ_INFRASTRUCTURE
prompt ================================
prompt
create table OSECD.BZ_INFRASTRUCTURE
(
  infrastructureid VARCHAR2(50) not null,
  inftype          VARCHAR2(10),
  infname          NVARCHAR2(255),
  location         NVARCHAR2(255),
  locationlon      NUMBER(10,5),
  locationlat      NUMBER(10,5),
  bottomleftlon    NUMBER(10,5),
  bottomleftlat    NUMBER(10,5),
  toprightlon      NUMBER(10,5),
  toprightlat      NUMBER(10,5),
  sumarea          NUMBER(10,2),
  sumcapacity      NUMBER(10),
  infcontent       NVARCHAR2(255),
  memos            NVARCHAR2(255),
  isactive         CHAR(1) default 1,
  verifystatus     CHAR(1) default 0,
  verifyby         VARCHAR2(50),
  verifydate       DATE,
  created          DATE,
  createby         VARCHAR2(50),
  updated          DATE,
  updateby         VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_INFRASTRUCTURE
  is '基础设施记录表';
comment on column OSECD.BZ_INFRASTRUCTURE.infrastructureid
  is '基础设施主键ID';
comment on column OSECD.BZ_INFRASTRUCTURE.inftype
  is '基础设施类别(对应字典INFRASTRUCTURETYPE，1公交换乘枢纽，2站牌，3站亭，4停车场，5保养场，6信息化设施，99其它)';
comment on column OSECD.BZ_INFRASTRUCTURE.infname
  is '基础设施名称';
comment on column OSECD.BZ_INFRASTRUCTURE.location
  is '位置描述';
comment on column OSECD.BZ_INFRASTRUCTURE.locationlon
  is '中心经度(视为单点的设施)';
comment on column OSECD.BZ_INFRASTRUCTURE.locationlat
  is '中心纬度';
comment on column OSECD.BZ_INFRASTRUCTURE.bottomleftlon
  is '区域左下经度(视为区域的设施)';
comment on column OSECD.BZ_INFRASTRUCTURE.bottomleftlat
  is '区域左下纬度';
comment on column OSECD.BZ_INFRASTRUCTURE.toprightlon
  is '区域右上经度';
comment on column OSECD.BZ_INFRASTRUCTURE.toprightlat
  is '区域右上纬度';
comment on column OSECD.BZ_INFRASTRUCTURE.sumarea
  is '总面积(平方米)';
comment on column OSECD.BZ_INFRASTRUCTURE.sumcapacity
  is '总容量(单位视不同类型)';
comment on column OSECD.BZ_INFRASTRUCTURE.infcontent
  is '设施描述';
comment on column OSECD.BZ_INFRASTRUCTURE.memos
  is '备注';
comment on column OSECD.BZ_INFRASTRUCTURE.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_INFRASTRUCTURE.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_INFRASTRUCTURE.verifyby
  is '审核人';
comment on column OSECD.BZ_INFRASTRUCTURE.verifydate
  is '审核时间';
comment on column OSECD.BZ_INFRASTRUCTURE.created
  is '创建日期';
comment on column OSECD.BZ_INFRASTRUCTURE.createby
  is '创建者';
comment on column OSECD.BZ_INFRASTRUCTURE.updated
  is '更新日期';
comment on column OSECD.BZ_INFRASTRUCTURE.updateby
  is '更新者';
alter table OSECD.BZ_INFRASTRUCTURE
  add constraint PK_INFRASTRUCTUREID primary key (INFRASTRUCTUREID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_INFRASTRUCTUREMNGRECORD
prompt =========================================
prompt
create table OSECD.BZ_INFRASTRUCTUREMNGRECORD
(
  infrastructuremngrecordid VARCHAR2(50) not null,
  infrastructureid          VARCHAR2(50),
  infmngtype                VARCHAR2(10),
  startdate                 DATE,
  enddate                   DATE,
  mngcontent                NVARCHAR2(255),
  recorddate                DATE,
  recordby                  VARCHAR2(50),
  memos                     NVARCHAR2(255),
  isactive                  CHAR(1) default 1,
  verifystatus              CHAR(1) default 0,
  verifyby                  VARCHAR2(50),
  verifydate                DATE,
  created                   DATE,
  createby                  VARCHAR2(50),
  updated                   DATE,
  updateby                  VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_INFRASTRUCTUREMNGRECORD
  is '基础设施建管记录表';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.infrastructuremngrecordid
  is '基础设施建管记录主键ID';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.infrastructureid
  is '对应基础设施主键ID';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.infmngtype
  is '建管类别(对应字典INFMNGTYPE，1建设，2维护，3安全记录，4维护记录，5维修记录，99其它)';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.startdate
  is '建管开始时间';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.enddate
  is '建管完成时间';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.mngcontent
  is '建管内容描述';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.recorddate
  is '记录人';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.recordby
  is '记录时间';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.memos
  is '备注';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.verifyby
  is '审核人';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.verifydate
  is '审核时间';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.created
  is '创建日期';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.createby
  is '创建者';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.updated
  is '更新日期';
comment on column OSECD.BZ_INFRASTRUCTUREMNGRECORD.updateby
  is '更新者';
alter table OSECD.BZ_INFRASTRUCTUREMNGRECORD
  add constraint PK_INFRASTRUCTUREMNGRECORDID primary key (INFRASTRUCTUREMNGRECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_MESSAGEDETAIL
prompt ===============================
prompt
create table OSECD.BZ_MESSAGEDETAIL
(
  recordid       VARCHAR2(36) not null,
  sendcode       VARCHAR2(36),
  receiverid     VARCHAR2(36),
  receivername   VARCHAR2(50),
  receivernum    VARCHAR2(20),
  message        VARCHAR2(200),
  plansenddate   DATE,
  plansendtime   DATE,
  actualsenddate DATE,
  actualsendtime DATE,
  sendstatus     VARCHAR2(2),
  sendtype       VARCHAR2(2),
  created        DATE,
  createdby      VARCHAR2(36),
  updated        DATE,
  updatedby      VARCHAR2(36)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_MESSAGEDETAIL
  is '短信发送明细表';
comment on column OSECD.BZ_MESSAGEDETAIL.recordid
  is '记录编号';
comment on column OSECD.BZ_MESSAGEDETAIL.sendcode
  is '发送编号';
comment on column OSECD.BZ_MESSAGEDETAIL.receiverid
  is '接收人编号';
comment on column OSECD.BZ_MESSAGEDETAIL.receivername
  is '接收人姓名';
comment on column OSECD.BZ_MESSAGEDETAIL.receivernum
  is '接收人电话';
comment on column OSECD.BZ_MESSAGEDETAIL.message
  is '信息内容';
comment on column OSECD.BZ_MESSAGEDETAIL.plansenddate
  is '计划发送日期';
comment on column OSECD.BZ_MESSAGEDETAIL.plansendtime
  is '计划发送时间';
comment on column OSECD.BZ_MESSAGEDETAIL.actualsenddate
  is '实际发送日期';
comment on column OSECD.BZ_MESSAGEDETAIL.actualsendtime
  is '实际发送时间';
comment on column OSECD.BZ_MESSAGEDETAIL.sendstatus
  is '发送状态';
comment on column OSECD.BZ_MESSAGEDETAIL.sendtype
  is '发送类型';
comment on column OSECD.BZ_MESSAGEDETAIL.created
  is '创建时间';
comment on column OSECD.BZ_MESSAGEDETAIL.createdby
  is '创建人';
comment on column OSECD.BZ_MESSAGEDETAIL.updated
  is '更新人';
comment on column OSECD.BZ_MESSAGEDETAIL.updatedby
  is '更新时间';
create index OSECD.IX_MESSAGEDETAIL on OSECD.BZ_MESSAGEDETAIL (PLANSENDDATE, SENDSTATUS)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_MESSAGEDETAIL
  add constraint PK_MESSAGEDETAIL primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_MIDDLESTATIONRECORD
prompt =====================================
prompt
create table OSECD.BZ_MIDDLESTATIONRECORD
(
  busrrid              VARCHAR2(36) not null,
  stationid            VARCHAR2(36),
  planarrivetime       DATE,
  actualarrivetime     DATE,
  planarriveinterval   NUMBER,
  actualarriveinterval NUMBER,
  rundatadate          DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_MIDDLESTATIONRECORD
  is '中间站到站间隔记录表';
comment on column OSECD.BZ_MIDDLESTATIONRECORD.busrrid
  is '发车记录表编号';
comment on column OSECD.BZ_MIDDLESTATIONRECORD.stationid
  is '站点编号';
comment on column OSECD.BZ_MIDDLESTATIONRECORD.planarrivetime
  is '计划到站时间';
comment on column OSECD.BZ_MIDDLESTATIONRECORD.actualarrivetime
  is '实际到站时间';
comment on column OSECD.BZ_MIDDLESTATIONRECORD.planarriveinterval
  is '计划到站间隔';
comment on column OSECD.BZ_MIDDLESTATIONRECORD.actualarriveinterval
  is '实际到站间隔';
comment on column OSECD.BZ_MIDDLESTATIONRECORD.rundatadate
  is '运营日期';
create index OSECD.IX_MIDDLESTATION on OSECD.BZ_MIDDLESTATIONRECORD (STATIONID)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_MIDDLESTATIONRECORD
  add constraint PK_MIDDLESTATION primary key (BUSRRID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ORGRUNDATACOMMIT
prompt ==================================
prompt
create table OSECD.BZ_ORGRUNDATACOMMIT
(
  orgrundatacommitid       VARCHAR2(50) not null,
  orgrundatacommituploadid VARCHAR2(50),
  datatype                 CHAR(1) default 2,
  rundate                  DATE,
  rundatechar              VARCHAR2(50),
  orgid                    VARCHAR2(50),
  routeid                  VARCHAR2(50),
  subrouteid               VARCHAR2(50),
  segmentid                VARCHAR2(50),
  passengermile            NUMBER(10,2),
  runemptymile             NUMBER(10,2),
  otheremptymile           NUMBER(10,2),
  summile                  NUMBER(10,2),
  cardpassengernum         NUMBER(10,2),
  cashpassengernum         NUMBER(10,2),
  busnum                   NUMBER(10,2),
  isactive                 CHAR(1) default 1,
  verifystatus             CHAR(1) default 0,
  verifyby                 VARCHAR2(50),
  verifydate               DATE,
  memos                    NVARCHAR2(255),
  retain1                  VARCHAR2(50),
  retain2                  VARCHAR2(50),
  retain3                  VARCHAR2(50),
  retain4                  VARCHAR2(50),
  retain5                  VARCHAR2(50),
  retain6                  VARCHAR2(50),
  retain7                  VARCHAR2(50),
  retain8                  VARCHAR2(50),
  retain9                  VARCHAR2(50),
  retain10                 VARCHAR2(50),
  created                  DATE,
  createby                 VARCHAR2(50),
  updated                  DATE,
  updateby                 VARCHAR2(50),
  commitstatus             CHAR(1),
  commitby                 VARCHAR2(50),
  commitdate               DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ORGRUNDATACOMMIT
  is '企业月度运营汇总数据记录表';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.orgrundatacommitid
  is '企业月度运营汇总数据记录主键ID';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.orgrundatacommituploadid
  is '对应线路月度运营明细数据上传记录主键ID';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.datatype
  is '数据类型(1按日，2按月)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.rundate
  is '业务日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.rundatechar
  is '业务日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.orgid
  is '企业ID';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.routeid
  is '线路ID(备用)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.subrouteid
  is '子线路ID(备用)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.segmentid
  is '单程ID(备用)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.passengermile
  is '月运营载客里程(单位：公里)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.runemptymile
  is '月运营空驶里程(单位：公里)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.otheremptymile
  is '月其它空驶里程(单位：公里)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.summile
  is '月运营总里程(单位：公里)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.cardpassengernum
  is '月刷卡客运量(单位：人次)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.cashpassengernum
  is '月现金客运量(单位：人次)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.busnum
  is '月车辆保有量(单位：辆)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.verifyby
  is '审核人';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.verifydate
  is '审核时间';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.memos
  is '备注';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.retain1
  is '预留字段1';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.retain2
  is '预留字段2';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.retain3
  is '预留字段3';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.retain4
  is '预留字段4';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.retain5
  is '预留字段5';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.retain6
  is '预留字段6';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.retain7
  is '预留字段7';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.retain8
  is '预留字段8';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.retain9
  is '预留字段9';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.retain10
  is '预留字段10';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.created
  is '创建日期';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.createby
  is '创建者';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.updated
  is '更新日期';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.updateby
  is '更新者';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.commitstatus
  is '提交状态(0未提交，1已提交)';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.commitby
  is '提交人';
comment on column OSECD.BZ_ORGRUNDATACOMMIT.commitdate
  is '提交时间';
alter table OSECD.BZ_ORGRUNDATACOMMIT
  add constraint PK_ORGRUNDATACOMMITID primary key (ORGRUNDATACOMMITID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ORGRUNINDICATORPLAN
prompt =====================================
prompt
create table OSECD.BZ_ORGRUNINDICATORPLAN
(
  orgrunindicatorplanid VARCHAR2(50) not null,
  orgtype               CHAR(1) default 1,
  orgid                 VARCHAR2(40),
  routeid               VARCHAR2(20),
  datetype              CHAR(1) default 1,
  rundate               DATE,
  rundatechar           VARCHAR2(20),
  passengermiles        NUMBER(10,2) default 0,
  passengercapacity     NUMBER(10,2) default 0,
  startdate             DATE,
  enddate               DATE,
  verifystatus          CHAR(1) default 0,
  isactive              CHAR(1) default 1,
  memos                 NVARCHAR2(255),
  created               DATE,
  createby              VARCHAR2(50),
  updated               DATE,
  updateby              VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ORGRUNINDICATORPLAN
  is '企业运营指标计划表';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.orgrunindicatorplanid
  is '企业运营指标计划主键ID';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.orgtype
  is '组织类型(1企业，2线路，目前仅设定企业)';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.orgid
  is '企业ID';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.routeid
  is '线路ID(冗余字段，线路设定时使用)';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.datetype
  is '时间类型(1年度，2月度，目前仅设定年度)';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.rundate
  is '运营时间(年度或月度，时间格式)';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.rundatechar
  is '运营时间(年度或月度，字符格式)';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.passengermiles
  is '核定运营载客里程(单位：万公里)';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.passengercapacity
  is '核定客运量(单位：万人次)';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.startdate
  is '有效开始日期';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.enddate
  is '有效结束日期';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.memos
  is '备注';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.created
  is '创建日期';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.createby
  is '创建者';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.updated
  is '更新日期';
comment on column OSECD.BZ_ORGRUNINDICATORPLAN.updateby
  is '更新者';
alter table OSECD.BZ_ORGRUNINDICATORPLAN
  add constraint PK_ORGRUNINDICATORPLANID primary key (ORGRUNINDICATORPLANID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ORGSALARY
prompt ===========================
prompt
create table OSECD.BZ_ORGSALARY
(
  recordid    VARCHAR2(36) not null,
  orgid       VARCHAR2(36),
  orgname     VARCHAR2(80),
  totalsalary NUMBER(10,2),
  jzdate      DATE not null,
  recdate     DATE default SYSDATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ORGSALARY
  is '组织工资总额';
comment on column OSECD.BZ_ORGSALARY.recordid
  is 'ID';
comment on column OSECD.BZ_ORGSALARY.orgid
  is '组织ID';
comment on column OSECD.BZ_ORGSALARY.orgname
  is '组织名称';
comment on column OSECD.BZ_ORGSALARY.totalsalary
  is '工资，单位元';
comment on column OSECD.BZ_ORGSALARY.jzdate
  is '工资月份';
comment on column OSECD.BZ_ORGSALARY.recdate
  is '记录日期';
create index OSECD.IDX_ORGSALARY on OSECD.BZ_ORGSALARY (JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.PK_ORGSALARY on OSECD.BZ_ORGSALARY (ORGID, JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ORGSERVICESCORE
prompt =================================
prompt
create table OSECD.BZ_ORGSERVICESCORE
(
  busrdid  VARCHAR2(36) not null,
  orgid    VARCHAR2(20),
  empid    VARCHAR2(36),
  jzdate   DATE,
  rectime  DATE default SYSDATE,
  score    NUMBER,
  datatype CHAR(1)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ORGSERVICESCORE
  is '企业服务考核结果';
comment on column OSECD.BZ_ORGSERVICESCORE.busrdid
  is 'ID';
comment on column OSECD.BZ_ORGSERVICESCORE.orgid
  is '组织ID';
comment on column OSECD.BZ_ORGSERVICESCORE.empid
  is '员工ID';
comment on column OSECD.BZ_ORGSERVICESCORE.jzdate
  is '考核时间，精确到月';
comment on column OSECD.BZ_ORGSERVICESCORE.rectime
  is '记录时间';
comment on column OSECD.BZ_ORGSERVICESCORE.score
  is '考核分数';
comment on column OSECD.BZ_ORGSERVICESCORE.datatype
  is '数据类型 1 组织 2 员工，目前只有组织';
create index OSECD.IDX_ORGSERVICESCORE on OSECD.BZ_ORGSERVICESCORE (JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_PASSENGERDATA
prompt ===============================
prompt
create table OSECD.BZ_PASSENGERDATA
(
  passengerdataid       VARCHAR2(50) not null,
  datatype              CHAR(1) default 1,
  passengerdatauploadid VARCHAR2(50),
  rundate               DATE,
  orgid                 VARCHAR2(50),
  routeid               VARCHAR2(50),
  subrouteid            VARCHAR2(50),
  segmentid             VARCHAR2(50),
  busid                 VARCHAR2(50),
  stationid             VARCHAR2(50),
  dataorigin            CHAR(1) default 1,
  passengeramount       NUMBER(10) default 0,
  isactive              CHAR(1) default 1,
  verifystatus          CHAR(1) default 0,
  verifyby              VARCHAR2(50),
  verifydate            DATE,
  verifymemos           NVARCHAR2(255),
  memos                 NVARCHAR2(255),
  created               DATE,
  createby              VARCHAR2(50),
  updated               DATE,
  updateby              VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_PASSENGERDATA
  is '客流数据表';
comment on column OSECD.BZ_PASSENGERDATA.passengerdataid
  is '客流数据主键ID';
comment on column OSECD.BZ_PASSENGERDATA.datatype
  is '数据类别(0批量导入，1人工录入)';
comment on column OSECD.BZ_PASSENGERDATA.passengerdatauploadid
  is '对应客流数据上传记录主键ID';
comment on column OSECD.BZ_PASSENGERDATA.rundate
  is '营运日期';
comment on column OSECD.BZ_PASSENGERDATA.orgid
  is '企业ID';
comment on column OSECD.BZ_PASSENGERDATA.routeid
  is '线路ID';
comment on column OSECD.BZ_PASSENGERDATA.subrouteid
  is '子线路ID(预留)';
comment on column OSECD.BZ_PASSENGERDATA.segmentid
  is '单程ID(预留)';
comment on column OSECD.BZ_PASSENGERDATA.busid
  is '车辆ID';
comment on column OSECD.BZ_PASSENGERDATA.stationid
  is '站点ID';
comment on column OSECD.BZ_PASSENGERDATA.dataorigin
  is '客流数据来源(1IC卡，2投币机，3视频客流采集)';
comment on column OSECD.BZ_PASSENGERDATA.passengeramount
  is '客流量(人)';
comment on column OSECD.BZ_PASSENGERDATA.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_PASSENGERDATA.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_PASSENGERDATA.verifyby
  is '审核人';
comment on column OSECD.BZ_PASSENGERDATA.verifydate
  is '审核时间';
comment on column OSECD.BZ_PASSENGERDATA.verifymemos
  is '审核备注';
comment on column OSECD.BZ_PASSENGERDATA.memos
  is '备注';
comment on column OSECD.BZ_PASSENGERDATA.created
  is '创建日期';
comment on column OSECD.BZ_PASSENGERDATA.createby
  is '创建者';
comment on column OSECD.BZ_PASSENGERDATA.updated
  is '更新日期';
comment on column OSECD.BZ_PASSENGERDATA.updateby
  is '更新者';
alter table OSECD.BZ_PASSENGERDATA
  add constraint PK_PASSENGERDATAID primary key (PASSENGERDATAID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_PASSENGERDATAUPLOAD
prompt =====================================
prompt
create table OSECD.BZ_PASSENGERDATAUPLOAD
(
  passengerdatauploadid VARCHAR2(50) not null,
  orgid                 VARCHAR2(50),
  routeid               VARCHAR2(50),
  busid                 VARCHAR2(50),
  filename              NVARCHAR2(255),
  filesize              NUMBER(10),
  datacount             NUMBER(10),
  uploadedby            VARCHAR2(50),
  uploadeddate          DATE,
  verifystatus          CHAR(1) default 0,
  verifyby              VARCHAR2(50),
  verifydate            DATE,
  memos                 NVARCHAR2(255),
  created               DATE,
  createby              VARCHAR2(50),
  updated               DATE,
  updateby              VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_PASSENGERDATAUPLOAD
  is '客流数据上传记录表';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.passengerdatauploadid
  is '客流数据上传记录主键ID';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.orgid
  is '企业ID(预留)';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.routeid
  is '线路ID(预留)';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.busid
  is '车辆ID(预留)';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.filename
  is '上传文件名称';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.filesize
  is '上传文件大小(字节)';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.datacount
  is '上传数据条数';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.uploadedby
  is '上传人';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.uploadeddate
  is '上传时间';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.verifyby
  is '审核人';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.verifydate
  is '审核时间';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.memos
  is '备注';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.created
  is '创建日期';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.createby
  is '创建者';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.updated
  is '更新日期';
comment on column OSECD.BZ_PASSENGERDATAUPLOAD.updateby
  is '更新者';
alter table OSECD.BZ_PASSENGERDATAUPLOAD
  add constraint PK_PASSENGERDATAUPLOADID primary key (PASSENGERDATAUPLOADID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_PASSENGERDATA_TEMP
prompt ====================================
prompt
create table OSECD.BZ_PASSENGERDATA_TEMP
(
  passengerdatatempid   VARCHAR2(50) not null,
  uploadfileid          VARCHAR2(50) not null,
  datatype              CHAR(1) default 1,
  passengerdatauploadid VARCHAR2(50),
  rundate               DATE,
  orgid                 VARCHAR2(50),
  routeid               VARCHAR2(50),
  subrouteid            VARCHAR2(50),
  segmentid             VARCHAR2(50),
  busid                 VARCHAR2(50),
  stationid             VARCHAR2(50),
  dataorigin            CHAR(1) default 1,
  passengeramount       NUMBER(10) default 0,
  isactive              CHAR(1) default 1,
  verifystatus          CHAR(1) default 0,
  verifyby              VARCHAR2(50),
  verifydate            DATE,
  verifymemos           NVARCHAR2(255),
  memos                 NVARCHAR2(255),
  created               DATE,
  createby              VARCHAR2(50),
  updated               DATE,
  updateby              VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_PASSENGERDATA_TEMP
  is '客流数据临时记录表(上传用)';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.passengerdatatempid
  is '客流数据临时记录主键ID';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.uploadfileid
  is '对应上传文件主键ID';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.datatype
  is '数据类别(0批量导入，1人工录入)';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.passengerdatauploadid
  is '对应客流数据上传记录主键ID';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.rundate
  is '营运日期';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.orgid
  is '企业ID';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.routeid
  is '线路ID';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.subrouteid
  is '子线路ID(预留)';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.segmentid
  is '单程ID(预留)';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.busid
  is '车辆ID';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.stationid
  is '站点ID';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.dataorigin
  is '客流数据来源(1IC卡，2投币机，3视频客流采集)';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.passengeramount
  is '客流量(人)';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.verifyby
  is '审核人';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.verifydate
  is '审核时间';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.verifymemos
  is '审核备注';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.memos
  is '备注';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.created
  is '创建日期';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.createby
  is '创建者';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.updated
  is '更新日期';
comment on column OSECD.BZ_PASSENGERDATA_TEMP.updateby
  is '更新者';
alter table OSECD.BZ_PASSENGERDATA_TEMP
  add constraint PK_PASSENGERDATATEMPID primary key (PASSENGERDATATEMPID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_REMERGENCYEVENTBUS
prompt ====================================
prompt
create table OSECD.BZ_REMERGENCYEVENTBUS
(
  recordid         VARCHAR2(36) not null,
  emergencyeventid VARCHAR2(36),
  busid            VARCHAR2(36),
  created          DATE,
  creaedby         VARCHAR2(36),
  updated          DATE,
  updatedby        VARCHAR2(36)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_REMERGENCYEVENTBUS
  is '应急事件车辆信息表';
comment on column OSECD.BZ_REMERGENCYEVENTBUS.recordid
  is '记录编号';
comment on column OSECD.BZ_REMERGENCYEVENTBUS.emergencyeventid
  is '应急事件编号';
comment on column OSECD.BZ_REMERGENCYEVENTBUS.busid
  is '车辆编号';
comment on column OSECD.BZ_REMERGENCYEVENTBUS.created
  is '创建时间';
comment on column OSECD.BZ_REMERGENCYEVENTBUS.creaedby
  is '创建人';
comment on column OSECD.BZ_REMERGENCYEVENTBUS.updated
  is '更新时间';
comment on column OSECD.BZ_REMERGENCYEVENTBUS.updatedby
  is '更新人';
create index OSECD.IX_REVENTBUS on OSECD.BZ_REMERGENCYEVENTBUS (EMERGENCYEVENTID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_REMERGENCYEVENTBUS
  add constraint PK_REVENTBUS primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_REMERGENCYEVENTEMP
prompt ====================================
prompt
create table OSECD.BZ_REMERGENCYEVENTEMP
(
  recordid         VARCHAR2(36) not null,
  emergencyeventid VARCHAR2(36),
  empid            VARCHAR2(36),
  created          DATE,
  creaedby         VARCHAR2(36),
  updated          DATE,
  updatedby        VARCHAR2(36)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_REMERGENCYEVENTEMP
  is '应急事件线路信息表';
comment on column OSECD.BZ_REMERGENCYEVENTEMP.recordid
  is '记录编号';
comment on column OSECD.BZ_REMERGENCYEVENTEMP.emergencyeventid
  is '应急事件编号';
comment on column OSECD.BZ_REMERGENCYEVENTEMP.empid
  is '人员编号';
comment on column OSECD.BZ_REMERGENCYEVENTEMP.created
  is '创建时间';
comment on column OSECD.BZ_REMERGENCYEVENTEMP.creaedby
  is '创建人';
comment on column OSECD.BZ_REMERGENCYEVENTEMP.updated
  is '更新时间';
comment on column OSECD.BZ_REMERGENCYEVENTEMP.updatedby
  is '更新人';
create index OSECD.IX_REVENTEMP on OSECD.BZ_REMERGENCYEVENTEMP (EMERGENCYEVENTID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_REMERGENCYEVENTEMP
  add constraint PK_REVENTEMP primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_REMERGENCYEVENTROUTE
prompt ======================================
prompt
create table OSECD.BZ_REMERGENCYEVENTROUTE
(
  recordid         VARCHAR2(36) not null,
  emergencyeventid VARCHAR2(36),
  routeid          VARCHAR2(36),
  created          DATE,
  creaedby         VARCHAR2(36),
  updated          DATE,
  updatedby        VARCHAR2(36)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_REMERGENCYEVENTROUTE
  is '应急事件线路信息表';
comment on column OSECD.BZ_REMERGENCYEVENTROUTE.recordid
  is '记录编号';
comment on column OSECD.BZ_REMERGENCYEVENTROUTE.emergencyeventid
  is '应急事件编号';
comment on column OSECD.BZ_REMERGENCYEVENTROUTE.routeid
  is '线路编号';
comment on column OSECD.BZ_REMERGENCYEVENTROUTE.created
  is '创建时间';
comment on column OSECD.BZ_REMERGENCYEVENTROUTE.creaedby
  is '创建人';
comment on column OSECD.BZ_REMERGENCYEVENTROUTE.updated
  is '更新时间';
comment on column OSECD.BZ_REMERGENCYEVENTROUTE.updatedby
  is '更新人';
create index OSECD.IX_REVENTROUTE on OSECD.BZ_REMERGENCYEVENTROUTE (EMERGENCYEVENTID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_REMERGENCYEVENTROUTE
  add constraint PK_REVENTROUTE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTEBUSRUNLOG
prompt ================================
prompt
create table OSECD.BZ_ROUTEBUSRUNLOG
(
  rl_id                 NUMBER(10) not null,
  rl_routeid            VARCHAR2(20),
  rl_subrouteid         VARCHAR2(20),
  rl_segmentid          VARCHAR2(36),
  rl_busid              VARCHAR2(36) not null,
  rl_driverid           VARCHAR2(36),
  rl_date               DATE,
  rl_stationsortstart   NUMBER(10),
  rl_stationtsortend    NUMBER(10),
  rl_timestart          DATE,
  rl_timeend            DATE,
  rl_runmiles           NUMBER(10,2),
  rl_averagespeed       NUMBER(10,2),
  rl_stationtotalcount  NUMBER(10,2),
  rl_stationrecordcount NUMBER(10,2),
  rl_stationcredibility NUMBER(10,2),
  rl_stationlog         BLOB,
  rl_created            DATE,
  rl_createdesc         VARCHAR2(4000),
  rl_tripstoppedseconds NUMBER(10,2),
  rl_tripmovingseconds  NUMBER(10,2),
  rl_triptimeseconds    NUMBER(10,2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_id
  is '标识';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_routeid
  is '线路';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_subrouteid
  is '子线路';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_segmentid
  is '单程线路ID';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_busid
  is '车辆ID';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_driverid
  is '驾驶员ID';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_date
  is '营运日期（不带时间）';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_stationsortstart
  is '出发站点';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_stationtsortend
  is '目的站点';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_timestart
  is '发车时间（带实际日期）';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_timeend
  is '到站时间（带实际日期）';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_runmiles
  is '里程(公里)';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_averagespeed
  is '平均运行速度（米/秒）';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_stationtotalcount
  is '站点总数';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_stationrecordcount
  is '报站总数数';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_stationcredibility
  is '可信度';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_stationlog
  is '日志情况';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_created
  is '创建时间';
comment on column OSECD.BZ_ROUTEBUSRUNLOG.rl_createdesc
  is '创建描述';
alter table OSECD.BZ_ROUTEBUSRUNLOG
  add constraint PK_BZ_ROUTEBUSRUNLOG primary key (RL_ID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTECASHRECORD
prompt =================================
prompt
create table OSECD.BZ_ROUTECASHRECORD
(
  routecashrecordid VARCHAR2(50) not null,
  routecashuploadid VARCHAR2(50),
  datatype          CHAR(1) default 2,
  rundate           DATE,
  rundatechar       VARCHAR2(50),
  orgid             VARCHAR2(50),
  routeid           VARCHAR2(50),
  subrouteid        VARCHAR2(50),
  segmentid         VARCHAR2(50),
  cashamount        NUMBER(10,2),
  routefare         NUMBER(10,2),
  cashpassengernum  NUMBER(10,2),
  isactive          CHAR(1) default 1,
  verifystatus      CHAR(1) default 0,
  verifyby          VARCHAR2(50),
  verifydate        DATE,
  memos             NVARCHAR2(255),
  retain1           VARCHAR2(50),
  retain2           VARCHAR2(50),
  retain3           VARCHAR2(50),
  retain4           VARCHAR2(50),
  retain5           VARCHAR2(50),
  retain6           VARCHAR2(50),
  retain7           VARCHAR2(50),
  retain8           VARCHAR2(50),
  retain9           VARCHAR2(50),
  retain10          VARCHAR2(50),
  created           DATE,
  createby          VARCHAR2(50),
  updated           DATE,
  updateby          VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTECASHRECORD
  is '线路投币数据记录表';
comment on column OSECD.BZ_ROUTECASHRECORD.routecashrecordid
  is '线路投币数据记录主键ID';
comment on column OSECD.BZ_ROUTECASHRECORD.routecashuploadid
  is '对应线路投币金额上传记录主键ID';
comment on column OSECD.BZ_ROUTECASHRECORD.datatype
  is '数据类型(1按日，2按月)';
comment on column OSECD.BZ_ROUTECASHRECORD.rundate
  is '业务日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTECASHRECORD.rundatechar
  is '业务日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTECASHRECORD.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTECASHRECORD.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTECASHRECORD.subrouteid
  is '子线路ID(备用)';
comment on column OSECD.BZ_ROUTECASHRECORD.segmentid
  is '单程ID(备用)';
comment on column OSECD.BZ_ROUTECASHRECORD.cashamount
  is '投币总金额(元)';
comment on column OSECD.BZ_ROUTECASHRECORD.routefare
  is '线路平均票价(元)';
comment on column OSECD.BZ_ROUTECASHRECORD.cashpassengernum
  is '投币客运量(人)';
comment on column OSECD.BZ_ROUTECASHRECORD.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTECASHRECORD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTECASHRECORD.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTECASHRECORD.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTECASHRECORD.memos
  is '备注';
comment on column OSECD.BZ_ROUTECASHRECORD.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTECASHRECORD.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTECASHRECORD.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTECASHRECORD.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTECASHRECORD.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTECASHRECORD.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTECASHRECORD.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTECASHRECORD.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTECASHRECORD.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTECASHRECORD.retain10
  is '预留字段10';
comment on column OSECD.BZ_ROUTECASHRECORD.created
  is '创建日期';
comment on column OSECD.BZ_ROUTECASHRECORD.createby
  is '创建者';
comment on column OSECD.BZ_ROUTECASHRECORD.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTECASHRECORD.updateby
  is '更新者';
alter table OSECD.BZ_ROUTECASHRECORD
  add constraint PK_ROUTECASHRECORDID primary key (ROUTECASHRECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTECASHRECORD_TEMP
prompt ======================================
prompt
create table OSECD.BZ_ROUTECASHRECORD_TEMP
(
  routecashrecordtempid VARCHAR2(50) not null,
  uploadfileid          VARCHAR2(50) not null,
  datatype              CHAR(1) default 2,
  rundate               DATE,
  rundatechar           VARCHAR2(50),
  orgid                 VARCHAR2(50),
  routeid               VARCHAR2(50),
  subrouteid            VARCHAR2(50),
  segmentid             VARCHAR2(50),
  cashamount            NUMBER(10,2),
  routefare             NUMBER(10,2),
  cashpassengernum      NUMBER(10,2),
  isactive              CHAR(1) default 1,
  verifystatus          CHAR(1) default 0,
  verifyby              VARCHAR2(50),
  verifydate            DATE,
  memos                 NVARCHAR2(255),
  retain1               VARCHAR2(50),
  retain2               VARCHAR2(50),
  retain3               VARCHAR2(50),
  retain4               VARCHAR2(50),
  retain5               VARCHAR2(50),
  retain6               VARCHAR2(50),
  retain7               VARCHAR2(50),
  retain8               VARCHAR2(50),
  retain9               VARCHAR2(50),
  retain10              VARCHAR2(50),
  created               DATE,
  createby              VARCHAR2(50),
  updated               DATE,
  updateby              VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTECASHRECORD_TEMP
  is '线路投币数据临时记录表(上传用)';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.routecashrecordtempid
  is '线路投币数据临时记录主键ID';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.uploadfileid
  is '对应上传文件主键ID';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.datatype
  is '数据类型(1按日，2按月)';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.rundate
  is '业务日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.rundatechar
  is '业务日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.subrouteid
  is '子线路ID(备用)';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.segmentid
  is '单程ID(备用)';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.cashamount
  is '投币总金额(元)';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.routefare
  is '线路平均票价(元)';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.cashpassengernum
  is '投币客运量(人)';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.memos
  is '备注';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.retain10
  is '预留字段10';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.created
  is '创建日期';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.createby
  is '创建者';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTECASHRECORD_TEMP.updateby
  is '更新者';
alter table OSECD.BZ_ROUTECASHRECORD_TEMP
  add constraint PK_ROUTECASHRECORDTEMPID primary key (ROUTECASHRECORDTEMPID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTECASHUPLOAD
prompt =================================
prompt
create table OSECD.BZ_ROUTECASHUPLOAD
(
  routecashuploadid VARCHAR2(50) not null,
  rundate           DATE,
  rundatechar       VARCHAR2(50),
  orgid             VARCHAR2(50),
  uploadtype        CHAR(1) default 0,
  filename          NVARCHAR2(255),
  filesize          NUMBER(10),
  datacount         NUMBER(10),
  uploadedby        VARCHAR2(50),
  uploadeddate      DATE,
  verifystatus      CHAR(1) default 0,
  verifyby          VARCHAR2(50),
  verifydate        DATE,
  memos             NVARCHAR2(255),
  created           DATE,
  createby          VARCHAR2(50),
  updated           DATE,
  updateby          VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTECASHUPLOAD
  is '线路投币金额上传记录表';
comment on column OSECD.BZ_ROUTECASHUPLOAD.routecashuploadid
  is '线路投币金额上传记录主键ID';
comment on column OSECD.BZ_ROUTECASHUPLOAD.rundate
  is '业务日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTECASHUPLOAD.rundatechar
  is '业务日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTECASHUPLOAD.orgid
  is '对应企业ID';
comment on column OSECD.BZ_ROUTECASHUPLOAD.uploadtype
  is '上传类别(0数据上传，1数据调整)';
comment on column OSECD.BZ_ROUTECASHUPLOAD.filename
  is '上传文件名称';
comment on column OSECD.BZ_ROUTECASHUPLOAD.filesize
  is '上传文件大小(字节)';
comment on column OSECD.BZ_ROUTECASHUPLOAD.datacount
  is '上传数据条数';
comment on column OSECD.BZ_ROUTECASHUPLOAD.uploadedby
  is '上传人';
comment on column OSECD.BZ_ROUTECASHUPLOAD.uploadeddate
  is '上传时间';
comment on column OSECD.BZ_ROUTECASHUPLOAD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTECASHUPLOAD.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTECASHUPLOAD.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTECASHUPLOAD.memos
  is '备注';
comment on column OSECD.BZ_ROUTECASHUPLOAD.created
  is '创建日期';
comment on column OSECD.BZ_ROUTECASHUPLOAD.createby
  is '创建者';
comment on column OSECD.BZ_ROUTECASHUPLOAD.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTECASHUPLOAD.updateby
  is '更新者';
alter table OSECD.BZ_ROUTECASHUPLOAD
  add constraint PK_ROUTECASHUPLOADID primary key (ROUTECASHUPLOADID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTEGPSPOINTS
prompt ================================
prompt
create table OSECD.BZ_ROUTEGPSPOINTS
(
  routeid   VARCHAR2(20) not null,
  longitude NUMBER(10,7),
  latitude  NUMBER(10,7)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTEGPSPOINTS
  is '线路GPS数据表';
comment on column OSECD.BZ_ROUTEGPSPOINTS.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTEGPSPOINTS.longitude
  is '经度';
comment on column OSECD.BZ_ROUTEGPSPOINTS.latitude
  is '纬度';

prompt
prompt Creating table BZ_ROUTERUNCONFIG
prompt ================================
prompt
create table OSECD.BZ_ROUTERUNCONFIG
(
  routerunconfigid     VARCHAR2(50) not null,
  startndate           DATE,
  enddate              DATE,
  orgid                VARCHAR2(50),
  routeid              VARCHAR2(50),
  subrouteid           VARCHAR2(50),
  segmentid            VARCHAR2(50),
  routelength          NUMBER(8,2),
  segmentlength        NUMBER(8,2),
  runtimecommonmin     NUMBER(8),
  runtimecommonmax     NUMBER(8),
  runtimerushmin       NUMBER(8),
  runtimerushmax       NUMBER(8),
  runintervalcommonmin NUMBER(8),
  runintervalcommonmax NUMBER(8),
  runintervalrushmin   NUMBER(8),
  runintervalrushmax   NUMBER(8),
  isactive             CHAR(1) default 1,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  verifymemos          NVARCHAR2(255),
  memos                NVARCHAR2(255),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTERUNCONFIG
  is '线路营运参数表';
comment on column OSECD.BZ_ROUTERUNCONFIG.routerunconfigid
  is '线路营运参数主键ID';
comment on column OSECD.BZ_ROUTERUNCONFIG.startndate
  is '有效开始日期';
comment on column OSECD.BZ_ROUTERUNCONFIG.enddate
  is '有效结束日期';
comment on column OSECD.BZ_ROUTERUNCONFIG.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTERUNCONFIG.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTERUNCONFIG.subrouteid
  is '子线路ID';
comment on column OSECD.BZ_ROUTERUNCONFIG.segmentid
  is '单程ID';
comment on column OSECD.BZ_ROUTERUNCONFIG.routelength
  is '线路(平均)长度(公里)';
comment on column OSECD.BZ_ROUTERUNCONFIG.segmentlength
  is '单程长度(公里)';
comment on column OSECD.BZ_ROUTERUNCONFIG.runtimecommonmin
  is '平峰行车时间(最小值，分钟)';
comment on column OSECD.BZ_ROUTERUNCONFIG.runtimecommonmax
  is '平峰行车时间(最大值，分钟)';
comment on column OSECD.BZ_ROUTERUNCONFIG.runtimerushmin
  is '高峰行车时间(最小值，分钟)';
comment on column OSECD.BZ_ROUTERUNCONFIG.runtimerushmax
  is '高峰行车时间(最大值，分钟)';
comment on column OSECD.BZ_ROUTERUNCONFIG.runintervalcommonmin
  is '平峰行车间隔(最小值，分钟)';
comment on column OSECD.BZ_ROUTERUNCONFIG.runintervalcommonmax
  is '平峰行车间隔(最大值，分钟)';
comment on column OSECD.BZ_ROUTERUNCONFIG.runintervalrushmin
  is '高峰行车间隔(最小值，分钟)';
comment on column OSECD.BZ_ROUTERUNCONFIG.runintervalrushmax
  is '高峰行车间隔(最大值，分钟)';
comment on column OSECD.BZ_ROUTERUNCONFIG.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTERUNCONFIG.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTERUNCONFIG.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTERUNCONFIG.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTERUNCONFIG.verifymemos
  is '审核备注';
comment on column OSECD.BZ_ROUTERUNCONFIG.memos
  is '备注';
comment on column OSECD.BZ_ROUTERUNCONFIG.created
  is '创建日期';
comment on column OSECD.BZ_ROUTERUNCONFIG.createby
  is '创建者';
comment on column OSECD.BZ_ROUTERUNCONFIG.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTERUNCONFIG.updateby
  is '更新者';
alter table OSECD.BZ_ROUTERUNCONFIG
  add constraint PK_ROUTERUNCONFIGID primary key (ROUTERUNCONFIGID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTERUNDATACOMMIT
prompt ====================================
prompt
create table OSECD.BZ_ROUTERUNDATACOMMIT
(
  routerundatacommitid       VARCHAR2(50) not null,
  routerundatacommituploadid VARCHAR2(50),
  datatype                   CHAR(1) default 2,
  rundate                    DATE,
  rundatechar                VARCHAR2(50),
  orgid                      VARCHAR2(50),
  routeid                    VARCHAR2(50),
  subrouteid                 VARCHAR2(50),
  segmentid                  VARCHAR2(50),
  routelength                NUMBER(10,2),
  realseqcount               NUMBER(10),
  routelength2               NUMBER(10,2),
  realseqcount2              NUMBER(10),
  cardamount                 NUMBER(10,2),
  cashamount                 NUMBER(10,2),
  cardpassengernum           NUMBER(10,2),
  cashpassengernum           NUMBER(10,2),
  isactive                   CHAR(1) default 1,
  verifystatus               CHAR(1) default 0,
  verifyby                   VARCHAR2(50),
  verifydate                 DATE,
  memos                      NVARCHAR2(255),
  retain1                    VARCHAR2(50),
  retain2                    VARCHAR2(50),
  retain3                    VARCHAR2(50),
  retain4                    VARCHAR2(50),
  retain5                    VARCHAR2(50),
  retain6                    VARCHAR2(50),
  retain7                    VARCHAR2(50),
  retain8                    VARCHAR2(50),
  retain9                    VARCHAR2(50),
  retain10                   VARCHAR2(50),
  created                    DATE,
  createby                   VARCHAR2(50),
  updated                    DATE,
  updateby                   VARCHAR2(50),
  commitstatus               CHAR(1),
  commitby                   VARCHAR2(50),
  commitdate                 DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTERUNDATACOMMIT
  is '线路月度运营明细数据记录表';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.routerundatacommitid
  is '线路月度运营明细数据记录主键ID';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.routerundatacommituploadid
  is '对应线路月度运营明细数据上传记录主键ID';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.datatype
  is '数据类型(1按日，2按月)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.rundate
  is '业务日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.rundatechar
  is '业务日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.subrouteid
  is '子线路ID(备用)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.segmentid
  is '单程ID(备用)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.routelength
  is '线路长度(单位：KM)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.realseqcount
  is '月实际发车班次(或月线路调整前实际发车班次，单位班)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.routelength2
  is '月线路调整后线路长度(单位：KM)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.realseqcount2
  is '月线路调整后实际发车班次(单位班)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.cardamount
  is '刷卡折前营收总金额(单位：万元)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.cashamount
  is '现金营收总金额(单位：万元)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.cardpassengernum
  is '刷卡客运量(单位：人次)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.cashpassengernum
  is '现金客运量(单位：人次)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.memos
  is '备注';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.retain10
  is '预留字段10';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.created
  is '创建日期';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.createby
  is '创建者';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.updateby
  is '更新者';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.commitstatus
  is '提交状态(0未提交，1已提交)';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.commitby
  is '提交人';
comment on column OSECD.BZ_ROUTERUNDATACOMMIT.commitdate
  is '提交时间';
alter table OSECD.BZ_ROUTERUNDATACOMMIT
  add constraint PK_ROUTERUNDATACOMMITID primary key (ROUTERUNDATACOMMITID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESAMPLEDETAIL
prompt ===================================
prompt
create table OSECD.BZ_ROUTESAMPLEDETAIL
(
  routesampledetailid VARCHAR2(50) not null,
  routesamplerecordid VARCHAR2(50),
  datatype            CHAR(1),
  orgid               VARCHAR2(50),
  orgroutetotal       NUMBER(10),
  orgsamplerate       NUMBER(10,2),
  orgsampletotal      NUMBER(10),
  suborgid            VARCHAR2(50),
  routeid             VARCHAR2(50),
  routename           NVARCHAR2(50),
  verifystatus        CHAR(1) default 0,
  isactive            CHAR(1) default 1,
  memos               NVARCHAR2(255),
  created             DATE,
  createby            VARCHAR2(50),
  updated             DATE,
  updateby            VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESAMPLEDETAIL
  is '运营考核线路抽样详情表';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.routesampledetailid
  is '运营考核线路抽样详情主键ID';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.routesamplerecordid
  is '对应运营考核线路抽样记录主键ID';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.datatype
  is '数据类别(0企业抽样汇总数据，1线路抽样详情数据)';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.orgroutetotal
  is '企业该月线路总条数';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.orgsamplerate
  is '企业该月线路抽样率';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.orgsampletotal
  is '企业该月抽样线路数';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.suborgid
  is '分公司ID';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.routeid
  is '抽样线路ID';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.routename
  is '抽样线路名称';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.memos
  is '备注';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESAMPLEDETAIL.updateby
  is '更新者';
alter table OSECD.BZ_ROUTESAMPLEDETAIL
  add constraint PK_ROUTESAMPLEDETAILID primary key (ROUTESAMPLEDETAILID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESAMPLEEXCEPT
prompt ===================================
prompt
create table OSECD.BZ_ROUTESAMPLEEXCEPT
(
  routesampleexceptid VARCHAR2(50) not null,
  datatype            CHAR(1),
  samplemonth         DATE,
  samplemonthchar     NVARCHAR2(50),
  orgid               VARCHAR2(50),
  suborgid            VARCHAR2(50),
  routeid             VARCHAR2(50),
  routename           NVARCHAR2(50),
  isactive            CHAR(1) default 1,
  verifystatus        CHAR(1) default 0,
  verifyby            VARCHAR2(50),
  verifydate          DATE,
  memos               NVARCHAR2(255),
  created             DATE,
  createby            VARCHAR2(50),
  updated             DATE,
  updateby            VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESAMPLEEXCEPT
  is '运营考核线路抽样排除管理表';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.routesampleexceptid
  is '运营考核线路抽样排除管理主键ID';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.datatype
  is '数据类别(0各月通用，1指定月份适用)';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.samplemonth
  is '排除抽样月份(时间格式)';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.samplemonthchar
  is '排除抽样月份(字符格式)';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.suborgid
  is '分公司ID';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.routename
  is '线路名称';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.memos
  is '备注';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPT.updateby
  is '更新者';
alter table OSECD.BZ_ROUTESAMPLEEXCEPT
  add constraint PK_ROUTESAMPLEEXCEPTID primary key (ROUTESAMPLEEXCEPTID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESAMPLEEXCEPTION
prompt ======================================
prompt
create table OSECD.BZ_ROUTESAMPLEEXCEPTION
(
  routesampleexceptionid VARCHAR2(50) not null,
  routesamplerecordid    VARCHAR2(50),
  orgid                  VARCHAR2(50),
  suborgid               VARCHAR2(50),
  routeid                VARCHAR2(50),
  routename              NVARCHAR2(50),
  isactive               CHAR(1) default 1,
  verifystatus           CHAR(1) default 0,
  verifyby               VARCHAR2(50),
  verifydate             DATE,
  memos                  NVARCHAR2(255),
  created                DATE,
  createby               VARCHAR2(50),
  updated                DATE,
  updateby               VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESAMPLEEXCEPTION
  is '运营考核线路抽样排除记录表';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.routesampleexceptionid
  is '运营考核线路抽样排除记录主键ID';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.routesamplerecordid
  is '对应运营考核线路抽样记录主键ID';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.suborgid
  is '分公司ID';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.routename
  is '线路名称';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.memos
  is '备注';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESAMPLEEXCEPTION.updateby
  is '更新者';
alter table OSECD.BZ_ROUTESAMPLEEXCEPTION
  add constraint PK_ROUTESAMPLEEXCEPTIONID primary key (ROUTESAMPLEEXCEPTIONID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESAMPLENEWENERGY
prompt ======================================
prompt
create table OSECD.BZ_ROUTESAMPLENEWENERGY
(
  routesamplenewenergyid  VARCHAR2(50) not null,
  routesampledetailid     VARCHAR2(50),
  routesamplerecordid     VARCHAR2(50),
  datatype                CHAR(1),
  orgid                   VARCHAR2(50),
  orgnewenergytotal       NUMBER(10),
  orgnewenergysamplerate  NUMBER(10,2),
  orgnewenergysampletotal NUMBER(10),
  suborgid                VARCHAR2(50),
  routeid                 VARCHAR2(50),
  routename               NVARCHAR2(50),
  busid                   VARCHAR2(50),
  cardid                  NVARCHAR2(20),
  verifystatus            CHAR(1) default 0,
  isactive                CHAR(1) default 1,
  memos                   NVARCHAR2(255),
  created                 DATE,
  createby                VARCHAR2(50),
  updated                 DATE,
  updateby                VARCHAR2(50)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESAMPLENEWENERGY
  is '运营考核线路新能源车辆抽样详情表';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.routesamplenewenergyid
  is '新能源车辆抽样详情主键ID';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.routesampledetailid
  is '运营考核线路抽样详情主键ID';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.routesamplerecordid
  is '对应运营考核线路抽样记录主键ID';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.datatype
  is '数据类别(0新能源车汇总数据，1新能源抽样详情数据)';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.orgnewenergytotal
  is '企业该月新能源车总数';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.orgnewenergysamplerate
  is '企业该月新能源车抽样率';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.orgnewenergysampletotal
  is '企业该月新能源车抽样数';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.suborgid
  is '分公司ID';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.routeid
  is '抽样线路ID';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.routename
  is '抽样线路名称';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.busid
  is '新能源车辆id';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.cardid
  is '新能源车牌号';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.memos
  is '备注';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESAMPLENEWENERGY.updateby
  is '更新者';
alter table OSECD.BZ_ROUTESAMPLENEWENERGY
  add constraint PK_ROUTESAMPLENEWENERGYID primary key (ROUTESAMPLENEWENERGYID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESAMPLERECORD
prompt ===================================
prompt
create table OSECD.BZ_ROUTESAMPLERECORD
(
  routesamplerecordid VARCHAR2(50) not null,
  samplemonth         DATE,
  samplemonthchar     NVARCHAR2(50),
  sampletotal         NUMBER(10),
  sampleby            VARCHAR2(50),
  sampledate          DATE,
  verifystatus        CHAR(1) default 0,
  memos               NVARCHAR2(255),
  created             DATE,
  createby            VARCHAR2(50),
  updated             DATE,
  updateby            VARCHAR2(50),
  verifyby            VARCHAR2(50),
  verifydate          DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESAMPLERECORD
  is '运营考核线路抽样记录表';
comment on column OSECD.BZ_ROUTESAMPLERECORD.routesamplerecordid
  is '运营考核线路抽样记录主键ID';
comment on column OSECD.BZ_ROUTESAMPLERECORD.samplemonth
  is '抽样月份(时间格式)';
comment on column OSECD.BZ_ROUTESAMPLERECORD.samplemonthchar
  is '抽样月份(字符格式)';
comment on column OSECD.BZ_ROUTESAMPLERECORD.sampletotal
  is '抽样线路总条数';
comment on column OSECD.BZ_ROUTESAMPLERECORD.sampleby
  is '抽样人';
comment on column OSECD.BZ_ROUTESAMPLERECORD.sampledate
  is '抽样时间';
comment on column OSECD.BZ_ROUTESAMPLERECORD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESAMPLERECORD.memos
  is '备注';
comment on column OSECD.BZ_ROUTESAMPLERECORD.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESAMPLERECORD.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESAMPLERECORD.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESAMPLERECORD.updateby
  is '更新者';
comment on column OSECD.BZ_ROUTESAMPLERECORD.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESAMPLERECORD.verifydate
  is '审核时间';
alter table OSECD.BZ_ROUTESAMPLERECORD
  add constraint PK_ROUTESAMPLERECORDID primary key (ROUTESAMPLERECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESAMPLERESULT
prompt ===================================
prompt
create table OSECD.BZ_ROUTESAMPLERESULT
(
  routesampleresultid       VARCHAR2(50) not null,
  routesampleresultuploadid VARCHAR2(50),
  datetype                  CHAR(1) default 2,
  rundate                   DATE,
  rundatechar               VARCHAR2(50),
  datatype                  CHAR(1) default 0,
  orgid                     VARCHAR2(50),
  routeid                   VARCHAR2(50),
  subrouteid                VARCHAR2(50),
  segmentid                 VARCHAR2(50),
  seqsampleplannum          NUMBER(10),
  seqsamplerealnum          NUMBER(10),
  seqsamplerate             NUMBER(10,4),
  seqsampleresult           CHAR(1) default 1,
  seqsamplememos            NVARCHAR2(255),
  fstlstsampletotalnum      NUMBER(10),
  fstlstsampleontimenum     NUMBER(10),
  fstlstsamplerate          NUMBER(10,4),
  fstlstsampleresult        CHAR(1) default 1,
  fstlstsamplememos         NVARCHAR2(255),
  isactive                  CHAR(1) default 1,
  verifystatus              CHAR(1) default 0,
  verifyby                  VARCHAR2(50),
  verifydate                DATE,
  memos                     NVARCHAR2(255),
  retain1                   VARCHAR2(50),
  retain2                   VARCHAR2(50),
  retain3                   VARCHAR2(50),
  retain4                   VARCHAR2(50),
  retain5                   VARCHAR2(50),
  retain6                   VARCHAR2(50),
  retain7                   VARCHAR2(50),
  retain8                   VARCHAR2(50),
  retain9                   VARCHAR2(50),
  retain10                  VARCHAR2(50),
  created                   DATE,
  createby                  VARCHAR2(50),
  updated                   DATE,
  updateby                  VARCHAR2(50),
  fsfbontimenum             NUMBER(10),
  fslbontimenum             NUMBER(10),
  lsfbontimenum             NUMBER(10),
  lslbontimenum             NUMBER(10)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESAMPLERESULT
  is '线路考核人工抽查结果表';
comment on column OSECD.BZ_ROUTESAMPLERESULT.routesampleresultid
  is '线路考核人工抽查结果主键ID';
comment on column OSECD.BZ_ROUTESAMPLERESULT.routesampleresultuploadid
  is '对应线路考核人工抽查结果上传记录主键ID';
comment on column OSECD.BZ_ROUTESAMPLERESULT.datetype
  is '数据日期类型(1按日，2按月)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.rundate
  is '业务日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.rundatechar
  is '业务日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.datatype
  is '数据业务类型(0班次及首末班，1仅班次，2仅首末班)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESAMPLERESULT.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESAMPLERESULT.subrouteid
  is '子线路ID(备用)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.segmentid
  is '单程ID(备用)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.seqsampleplannum
  is '抽查计划发车班次数';
comment on column OSECD.BZ_ROUTESAMPLERESULT.seqsamplerealnum
  is '抽查实际发车班次数';
comment on column OSECD.BZ_ROUTESAMPLERESULT.seqsamplerate
  is '抽查实际班次完成率';
comment on column OSECD.BZ_ROUTESAMPLERESULT.seqsampleresult
  is '抽查班次是否达标(0否，1是)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.seqsamplememos
  is '抽查班次备注';
comment on column OSECD.BZ_ROUTESAMPLERESULT.fstlstsampletotalnum
  is '抽查首末班服务总次数';
comment on column OSECD.BZ_ROUTESAMPLERESULT.fstlstsampleontimenum
  is '抽查首末班符合标准服务次数';
comment on column OSECD.BZ_ROUTESAMPLERESULT.fstlstsamplerate
  is '抽查首末班符合率';
comment on column OSECD.BZ_ROUTESAMPLERESULT.fstlstsampleresult
  is '抽查首末班是否达标(0否，1是)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.fstlstsamplememos
  is '抽查首末班备注';
comment on column OSECD.BZ_ROUTESAMPLERESULT.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESAMPLERESULT.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESAMPLERESULT.memos
  is '备注';
comment on column OSECD.BZ_ROUTESAMPLERESULT.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTESAMPLERESULT.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTESAMPLERESULT.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTESAMPLERESULT.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTESAMPLERESULT.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTESAMPLERESULT.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTESAMPLERESULT.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTESAMPLERESULT.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTESAMPLERESULT.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTESAMPLERESULT.retain10
  is '预留字段10';
comment on column OSECD.BZ_ROUTESAMPLERESULT.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESAMPLERESULT.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESAMPLERESULT.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESAMPLERESULT.updateby
  is '更新者';
comment on column OSECD.BZ_ROUTESAMPLERESULT.fsfbontimenum
  is '符合考核标准的首站首班车准点服务次数(次)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.fslbontimenum
  is '符合考核标准的首站末班车准点服务次数(次)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.lsfbontimenum
  is '符合考核标准的末站首班车准点服务次数(次)';
comment on column OSECD.BZ_ROUTESAMPLERESULT.lslbontimenum
  is '符合考核标准的末站末班车准点服务次数(次)';
alter table OSECD.BZ_ROUTESAMPLERESULT
  add constraint PK_ROUTESAMPLERESULTID primary key (ROUTESAMPLERESULTID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESAMPLERESULTUPLOAD
prompt =========================================
prompt
create table OSECD.BZ_ROUTESAMPLERESULTUPLOAD
(
  routesampleresultuploadid VARCHAR2(50) not null,
  rundate                   DATE,
  rundatechar               VARCHAR2(50),
  orgid                     VARCHAR2(50),
  uploadtype                CHAR(1) default 0,
  filename                  NVARCHAR2(255),
  filesize                  NUMBER(10),
  datacount                 NUMBER(10),
  uploadedby                VARCHAR2(50),
  uploadeddate              DATE,
  verifystatus              CHAR(1) default 0,
  verifyby                  VARCHAR2(50),
  verifydate                DATE,
  memos                     NVARCHAR2(255),
  created                   DATE,
  createby                  VARCHAR2(50),
  updated                   DATE,
  updateby                  VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESAMPLERESULTUPLOAD
  is '线路考核人工抽查结果上传记录表';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.routesampleresultuploadid
  is '线路考核人工抽查结果上传记录主键ID';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.rundate
  is '业务日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.rundatechar
  is '业务日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.orgid
  is '对应企业ID(不区分企业时，不记录该字段)';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.uploadtype
  is '上传类别(0数据上传，1数据调整)';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.filename
  is '上传文件名称';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.filesize
  is '上传文件大小(字节)';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.datacount
  is '上传数据条数';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.uploadedby
  is '上传人';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.uploadeddate
  is '上传时间';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.memos
  is '备注';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESAMPLERESULTUPLOAD.updateby
  is '更新者';
alter table OSECD.BZ_ROUTESAMPLERESULTUPLOAD
  add constraint PK_ROUTESAMPLERESULTUPLOADID primary key (ROUTESAMPLERESULTUPLOADID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESAMPLERESULT_TEMP
prompt ========================================
prompt
create table OSECD.BZ_ROUTESAMPLERESULT_TEMP
(
  routesampleresulttempid   VARCHAR2(50) not null,
  uploadfileid              VARCHAR2(50) not null,
  routesampleresultuploadid VARCHAR2(50),
  datetype                  CHAR(1) default 2,
  rundate                   DATE,
  rundatechar               VARCHAR2(50),
  datatype                  CHAR(1) default 0,
  orgid                     VARCHAR2(50),
  routeid                   VARCHAR2(50),
  subrouteid                VARCHAR2(50),
  segmentid                 VARCHAR2(50),
  seqsampleplannum          NUMBER(10),
  seqsamplerealnum          NUMBER(10),
  seqsamplerate             NUMBER(10,4),
  seqsampleresult           CHAR(1) default 1,
  seqsamplememos            NVARCHAR2(255),
  fstlstsampletotalnum      NUMBER(10),
  fstlstsampleontimenum     NUMBER(10),
  fstlstsamplerate          NUMBER(10,4),
  fstlstsampleresult        CHAR(1) default 1,
  fstlstsamplememos         NVARCHAR2(255),
  isactive                  CHAR(1) default 1,
  verifystatus              CHAR(1) default 0,
  verifyby                  VARCHAR2(50),
  verifydate                DATE,
  memos                     NVARCHAR2(255),
  retain1                   VARCHAR2(50),
  retain2                   VARCHAR2(50),
  retain3                   VARCHAR2(50),
  retain4                   VARCHAR2(50),
  retain5                   VARCHAR2(50),
  retain6                   VARCHAR2(50),
  retain7                   VARCHAR2(50),
  retain8                   VARCHAR2(50),
  retain9                   VARCHAR2(50),
  retain10                  VARCHAR2(50),
  created                   DATE,
  createby                  VARCHAR2(50),
  updated                   DATE,
  updateby                  VARCHAR2(50),
  fsfbontimenum             NUMBER(10),
  fslbontimenum             NUMBER(10),
  lsfbontimenum             NUMBER(10),
  lslbontimenum             NUMBER(10)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESAMPLERESULT_TEMP
  is '线路考核人工抽查结果临时表(上传用)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.routesampleresulttempid
  is '线路投币数据记录主键ID';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.uploadfileid
  is '对应上传文件主键ID';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.routesampleresultuploadid
  is '对应线路考核人工抽查结果上传记录主键ID';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.datetype
  is '数据日期类型(1按日，2按月)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.rundate
  is '业务日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.rundatechar
  is '业务日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.datatype
  is '数据业务类型(0班次及首末班，1仅班次，2仅首末班)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.subrouteid
  is '子线路ID(备用)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.segmentid
  is '单程ID(备用)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.seqsampleplannum
  is '抽查计划发车班次数';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.seqsamplerealnum
  is '抽查实际发车班次数';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.seqsamplerate
  is '抽查实际班次完成率';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.seqsampleresult
  is '抽查班次是否达标(0否，1是)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.seqsamplememos
  is '抽查班次备注';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.fstlstsampletotalnum
  is '抽查首末班服务总次数';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.fstlstsampleontimenum
  is '抽查首末班符合标准服务次数';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.fstlstsamplerate
  is '抽查首末班符合率';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.fstlstsampleresult
  is '抽查首末班是否达标(0否，1是)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.fstlstsamplememos
  is '抽查首末班备注';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.memos
  is '备注';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.retain10
  is '预留字段10';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.updateby
  is '更新者';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.fsfbontimenum
  is '符合考核标准的首站首班车准点服务次数(次)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.fslbontimenum
  is '符合考核标准的首站末班车准点服务次数(次)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.lsfbontimenum
  is '符合考核标准的末站首班车准点服务次数(次)';
comment on column OSECD.BZ_ROUTESAMPLERESULT_TEMP.lslbontimenum
  is '符合考核标准的末站末班车准点服务次数(次)';
alter table OSECD.BZ_ROUTESAMPLERESULT_TEMP
  add constraint PK_ROUTESAMPLERESULTTEMPID primary key (ROUTESAMPLERESULTTEMPID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESEGMENTRUNLOG
prompt ====================================
prompt
create table OSECD.BZ_ROUTESEGMENTRUNLOG
(
  rl_id                   NUMBER(10) not null,
  rl_routeid              VARCHAR2(20),
  rl_subrouteid           VARCHAR2(20),
  rl_segmentid            VARCHAR2(36),
  rl_date                 DATE,
  rl_arrlftfindtimestart  DATE,
  rl_arrlftfindtimeend    DATE,
  rl_timesendstart        DATE,
  rl_timesendend          DATE,
  rl_timearrstart         DATE,
  rl_timearrend           DATE,
  rl_runtimes_total       NUMBER(10,2),
  rl_runtimes_full        NUMBER(10,2),
  rl_runtimes_low         NUMBER(10,2),
  rl_avgcredit_total      NUMBER(10,2),
  rl_avgcredit_full       NUMBER(10,2),
  rl_avgcredit_low        NUMBER(10,2),
  rl_runmiles             NUMBER(10,2),
  rl_totalhours           NUMBER(10,2),
  rl_averagespeed         NUMBER(10,2),
  rl_routerunlogdesc      BLOB,
  rl_created              DATE,
  rl_createdesc           VARCHAR2(4000),
  rl_stationsendstart     VARCHAR2(100),
  rl_stationsendend       VARCHAR2(100),
  rl_stationarrstart      VARCHAR2(100),
  rl_stationarrend        VARCHAR2(100),
  rl_sendstartstandard    VARCHAR2(100),
  rl_sendstartstatus      NUMBER,
  rl_sendendstandard      VARCHAR2(100),
  rl_sendendstatus        NUMBER,
  rl_logtype              VARCHAR2(100),
  rl_planmiles            NUMBER(10,2),
  rl_planruntimes         NUMBER(10,2),
  rl_planexecutedesc      VARCHAR2(100),
  rl_planexecutestatus    NUMBER,
  rl_busidsendstart       VARCHAR2(50),
  rl_busidsendend         VARCHAR2(50),
  rl_cv_status            NUMBER,
  rl_cv_userid            VARCHAR2(50),
  rl_cv_time              DATE,
  rl_cv_timesendstart     DATE,
  rl_cv_timesendend       DATE,
  rl_cv_log               VARCHAR2(500),
  rl_sys_status           NUMBER,
  rl_sys_finaldecision    NUMBER,
  rl_sys_timesendstart    DATE,
  rl_sys_timesendend      DATE,
  rl_stationsendstartdesc VARCHAR2(100),
  rl_stationsendenddesc   VARCHAR2(100),
  rl_stationarrstartdesc  VARCHAR2(100),
  rl_stationarrenddesc    VARCHAR2(100)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_id
  is '标识';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_routeid
  is '线路';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_subrouteid
  is '子线路';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_segmentid
  is '单程线路ID';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_date
  is '日期';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_arrlftfindtimestart
  is '到离站获取时间范围开始时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_arrlftfindtimeend
  is '到离站获取时间范围结束时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_timesendstart
  is '最早发车时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_timesendend
  is '最晚发车时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_timearrstart
  is '最早到车时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_timearrend
  is '最晚到车时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_runtimes_total
  is '运行趟次总数';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_runtimes_full
  is '符合运行全趟次数';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_runtimes_low
  is '符合运行低趟次数';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_avgcredit_total
  is '全部运行的平均可信度';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_avgcredit_full
  is '全程运行趟次平均可信度';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_avgcredit_low
  is '低运行趟次平均可信度';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_runmiles
  is '运行总里程(公里)';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_totalhours
  is '总小时数';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_averagespeed
  is '平均运行速度（米/秒）';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_routerunlogdesc
  is '运行趟次日志';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_created
  is '创建时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_createdesc
  is '创建描述';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_stationsendstart
  is '最早发车开始站';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_stationsendend
  is '最晚发车开始站';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_stationarrstart
  is '最早到车车站';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_stationarrend
  is '最晚到车车站';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_sendstartstandard
  is '最早发车时间标准';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_sendstartstatus
  is '最早发车时间状态（1符合标准  2不符合标准 3数据错误或者无数据）';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_sendendstandard
  is '最晚发车时间标准';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_sendendstatus
  is '最晚发车时间状态（1符合标准  2不符合标准 3数据错误或者无数据）';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_logtype
  is '日志类型（日、月）';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_planmiles
  is '计划总里程';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_planruntimes
  is '计划运行趟次';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_planexecutedesc
  is '计划执行情况';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_planexecutestatus
  is '计划执行状态（1符合标准  2不符合标准 3数据错误或者无数据）';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_busidsendstart
  is '最早发车的车辆ID';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_busidsendend
  is '最晚发车的车辆ID';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_cv_status
  is '企业是否审核(0未审核 1已审核)';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_cv_userid
  is '企业审核人';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_cv_time
  is '企业审核时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_cv_timesendstart
  is '企业审核的最早发车时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_cv_timesendend
  is '企业审核的最晚发车时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_cv_log
  is '日志';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_sys_status
  is '系统是否审核(0未审核 1已审核)';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_sys_finaldecision
  is '系统审核最终选用（0系统 1企业审核）';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_sys_timesendstart
  is '系统审核后最终的最早发车时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_sys_timesendend
  is '系统审核后最终的最晚发车时间';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_stationsendstartdesc
  is '最早发车开始站描述';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_stationsendenddesc
  is '最晚发车开始站描述';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_stationarrstartdesc
  is '最早到车车站描述';
comment on column OSECD.BZ_ROUTESEGMENTRUNLOG.rl_stationarrenddesc
  is '最晚到车车站描述';
create index OSECD.INDEX_BZ_ROUTESEGMENTRUNLOG on OSECD.BZ_ROUTESEGMENTRUNLOG (RL_ROUTEID, RL_DATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_ROUTESEGMENTRUNLOG
  add constraint BZ_ROUTESEGMENTRUNLOG_PK primary key (RL_ID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESEQMONTHSTD
prompt ==================================
prompt
create table OSECD.BZ_ROUTESEQMONTHSTD
(
  routeseqmonthstdid VARCHAR2(50) not null,
  orgid              VARCHAR2(40),
  routeid            VARCHAR2(20),
  stdtype            CHAR(1) default 2,
  seqstdnum          NUMBER(10) default 0,
  reportstatus       CHAR(1) default 1,
  startdate          DATE,
  enddate            DATE,
  verifystatus       CHAR(1) default 0,
  isactive           CHAR(1) default 1,
  memos              NVARCHAR2(255),
  created            DATE,
  createby           VARCHAR2(50),
  updated            DATE,
  updateby           VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESEQMONTHSTD
  is '线路班次考核基准表';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.routeseqmonthstdid
  is '线路班次月考核基准主键ID';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.stdtype
  is '基准类型(1按年，2按月，3按日，目前采取按月及大小月进行考核)';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.seqstdnum
  is '班次基准(未上报记为0)';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.reportstatus
  is '上报状态(0未上报，1已上报)';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.startdate
  is '有效开始日期';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.enddate
  is '有效结束日期';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.memos
  is '备注';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESEQMONTHSTD.updateby
  is '更新者';
alter table OSECD.BZ_ROUTESEQMONTHSTD
  add constraint PK_ROUTESEQMONTHSTDID primary key (ROUTESEQMONTHSTDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESEQPLAN
prompt ==============================
prompt
create table OSECD.BZ_ROUTESEQPLAN
(
  routeseqplanid       VARCHAR2(50) not null,
  routeseqplanuploadid VARCHAR2(50),
  datatype             CHAR(1) default 2,
  rundate              DATE,
  rundatechar          VARCHAR2(50),
  orgid                VARCHAR2(50),
  routeid              VARCHAR2(50),
  subrouteid           VARCHAR2(50),
  segmentid            VARCHAR2(50),
  seqplanuploadnum     NUMBER(10),
  seqplanverifynum     NUMBER(10),
  isactive             CHAR(1) default 1,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  memos                NVARCHAR2(255),
  retain1              VARCHAR2(50),
  retain2              VARCHAR2(50),
  retain3              VARCHAR2(50),
  retain4              VARCHAR2(50),
  retain5              VARCHAR2(50),
  retain6              VARCHAR2(50),
  retain7              VARCHAR2(50),
  retain8              VARCHAR2(50),
  retain9              VARCHAR2(50),
  retain10             VARCHAR2(50),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50),
  commitstatus         CHAR(1),
  commitby             VARCHAR2(50),
  commitdate           DATE,
  seqplanmodifynum     NUMBER
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESEQPLAN
  is '线路班次计划表';
comment on column OSECD.BZ_ROUTESEQPLAN.routeseqplanid
  is '线路班次计划主键ID';
comment on column OSECD.BZ_ROUTESEQPLAN.routeseqplanuploadid
  is '对应线路班次计划上传记录主键ID';
comment on column OSECD.BZ_ROUTESEQPLAN.datatype
  is '数据类型(1按日，2按月)';
comment on column OSECD.BZ_ROUTESEQPLAN.rundate
  is '执行日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTESEQPLAN.rundatechar
  is '执行日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTESEQPLAN.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESEQPLAN.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESEQPLAN.subrouteid
  is '子线路ID(备用)';
comment on column OSECD.BZ_ROUTESEQPLAN.segmentid
  is '单程ID(备用)';
comment on column OSECD.BZ_ROUTESEQPLAN.seqplanuploadnum
  is '上报计划班次数';
comment on column OSECD.BZ_ROUTESEQPLAN.seqplanverifynum
  is '审核计划班次数';
comment on column OSECD.BZ_ROUTESEQPLAN.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESEQPLAN.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESEQPLAN.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESEQPLAN.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESEQPLAN.memos
  is '备注';
comment on column OSECD.BZ_ROUTESEQPLAN.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTESEQPLAN.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTESEQPLAN.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTESEQPLAN.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTESEQPLAN.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTESEQPLAN.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTESEQPLAN.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTESEQPLAN.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTESEQPLAN.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTESEQPLAN.retain10
  is '预留字段10';
comment on column OSECD.BZ_ROUTESEQPLAN.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESEQPLAN.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESEQPLAN.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESEQPLAN.updateby
  is '更新者';
comment on column OSECD.BZ_ROUTESEQPLAN.commitstatus
  is '提交状态(0未提交，1已提交)';
comment on column OSECD.BZ_ROUTESEQPLAN.commitby
  is '提交人';
comment on column OSECD.BZ_ROUTESEQPLAN.commitdate
  is '提交时间';
comment on column OSECD.BZ_ROUTESEQPLAN.seqplanmodifynum
  is '审核结果计划班次数';
alter table OSECD.BZ_ROUTESEQPLAN
  add constraint PK_ROUTESEQPLANID primary key (ROUTESEQPLANID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESEQPLANMODIFY
prompt ====================================
prompt
create table OSECD.BZ_ROUTESEQPLANMODIFY
(
  routeseqplanmodifyid VARCHAR2(50) not null,
  routeseqplanuploadid VARCHAR2(50),
  datatype             CHAR(1) default 2,
  rundate              DATE,
  rundatechar          VARCHAR2(50),
  orgid                VARCHAR2(50),
  routeid              VARCHAR2(50),
  subrouteid           VARCHAR2(50),
  segmentid            VARCHAR2(50),
  seqplanuploadnum     NUMBER(10),
  seqplanverifynum     NUMBER(10),
  isactive             CHAR(1) default 1,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  memos                NVARCHAR2(255),
  retain1              VARCHAR2(50),
  retain2              VARCHAR2(50),
  retain3              VARCHAR2(50),
  retain4              VARCHAR2(50),
  retain5              VARCHAR2(50),
  retain6              VARCHAR2(50),
  retain7              VARCHAR2(50),
  retain8              VARCHAR2(50),
  retain9              VARCHAR2(50),
  retain10             VARCHAR2(50),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESEQPLANMODIFY
  is '线路班次计划调整表';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.routeseqplanmodifyid
  is '线路班次计划调整主键ID';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.routeseqplanuploadid
  is '对应线路班次计划上传记录主键ID';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.datatype
  is '数据类型(1按日，2按月)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.rundate
  is '执行日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.rundatechar
  is '执行日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.subrouteid
  is '子线路ID(备用)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.segmentid
  is '单程ID(备用)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.seqplanuploadnum
  is '上报计划班次数';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.seqplanverifynum
  is '审核计划班次数';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.memos
  is '备注';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.retain10
  is '预留字段10';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY.updateby
  is '更新者';
alter table OSECD.BZ_ROUTESEQPLANMODIFY
  add constraint PK_ROUTESEQPLANMODIFYID primary key (ROUTESEQPLANMODIFYID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESEQPLANMODIFY_TEMP
prompt =========================================
prompt
create table OSECD.BZ_ROUTESEQPLANMODIFY_TEMP
(
  routeseqplanmodifytempid VARCHAR2(50) not null,
  uploadfileid             VARCHAR2(50) not null,
  routeseqplanuploadid     VARCHAR2(50),
  datatype                 CHAR(1) default 2,
  rundate                  DATE,
  rundatechar              VARCHAR2(50),
  orgid                    VARCHAR2(50),
  routeid                  VARCHAR2(50),
  subrouteid               VARCHAR2(50),
  segmentid                VARCHAR2(50),
  seqplanuploadnum         NUMBER(10),
  seqplanverifynum         NUMBER(10),
  isactive                 CHAR(1) default 1,
  verifystatus             CHAR(1) default 0,
  verifyby                 VARCHAR2(50),
  verifydate               DATE,
  memos                    NVARCHAR2(255),
  retain1                  VARCHAR2(50),
  retain2                  VARCHAR2(50),
  retain3                  VARCHAR2(50),
  retain4                  VARCHAR2(50),
  retain5                  VARCHAR2(50),
  retain6                  VARCHAR2(50),
  retain7                  VARCHAR2(50),
  retain8                  VARCHAR2(50),
  retain9                  VARCHAR2(50),
  retain10                 VARCHAR2(50),
  created                  DATE,
  createby                 VARCHAR2(50),
  updated                  DATE,
  updateby                 VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESEQPLANMODIFY_TEMP
  is '线路班次计划调整临时记录表(上传用)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.routeseqplanmodifytempid
  is '线路班次计划临时记录主键ID';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.uploadfileid
  is '对应上传文件主键ID';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.routeseqplanuploadid
  is '对应线路班次计划上传记录主键ID';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.datatype
  is '数据类型(1按日，2按月)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.rundate
  is '执行日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.rundatechar
  is '执行日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.subrouteid
  is '子线路ID(备用)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.segmentid
  is '单程ID(备用)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.seqplanuploadnum
  is '上报计划班次数';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.seqplanverifynum
  is '审核计划班次数';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.memos
  is '备注';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.retain10
  is '预留字段10';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESEQPLANMODIFY_TEMP.updateby
  is '更新者';
alter table OSECD.BZ_ROUTESEQPLANMODIFY_TEMP
  add constraint PK_ROUTESEQPLANMODIFYTEMPID primary key (ROUTESEQPLANMODIFYTEMPID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESEQPLANUPLOAD
prompt ====================================
prompt
create table OSECD.BZ_ROUTESEQPLANUPLOAD
(
  routeseqplanuploadid VARCHAR2(50) not null,
  rundate              DATE,
  rundatechar          VARCHAR2(50),
  orgid                VARCHAR2(50),
  uploadtype           CHAR(1) default 0,
  filename             NVARCHAR2(255),
  filesize             NUMBER(10),
  datacount            NUMBER(10),
  uploadedby           VARCHAR2(50),
  uploadeddate         DATE,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  memos                NVARCHAR2(255),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESEQPLANUPLOAD
  is '线路班次计划上传记录表';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.routeseqplanuploadid
  is '线路班次计划上传记录主键ID';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.rundate
  is '计划业务日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.rundatechar
  is '计划业务日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.orgid
  is '对应企业ID';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.uploadtype
  is '上传类别(0数据上传，1数据调整)';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.filename
  is '上传文件名称';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.filesize
  is '上传文件大小(字节)';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.datacount
  is '上传数据条数';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.uploadedby
  is '上传人';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.uploadeddate
  is '上传时间';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.memos
  is '备注';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESEQPLANUPLOAD.updateby
  is '更新者';
alter table OSECD.BZ_ROUTESEQPLANUPLOAD
  add constraint PK_ROUTESEQPLANUPLOADID primary key (ROUTESEQPLANUPLOADID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESEQPLAN_TEMP
prompt ===================================
prompt
create table OSECD.BZ_ROUTESEQPLAN_TEMP
(
  routeseqplantempid   VARCHAR2(50) not null,
  uploadfileid         VARCHAR2(50) not null,
  routeseqplanuploadid VARCHAR2(50),
  datatype             CHAR(1) default 2,
  rundate              DATE,
  rundatechar          VARCHAR2(50),
  orgid                VARCHAR2(50),
  routeid              VARCHAR2(50),
  subrouteid           VARCHAR2(50),
  segmentid            VARCHAR2(50),
  seqplanuploadnum     NUMBER(10),
  seqplanverifynum     NUMBER(10),
  isactive             CHAR(1) default 1,
  verifystatus         CHAR(1) default 0,
  verifyby             VARCHAR2(50),
  verifydate           DATE,
  memos                NVARCHAR2(255),
  retain1              VARCHAR2(50),
  retain2              VARCHAR2(50),
  retain3              VARCHAR2(50),
  retain4              VARCHAR2(50),
  retain5              VARCHAR2(50),
  retain6              VARCHAR2(50),
  retain7              VARCHAR2(50),
  retain8              VARCHAR2(50),
  retain9              VARCHAR2(50),
  retain10             VARCHAR2(50),
  created              DATE,
  createby             VARCHAR2(50),
  updated              DATE,
  updateby             VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESEQPLAN_TEMP
  is '线路班次计划临时记录表(上传用)';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.routeseqplantempid
  is '线路班次计划临时记录主键ID';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.uploadfileid
  is '对应上传文件主键ID';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.routeseqplanuploadid
  is '对应线路班次计划上传记录主键ID';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.datatype
  is '数据类型(1按日，2按月)';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.rundate
  is '执行日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.rundatechar
  is '执行日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.subrouteid
  is '子线路ID(备用)';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.segmentid
  is '单程ID(备用)';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.seqplanuploadnum
  is '上报计划班次数';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.seqplanverifynum
  is '审核计划班次数';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.memos
  is '备注';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.retain10
  is '预留字段10';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESEQPLAN_TEMP.updateby
  is '更新者';
alter table OSECD.BZ_ROUTESEQPLAN_TEMP
  add constraint PK_ROUTESEQPLANTEMPID primary key (ROUTESEQPLANTEMPID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESHIFTARRANGE
prompt ===================================
prompt
create table OSECD.BZ_ROUTESHIFTARRANGE
(
  routeshiftarrangeid       VARCHAR2(50) not null,
  routeshiftarrangeuploadid VARCHAR2(50),
  rundatestart              DATE,
  rundateend                DATE,
  datatype                  CHAR(1) default 1,
  orgid                     VARCHAR2(50),
  routeid                   VARCHAR2(50),
  subrouteid                VARCHAR2(50),
  segmentid                 VARCHAR2(50),
  busid                     VARCHAR2(50),
  seqno                     VARCHAR2(50),
  stationid                 VARCHAR2(50),
  plandeparturetime         DATE,
  plandeparturetimechar     VARCHAR2(50),
  busselfid                 NVARCHAR2(50),
  buscardid                 NVARCHAR2(50),
  buslength                 NUMBER(8,2),
  busage                    NUMBER(8),
  busfueltype               VARCHAR2(20),
  busrecdate                DATE,
  stationname               NVARCHAR2(100),
  routelength               NUMBER(8,2),
  isrushhourshift           CHAR(1),
  arrangememos              NVARCHAR2(255),
  isactive                  CHAR(1) default 1,
  verifystatus              CHAR(1) default 0,
  verifyby                  VARCHAR2(50),
  verifydate                DATE,
  verifymemos               NVARCHAR2(255),
  memos                     NVARCHAR2(255),
  created                   DATE,
  createby                  VARCHAR2(50),
  updated                   DATE,
  updateby                  VARCHAR2(50),
  retain1                   VARCHAR2(50),
  retain2                   VARCHAR2(50),
  retain3                   VARCHAR2(50),
  retain4                   VARCHAR2(50),
  retain5                   VARCHAR2(50),
  retain6                   VARCHAR2(50),
  retain7                   VARCHAR2(50),
  retain8                   VARCHAR2(50),
  retain9                   VARCHAR2(50),
  retain10                  VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESHIFTARRANGE
  is '营运车次计划表';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.routeshiftarrangeid
  is '营运车次计划主键ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.routeshiftarrangeuploadid
  is '对应营运车次计划上传记录主键ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.rundatestart
  is '计划执行日期(开始)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.rundateend
  is '计划执行日期(结束)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.datatype
  is '数据产生方式(对应字典SHIFTARRANGEDATATYPE，1上传导入，2自动复制，3人工复制，4人工录入，5系统接入)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.subrouteid
  is '子线路ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.segmentid
  is '单程ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.busid
  is '车辆ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.seqno
  is '车位或字轨';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.stationid
  is '站点ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.plandeparturetime
  is '计划发车时间(时间格式)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.plandeparturetimechar
  is '计划发车时间(字符格式，记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.busselfid
  is '车号或自编号(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.buscardid
  is '车牌号码(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.buslength
  is '车长(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.busage
  is '车龄(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.busfueltype
  is '燃料类型(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.busrecdate
  is '车辆上牌日期(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.stationname
  is '站点名称(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.routelength
  is '线路长度(记录上报内容，单位公里)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.isrushhourshift
  is '是否计划早晚高峰班次(0否，1是)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.arrangememos
  is '计划备注';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.verifymemos
  is '审核备注';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.memos
  is '备注';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.updateby
  is '更新者';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTESHIFTARRANGE.retain10
  is '预留字段10';
alter table OSECD.BZ_ROUTESHIFTARRANGE
  add constraint PK_ROUTESHIFTARRANGEID primary key (ROUTESHIFTARRANGEID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESHIFTARRANGECHECK
prompt ========================================
prompt
create table OSECD.BZ_ROUTESHIFTARRANGECHECK
(
  routeshiftarrangecheckid  VARCHAR2(50) not null,
  routeshiftarrangeid       VARCHAR2(50),
  routeshiftarrangeuploadid VARCHAR2(50),
  rundate                   DATE,
  datatype                  CHAR(1) default 1,
  orgid                     VARCHAR2(50),
  routeid                   VARCHAR2(50),
  subrouteid                VARCHAR2(50),
  segmentid                 VARCHAR2(50),
  busid                     VARCHAR2(50),
  seqno                     VARCHAR2(50),
  stationid                 VARCHAR2(50),
  plandeparturetime         DATE,
  plandeparturetimechar     VARCHAR2(50),
  busselfid                 NVARCHAR2(50),
  buscardid                 NVARCHAR2(50),
  buslength                 NUMBER(8,2),
  busage                    NUMBER(8),
  busfueltype               VARCHAR2(20),
  busrecdate                DATE,
  stationname               NVARCHAR2(100),
  routelength               NUMBER(8,2),
  isrushhourshift           CHAR(1),
  arrangememos              NVARCHAR2(255),
  isactive                  CHAR(1) default 1,
  verifystatus              CHAR(1) default 0,
  verifyby                  VARCHAR2(50),
  verifydate                DATE,
  verifymemos               NVARCHAR2(255),
  memos                     NVARCHAR2(255),
  created                   DATE,
  createby                  VARCHAR2(50),
  updated                   DATE,
  updateby                  VARCHAR2(50),
  retain1                   VARCHAR2(50),
  retain2                   VARCHAR2(50),
  retain3                   VARCHAR2(50),
  retain4                   VARCHAR2(50),
  retain5                   VARCHAR2(50),
  retain6                   VARCHAR2(50),
  retain7                   VARCHAR2(50),
  retain8                   VARCHAR2(50),
  retain9                   VARCHAR2(50),
  retain10                  VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESHIFTARRANGECHECK
  is '营运车次计划归档表';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.routeshiftarrangecheckid
  is '营运车次计划归档主键ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.routeshiftarrangeid
  is '对应营运车次计划主键ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.routeshiftarrangeuploadid
  is '对应营运车次计划上传记录主键ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.rundate
  is '计划执行日期';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.datatype
  is '数据产生方式(对应字典SHIFTARRANGEDATATYPE，1上传导入，2自动复制，3人工复制，4人工录入，5系统接入)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.subrouteid
  is '子线路ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.segmentid
  is '单程ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.busid
  is '车辆ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.seqno
  is '车位或字轨';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.stationid
  is '站点ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.plandeparturetime
  is '计划发车时间(时间格式)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.plandeparturetimechar
  is '计划发车时间(字符格式，记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.busselfid
  is '车号或自编号(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.buscardid
  is '车牌号码(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.buslength
  is '车长(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.busage
  is '车龄(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.busfueltype
  is '燃料类型(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.busrecdate
  is '车辆上牌日期(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.stationname
  is '站点名称(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.routelength
  is '线路长度(记录上报内容，单位公里)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.isrushhourshift
  is '是否计划早晚高峰班次(0否，1是)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.arrangememos
  is '计划备注';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.verifymemos
  is '审核备注';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.memos
  is '备注';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.updateby
  is '更新者';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTESHIFTARRANGECHECK.retain10
  is '预留字段10';
alter table OSECD.BZ_ROUTESHIFTARRANGECHECK
  add constraint PK_ROUTESHIFTARRANGECHECKID primary key (ROUTESHIFTARRANGECHECKID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESHIFTARRANGEUPLOAD
prompt =========================================
prompt
create table OSECD.BZ_ROUTESHIFTARRANGEUPLOAD
(
  routeshiftarrangeuploadid VARCHAR2(50) not null,
  rundatestart              DATE,
  rundateend                DATE,
  orgid                     VARCHAR2(50),
  routeid                   VARCHAR2(50),
  subrouteid                VARCHAR2(50),
  segmentid                 VARCHAR2(50),
  uploadtype                CHAR(1) default 0,
  filename                  NVARCHAR2(255),
  filesize                  NUMBER(10),
  datacount                 NUMBER(10),
  uploadedby                VARCHAR2(50),
  uploadeddate              DATE,
  verifystatus              CHAR(1) default 0,
  verifyby                  VARCHAR2(50),
  verifydate                DATE,
  memos                     NVARCHAR2(255),
  created                   DATE,
  createby                  VARCHAR2(50),
  updated                   DATE,
  updateby                  VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESHIFTARRANGEUPLOAD
  is '营运车次计划上传记录表';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.routeshiftarrangeuploadid
  is '营运车次计划上传记录主键ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.rundatestart
  is '计划执行日期(开始)';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.rundateend
  is '计划执行日期(结束)';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.subrouteid
  is '子线路ID(预留)';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.segmentid
  is '单程ID(预留)';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.uploadtype
  is '上传类别(0数据上传，1数据调整)';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.filename
  is '上传文件名称';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.filesize
  is '上传文件大小(字节)';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.datacount
  is '上传数据条数';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.uploadedby
  is '上传人';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.uploadeddate
  is '上传时间';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.memos
  is '备注';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESHIFTARRANGEUPLOAD.updateby
  is '更新者';
alter table OSECD.BZ_ROUTESHIFTARRANGEUPLOAD
  add constraint PK_ROUTESHIFTARRANGEUPLOADID primary key (ROUTESHIFTARRANGEUPLOADID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESHIFTARRANGE_TEMP
prompt ========================================
prompt
create table OSECD.BZ_ROUTESHIFTARRANGE_TEMP
(
  routeshiftarrangetempid   VARCHAR2(50) not null,
  uploadfileid              VARCHAR2(50) not null,
  routeshiftarrangeuploadid VARCHAR2(50),
  rundatestart              DATE,
  rundateend                DATE,
  datatype                  CHAR(1) default 1,
  orgid                     VARCHAR2(50),
  routeid                   VARCHAR2(50),
  subrouteid                VARCHAR2(50),
  segmentid                 VARCHAR2(50),
  busid                     VARCHAR2(50),
  seqno                     VARCHAR2(50),
  stationid                 VARCHAR2(50),
  plandeparturetime         DATE,
  plandeparturetimechar     VARCHAR2(50),
  busselfid                 NVARCHAR2(50),
  buscardid                 NVARCHAR2(50),
  buslength                 NUMBER(8,2),
  busage                    NUMBER(8),
  busfueltype               VARCHAR2(20),
  busrecdate                DATE,
  stationname               NVARCHAR2(100),
  routelength               NUMBER(8,2),
  isrushhourshift           CHAR(1),
  arrangememos              NVARCHAR2(255),
  isactive                  CHAR(1) default 1,
  verifystatus              CHAR(1) default 0,
  verifyby                  VARCHAR2(50),
  verifydate                DATE,
  verifymemos               NVARCHAR2(255),
  memos                     NVARCHAR2(255),
  created                   DATE,
  createby                  VARCHAR2(50),
  updated                   DATE,
  updateby                  VARCHAR2(50),
  retain1                   VARCHAR2(50),
  retain2                   VARCHAR2(50),
  retain3                   VARCHAR2(50),
  retain4                   VARCHAR2(50),
  retain5                   VARCHAR2(50),
  retain6                   VARCHAR2(50),
  retain7                   VARCHAR2(50),
  retain8                   VARCHAR2(50),
  retain9                   VARCHAR2(50),
  retain10                  VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESHIFTARRANGE_TEMP
  is '营运车次计划临时记录表(上传用)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.routeshiftarrangetempid
  is '营运车次计划临时记录主键ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.uploadfileid
  is '对应上传文件主键ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.routeshiftarrangeuploadid
  is '对应营运车次计划上传记录主键ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.rundatestart
  is '计划执行日期(开始)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.rundateend
  is '计划执行日期(结束)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.datatype
  is '数据产生方式(对应字典SHIFTARRANGEDATATYPE，1上传导入，2自动复制，3人工复制，4人工录入，5系统接入)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.subrouteid
  is '子线路ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.segmentid
  is '单程ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.busid
  is '车辆ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.seqno
  is '车位或字轨';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.stationid
  is '站点ID';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.plandeparturetime
  is '计划发车时间(时间格式)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.plandeparturetimechar
  is '计划发车时间(字符格式，记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.busselfid
  is '车号或自编号(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.buscardid
  is '车牌号码(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.buslength
  is '车长(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.busage
  is '车龄(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.busfueltype
  is '燃料类型(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.busrecdate
  is '车辆上牌日期(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.stationname
  is '站点名称(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.routelength
  is '线路长度(记录上报内容，单位公里)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.isrushhourshift
  is '是否计划早晚高峰班次(0否，1是)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.arrangememos
  is '计划备注';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.verifymemos
  is '审核备注';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.memos
  is '备注';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.updateby
  is '更新者';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTESHIFTARRANGE_TEMP.retain10
  is '预留字段10';
alter table OSECD.BZ_ROUTESHIFTARRANGE_TEMP
  add constraint PK_ROUTESHIFTARRANGETEMPID primary key (ROUTESHIFTARRANGETEMPID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESHIFTCHECK
prompt =================================
prompt
create table OSECD.BZ_ROUTESHIFTCHECK
(
  routeshiftcheckid     VARCHAR2(50) not null,
  datatype              CHAR(1) default 1,
  shiftdatatype         CHAR(1),
  orgid                 VARCHAR2(50),
  routeid               VARCHAR2(50),
  subrouteid            VARCHAR2(50),
  segmentid             VARCHAR2(50),
  busid                 VARCHAR2(50),
  buscardno             NVARCHAR2(50),
  routeshiftarrangeid   VARCHAR2(50),
  rundate               DATE,
  arrangedatatype       CHAR(1) default 1,
  seqno                 VARCHAR2(50),
  stationid             VARCHAR2(50),
  plandeparturetime     DATE,
  plandeparturetimechar VARCHAR2(50),
  busselfid             NVARCHAR2(50),
  buscardid             NVARCHAR2(50),
  buslength             NUMBER(8,2),
  busage                NUMBER(8),
  busfueltype           VARCHAR2(20),
  busrecdate            DATE,
  stationname           NVARCHAR2(100),
  routelength           NUMBER(8,2),
  isrushhourshift       CHAR(1) default 0,
  arrangememos          NVARCHAR2(255),
  isactive              CHAR(1) default 1,
  verifystatus          CHAR(1) default 0,
  verifyby              VARCHAR2(50),
  verifydate            DATE,
  verifymemos           NVARCHAR2(255),
  shiftspanmin          NUMBER(8) default 3,
  shiftspanmax          NUMBER(8) default 5,
  isautochecked         CHAR(1) default 1,
  isautorushhourshift   CHAR(1) default 0,
  realdeparturetime     DATE,
  rectype               CHAR(1),
  driverid              VARCHAR2(50),
  startstationid        VARCHAR2(50),
  endstationid          VARCHAR2(50),
  leavetime             DATE,
  arrivetime            DATE,
  islate                CHAR(1),
  rundatadate           DATE,
  miletypeid            VARCHAR2(10),
  milenum               NUMBER(10,2),
  recdate               DATE,
  avgspeed              NUMBER(15,2),
  seqtime               NUMBER(15),
  gpsmile               NUMBER(5,2),
  stoptime              NUMBER(5,2),
  stopnum               NUMBER(3),
  stationnum            NUMBER(3),
  sectrate              NUMBER(5,2),
  stationrate           NUMBER(5,2),
  datasource            CHAR(1),
  planstarttime         DATE,
  planendtime           DATE,
  intervalflag          CHAR(1),
  shifttype             CHAR(1),
  shiftperiod           NUMBER(8,2),
  intervalperiod        NUMBER(8,2),
  isfullflag            CHAR(1),
  isendflag             CHAR(1),
  isstartflag           CHAR(1),
  planstartstation      VARCHAR2(50),
  planendstation        VARCHAR2(50),
  autocheckdate         DATE,
  autocheckmemos        NVARCHAR2(255),
  ischecked             CHAR(1) default 1,
  ischeckrushhourshift  CHAR(1) default 0,
  checkdeparturetime    DATE,
  checkby               VARCHAR2(50),
  checkdate             DATE,
  checkmemos            NVARCHAR2(255),
  memos                 NVARCHAR2(255),
  created               DATE,
  createby              VARCHAR2(50),
  updated               DATE,
  updateby              VARCHAR2(50),
  retain1               VARCHAR2(50),
  retain2               VARCHAR2(50),
  retain3               VARCHAR2(50),
  retain4               VARCHAR2(50),
  retain5               VARCHAR2(50),
  retain6               VARCHAR2(50),
  retain7               VARCHAR2(50),
  retain8               VARCHAR2(50),
  retain9               VARCHAR2(50),
  retain10              VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESHIFTCHECK
  is '营运车次核准表';
comment on column OSECD.BZ_ROUTESHIFTCHECK.routeshiftcheckid
  is '营运车次核准主键ID';
comment on column OSECD.BZ_ROUTESHIFTCHECK.datatype
  is '数据产生方式(1系统计算，2人工录入)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.shiftdatatype
  is '车次类别(对应字典SHIFTDATATYPE，1正常车次，2计划异常车次，3无计划新增车次)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.orgid
  is '企业ID';
comment on column OSECD.BZ_ROUTESHIFTCHECK.routeid
  is '线路ID';
comment on column OSECD.BZ_ROUTESHIFTCHECK.subrouteid
  is '子线路ID';
comment on column OSECD.BZ_ROUTESHIFTCHECK.segmentid
  is '单程ID';
comment on column OSECD.BZ_ROUTESHIFTCHECK.busid
  is '车辆ID';
comment on column OSECD.BZ_ROUTESHIFTCHECK.buscardno
  is '车牌号码(预留)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.routeshiftarrangeid
  is '对应运营车次计划主键ID(本字段及以下为计划相关)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.rundate
  is '计划执行日期';
comment on column OSECD.BZ_ROUTESHIFTCHECK.arrangedatatype
  is '计划数据产生方式(对应字典SHIFTARRANGEDATATYPE，1上传导入，2自动复制，3人工复制，4人工录入，5系统接入)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.seqno
  is '车位或字轨';
comment on column OSECD.BZ_ROUTESHIFTCHECK.stationid
  is '站点ID';
comment on column OSECD.BZ_ROUTESHIFTCHECK.plandeparturetime
  is '计划发车时间(时间格式)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.plandeparturetimechar
  is '计划发车时间(字符格式，记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.busselfid
  is '车号或自编号(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.buscardid
  is '车牌号码(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.buslength
  is '车长(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.busage
  is '车龄(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.busfueltype
  is '燃料类型(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.busrecdate
  is '车辆上牌日期(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.stationname
  is '站点名称(记录上报内容)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.routelength
  is '(单程)线路长度(记录上报内容，单位公里)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.isrushhourshift
  is '是否计划早晚高峰班次(0否，1是)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.arrangememos
  is '计划备注';
comment on column OSECD.BZ_ROUTESHIFTCHECK.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.verifyby
  is '审核人';
comment on column OSECD.BZ_ROUTESHIFTCHECK.verifydate
  is '审核时间';
comment on column OSECD.BZ_ROUTESHIFTCHECK.verifymemos
  is '审核备注(本字段及以上为计划相关)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.shiftspanmin
  is '有效班次发车间隔标准最小值(分钟)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.shiftspanmax
  is '有效班次发车间隔标准最大值(分钟)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.isautochecked
  is '系统核定是否为有效车次(0否，1是)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.isautorushhourshift
  is '是否核定早晚高峰班次(0否，1是)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.realdeparturetime
  is '系统核定发车时间(时间格式)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.rectype
  is '车次类型(1营运，2非营运)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.driverid
  is '驾驶员ID';
comment on column OSECD.BZ_ROUTESHIFTCHECK.startstationid
  is '出发站点ID';
comment on column OSECD.BZ_ROUTESHIFTCHECK.endstationid
  is '目的站点ID';
comment on column OSECD.BZ_ROUTESHIFTCHECK.leavetime
  is '发车时间(带实际日期)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.arrivetime
  is '到站时间(带实际日期)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.islate
  is '早晚点(0准点,1晚点，2早点)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.rundatadate
  is '营运日期(不带时间)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.miletypeid
  is '里程类型(10营运载客11包车载客20加油21保养22维修23充气24出入库30教练40公务90其他)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.milenum
  is '产生的里程';
comment on column OSECD.BZ_ROUTESHIFTCHECK.recdate
  is '记录时间';
comment on column OSECD.BZ_ROUTESHIFTCHECK.avgspeed
  is '车次平均运行速度(米/秒)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.seqtime
  is '车次累计运行时间(分钟)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.gpsmile
  is 'GPS里程';
comment on column OSECD.BZ_ROUTESHIFTCHECK.stoptime
  is '停站时间(分钟)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.stopnum
  is '报站个数';
comment on column OSECD.BZ_ROUTESHIFTCHECK.stationnum
  is '站点个数';
comment on column OSECD.BZ_ROUTESHIFTCHECK.sectrate
  is '区间准点率';
comment on column OSECD.BZ_ROUTESHIFTCHECK.stationrate
  is '报站率';
comment on column OSECD.BZ_ROUTESHIFTCHECK.datasource
  is '数据来源(0同步，1录入，2到离站计算，3GPS计算)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.planstarttime
  is '计划发车时间';
comment on column OSECD.BZ_ROUTESHIFTCHECK.planendtime
  is '计划到达时间';
comment on column OSECD.BZ_ROUTESHIFTCHECK.intervalflag
  is '间隔有效标志(0不符合，1符合)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.shifttype
  is '班次类型(F首班，L末班，M中间班次)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.shiftperiod
  is '班次间隔(分钟)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.intervalperiod
  is '发车间隔值(分钟)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.isfullflag
  is '车次是否完整(0否，1是)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.isendflag
  is '是否到达末站(0否，1是)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.isstartflag
  is '是否首站发车(0否，1是)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.planstartstation
  is '计划首站';
comment on column OSECD.BZ_ROUTESHIFTCHECK.planendstation
  is '计划末站';
comment on column OSECD.BZ_ROUTESHIFTCHECK.autocheckdate
  is '系统核定时间';
comment on column OSECD.BZ_ROUTESHIFTCHECK.autocheckmemos
  is '系统核定备注';
comment on column OSECD.BZ_ROUTESHIFTCHECK.ischecked
  is '人工核定是否为有效车次(0否，1是)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.ischeckrushhourshift
  is '人工核定是否早晚高峰班次(0否，1是)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.checkdeparturetime
  is '人工核定发车时间(带日期，时间格式)';
comment on column OSECD.BZ_ROUTESHIFTCHECK.checkby
  is '核定人';
comment on column OSECD.BZ_ROUTESHIFTCHECK.checkdate
  is '核定时间';
comment on column OSECD.BZ_ROUTESHIFTCHECK.checkmemos
  is '核定备注';
comment on column OSECD.BZ_ROUTESHIFTCHECK.memos
  is '备注';
comment on column OSECD.BZ_ROUTESHIFTCHECK.created
  is '创建日期';
comment on column OSECD.BZ_ROUTESHIFTCHECK.createby
  is '创建者';
comment on column OSECD.BZ_ROUTESHIFTCHECK.updated
  is '更新日期';
comment on column OSECD.BZ_ROUTESHIFTCHECK.updateby
  is '更新者';
comment on column OSECD.BZ_ROUTESHIFTCHECK.retain1
  is '预留字段1';
comment on column OSECD.BZ_ROUTESHIFTCHECK.retain2
  is '预留字段2';
comment on column OSECD.BZ_ROUTESHIFTCHECK.retain3
  is '预留字段3';
comment on column OSECD.BZ_ROUTESHIFTCHECK.retain4
  is '预留字段4';
comment on column OSECD.BZ_ROUTESHIFTCHECK.retain5
  is '预留字段5';
comment on column OSECD.BZ_ROUTESHIFTCHECK.retain6
  is '预留字段6';
comment on column OSECD.BZ_ROUTESHIFTCHECK.retain7
  is '预留字段7';
comment on column OSECD.BZ_ROUTESHIFTCHECK.retain8
  is '预留字段8';
comment on column OSECD.BZ_ROUTESHIFTCHECK.retain9
  is '预留字段9';
comment on column OSECD.BZ_ROUTESHIFTCHECK.retain10
  is '预留字段10';
alter table OSECD.BZ_ROUTESHIFTCHECK
  add constraint PK_ROUTESHIFTCHECKID primary key (ROUTESHIFTCHECKID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_ROUTESTATIONREFLECT
prompt =====================================
prompt
create table OSECD.BZ_ROUTESTATIONREFLECT
(
  rsid       VARCHAR2(36),
  subrouteid VARCHAR2(20),
  direct     CHAR(1),
  seqno      VARCHAR2(20),
  stationno  VARCHAR2(20),
  platcode   VARCHAR2(2) default '0'
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_ROUTESTATIONREFLECT
  is '线路站点映射表';
comment on column OSECD.BZ_ROUTESTATIONREFLECT.rsid
  is 'ID';
comment on column OSECD.BZ_ROUTESTATIONREFLECT.subrouteid
  is '子线路ID';
comment on column OSECD.BZ_ROUTESTATIONREFLECT.direct
  is '运行方向 1上行 2下行 3环形';
comment on column OSECD.BZ_ROUTESTATIONREFLECT.seqno
  is '报站号';
comment on column OSECD.BZ_ROUTESTATIONREFLECT.stationno
  is '站点编号';
comment on column OSECD.BZ_ROUTESTATIONREFLECT.platcode
  is '平台编码';

prompt
prompt Creating table BZ_SAFETYSTANDARD
prompt ================================
prompt
create table OSECD.BZ_SAFETYSTANDARD
(
  recordid            VARCHAR2(36) not null,
  orgid               VARCHAR2(36) not null,
  routeid             VARCHAR2(36) not null,
  empid               VARCHAR2(36) not null,
  safetystandardtype  VARCHAR2(2),
  checkedby           NVARCHAR2(20),
  uploadedby          NVARCHAR2(20),
  actdatetime         DATE,
  recdatetime         DATE,
  memos               NVARCHAR2(100),
  safetystandardmemos NVARCHAR2(200),
  checktime           DATE,
  uploadtime          DATE,
  safetystandardname  VARCHAR2(100),
  busid               VARCHAR2(36)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_SAFETYSTANDARD
  is '运营安全规范信息表';
comment on column OSECD.BZ_SAFETYSTANDARD.recordid
  is '记录编号';
comment on column OSECD.BZ_SAFETYSTANDARD.orgid
  is '组织编号';
comment on column OSECD.BZ_SAFETYSTANDARD.routeid
  is '线路编号';
comment on column OSECD.BZ_SAFETYSTANDARD.empid
  is '人员编号';
comment on column OSECD.BZ_SAFETYSTANDARD.safetystandardtype
  is '违反规范类型';
comment on column OSECD.BZ_SAFETYSTANDARD.checkedby
  is '检查人';
comment on column OSECD.BZ_SAFETYSTANDARD.uploadedby
  is '反馈人';
comment on column OSECD.BZ_SAFETYSTANDARD.actdatetime
  is '业务时间';
comment on column OSECD.BZ_SAFETYSTANDARD.recdatetime
  is '记录时间';
comment on column OSECD.BZ_SAFETYSTANDARD.memos
  is '备注说明';
comment on column OSECD.BZ_SAFETYSTANDARD.safetystandardmemos
  is '违反规范说明';
comment on column OSECD.BZ_SAFETYSTANDARD.checktime
  is '检查时间';
comment on column OSECD.BZ_SAFETYSTANDARD.uploadtime
  is '反馈时间';
comment on column OSECD.BZ_SAFETYSTANDARD.safetystandardname
  is '违反规范类型名称';
comment on column OSECD.BZ_SAFETYSTANDARD.busid
  is '车辆编号';
create index OSECD.IX_SAFETYSTANDARD on OSECD.BZ_SAFETYSTANDARD (ACTDATETIME, SAFETYSTANDARDTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.BZ_SAFETYSTANDARD
  add constraint PK_SAFETYSTANDARD primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_STATIONNOREFLECT
prompt ==================================
prompt
create table OSECD.BZ_STATIONNOREFLECT
(
  stationno   VARCHAR2(10) not null,
  gjstationno VARCHAR2(10) not null,
  platcode    VARCHAR2(2) not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_STATIONNOREFLECT
  is '公交站点映射表';
comment on column OSECD.BZ_STATIONNOREFLECT.stationno
  is '站点编码';
comment on column OSECD.BZ_STATIONNOREFLECT.gjstationno
  is '公交站点编码';
comment on column OSECD.BZ_STATIONNOREFLECT.platcode
  is '平台编码';
create index OSECD.IDX_STATIONREFLECT1 on OSECD.BZ_STATIONNOREFLECT (STATIONNO, PLATCODE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IDX_STATIONREFLECT2 on OSECD.BZ_STATIONNOREFLECT (PLATCODE, GJSTATIONNO)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_STATIONPASSENGERS
prompt ===================================
prompt
create table OSECD.BZ_STATIONPASSENGERS
(
  stapassid    NUMBER,
  routeid      NUMBER(8),
  routename    VARCHAR2(30),
  subroteid    NUMBER(8),
  subroutename VARCHAR2(30),
  busid        VARCHAR2(36),
  cardid       VARCHAR2(20),
  stationid    VARCHAR2(36),
  stationno    VARCHAR2(8),
  stationname  VARCHAR2(50),
  actdatetime  DATE,
  onpnum       NUMBER(4),
  offpnum      NUMBER(4),
  leftpnum     NUMBER(4)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_STATIONPASSENGERS
  is '站点上下客数';
comment on column OSECD.BZ_STATIONPASSENGERS.stapassid
  is '主键';
comment on column OSECD.BZ_STATIONPASSENGERS.routeid
  is '线路ID';
comment on column OSECD.BZ_STATIONPASSENGERS.routename
  is '线路名称';
comment on column OSECD.BZ_STATIONPASSENGERS.subroteid
  is '子线ID';
comment on column OSECD.BZ_STATIONPASSENGERS.subroutename
  is '子线名称';
comment on column OSECD.BZ_STATIONPASSENGERS.busid
  is '车辆ID';
comment on column OSECD.BZ_STATIONPASSENGERS.cardid
  is '车牌号';
comment on column OSECD.BZ_STATIONPASSENGERS.stationid
  is '站点ID';
comment on column OSECD.BZ_STATIONPASSENGERS.stationno
  is '站点编号';
comment on column OSECD.BZ_STATIONPASSENGERS.stationname
  is '站点名';
comment on column OSECD.BZ_STATIONPASSENGERS.actdatetime
  is '业务时间';
comment on column OSECD.BZ_STATIONPASSENGERS.onpnum
  is '上客数';
comment on column OSECD.BZ_STATIONPASSENGERS.offpnum
  is '下客数';
comment on column OSECD.BZ_STATIONPASSENGERS.leftpnum
  is '载客数';
create index OSECD.IX_STATIONPASSENGERS on OSECD.BZ_STATIONPASSENGERS (ACTDATETIME)
  tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_SVACHECKPLAN
prompt ==============================
prompt
create table OSECD.BZ_SVACHECKPLAN
(
  svacheckplanid VARCHAR2(50) not null,
  planname       NVARCHAR2(255),
  planno         NUMBER(8) default 0,
  checktype      CHAR(1),
  plancontent    NVARCHAR2(255),
  startdate      DATE,
  enddate        DATE,
  memos          NVARCHAR2(255),
  isactive       CHAR(1) default 1,
  verifystatus   CHAR(1) default 0,
  verifyby       VARCHAR2(50),
  verifydate     DATE,
  created        DATE,
  createby       VARCHAR2(50),
  updated        DATE,
  updateby       VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_SVACHECKPLAN
  is '服务质量检查计划表';
comment on column OSECD.BZ_SVACHECKPLAN.svacheckplanid
  is '服务质量检查计划主键ID';
comment on column OSECD.BZ_SVACHECKPLAN.planname
  is '检查计划名称';
comment on column OSECD.BZ_SVACHECKPLAN.planno
  is '检查计划编号';
comment on column OSECD.BZ_SVACHECKPLAN.checktype
  is '检查类别(对应字典SVACHECKTYPE，0车容车貌，1安全运营，2服务规范)';
comment on column OSECD.BZ_SVACHECKPLAN.plancontent
  is '检查计划内容';
comment on column OSECD.BZ_SVACHECKPLAN.startdate
  is '有效开始日期';
comment on column OSECD.BZ_SVACHECKPLAN.enddate
  is '有效结束日期';
comment on column OSECD.BZ_SVACHECKPLAN.memos
  is '备注';
comment on column OSECD.BZ_SVACHECKPLAN.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_SVACHECKPLAN.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_SVACHECKPLAN.verifyby
  is '审核人';
comment on column OSECD.BZ_SVACHECKPLAN.verifydate
  is '审核时间';
comment on column OSECD.BZ_SVACHECKPLAN.created
  is '创建日期';
comment on column OSECD.BZ_SVACHECKPLAN.createby
  is '创建者';
comment on column OSECD.BZ_SVACHECKPLAN.updated
  is '更新日期';
comment on column OSECD.BZ_SVACHECKPLAN.updateby
  is '更新者';
alter table OSECD.BZ_SVACHECKPLAN
  add constraint PK_SVACHECKPLANID primary key (SVACHECKPLANID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_SVACHECKRECORD
prompt ================================
prompt
create table OSECD.BZ_SVACHECKRECORD
(
  svacheckrecordid    VARCHAR2(50) not null,
  checktype           CHAR(1) default 0,
  svacheckplanid      VARCHAR2(50),
  checkdate           DATE,
  objecttype          CHAR(1),
  orgid               VARCHAR2(50),
  routeid             VARCHAR2(50),
  subrouteid          VARCHAR2(50),
  segmentid           VARCHAR2(50),
  busid               VARCHAR2(50),
  empid               VARCHAR2(50),
  empname             NVARCHAR2(50),
  checkname           NVARCHAR2(255),
  checkcontent        NVARCHAR2(255),
  svassesscriterionid VARCHAR2(50),
  criteriontype       CHAR(1),
  criterionvalue      NUMBER(8,2) default 0,
  memos               NVARCHAR2(255),
  isactive            CHAR(1) default 1,
  verifystatus        CHAR(1) default 0,
  verifyby            VARCHAR2(50),
  verifydate          DATE,
  created             DATE,
  createby            VARCHAR2(50),
  updated             DATE,
  updateby            VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_SVACHECKRECORD
  is '服务质量现场检查记录表';
comment on column OSECD.BZ_SVACHECKRECORD.svacheckrecordid
  is '服务质量现场检查记录主键ID';
comment on column OSECD.BZ_SVACHECKRECORD.checktype
  is '检查类别(0计划检查，1临时检查)';
comment on column OSECD.BZ_SVACHECKRECORD.svacheckplanid
  is '对应服务质量检查计划主键ID';
comment on column OSECD.BZ_SVACHECKRECORD.checkdate
  is '检查日期';
comment on column OSECD.BZ_SVACHECKRECORD.objecttype
  is '检查对象类别(对应字典SVAOBJECTTYPE，1企业，2线路，3车辆，4人员)';
comment on column OSECD.BZ_SVACHECKRECORD.orgid
  is '企业ID';
comment on column OSECD.BZ_SVACHECKRECORD.routeid
  is '线路ID';
comment on column OSECD.BZ_SVACHECKRECORD.subrouteid
  is '子线路ID(预留)';
comment on column OSECD.BZ_SVACHECKRECORD.segmentid
  is '单程ID(预留)';
comment on column OSECD.BZ_SVACHECKRECORD.busid
  is '车辆ID';
comment on column OSECD.BZ_SVACHECKRECORD.empid
  is '人员ID(预留)';
comment on column OSECD.BZ_SVACHECKRECORD.empname
  is '人员姓名';
comment on column OSECD.BZ_SVACHECKRECORD.checkname
  is '检查任务名称';
comment on column OSECD.BZ_SVACHECKRECORD.checkcontent
  is '检查内容';
comment on column OSECD.BZ_SVACHECKRECORD.svassesscriterionid
  is '对应服务质量考核标准主键ID';
comment on column OSECD.BZ_SVACHECKRECORD.criteriontype
  is '考核评价方式(对应字典CRITERIONTYPE，0扣分，1加分)';
comment on column OSECD.BZ_SVACHECKRECORD.criterionvalue
  is '考核评价分值';
comment on column OSECD.BZ_SVACHECKRECORD.memos
  is '备注';
comment on column OSECD.BZ_SVACHECKRECORD.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_SVACHECKRECORD.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_SVACHECKRECORD.verifyby
  is '审核人';
comment on column OSECD.BZ_SVACHECKRECORD.verifydate
  is '审核时间';
comment on column OSECD.BZ_SVACHECKRECORD.created
  is '创建日期';
comment on column OSECD.BZ_SVACHECKRECORD.createby
  is '创建者';
comment on column OSECD.BZ_SVACHECKRECORD.updated
  is '更新日期';
comment on column OSECD.BZ_SVACHECKRECORD.updateby
  is '更新者';
alter table OSECD.BZ_SVACHECKRECORD
  add constraint PK_SVACHECKRECORDID primary key (SVACHECKRECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_SVASSESSCRITERION
prompt ===================================
prompt
create table OSECD.BZ_SVASSESSCRITERION
(
  svassesscriterionid VARCHAR2(50) not null,
  svassessindexid     VARCHAR2(50),
  criterionno         NUMBER(8) default 0,
  criterionname       NVARCHAR2(255),
  criterioncontent    NVARCHAR2(255),
  criteriontype       CHAR(1),
  criterionvalue      NUMBER(8,2) default 0,
  memos               NVARCHAR2(255),
  isactive            CHAR(1) default 1,
  verifystatus        CHAR(1) default 0,
  verifyby            VARCHAR2(50),
  verifydate          DATE,
  created             DATE,
  createby            VARCHAR2(50),
  updated             DATE,
  updateby            VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_SVASSESSCRITERION
  is '服务质量考核标准管理表';
comment on column OSECD.BZ_SVASSESSCRITERION.svassesscriterionid
  is '服务质量考核标准主键ID';
comment on column OSECD.BZ_SVASSESSCRITERION.svassessindexid
  is '对应服务质量考核指标主键ID';
comment on column OSECD.BZ_SVASSESSCRITERION.criterionno
  is '考核标准编号';
comment on column OSECD.BZ_SVASSESSCRITERION.criterionname
  is '考核标准名称';
comment on column OSECD.BZ_SVASSESSCRITERION.criterioncontent
  is '考核标准内容';
comment on column OSECD.BZ_SVASSESSCRITERION.criteriontype
  is '考核评价方式(对应字典CRITERIONTYPE，0扣分，1加分)';
comment on column OSECD.BZ_SVASSESSCRITERION.criterionvalue
  is '考核标准分值';
comment on column OSECD.BZ_SVASSESSCRITERION.memos
  is '备注';
comment on column OSECD.BZ_SVASSESSCRITERION.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_SVASSESSCRITERION.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_SVASSESSCRITERION.verifyby
  is '审核人';
comment on column OSECD.BZ_SVASSESSCRITERION.verifydate
  is '审核时间';
comment on column OSECD.BZ_SVASSESSCRITERION.created
  is '创建日期';
comment on column OSECD.BZ_SVASSESSCRITERION.createby
  is '创建者';
comment on column OSECD.BZ_SVASSESSCRITERION.updated
  is '更新日期';
comment on column OSECD.BZ_SVASSESSCRITERION.updateby
  is '更新者';
alter table OSECD.BZ_SVASSESSCRITERION
  add constraint PK_SVASSESSCRITERIONID primary key (SVASSESSCRITERIONID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_SVASSESSINDEX
prompt ===============================
prompt
create table OSECD.BZ_SVASSESSINDEX
(
  svassessindexid VARCHAR2(50) not null,
  indextype       CHAR(1) default 1,
  indexno         NUMBER(8) default 0,
  indexname       NVARCHAR2(255),
  indexcontent    NVARCHAR2(255),
  memos           NVARCHAR2(255),
  isactive        CHAR(1) default 1,
  verifystatus    CHAR(1) default 0,
  verifyby        VARCHAR2(50),
  verifydate      DATE,
  created         DATE,
  createby        VARCHAR2(50),
  updated         DATE,
  updateby        VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_SVASSESSINDEX
  is '服务质量考核指标管理表';
comment on column OSECD.BZ_SVASSESSINDEX.svassessindexid
  is '服务质量考核指标主键ID';
comment on column OSECD.BZ_SVASSESSINDEX.indextype
  is '指标类别(0系统级，1用户级)';
comment on column OSECD.BZ_SVASSESSINDEX.indexno
  is '指标编号';
comment on column OSECD.BZ_SVASSESSINDEX.indexname
  is '指标名称';
comment on column OSECD.BZ_SVASSESSINDEX.indexcontent
  is '指标内容';
comment on column OSECD.BZ_SVASSESSINDEX.memos
  is '备注';
comment on column OSECD.BZ_SVASSESSINDEX.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_SVASSESSINDEX.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_SVASSESSINDEX.verifyby
  is '审核人';
comment on column OSECD.BZ_SVASSESSINDEX.verifydate
  is '审核时间';
comment on column OSECD.BZ_SVASSESSINDEX.created
  is '创建日期';
comment on column OSECD.BZ_SVASSESSINDEX.createby
  is '创建者';
comment on column OSECD.BZ_SVASSESSINDEX.updated
  is '更新日期';
comment on column OSECD.BZ_SVASSESSINDEX.updateby
  is '更新者';
alter table OSECD.BZ_SVASSESSINDEX
  add constraint PK_SVASSESSINDEXID primary key (SVASSESSINDEXID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_TEMPROUTERUNDATACOMMIT
prompt ========================================
prompt
create table OSECD.BZ_TEMPROUTERUNDATACOMMIT
(
  temprouterundatacommitid       VARCHAR2(50) not null,
  temprouterundatacommituploadid VARCHAR2(50),
  datatype                       CHAR(1) default 2,
  rundate                        DATE,
  rundatechar                    VARCHAR2(50),
  orgid                          VARCHAR2(50),
  routeid                        VARCHAR2(50),
  routename                      NVARCHAR2(100),
  subrouteid                     VARCHAR2(50),
  segmentid                      VARCHAR2(50),
  routelength                    NUMBER(10,2),
  realseqcount                   NUMBER(10),
  routelength2                   NUMBER(10,2),
  realseqcount2                  NUMBER(10),
  cardamount                     NUMBER(10,2),
  cashamount                     NUMBER(10,2),
  cardpassengernum               NUMBER(10,2),
  cashpassengernum               NUMBER(10,2),
  isactive                       CHAR(1) default 1,
  verifystatus                   CHAR(1) default 0,
  verifyby                       VARCHAR2(50),
  verifydate                     DATE,
  memos                          NVARCHAR2(255),
  retain1                        VARCHAR2(50),
  retain2                        VARCHAR2(50),
  retain3                        VARCHAR2(50),
  retain4                        VARCHAR2(50),
  retain5                        VARCHAR2(50),
  retain6                        VARCHAR2(50),
  retain7                        VARCHAR2(50),
  retain8                        VARCHAR2(50),
  retain9                        VARCHAR2(50),
  retain10                       VARCHAR2(50),
  created                        DATE,
  createby                       VARCHAR2(50),
  updated                        DATE,
  updateby                       VARCHAR2(50),
  commitstatus                   CHAR(1),
  commitby                       VARCHAR2(50),
  commitdate                     DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_TEMPROUTERUNDATACOMMIT
  is '临时线路月度运营明细数据记录表';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.temprouterundatacommitid
  is '线路月度运营明细数据记录主键ID';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.temprouterundatacommituploadid
  is '对应线路月度运营明细数据上传记录主键ID';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.datatype
  is '数据类型(1按日，2按月)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.rundate
  is '业务日期(按天时记录为当日，按月时记录每月1号)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.rundatechar
  is '业务日期(字符格式，X年X月X日或X年X月)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.orgid
  is '企业ID';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.routeid
  is '线路ID(临时线路暂无ID)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.routename
  is '线路编号(即线路名称)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.subrouteid
  is '子线路ID(备用)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.segmentid
  is '单程ID(备用)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.routelength
  is '线路长度(单位：KM)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.realseqcount
  is '月实际发车班次(或月线路调整前实际发车班次，单位班)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.routelength2
  is '月线路调整后线路长度(单位：KM)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.realseqcount2
  is '月线路调整后实际发车班次(单位班)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.cardamount
  is '刷卡折前营收总金额(单位：万元)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.cashamount
  is '现金营收总金额(单位：万元)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.cardpassengernum
  is '刷卡客运量(单位：人次)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.cashpassengernum
  is '现金客运量(单位：人次)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.verifyby
  is '审核人';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.verifydate
  is '审核时间';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.memos
  is '备注';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.retain1
  is '预留字段1';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.retain2
  is '预留字段2';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.retain3
  is '预留字段3';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.retain4
  is '预留字段4';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.retain5
  is '预留字段5';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.retain6
  is '预留字段6';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.retain7
  is '预留字段7';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.retain8
  is '预留字段8';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.retain9
  is '预留字段9';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.retain10
  is '预留字段10';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.created
  is '创建日期';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.createby
  is '创建者';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.updated
  is '更新日期';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.updateby
  is '更新者';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.commitstatus
  is '提交状态(0未提交，1已提交)';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.commitby
  is '提交人';
comment on column OSECD.BZ_TEMPROUTERUNDATACOMMIT.commitdate
  is '提交时间';
alter table OSECD.BZ_TEMPROUTERUNDATACOMMIT
  add constraint PK_TEMPROUTERUNDATACOMMITID primary key (TEMPROUTERUNDATACOMMITID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table BZ_TRAVELSERVICE
prompt ===============================
prompt
create table OSECD.BZ_TRAVELSERVICE
(
  travelserviceid   VARCHAR2(36) not null,
  subscriptioncount NUMBER,
  sendservicecount  NUMBER,
  suggestioncount   NUMBER,
  handlesugcount    NUMBER,
  satisfactionrate  NUMBER(10,2),
  netpageview       NUMBER,
  apppageview       NUMBER,
  newscount         NUMBER,
  quesurveycount    NUMBER,
  jzdate            DATE,
  datatype          VARCHAR2(2),
  rundare           DATE
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.BZ_TRAVELSERVICE
  is '出行服务';
comment on column OSECD.BZ_TRAVELSERVICE.travelserviceid
  is '出行服务ID';
comment on column OSECD.BZ_TRAVELSERVICE.subscriptioncount
  is '订阅量';
comment on column OSECD.BZ_TRAVELSERVICE.sendservicecount
  is '发送服务量';
comment on column OSECD.BZ_TRAVELSERVICE.suggestioncount
  is '投诉建议量';
comment on column OSECD.BZ_TRAVELSERVICE.handlesugcount
  is '处理投诉建议量';
comment on column OSECD.BZ_TRAVELSERVICE.satisfactionrate
  is '满意率';
comment on column OSECD.BZ_TRAVELSERVICE.netpageview
  is '网站访问量';
comment on column OSECD.BZ_TRAVELSERVICE.apppageview
  is '移动端访问量';
comment on column OSECD.BZ_TRAVELSERVICE.newscount
  is '新闻数量';
comment on column OSECD.BZ_TRAVELSERVICE.quesurveycount
  is '问卷调查数量';
comment on column OSECD.BZ_TRAVELSERVICE.jzdate
  is '结存日期';
comment on column OSECD.BZ_TRAVELSERVICE.datatype
  is '结存类别';
comment on column OSECD.BZ_TRAVELSERVICE.rundare
  is '记录日期';
alter table OSECD.BZ_TRAVELSERVICE
  add constraint PK_TRAVELSERVICEID primary key (TRAVELSERVICEID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table CDJW_BUSINFO
prompt ===========================
prompt
create table OSECD.CDJW_BUSINFO
(
  busid      VARCHAR2(36),
  busselfid  NVARCHAR2(20),
  cardid     NVARCHAR2(20),
  orgid      VARCHAR2(36),
  orgidfrom  VARCHAR2(36),
  busstatus  VARCHAR2(2),
  createdate DATE,
  rundate    DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.CDJW_BUSINFO.busid
  is 'ID与mcbusinfogd不对应';
comment on column OSECD.CDJW_BUSINFO.busselfid
  is '自编号';
comment on column OSECD.CDJW_BUSINFO.cardid
  is '车牌';
comment on column OSECD.CDJW_BUSINFO.orgid
  is '运营组织';
comment on column OSECD.CDJW_BUSINFO.orgidfrom
  is '权属组织';
comment on column OSECD.CDJW_BUSINFO.busstatus
  is '0:正常1:报废2:封存3:临停4:新车待分配5:借出';
comment on column OSECD.CDJW_BUSINFO.createdate
  is '创建时间 ';
comment on column OSECD.CDJW_BUSINFO.rundate
  is '结存时间 ';

prompt
prompt Creating table CS_OA_FWTSDJ
prompt ===========================
prompt
create table OSECD.CS_OA_FWTSDJ
(
  slxh   NUMBER(22) not null,
  sllb   VARCHAR2(10) not null,
  lcdqzt VARCHAR2(50),
  slsj   DATE,
  sfqk   VARCHAR2(2000),
  qyjc   VARCHAR2(20),
  pzhm   VARCHAR2(10),
  dsrmx  VARCHAR2(50),
  sfgscl VARCHAR2(1),
  gssfhh VARCHAR2(1),
  xl     VARCHAR2(32),
  gsclrq DATE,
  sfmy   VARCHAR2(10)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.CS_OA_FWTSDJ
  is '服务投诉登记';
comment on column OSECD.CS_OA_FWTSDJ.slxh
  is '受理序号';
comment on column OSECD.CS_OA_FWTSDJ.sllb
  is '类别：投诉、举报、表扬、寻物、建议';
comment on column OSECD.CS_OA_FWTSDJ.lcdqzt
  is '流程当前状态：1、受理 2、。。';
comment on column OSECD.CS_OA_FWTSDJ.slsj
  is '受理时间';
comment on column OSECD.CS_OA_FWTSDJ.sfqk
  is '事发情况';
comment on column OSECD.CS_OA_FWTSDJ.qyjc
  is '企业简称';
comment on column OSECD.CS_OA_FWTSDJ.pzhm
  is '牌照号码';
comment on column OSECD.CS_OA_FWTSDJ.dsrmx
  is '当事人姓名';
comment on column OSECD.CS_OA_FWTSDJ.sfgscl
  is '是否公司处理';
comment on column OSECD.CS_OA_FWTSDJ.gssfhh
  is '公司是否回复';
comment on column OSECD.CS_OA_FWTSDJ.xl
  is '线路';
comment on column OSECD.CS_OA_FWTSDJ.gsclrq
  is '公司处理日期';
comment on column OSECD.CS_OA_FWTSDJ.sfmy
  is '是否满意';
alter table OSECD.CS_OA_FWTSDJ
  add primary key (SLXH)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 14M
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table DBA_PART_TABLE
prompt =============================
prompt
create table OSECD.DBA_PART_TABLE
(
  table_name       VARCHAR2(64) not null,
  tablespace_tbl   VARCHAR2(64) not null,
  tablespace_idx   VARCHAR2(64) not null,
  partition_column VARCHAR2(64) not null,
  partition_type   CHAR(1) default '1' not null,
  truncate_date    NUMBER default 72,
  memo             VARCHAR2(1024)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.DBA_PART_TABLE.table_name
  is '分区表名';
comment on column OSECD.DBA_PART_TABLE.tablespace_tbl
  is '分区表空间';
comment on column OSECD.DBA_PART_TABLE.tablespace_idx
  is '分区表索引表空间';
comment on column OSECD.DBA_PART_TABLE.partition_column
  is '分区列名';
comment on column OSECD.DBA_PART_TABLE.partition_type
  is '分区类型：0为日分区，1为月分区，2为年分区';
comment on column OSECD.DBA_PART_TABLE.truncate_date
  is '自动清除时间，单位为月';
comment on column OSECD.DBA_PART_TABLE.memo
  is '说明';

prompt
prompt Creating table DBA_PART_TAB_LOG
prompt ===============================
prompt
create table OSECD.DBA_PART_TAB_LOG
(
  tab_name    VARCHAR2(200),
  deal_model  VARCHAR2(200),
  sql_text    VARCHAR2(4000),
  deal_time   DATE,
  remark      VARCHAR2(4000),
  exec_order1 NUMBER,
  exec_order2 NUMBER
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table DEVEVENT5
prompt ========================
prompt
create table OSECD.DEVEVENT5
(
  deveventid    VARCHAR2(20) not null,
  devtypecode   VARCHAR2(3) not null,
  eventtime     DATE not null,
  eventtypecode VARCHAR2(3) not null,
  productid     NUMBER(10) not null,
  routeid       NUMBER(8) not null,
  softver       NUMBER(8),
  detector      NUMBER(8),
  writeid       NUMBER(8),
  recdate       DATE default SYSDATE not null,
  memos         VARCHAR2(2),
  productcode   NUMBER(10),
  ip            VARCHAR2(16),
  port          NUMBER(10),
  nettype       CHAR(3),
  cfgver        VARCHAR2(10),
  simcardid     VARCHAR2(20),
  issvrappend   CHAR(1) default '0',
  svrappendtime DATE
)
partition by range (EVENTTIME)
(
  partition P_201401 values less than (TO_DATE(' 2014-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201402 values less than (TO_DATE(' 2014-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201403 values less than (TO_DATE(' 2014-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201404 values less than (TO_DATE(' 2014-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201405 values less than (TO_DATE(' 2014-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201406 values less than (TO_DATE(' 2014-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201407 values less than (TO_DATE(' 2014-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201408 values less than (TO_DATE(' 2014-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201409 values less than (TO_DATE(' 2014-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201410 values less than (TO_DATE(' 2014-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201412 values less than (TO_DATE(' 2015-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201501 values less than (TO_DATE(' 2015-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201502 values less than (TO_DATE(' 2015-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201503 values less than (TO_DATE(' 2015-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201504 values less than (TO_DATE(' 2015-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201505 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201506 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201507 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201508 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201509 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201510 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201511 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201512 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201601 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201602 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201603 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201604 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201605 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201606 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201607 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201609 values less than (TO_DATE(' 2016-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201610 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.DEVEVENT5
  is '设备事件表，存储设备上线、下线事件';
comment on column OSECD.DEVEVENT5.deveventid
  is '序号';
comment on column OSECD.DEVEVENT5.devtypecode
  is '设备类型编号';
comment on column OSECD.DEVEVENT5.eventtime
  is '最近状态变更时间';
comment on column OSECD.DEVEVENT5.eventtypecode
  is '状态类型:1:ID冲突;2:客户登录;3:客户注销;4:关机消息;5:关机失败;6:加电登陆;7:重启登陆;8:连接中断';
comment on column OSECD.DEVEVENT5.productid
  is '车载机号';
comment on column OSECD.DEVEVENT5.routeid
  is '线路号';
comment on column OSECD.DEVEVENT5.softver
  is '客户端支持的版本(SHORT)';
comment on column OSECD.DEVEVENT5.detector
  is '检测者';
comment on column OSECD.DEVEVENT5.writeid
  is '记录者';
comment on column OSECD.DEVEVENT5.recdate
  is '记录时间';
comment on column OSECD.DEVEVENT5.memos
  is '备注';
comment on column OSECD.DEVEVENT5.productcode
  is '设备产品号';
comment on column OSECD.DEVEVENT5.ip
  is '终端IP地址';
comment on column OSECD.DEVEVENT5.port
  is '终端端口号';
comment on column OSECD.DEVEVENT5.nettype
  is '第三方网络类型；1-移动GPRS ，2-联通GPRS，3-电信CDMA，16-联通WCDMA，17-电信CDMA2K，18移动TD';
comment on column OSECD.DEVEVENT5.cfgver
  is '配置文件版本号';
comment on column OSECD.DEVEVENT5.simcardid
  is 'SIM卡号';
comment on column OSECD.DEVEVENT5.issvrappend
  is '存储服务自动补交标志 - 数据入库失败后,存储服务保存到文件然后再补交 0,非补交(直接入库);1,补交;';
comment on column OSECD.DEVEVENT5.svrappendtime
  is '存储服务自动补交时间';
create index OSECD.PK_DEVEVENT5 on OSECD.DEVEVENT5 (DEVEVENTID)
  local;
create index OSECD.PK_DEVEVENT5INDEX on OSECD.DEVEVENT5 (EVENTTIME, PRODUCTID, ROUTEID)
  local;

prompt
prompt Creating table DE_ICDATA
prompt ========================
prompt
create table OSECD.DE_ICDATA
(
  jlbm         NUMBER not null,
  kpljbm       VARCHAR2(32) not null,
  zdbm         VARCHAR2(32) not null,
  gsbm         VARCHAR2(32),
  jylx         VARCHAR2(32),
  jyje         NUMBER,
  sjjyje       NUMBER,
  jysj         DATE,
  cjrq         DATE,
  gsmc         VARCHAR2(20),
  zdmc         VARCHAR2(30),
  exchangetime DATE,
  buscardno    VARCHAR2(12)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.DE_ICDATA.jlbm
  is '记录编号';
comment on column OSECD.DE_ICDATA.kpljbm
  is '卡片编码';
comment on column OSECD.DE_ICDATA.gsbm
  is '公司编码';
comment on column OSECD.DE_ICDATA.jylx
  is '交易类型';
comment on column OSECD.DE_ICDATA.jyje
  is '交易金额';
comment on column OSECD.DE_ICDATA.sjjyje
  is '实际交易金额';
comment on column OSECD.DE_ICDATA.jysj
  is '交易时间';
comment on column OSECD.DE_ICDATA.cjrq
  is '采集时间';
comment on column OSECD.DE_ICDATA.gsmc
  is '公司名称';
comment on column OSECD.DE_ICDATA.zdmc
  is '线路名称';
comment on column OSECD.DE_ICDATA.exchangetime
  is '交换时间';
comment on column OSECD.DE_ICDATA.buscardno
  is '车牌号';

prompt
prompt Creating table DE_ROUNDTRIP
prompt ===========================
prompt
create table OSECD.DE_ROUNDTRIP
(
  day               DATE,
  linename          VARCHAR2(100),
  bus               VARCHAR2(100),
  direction         VARCHAR2(50),
  starttime         VARCHAR2(200),
  endtime           VARCHAR2(200),
  startstation      VARCHAR2(500),
  endstation        VARCHAR2(500),
  dummystarttime    VARCHAR2(200),
  dummyendtime      VARCHAR2(200),
  dummystartstation VARCHAR2(500),
  dummyendstation   VARCHAR2(500),
  ratio1            VARCHAR2(20),
  ratio2            VARCHAR2(20),
  missstationlist   VARCHAR2(200),
  realtimecost      VARCHAR2(100),
  avgtimecost       VARCHAR2(100)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.DE_ROUNDTRIP
  is '先进院计算班次数据';
comment on column OSECD.DE_ROUNDTRIP.day
  is '日期';
comment on column OSECD.DE_ROUNDTRIP.linename
  is '线路名称';
comment on column OSECD.DE_ROUNDTRIP.bus
  is '车牌号';
comment on column OSECD.DE_ROUNDTRIP.direction
  is '上下行';
comment on column OSECD.DE_ROUNDTRIP.starttime
  is '开始时间';
comment on column OSECD.DE_ROUNDTRIP.endtime
  is '结束时间';
comment on column OSECD.DE_ROUNDTRIP.startstation
  is '开始站点';
comment on column OSECD.DE_ROUNDTRIP.endstation
  is '结束站点';
comment on column OSECD.DE_ROUNDTRIP.dummystarttime
  is '预测开始时间';
comment on column OSECD.DE_ROUNDTRIP.dummyendtime
  is '预测结束时间';
comment on column OSECD.DE_ROUNDTRIP.dummystartstation
  is '预测开始站点';
comment on column OSECD.DE_ROUNDTRIP.dummyendstation
  is '预测结束站点';
comment on column OSECD.DE_ROUNDTRIP.ratio1
  is '连续报站数量(忽略中间缺站)';
comment on column OSECD.DE_ROUNDTRIP.ratio2
  is '实际报站数量';
comment on column OSECD.DE_ROUNDTRIP.missstationlist
  is '缺失站点列表';
comment on column OSECD.DE_ROUNDTRIP.realtimecost
  is '班次耗时(分)';
comment on column OSECD.DE_ROUNDTRIP.avgtimecost
  is '线路平均耗时';
create index OSECD.INDEX_DE_ROUNDTRIP on OSECD.DE_ROUNDTRIP (DAY, LINENAME, BUS)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FDISBUSRUNRECGD
prompt ==============================
prompt
create table OSECD.FDISBUSRUNRECGD
(
  busrrid           VARCHAR2(20) not null,
  rectype           CHAR(1) not null,
  routeid           NUMBER(8) not null,
  subrouteid        NUMBER(8),
  segmentid         NUMBER(8),
  shiftnum          VARCHAR2(4),
  busseq            VARCHAR2(4),
  busid             VARCHAR2(20) not null,
  driverid          VARCHAR2(20),
  bussid            VARCHAR2(3) not null,
  stewardid         VARCHAR2(20),
  startstationid    VARCHAR2(20),
  endstationid      VARCHAR2(20),
  leavetime         DATE,
  arrivetime        DATE,
  dissendtime       DATE,
  disarrivetime     DATE,
  islate            CHAR(1),
  directiontype     CHAR(1),
  recempid          VARCHAR2(20),
  fromdisdata       VARCHAR2(2),
  fromgpsdata       VARCHAR2(2),
  unexmcause        VARCHAR2(255),
  seqtype           CHAR(1),
  makeupflag        CHAR(1),
  crossdayflag      CHAR(1),
  rundatadate       DATE not null,
  peakvalue         VARCHAR2(2),
  cyclenum          NUMBER(3),
  excutestate       CHAR(1),
  miletypeid        VARCHAR2(2) not null,
  milenum           NUMBER(10,2) not null,
  recdate           DATE not null,
  statisticflag     CHAR(1) not null,
  iscomplete        CHAR(1) not null,
  issave            CHAR(1) not null,
  issync            CHAR(1) not null,
  shifttype         VARCHAR2(4),
  drivername        VARCHAR2(50),
  stewardname       VARCHAR2(50),
  busselfid         VARCHAR2(20),
  segmentname       VARCHAR2(30),
  timeinterval      NUMBER(3),
  memos             VARCHAR2(255),
  seqnum            NUMBER(4,2) default 1,
  extstewardid      VARCHAR2(20),
  extstewardname    VARCHAR2(20),
  createwhilerun    CHAR(1),
  createbygps       CHAR(1),
  versionflag       CHAR(1),
  isavailable       CHAR(1),
  edited            CHAR(1),
  arrlftmarkvalue   NUMBER(8),
  leavecardtime     DATE,
  arrivecardtime    DATE,
  leaveplacetime    DATE,
  arriveplacetime   DATE,
  avgspeed          NUMBER default 0,
  seqtime           NUMBER default 0,
  writeid           NUMBER(20) default 0,
  reviewflag        CHAR(1) default 0,
  isconfirm         CHAR(1) default 0,
  matchflag         CHAR(1) default 0,
  groupnum          CHAR(1) default '1',
  gpsmile           NUMBER(10,2),
  rowaddversion     NUMBER default 11,
  rowupdateversion  NUMBER default 11,
  issyncchange      CHAR(4) default '0' not null,
  displanleavetime  DATE,
  displanarrivetime DATE,
  ischeck           CHAR(1) default '0',
  unexmtype         NUMBER,
  displanid         VARCHAR2(20),
  latetimeinterval  NUMBER default 0,
  displanbustrbid   VARCHAR2(20),
  shiftdetailtype   VARCHAR2(2),
  shiftnumstring    VARCHAR2(20),
  clientcode        VARCHAR2(4) default '0',
  sequencetype      VARCHAR2(10) default '-1',
  dispatcher        VARCHAR2(20),
  subdispatcher     VARCHAR2(20),
  midsiteid         VARCHAR2(20),
  orgid             VARCHAR2(20),
  aendstationflag   NUMBER(3),
  lstartstationflag NUMBER(3)
)
partition by range (RUNDATADATE)
(
  partition P_201601 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201602 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201603 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201604 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201605 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201606 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201607 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201610 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.FDISBUSRUNRECGD
  is '车辆发车纪录,相当于行车路单';
comment on column OSECD.FDISBUSRUNRECGD.busrrid
  is '序号';
comment on column OSECD.FDISBUSRUNRECGD.rectype
  is '车次类型：1-营运；2-非营运';
comment on column OSECD.FDISBUSRUNRECGD.routeid
  is '线路';
comment on column OSECD.FDISBUSRUNRECGD.subrouteid
  is '子线路';
comment on column OSECD.FDISBUSRUNRECGD.segmentid
  is '单程线路ID';
comment on column OSECD.FDISBUSRUNRECGD.shiftnum
  is '班次（必填）';
comment on column OSECD.FDISBUSRUNRECGD.busseq
  is '车次（不填）';
comment on column OSECD.FDISBUSRUNRECGD.busid
  is '车辆ID';
comment on column OSECD.FDISBUSRUNRECGD.driverid
  is '驾驶员ID';
comment on column OSECD.FDISBUSRUNRECGD.bussid
  is '车辆状态ID(字典表参数BUSSTATETYPE-上行、下行、环行、加油、维修等)';
comment on column OSECD.FDISBUSRUNRECGD.stewardid
  is '乘务员';
comment on column OSECD.FDISBUSRUNRECGD.startstationid
  is '出发站点';
comment on column OSECD.FDISBUSRUNRECGD.endstationid
  is '目的站点';
comment on column OSECD.FDISBUSRUNRECGD.leavetime
  is '发车时间(带实际日期)';
comment on column OSECD.FDISBUSRUNRECGD.arrivetime
  is '到站时间(带实际日期)';
comment on column OSECD.FDISBUSRUNRECGD.dissendtime
  is '发车时间(带实际日期)';
comment on column OSECD.FDISBUSRUNRECGD.disarrivetime
  is '到站时间(带实际日期)';
comment on column OSECD.FDISBUSRUNRECGD.islate
  is '早晚点（字典表0,准点;1,晚点;2,早点;3,不予考核）';
comment on column OSECD.FDISBUSRUNRECGD.directiontype
  is '运行方向（暂时不用）';
comment on column OSECD.FDISBUSRUNRECGD.recempid
  is '记录人员ID（调度员ID或后台system）';
comment on column OSECD.FDISBUSRUNRECGD.fromdisdata
  is '来源于调度(暂时不用)';
comment on column OSECD.FDISBUSRUNRECGD.fromgpsdata
  is '源于车载机(暂时不用)';
comment on column OSECD.FDISBUSRUNRECGD.unexmcause
  is '免核原因';
comment on column OSECD.FDISBUSRUNRECGD.seqtype
  is '车次类型(字典表1,放空;2,全程;3,区间;4,出入库;5,故障)';
comment on column OSECD.FDISBUSRUNRECGD.makeupflag
  is '补录标志(默认为0;调度写入0,BS写入为1)';
comment on column OSECD.FDISBUSRUNRECGD.crossdayflag
  is '跨日标志(暂时不用)';
comment on column OSECD.FDISBUSRUNRECGD.rundatadate
  is '营运日期(不带时间)';
comment on column OSECD.FDISBUSRUNRECGD.peakvalue
  is '峰值(暂时未用，直接使用时间段)';
comment on column OSECD.FDISBUSRUNRECGD.cyclenum
  is '循次(暂时不用)';
comment on column OSECD.FDISBUSRUNRECGD.excutestate
  is '当前执行状态(暂时不用)';
comment on column OSECD.FDISBUSRUNRECGD.miletypeid
  is '里程类型(字典表MileType：10,营运载客;11,包车载客;20,加油;21,保养;22,维修;23,充气;24,出入库;30,教练;40,公务;90,其他)';
comment on column OSECD.FDISBUSRUNRECGD.milenum
  is '产生的里程';
comment on column OSECD.FDISBUSRUNRECGD.recdate
  is '记录时间';
comment on column OSECD.FDISBUSRUNRECGD.statisticflag
  is '是否已统计';
comment on column OSECD.FDISBUSRUNRECGD.iscomplete
  is '当前记录是否完整';
comment on column OSECD.FDISBUSRUNRECGD.issave
  is '是否向中心提交过';
comment on column OSECD.FDISBUSRUNRECGD.issync
  is '是否同步';
comment on column OSECD.FDISBUSRUNRECGD.shifttype
  is '班别(字典表1-单班 2-双班)';
comment on column OSECD.FDISBUSRUNRECGD.drivername
  is '司机姓名';
comment on column OSECD.FDISBUSRUNRECGD.stewardname
  is '乘务员姓名';
comment on column OSECD.FDISBUSRUNRECGD.busselfid
  is '车辆自编号';
comment on column OSECD.FDISBUSRUNRECGD.segmentname
  is '单程名称';
comment on column OSECD.FDISBUSRUNRECGD.timeinterval
  is '发车间隔';
comment on column OSECD.FDISBUSRUNRECGD.memos
  is '备注';
comment on column OSECD.FDISBUSRUNRECGD.seqnum
  is '车次个数(可能多个驾驶员分担一个车次)';
comment on column OSECD.FDISBUSRUNRECGD.extstewardid
  is '扩展乘务员编号';
comment on column OSECD.FDISBUSRUNRECGD.extstewardname
  is '扩展乘务员姓名';
comment on column OSECD.FDISBUSRUNRECGD.createwhilerun
  is '在运行过程中通过到离主副站产生的记录,0-否；1-是(暂时不用)';
comment on column OSECD.FDISBUSRUNRECGD.createbygps
  is '通过分析GPS数据得到的车次,0-否；1-是(暂时不用)';
comment on column OSECD.FDISBUSRUNRECGD.versionflag
  is '版本标志（0-记录处于调度受控状态；1-记录已进入后台软件受控状态）';
comment on column OSECD.FDISBUSRUNRECGD.isavailable
  is '车次有效性（1-有效记录；0-标记为无效记录）';
comment on column OSECD.FDISBUSRUNRECGD.edited
  is '可信度（是否从盘点中改过,0-否；1-是）';
comment on column OSECD.FDISBUSRUNRECGD.arrlftmarkvalue
  is '到离站累计确认值(暂时不用)';
comment on column OSECD.FDISBUSRUNRECGD.leavecardtime
  is '发车打卡时间';
comment on column OSECD.FDISBUSRUNRECGD.arrivecardtime
  is '到达打卡时间';
comment on column OSECD.FDISBUSRUNRECGD.leaveplacetime
  is '离场时间';
comment on column OSECD.FDISBUSRUNRECGD.arriveplacetime
  is '到场时间';
comment on column OSECD.FDISBUSRUNRECGD.avgspeed
  is '车次平均运行速度（米/秒）';
comment on column OSECD.FDISBUSRUNRECGD.seqtime
  is '车次累计运行时间（分钟）';
comment on column OSECD.FDISBUSRUNRECGD.writeid
  is '记录提交者(0-调度;10-到离站;11-快速到离站;20-车载机上传;30-到离场;31-快速到离场;50-打卡)';
comment on column OSECD.FDISBUSRUNRECGD.reviewflag
  is '是否下载到调度本地，相当调度是否看到。( 0-否；1-是)';
comment on column OSECD.FDISBUSRUNRECGD.isconfirm
  is '车次是否被调度确认( 0-否；1-是)';
comment on column OSECD.FDISBUSRUNRECGD.matchflag
  is '是否有匹配的调度排队( 0-否；1-是)';
comment on column OSECD.FDISBUSRUNRECGD.groupnum
  is '早班晚班(参照字典表)';
comment on column OSECD.FDISBUSRUNRECGD.gpsmile
  is 'GPS里程';
comment on column OSECD.FDISBUSRUNRECGD.rowaddversion
  is '数据同步';
comment on column OSECD.FDISBUSRUNRECGD.rowupdateversion
  is '数据同步';
comment on column OSECD.FDISBUSRUNRECGD.issyncchange
  is '0为非同步修改或添加，1-9为同步时修改或添加,1-9可以分配给多个客户端，这样方便双边调度是数据同步更新或添加还是其他方式更新或添加的标志，0为不是同步更新或添加的，大于0表示同步更新或添加的，同步本表时需要改变这个值为客户端同步编号（1-9），非同步情况下修改这个表要把值置为0';
comment on column OSECD.FDISBUSRUNRECGD.displanleavetime
  is '调度计划发车时间';
comment on column OSECD.FDISBUSRUNRECGD.displanarrivetime
  is '调度计划返回时间';
comment on column OSECD.FDISBUSRUNRECGD.ischeck
  is '是否审核';
comment on column OSECD.FDISBUSRUNRECGD.unexmtype
  is '免核类型(取字典TYPENAME=UNEXMTYPE)';
comment on column OSECD.FDISBUSRUNRECGD.sequencetype
  is '车次性质，关联typeentry表中typename等于SEQUENCETYPE的值';
comment on column OSECD.FDISBUSRUNRECGD.dispatcher
  is '操作调度员';
comment on column OSECD.FDISBUSRUNRECGD.subdispatcher
  is '副操作调度员';
comment on column OSECD.FDISBUSRUNRECGD.midsiteid
  is '中间场站(非营运时存储中间场id)';
comment on column OSECD.FDISBUSRUNRECGD.aendstationflag
  is '大于0为报站序号，0为手动修改，-1为停主副站（实际完成时间）';
comment on column OSECD.FDISBUSRUNRECGD.lstartstationflag
  is '大于0为报站序号，0为手动修改，-1为停主副站（实际发车时间）';
create index OSECD.IX_BUSRUNRECGD_ADD_NEW on OSECD.FDISBUSRUNRECGD (RUNDATADATE, ROUTEID, ROWADDVERSION, CLIENTCODE)
  local;
create index OSECD.IX_BUSRUNRECGD_DISPLANID_NEW on OSECD.FDISBUSRUNRECGD (RUNDATADATE, DISPLANID)
  local;
create index OSECD.IX_BUSRUNRECGD_DRIVERID_NEW on OSECD.FDISBUSRUNRECGD (RUNDATADATE, BUSID, DRIVERID)
  local;
create index OSECD.IX_BUSRUNRECGD_GROUP_NEW on OSECD.FDISBUSRUNRECGD (RUNDATADATE, ROUTEID, BUSID, LEAVETIME, ISAVAILABLE)
  local;
create index OSECD.IX_BUSRUNRECGD_ROUTEDRIVER_NEW on OSECD.FDISBUSRUNRECGD (RUNDATADATE, ROUTEID, DRIVERID)
  local;
create index OSECD.IX_BUSRUNRECGD_UPDATE_NEW on OSECD.FDISBUSRUNRECGD (RUNDATADATE, ROUTEID, ROWUPDATEVERSION, CLIENTCODE)
  local;

prompt
prompt Creating table FUELORGINFO
prompt ==========================
prompt
create table OSECD.FUELORGINFO
(
  orgid      VARCHAR2(36) not null,
  orgname    NVARCHAR2(60),
  orgcode    NVARCHAR2(20),
  isnational CHAR(1),
  islocal    CHAR(1)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.FUELORGINFO
  is '燃油补贴组织名录';
comment on column OSECD.FUELORGINFO.orgid
  is '组织ID';
comment on column OSECD.FUELORGINFO.orgname
  is '组织名称';
comment on column OSECD.FUELORGINFO.orgcode
  is '组织编码';
comment on column OSECD.FUELORGINFO.isnational
  is '享受国家油补1享受0不享受';
comment on column OSECD.FUELORGINFO.islocal
  is '享受地方油补1享受0不享受';
alter table OSECD.FUELORGINFO
  add constraint PRIMARY_FUELORGINFO primary key (ORGID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FUELPRICES
prompt =========================
prompt
create table OSECD.FUELPRICES
(
  id        VARCHAR2(36) not null,
  fuelprice NUMBER(5,2),
  startdate DATE,
  enddate   DATE,
  created   DATE default SYSDATE,
  createdby VARCHAR2(10)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.FUELPRICES
  is '燃油补贴油价记录表';
comment on column OSECD.FUELPRICES.id
  is '主键ID';
comment on column OSECD.FUELPRICES.fuelprice
  is '油价';
comment on column OSECD.FUELPRICES.startdate
  is '油价起始日期';
comment on column OSECD.FUELPRICES.enddate
  is '油价终止日期';
comment on column OSECD.FUELPRICES.created
  is '创建时间';
comment on column OSECD.FUELPRICES.createdby
  is '创建人';
alter table OSECD.FUELPRICES
  add constraint PK_FUELPRICES primary key (ID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table FUELSUBSIDYPARAMETER
prompt ===================================
prompt
create table OSECD.FUELSUBSIDYPARAMETER
(
  largebusoil      NUMBER(5,2),
  middlebusoil     NUMBER(5,2),
  halfsubsidyprice NUMBER(5,2),
  fullsubsidyprice NUMBER(5,2),
  subsidyprice     NUMBER(5,2),
  updated          DATE default SYSDATE,
  year             DATE,
  quarter          NUMBER(2),
  largebuslength   NUMBER(5,2)
)
tablespace TBS_OSECD_BZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.FUELSUBSIDYPARAMETER
  is '燃油补贴参数表';
comment on column OSECD.FUELSUBSIDYPARAMETER.largebusoil
  is '大巴日均补贴油量';
comment on column OSECD.FUELSUBSIDYPARAMETER.middlebusoil
  is '中巴日均补贴油量';
comment on column OSECD.FUELSUBSIDYPARAMETER.halfsubsidyprice
  is '50%补贴油价';
comment on column OSECD.FUELSUBSIDYPARAMETER.fullsubsidyprice
  is '100%补贴油价';
comment on column OSECD.FUELSUBSIDYPARAMETER.subsidyprice
  is '补贴差价';
comment on column OSECD.FUELSUBSIDYPARAMETER.updated
  is '更新日期';
comment on column OSECD.FUELSUBSIDYPARAMETER.year
  is '补贴年份';
comment on column OSECD.FUELSUBSIDYPARAMETER.quarter
  is '补贴季度';
comment on column OSECD.FUELSUBSIDYPARAMETER.largebuslength
  is '大巴车长度';

prompt
prompt Creating table GJ_BUSCOUNT
prompt ==========================
prompt
create table OSECD.GJ_BUSCOUNT
(
  recordid      VARCHAR2(36) not null,
  orgid         VARCHAR2(36),
  buscount      NUMBER,
  recdate       DATE,
  flag          VARCHAR2(2),
  busruncount   NUMBER,
  busunruncount NUMBER
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.GJ_BUSCOUNT
  is '公交上报数据对照表';
comment on column OSECD.GJ_BUSCOUNT.recordid
  is '记录编号';
comment on column OSECD.GJ_BUSCOUNT.orgid
  is '组织编号';
comment on column OSECD.GJ_BUSCOUNT.buscount
  is '车辆数量';
comment on column OSECD.GJ_BUSCOUNT.recdate
  is '记录时间';
comment on column OSECD.GJ_BUSCOUNT.flag
  is '标志.1-08:20至08:40,2-08:10至08:40,3-富士康路线';
comment on column OSECD.GJ_BUSCOUNT.busruncount
  is '运营车辆数量';
comment on column OSECD.GJ_BUSCOUNT.busunruncount
  is '非运营车辆数量';
create index OSECD.IX_GJBUSCOUNT on OSECD.GJ_BUSCOUNT (ORGID, RECDATE, FLAG)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.GJ_BUSCOUNT
  add constraint PK_GJBUSCOUNT primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table G_AUTHORS
prompt ========================
prompt
create table OSECD.G_AUTHORS
(
  author_id INTEGER not null,
  fullname  VARCHAR2(1000) not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.G_AUTHORS
  add constraint G_AUTHORS_PK primary key (AUTHOR_ID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table G_BOOKS
prompt ======================
prompt
create table OSECD.G_BOOKS
(
  book_id INTEGER not null,
  isbn    VARCHAR2(1000) not null,
  title   VARCHAR2(1000) not null,
  authors VARCHAR2(1000) not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.G_BOOKS
  add constraint G_BOOKS_PK primary key (BOOK_ID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table G_BOOK_AUTHORS
prompt =============================
prompt
create table OSECD.G_BOOK_AUTHORS
(
  book_id   INTEGER not null,
  author_id INTEGER not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.G_BOOK_AUTHORS
  add constraint G_BOOK_AUTHORS_PK primary key (BOOK_ID, AUTHOR_ID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.G_BOOK_AUTHORS
  add foreign key (BOOK_ID)
  references OSECD.G_BOOKS (BOOK_ID);
alter table OSECD.G_BOOK_AUTHORS
  add foreign key (AUTHOR_ID)
  references OSECD.G_AUTHORS (AUTHOR_ID);

prompt
prompt Creating table G_CART
prompt =====================
prompt
create table OSECD.G_CART
(
  customer_id   INTEGER not null,
  cart_sequence INTEGER not null,
  book_id       INTEGER not null,
  quantity      INTEGER not null,
  date_added    DATE not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.G_CART
  add constraint G_CART_PK primary key (CUSTOMER_ID, CART_SEQUENCE)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table G_CUSTOMERS
prompt ==========================
prompt
create table OSECD.G_CUSTOMERS
(
  customer_id  INTEGER not null,
  firstname    VARCHAR2(60) not null,
  surname      VARCHAR2(60) not null,
  dob          DATE not null,
  gender       VARCHAR2(1) not null,
  emailaddress VARCHAR2(400) not null,
  password     VARCHAR2(400) not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.G_CUSTOMERS
  add constraint G_CUSTOMERS_PK primary key (CUSTOMER_ID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table G_ORDERS
prompt =======================
prompt
create table OSECD.G_ORDERS
(
  order_id    INTEGER not null,
  order_date  DATE not null,
  customer_id INTEGER not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.G_ORDERS
  add constraint G_ORDERS_PK primary key (ORDER_ID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.G_ORDERS
  add foreign key (CUSTOMER_ID)
  references OSECD.G_CUSTOMERS (CUSTOMER_ID);

prompt
prompt Creating table G_LINE_ITEMS
prompt ===========================
prompt
create table OSECD.G_LINE_ITEMS
(
  order_id INTEGER not null,
  line_id  INTEGER not null,
  book_id  INTEGER not null,
  quantity INTEGER not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.G_LINE_ITEMS
  add constraint G_LINE_ITEMS_PK primary key (ORDER_ID, LINE_ID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.G_LINE_ITEMS
  add foreign key (ORDER_ID)
  references OSECD.G_ORDERS (ORDER_ID);
alter table OSECD.G_LINE_ITEMS
  add foreign key (BOOK_ID)
  references OSECD.G_BOOKS (BOOK_ID);

prompt
prompt Creating table HC_SEGMENT
prompt =========================
prompt
create table OSECD.HC_SEGMENT
(
  segmentid VARCHAR2(36) not null,
  jwd       CLOB
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.HC_SEGMENT
  is '单程经纬度（成都专用）';
comment on column OSECD.HC_SEGMENT.segmentid
  is '单程编号';
comment on column OSECD.HC_SEGMENT.jwd
  is '经纬度信息';
alter table OSECD.HC_SEGMENT
  add constraint PK_SEGMENTID primary key (SEGMENTID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ACCOMMODATIONDATASTORAGE
prompt ==========================================
prompt
create table OSECD.JZ_ACCOMMODATIONDATASTORAGE
(
  recordid              VARCHAR2(36) not null,
  jzdate                DATE,
  accommodationid       VARCHAR2(36),
  accommodationroadname NVARCHAR2(50) not null,
  belongrouterunspeed   NUMBER(6,2),
  stationontimerate     NUMBER(6,2),
  begindate             DATE,
  enddate               DATE,
  miles                 NUMBER(5,2),
  accommodationtype     NVARCHAR2(2),
  roadmiles             NUMBER(5,2),
  linecount             NUMBER(2),
  designspeed           NUMBER(5,2),
  crossingcount         NUMBER(2),
  datasavelevel         VARCHAR2(2),
  recdate               DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ACCOMMODATIONDATASTORAGE
  is '专用道数据结存表';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.accommodationid
  is '专用道编号';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.accommodationroadname
  is '专用道名称';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.belongrouterunspeed
  is '公交专用道通行线路运送车速(公里 /小时)';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.stationontimerate
  is '公交专用道到站准点率';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.begindate
  is '启用日期';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.enddate
  is '终止日期';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.miles
  is '专用道长度，应该是双向的长度(公里)';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.accommodationtype
  is '专用道类型';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.roadmiles
  is '道路长度';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.linecount
  is '车道数';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.designspeed
  is '设计时速';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.crossingcount
  is '路口数';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_ACCOMMODATIONDATASTORAGE.recdate
  is '记录日期';
alter table OSECD.JZ_ACCOMMODATIONDATASTORAGE
  add constraint PK_ACCOMMODATIONDATASTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_BRTICSTORAGE
prompt ==============================
prompt
create table OSECD.JZ_BRTICSTORAGE
(
  recordid       VARCHAR2(36) not null,
  routeid        VARCHAR2(36),
  stationid      VARCHAR2(36),
  starttime      NUMBER,
  endtime        NUMBER,
  jzdate         DATE,
  stainnum       NUMBER,
  staoutnum      NUMBER,
  transhipinnum  NUMBER default 0,
  transhipoutnum NUMBER default 0,
  sectionnum     NUMBER default 0,
  datasavelevel  VARCHAR2(2),
  recdate        DATE default SYSDATE
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_BRTICSTORAGE
  is 'BRT-IC卡刷卡信息结存表';
comment on column OSECD.JZ_BRTICSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_BRTICSTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_BRTICSTORAGE.stationid
  is '站点编号';
comment on column OSECD.JZ_BRTICSTORAGE.starttime
  is '时段开始时间（相对于零点的分钟数）';
comment on column OSECD.JZ_BRTICSTORAGE.endtime
  is '时段结束时间（相对于零点的分钟数）';
comment on column OSECD.JZ_BRTICSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_BRTICSTORAGE.stainnum
  is '进站刷卡数量';
comment on column OSECD.JZ_BRTICSTORAGE.staoutnum
  is '出站刷卡数量';
comment on column OSECD.JZ_BRTICSTORAGE.transhipinnum
  is '换乘上车数量（与普通公交之间）';
comment on column OSECD.JZ_BRTICSTORAGE.transhipoutnum
  is '换乘下车数量（与普通公交之间）';
comment on column OSECD.JZ_BRTICSTORAGE.sectionnum
  is '断面客流量';
comment on column OSECD.JZ_BRTICSTORAGE.datasavelevel
  is '结存级别，1-年，2-月，3-日';
comment on column OSECD.JZ_BRTICSTORAGE.recdate
  is '记录时间';
create index OSECD.IX_BRTICNUM on OSECD.JZ_BRTICSTORAGE (STATIONID, JZDATE, STARTTIME, ENDTIME, DATASAVELEVEL)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_BRTICSTORAGE
  add constraint PK_BRTICNUM primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_BRTICSTORAGETMP
prompt =================================
prompt
create table OSECD.JZ_BRTICSTORAGETMP
(
  recordid  VARCHAR2(36) not null,
  routeid   VARCHAR2(36),
  stationid VARCHAR2(36),
  starttime NUMBER,
  endtime   NUMBER,
  jzdate    DATE,
  jczbz     VARCHAR2(2),
  iccount   NUMBER
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_BRTICSTORAGETMP
  is 'BRT数据结存临时表';
comment on column OSECD.JZ_BRTICSTORAGETMP.recordid
  is '记录编号';
comment on column OSECD.JZ_BRTICSTORAGETMP.routeid
  is '线路编号';
comment on column OSECD.JZ_BRTICSTORAGETMP.stationid
  is '站点编号';
comment on column OSECD.JZ_BRTICSTORAGETMP.starttime
  is '时段开始时间（相对于零点的分钟数）';
comment on column OSECD.JZ_BRTICSTORAGETMP.endtime
  is '时段结束时间（相对于零点的分钟数）';
comment on column OSECD.JZ_BRTICSTORAGETMP.jzdate
  is '结存日期';
comment on column OSECD.JZ_BRTICSTORAGETMP.jczbz
  is '进出站标志,0-进站、换乘上车，1-出站、换乘下车';
comment on column OSECD.JZ_BRTICSTORAGETMP.iccount
  is '刷卡数量';

prompt
prompt Creating table JZ_BRTICSTORAGETMP_BRT
prompt =====================================
prompt
create table OSECD.JZ_BRTICSTORAGETMP_BRT
(
  routeid     VARCHAR2(36),
  stationid   VARCHAR2(36),
  cardno      VARCHAR2(36),
  consumedate DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IX_TEST2 on OSECD.JZ_BRTICSTORAGETMP_BRT (CARDNO)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_BRTICSTORAGETMP_IC
prompt ====================================
prompt
create table OSECD.JZ_BRTICSTORAGETMP_IC
(
  cardno      VARCHAR2(20),
  consumedate DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IX_TEST1 on OSECD.JZ_BRTICSTORAGETMP_IC (CARDNO)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_BUSARRSTATION
prompt ===============================
prompt
create table OSECD.JZ_BUSARRSTATION
(
  recordid        VARCHAR2(36) not null,
  routeid         VARCHAR2(36),
  routename       NVARCHAR2(20),
  busid           VARCHAR2(36),
  cardid          NVARCHAR2(20),
  fstleavetime    DATE,
  fstleavetimegps DATE,
  stationid       VARCHAR2(36),
  stationname     NVARCHAR2(20),
  arrtime         DATE,
  leatime         DATE,
  timefromfst     NUMBER,
  sngserialid     NUMBER(3),
  dualserialid    NUMBER(3),
  iccardnum       NUMBER,
  runstyle        VARCHAR2(2),
  jzdate          DATE,
  recdate         DATE default sysdate,
  subrouteid      VARCHAR2(36),
  standardarrtime NUMBER,
  gpsmile         NUMBER
)
partition by range (JZDATE)
(
  partition P_201201 values less than (TO_DATE(' 2012-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201202 values less than (TO_DATE(' 2012-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201203 values less than (TO_DATE(' 2012-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201204 values less than (TO_DATE(' 2012-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201205 values less than (TO_DATE(' 2012-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201206 values less than (TO_DATE(' 2012-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201207 values less than (TO_DATE(' 2012-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201208 values less than (TO_DATE(' 2012-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201209 values less than (TO_DATE(' 2012-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201210 values less than (TO_DATE(' 2012-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201211 values less than (TO_DATE(' 2012-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201212 values less than (TO_DATE(' 2013-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201401 values less than (TO_DATE(' 2014-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201402 values less than (TO_DATE(' 2014-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201403 values less than (TO_DATE(' 2014-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201404 values less than (TO_DATE(' 2014-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201405 values less than (TO_DATE(' 2014-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201406 values less than (TO_DATE(' 2014-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201407 values less than (TO_DATE(' 2014-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201408 values less than (TO_DATE(' 2014-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201409 values less than (TO_DATE(' 2014-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201410 values less than (TO_DATE(' 2014-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201411 values less than (TO_DATE(' 2014-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201412 values less than (TO_DATE(' 2015-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201501 values less than (TO_DATE(' 2015-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201502 values less than (TO_DATE(' 2015-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201503 values less than (TO_DATE(' 2015-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201504 values less than (TO_DATE(' 2015-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201505 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201506 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201507 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201508 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201509 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201510 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201511 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201512 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201601 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201602 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201603 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201604 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201605 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201606 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201607 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201610 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_BUSARRSTATION
  is '车辆到站信息结存表';
comment on column OSECD.JZ_BUSARRSTATION.recordid
  is '记录编号';
comment on column OSECD.JZ_BUSARRSTATION.routeid
  is '线路编号';
comment on column OSECD.JZ_BUSARRSTATION.routename
  is '线路名称';
comment on column OSECD.JZ_BUSARRSTATION.busid
  is '车辆编号';
comment on column OSECD.JZ_BUSARRSTATION.cardid
  is '车牌号';
comment on column OSECD.JZ_BUSARRSTATION.fstleavetime
  is '首站离开时间(发车记录)';
comment on column OSECD.JZ_BUSARRSTATION.fstleavetimegps
  is '首站离开时间（GPS数据）';
comment on column OSECD.JZ_BUSARRSTATION.stationid
  is '站点编号';
comment on column OSECD.JZ_BUSARRSTATION.stationname
  is '站点名称';
comment on column OSECD.JZ_BUSARRSTATION.arrtime
  is '到站时间';
comment on column OSECD.JZ_BUSARRSTATION.leatime
  is '离站时间';
comment on column OSECD.JZ_BUSARRSTATION.timefromfst
  is '距首站时间（分钟）';
comment on column OSECD.JZ_BUSARRSTATION.sngserialid
  is '站点单程编号';
comment on column OSECD.JZ_BUSARRSTATION.dualserialid
  is '站点双程编号';
comment on column OSECD.JZ_BUSARRSTATION.iccardnum
  is '刷卡数量';
comment on column OSECD.JZ_BUSARRSTATION.runstyle
  is '运行方式';
comment on column OSECD.JZ_BUSARRSTATION.jzdate
  is '结存日期';
comment on column OSECD.JZ_BUSARRSTATION.recdate
  is '记录日期';
comment on column OSECD.JZ_BUSARRSTATION.subrouteid
  is '子线编号';
comment on column OSECD.JZ_BUSARRSTATION.standardarrtime
  is '标准到站时间';
comment on column OSECD.JZ_BUSARRSTATION.gpsmile
  is '车辆GPS里程';
create index OSECD.IX_BUSARRRSTATION1 on OSECD.JZ_BUSARRSTATION (JZDATE, ROUTEID)
  local;
create index OSECD.IX_BUSARRRSTATION2 on OSECD.JZ_BUSARRSTATION (ROUTEID, BUSID, FSTLEAVETIME)
  local;
alter table OSECD.JZ_BUSARRSTATION
  add constraint PK_BUSARRSTATION primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_BUSCOSTSTORAGE
prompt ================================
prompt
create table OSECD.JZ_BUSCOSTSTORAGE
(
  recordid            VARCHAR2(36) not null,
  orgid               VARCHAR2(36),
  orgname             NVARCHAR2(60),
  routeid             VARCHAR2(36),
  routename           NVARCHAR2(20),
  jzdate              DATE,
  storagecostfsttype  VARCHAR2(2),
  storagecostfstname  VARCHAR2(50),
  storagecostscdtype  VARCHAR2(2),
  storagecostscdname  VARCHAR2(50),
  devotionbuscount    NUMBER,
  devotionbusstdcount NUMBER,
  runmiles            NUMBER,
  unrunmiles          NUMBER,
  devotionempcount    NUMBER,
  cashcost            NUMBER,
  fuelcost            NUMBER,
  empcost             NUMBER,
  storageorgtype      VARCHAR2(2),
  datasavelevel       VARCHAR2(2),
  recdate             DATE default sysdate,
  cost                NUMBER
)
partition by range (JZDATE)
(
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_BUSCOSTSTORAGE
  is '车辆成本数据结存表';
comment on column OSECD.JZ_BUSCOSTSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_BUSCOSTSTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_BUSCOSTSTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_BUSCOSTSTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_BUSCOSTSTORAGE.routename
  is '线路名称';
comment on column OSECD.JZ_BUSCOSTSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_BUSCOSTSTORAGE.storagecostfsttype
  is '成本数据结存一级字典，0为全部';
comment on column OSECD.JZ_BUSCOSTSTORAGE.storagecostfstname
  is '成本数据结存一级字典名称';
comment on column OSECD.JZ_BUSCOSTSTORAGE.storagecostscdtype
  is '成本数据结存二级字典，取相关字典,如是否有人售票取“ISCONDUCTOR”';
comment on column OSECD.JZ_BUSCOSTSTORAGE.storagecostscdname
  is '成本数据结存二级字典名称';
comment on column OSECD.JZ_BUSCOSTSTORAGE.devotionbuscount
  is '投入运营车辆数量';
comment on column OSECD.JZ_BUSCOSTSTORAGE.devotionbusstdcount
  is '投入运营车辆标台';
comment on column OSECD.JZ_BUSCOSTSTORAGE.runmiles
  is '运营里程';
comment on column OSECD.JZ_BUSCOSTSTORAGE.unrunmiles
  is '非运营里程';
comment on column OSECD.JZ_BUSCOSTSTORAGE.devotionempcount
  is '投入运营人数';
comment on column OSECD.JZ_BUSCOSTSTORAGE.cashcost
  is '运营资金成本';
comment on column OSECD.JZ_BUSCOSTSTORAGE.fuelcost
  is '运营燃油成本';
comment on column OSECD.JZ_BUSCOSTSTORAGE.empcost
  is '运营人力成本';
comment on column OSECD.JZ_BUSCOSTSTORAGE.storageorgtype
  is '组织结存级别';
comment on column OSECD.JZ_BUSCOSTSTORAGE.datasavelevel
  is '日期结存级别';
comment on column OSECD.JZ_BUSCOSTSTORAGE.recdate
  is '记录时间';
comment on column OSECD.JZ_BUSCOSTSTORAGE.cost
  is '成本金额';
create index OSECD.IX_BUSCOST on OSECD.JZ_BUSCOSTSTORAGE (JZDATE, STORAGEORGTYPE, DATASAVELEVEL)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_BUSCOSTSTORAGE
  add constraint PK_BUSCOST primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_BUSDAYSTORAGE
prompt ===============================
prompt
create table OSECD.JZ_BUSDAYSTORAGE
(
  recordid      VARCHAR2(36) not null,
  orgid         VARCHAR2(36),
  orgname       NVARCHAR2(60),
  routeid       VARCHAR2(36),
  routename     NVARCHAR2(20),
  busid         VARCHAR2(36),
  cardid        NVARCHAR2(20),
  runmiles      NUMBER,
  unrunmiles    NUMBER,
  runtime       NUMBER,
  unruntime     NUMBER,
  jzdate        DATE,
  recdate       DATE default SYSDATE,
  buslength     NUMBER,
  shiftcount    NUMBER,
  passengerflow NUMBER(18) default 0,
  gpsmiles      NUMBER,
  ticketincome  NUMBER(18,2) default 0
)
partition by range (JZDATE)
(
  partition P_2012 values less than (TO_DATE(' 2013-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_2013 values less than (TO_DATE(' 2014-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_2014 values less than (TO_DATE(' 2015-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_2015 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_2016 values less than (TO_DATE(' 2017-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_BUSDAYSTORAGE
  is '车辆日结存表';
comment on column OSECD.JZ_BUSDAYSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_BUSDAYSTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_BUSDAYSTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_BUSDAYSTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_BUSDAYSTORAGE.routename
  is '线路名称';
comment on column OSECD.JZ_BUSDAYSTORAGE.busid
  is '车辆编号';
comment on column OSECD.JZ_BUSDAYSTORAGE.cardid
  is '车牌号';
comment on column OSECD.JZ_BUSDAYSTORAGE.runmiles
  is '运营里程';
comment on column OSECD.JZ_BUSDAYSTORAGE.unrunmiles
  is '非运营里程';
comment on column OSECD.JZ_BUSDAYSTORAGE.runtime
  is '运营时间';
comment on column OSECD.JZ_BUSDAYSTORAGE.unruntime
  is '非运营时间';
comment on column OSECD.JZ_BUSDAYSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_BUSDAYSTORAGE.recdate
  is '记录时间';
comment on column OSECD.JZ_BUSDAYSTORAGE.buslength
  is '车辆长度';
comment on column OSECD.JZ_BUSDAYSTORAGE.shiftcount
  is '运营班次数';
comment on column OSECD.JZ_BUSDAYSTORAGE.passengerflow
  is '客流量';
comment on column OSECD.JZ_BUSDAYSTORAGE.gpsmiles
  is 'GPS里程';
comment on column OSECD.JZ_BUSDAYSTORAGE.ticketincome
  is '票款收入';
create index OSECD.IX_BUSDAYSTORAGE on OSECD.JZ_BUSDAYSTORAGE (JZDATE)
  local;
create index OSECD.IX_BUSDAYSTORAGE1 on OSECD.JZ_BUSDAYSTORAGE (ORGID)
  local;
create index OSECD.IX_BUSDAYSTORAGE2 on OSECD.JZ_BUSDAYSTORAGE (ROUTEID)
  local;

prompt
prompt Creating table JZ_BUSENTRYSITE
prompt ==============================
prompt
create table OSECD.JZ_BUSENTRYSITE
(
  recordid       VARCHAR2(36) not null,
  siteid         NVARCHAR2(10),
  sitename       NVARCHAR2(36),
  jztime         NUMBER,
  sitecapibility NUMBER,
  actualbuscount NUMBER,
  sumbuscount    NUMBER,
  jzdate         DATE,
  recdate        DATE default sysdate,
  sumentrycount  NUMBER,
  sitetype       VARCHAR2(2)
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_BUSENTRYSITE
  is '车辆机场率时段结存';
comment on column OSECD.JZ_BUSENTRYSITE.recordid
  is '记录编号';
comment on column OSECD.JZ_BUSENTRYSITE.siteid
  is '场站编号';
comment on column OSECD.JZ_BUSENTRYSITE.sitename
  is '场站名称';
comment on column OSECD.JZ_BUSENTRYSITE.jztime
  is '结存时间(相对于0点的分钟数)';
comment on column OSECD.JZ_BUSENTRYSITE.sitecapibility
  is '供应能力';
comment on column OSECD.JZ_BUSENTRYSITE.actualbuscount
  is '停车数量';
comment on column OSECD.JZ_BUSENTRYSITE.sumbuscount
  is '车辆总数';
comment on column OSECD.JZ_BUSENTRYSITE.jzdate
  is '结存日期';
comment on column OSECD.JZ_BUSENTRYSITE.recdate
  is '记录时间';
comment on column OSECD.JZ_BUSENTRYSITE.sumentrycount
  is '全市总进站车辆数';
comment on column OSECD.JZ_BUSENTRYSITE.sitetype
  is '场站类型';
create index OSECD.IX_BUSENTRYSITE on OSECD.JZ_BUSENTRYSITE (SITEID, JZTIME, JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_BUSENTRYSITE
  add constraint PK_BUSENTRYSITE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_BUSINCOMECOSTSTORAGE
prompt ======================================
prompt
create table OSECD.JZ_BUSINCOMECOSTSTORAGE
(
  recordid       VARCHAR2(36) not null,
  orgid          VARCHAR2(36),
  orgname        VARCHAR2(60),
  routeid        VARCHAR2(36),
  routename      VARCHAR2(50),
  busid          VARCHAR2(36),
  cardid         VARCHAR2(20),
  sumincome      NUMBER(10,2) default 0,
  sumcost        NUMBER(10,2) default 0,
  datasavelevel  VARCHAR2(2),
  storageorgtype CHAR(1),
  jzdate         DATE,
  recdate        DATE default SYSDATE
)
partition by range (JZDATE)
(
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_BUSINCOMECOSTSTORAGE
  is '收入成本结存表';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.routename
  is '线路名称';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.busid
  is '车辆编号';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.cardid
  is '车牌号';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.sumincome
  is '总收入';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.sumcost
  is '总成本';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.storageorgtype
  is '数据结存组织级别 0 城市 1总公司，2分公司，3车队，4线路，5车辆';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_BUSINCOMECOSTSTORAGE.recdate
  is '记录时间';

prompt
prompt Creating table JZ_BUSLINEINFO
prompt =============================
prompt
create table OSECD.JZ_BUSLINEINFO
(
  routeid                     VARCHAR2(20),
  routename                   NVARCHAR2(50),
  orgid                       VARCHAR2(36),
  orgname                     NVARCHAR2(60),
  lineno                      VARCHAR2(50),
  linetype                    VARCHAR2(50),
  beginstation                VARCHAR2(50),
  endstation                  VARCHAR2(50),
  uplinkmiles                 NUMBER(10,2),
  downlinkmiles               NUMBER(10,2),
  ticket                      VARCHAR2(50),
  ticketway                   VARCHAR2(50),
  ticketprice                 NUMBER(10,2),
  segmentfeesupfares          NUMBER(10,2),
  sectionchargesthelowestfare NUMBER(10,2),
  vehiclesplanstoinvest       NUMBER(10),
  vehiclesplanstoinvestmin    NUMBER(10),
  flatpeaktimeheadway         VARCHAR2(50),
  measures                    VARCHAR2(255),
  status                      VARCHAR2(50),
  yehumingcheng               VARCHAR2(255),
  qiyeguanlidanwei            VARCHAR2(255),
  qidianzhanbianhao           VARCHAR2(50),
  zhongdianzhanbianhao        VARCHAR2(50),
  shangxingfuwushijian        VARCHAR2(50),
  xiaxingfuwushijian          VARCHAR2(50),
  jingyingqixianqi            DATE,
  jingyingqixianzhi           DATE,
  xianlushouquanshuwenhao     VARCHAR2(255),
  xianlushouquanshijian       DATE,
  xianlushuxing               VARCHAR2(50),
  suoshuchedui                VARCHAR2(50),
  syslastupdateperson         VARCHAR2(50),
  syslastupdatetime           DATE,
  jzdate                      DATE
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_BUSLINEINFO
  is '阳光政务线路基础信息日结存表';
comment on column OSECD.JZ_BUSLINEINFO.routeid
  is '线路ID';
comment on column OSECD.JZ_BUSLINEINFO.routename
  is '线路名称';
comment on column OSECD.JZ_BUSLINEINFO.orgid
  is '组织ID';
comment on column OSECD.JZ_BUSLINEINFO.orgname
  is '组织名称';
comment on column OSECD.JZ_BUSLINEINFO.lineno
  is '线路名称(阳光政务)';
comment on column OSECD.JZ_BUSLINEINFO.linetype
  is '线路类型';
comment on column OSECD.JZ_BUSLINEINFO.beginstation
  is '开始站点';
comment on column OSECD.JZ_BUSLINEINFO.endstation
  is '结束站点';
comment on column OSECD.JZ_BUSLINEINFO.uplinkmiles
  is '上行里程';
comment on column OSECD.JZ_BUSLINEINFO.downlinkmiles
  is '下行里程';
comment on column OSECD.JZ_BUSLINEINFO.ticket
  is '票分段类型';
comment on column OSECD.JZ_BUSLINEINFO.ticketway
  is '售票方式';
comment on column OSECD.JZ_BUSLINEINFO.ticketprice
  is '票价';
comment on column OSECD.JZ_BUSLINEINFO.vehiclesplanstoinvest
  is '核定配车数';
comment on column OSECD.JZ_BUSLINEINFO.vehiclesplanstoinvestmin
  is '最小核定配车数';
comment on column OSECD.JZ_BUSLINEINFO.status
  is '营运状态';
comment on column OSECD.JZ_BUSLINEINFO.yehumingcheng
  is '业户名称';
comment on column OSECD.JZ_BUSLINEINFO.qiyeguanlidanwei
  is '企业管理单位';
comment on column OSECD.JZ_BUSLINEINFO.qidianzhanbianhao
  is '起点站编号';
comment on column OSECD.JZ_BUSLINEINFO.zhongdianzhanbianhao
  is '终点站编号';
comment on column OSECD.JZ_BUSLINEINFO.shangxingfuwushijian
  is '上行服务时间';
comment on column OSECD.JZ_BUSLINEINFO.xiaxingfuwushijian
  is '下行服务时间';
comment on column OSECD.JZ_BUSLINEINFO.jingyingqixianqi
  is '经营期限起';
comment on column OSECD.JZ_BUSLINEINFO.jingyingqixianzhi
  is '经营期限止';
comment on column OSECD.JZ_BUSLINEINFO.xianlushouquanshuwenhao
  is '线路授权文号';
comment on column OSECD.JZ_BUSLINEINFO.xianlushouquanshijian
  is '线路授权时间';
comment on column OSECD.JZ_BUSLINEINFO.xianlushuxing
  is '线路属性';
comment on column OSECD.JZ_BUSLINEINFO.suoshuchedui
  is '所属车队';
comment on column OSECD.JZ_BUSLINEINFO.syslastupdateperson
  is '信息来源';
comment on column OSECD.JZ_BUSLINEINFO.syslastupdatetime
  is '修改时间';
comment on column OSECD.JZ_BUSLINEINFO.jzdate
  is '结存时间';

prompt
prompt Creating table JZ_BUSPHASESTORAGE
prompt =================================
prompt
create table OSECD.JZ_BUSPHASESTORAGE
(
  recordid             VARCHAR2(36) not null,
  orgid                VARCHAR2(36),
  orgname              NVARCHAR2(60),
  routeid              VARCHAR2(20),
  routename            NVARCHAR2(20),
  jzdate               DATE,
  storagebusfirsttype  VARCHAR2(2),
  storagebusfirstname  NVARCHAR2(50),
  storagebussecondtype VARCHAR2(2),
  storagebussecondname NVARCHAR2(50),
  buscount             NUMBER(6),
  busseatcount         NUMBER(8),
  buspsgcount          NUMBER(8),
  busstandardcount     NUMBER(10,2),
  datasavelevel        VARCHAR2(2),
  storageorgtype       CHAR(1),
  recdate              DATE default sysdate,
  busowncount          NUMBER(6),
  busownseatcount      NUMBER(8),
  busownpsgcount       NUMBER(8),
  busownstandardcount  NUMBER(10,2)
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_BUSPHASESTORAGE
  is '车辆阶段结存表';
comment on column OSECD.JZ_BUSPHASESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_BUSPHASESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_BUSPHASESTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_BUSPHASESTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_BUSPHASESTORAGE.routename
  is '线路名称';
comment on column OSECD.JZ_BUSPHASESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_BUSPHASESTORAGE.storagebusfirsttype
  is '车辆结存类型一级字典';
comment on column OSECD.JZ_BUSPHASESTORAGE.storagebusfirstname
  is '字典名称';
comment on column OSECD.JZ_BUSPHASESTORAGE.storagebussecondtype
  is '车辆结存类型二级字典';
comment on column OSECD.JZ_BUSPHASESTORAGE.storagebussecondname
  is '字典名称';
comment on column OSECD.JZ_BUSPHASESTORAGE.buscount
  is '车辆数量';
comment on column OSECD.JZ_BUSPHASESTORAGE.busseatcount
  is '车辆座位数';
comment on column OSECD.JZ_BUSPHASESTORAGE.buspsgcount
  is '车辆客位数';
comment on column OSECD.JZ_BUSPHASESTORAGE.busstandardcount
  is '车辆标台数';
comment on column OSECD.JZ_BUSPHASESTORAGE.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_BUSPHASESTORAGE.storageorgtype
  is '数据结存组织级别1表示总公司结存，2表示分公司结存，3表示车队结存，4表示线路结存';
comment on column OSECD.JZ_BUSPHASESTORAGE.busowncount
  is '车辆数量';
comment on column OSECD.JZ_BUSPHASESTORAGE.busownseatcount
  is '车辆座位数';
comment on column OSECD.JZ_BUSPHASESTORAGE.busownpsgcount
  is '车辆客位数';
comment on column OSECD.JZ_BUSPHASESTORAGE.busownstandardcount
  is '车辆标台数';
create index OSECD.IDX_BUSBASESTORAGE on OSECD.JZ_BUSPHASESTORAGE (JZDATE, ORGID, ROUTEID, STORAGEBUSFIRSTTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_BUSRUNSPEEDRECORD
prompt ===================================
prompt
create table OSECD.JZ_BUSRUNSPEEDRECORD
(
  busrunspeedrecordid VARCHAR2(50) not null,
  orgid               VARCHAR2(50),
  routeid             VARCHAR2(50),
  subrouteid          VARCHAR2(50),
  segmentid           VARCHAR2(50),
  busid               VARCHAR2(50),
  laststationid       VARCHAR2(50),
  laststationseqnum   NUMBER(3),
  laststationnum      VARCHAR2(50),
  laststationarvtime  DATE,
  laststationlfttime  DATE,
  stationid           VARCHAR2(50),
  stationseqnum       NUMBER(3),
  stationnum          VARCHAR2(50),
  stationarvtime      DATE,
  stationlfttime      DATE,
  rundistance         NUMBER(8,2),
  runinterval         NUMBER(8,2),
  runspeed            NUMBER(8,2),
  speedmin            NUMBER(8,2),
  speedmax            NUMBER(8,2),
  recdatetime         DATE default SYSDATE,
  memos               NVARCHAR2(255),
  created             DATE,
  createby            VARCHAR2(50),
  updated             DATE,
  updateby            VARCHAR2(50),
  timephasekey        VARCHAR2(10),
  startdate           DATE,
  enddate             DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_BUSRUNSPEEDRECORD
  is '车辆低速运行记录表';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.busrunspeedrecordid
  is '车辆低速运行记录主键ID';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.orgid
  is '组织ID';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.routeid
  is '线路ID';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.subrouteid
  is '子线路ID';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.segmentid
  is '单程ID';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.busid
  is '车辆ID';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.laststationid
  is '前站站点ID';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.laststationseqnum
  is '前站站点顺序号';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.laststationnum
  is '前站站点统一编号';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.laststationarvtime
  is '前站站点到站时间';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.laststationlfttime
  is '前站站点离站时间';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.stationid
  is '本站站点ID';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.stationseqnum
  is '本站站点顺序号';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.stationnum
  is '本站站点统一编号';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.stationarvtime
  is '本站站点到站时间';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.stationlfttime
  is '本站站点离站时间';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.rundistance
  is '站点距(单位:米)';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.runinterval
  is '站间通行时间(单位:分钟)';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.runspeed
  is '站间通行速度(单位:km/h)';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.speedmin
  is '速度标准(最小值，单位：km/h)';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.speedmax
  is '速度标准(最大值，单位：km/h)';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.recdatetime
  is '记录时间';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.memos
  is '备注';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.created
  is '创建日期';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.createby
  is '创建者';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.updated
  is '更新日期';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.updateby
  is '更新者';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.timephasekey
  is '峰段类型';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.startdate
  is '开始时间';
comment on column OSECD.JZ_BUSRUNSPEEDRECORD.enddate
  is '结束时间';
alter table OSECD.JZ_BUSRUNSPEEDRECORD
  add constraint PK_BUSRUNSPEEDRECORDID primary key (BUSRUNSPEEDRECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_BUSSENDINTERVAL
prompt =================================
prompt
create table OSECD.JZ_BUSSENDINTERVAL
(
  recordid      VARCHAR2(36) not null,
  routeid       VARCHAR2(36),
  starttime     NUMBER,
  endtime       NUMBER,
  bussid        VARCHAR2(2),
  shiftnum      NUMBER,
  sendinterval  NUMBER,
  datasavelevel VARCHAR2(2),
  jzdate        DATE,
  recdate       DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_BUSSENDINTERVAL
  is '车辆时段发车间隔数据结存';
comment on column OSECD.JZ_BUSSENDINTERVAL.recordid
  is '记录编号';
comment on column OSECD.JZ_BUSSENDINTERVAL.routeid
  is '线路编号';
comment on column OSECD.JZ_BUSSENDINTERVAL.starttime
  is '开始时间（相对于0点的小时数）';
comment on column OSECD.JZ_BUSSENDINTERVAL.endtime
  is '结束时间（相对于0点的小时数）';
comment on column OSECD.JZ_BUSSENDINTERVAL.bussid
  is '车次类型';
comment on column OSECD.JZ_BUSSENDINTERVAL.shiftnum
  is '班次数';
comment on column OSECD.JZ_BUSSENDINTERVAL.sendinterval
  is '平均发车间隔(分钟)';
comment on column OSECD.JZ_BUSSENDINTERVAL.datasavelevel
  is '数据结存级别：1-年，2-月，3-日';
create index OSECD.INX_BUSENDINTERVAL on OSECD.JZ_BUSSENDINTERVAL (JZDATE, ROUTEID, DATASAVELEVEL)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_BUSSENDINTERVAL
  add constraint PK_BUSENDINTERVAL primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_BUSSTANDARDFUEL
prompt =================================
prompt
create table OSECD.JZ_BUSSTANDARDFUEL
(
  recordid       VARCHAR2(36) not null,
  orgid          VARCHAR2(36),
  orgname        NVARCHAR2(60),
  routeid        VARCHAR2(36),
  routename      NVARCHAR2(20),
  jzdate         DATE,
  buslength      VARCHAR2(2),
  buslengthname  VARCHAR2(50),
  fueltype       VARCHAR2(2),
  fueltypename   VARCHAR2(50),
  fuelnum        NUMBER,
  fuelmoney      NUMBER,
  datasavelevel  VARCHAR2(2),
  storageorgtype VARCHAR2(2),
  recdate        DATE default sysdate
)
partition by range (JZDATE)
(
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_BUSSTANDARDFUEL
  is '车辆燃油消耗标准数据结存表';
comment on column OSECD.JZ_BUSSTANDARDFUEL.recordid
  is '记录编号';
comment on column OSECD.JZ_BUSSTANDARDFUEL.orgid
  is '组织编号';
comment on column OSECD.JZ_BUSSTANDARDFUEL.orgname
  is '组织名称';
comment on column OSECD.JZ_BUSSTANDARDFUEL.routeid
  is '线路编号';
comment on column OSECD.JZ_BUSSTANDARDFUEL.routename
  is '线路名称';
comment on column OSECD.JZ_BUSSTANDARDFUEL.jzdate
  is '结存日期';
comment on column OSECD.JZ_BUSSTANDARDFUEL.buslength
  is '车辆长度';
comment on column OSECD.JZ_BUSSTANDARDFUEL.buslengthname
  is '车辆长度描述';
comment on column OSECD.JZ_BUSSTANDARDFUEL.fueltype
  is '燃油类型';
comment on column OSECD.JZ_BUSSTANDARDFUEL.fueltypename
  is '燃油类型名称';
comment on column OSECD.JZ_BUSSTANDARDFUEL.fuelnum
  is '燃油数量';
comment on column OSECD.JZ_BUSSTANDARDFUEL.fuelmoney
  is '燃油总价';
comment on column OSECD.JZ_BUSSTANDARDFUEL.datasavelevel
  is '数据结存级别，1-年，2-月，3-日';
comment on column OSECD.JZ_BUSSTANDARDFUEL.storageorgtype
  is '组织结存级别，一般0-城市，1-总公司，2-分公司，3-车队，4-线路';
comment on column OSECD.JZ_BUSSTANDARDFUEL.recdate
  is '记录时间';
alter table OSECD.JZ_BUSSTANDARDFUEL
  add constraint PK_STANDARDFUEL primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_BUSYEARSTORAGE
prompt ================================
prompt
create table OSECD.JZ_BUSYEARSTORAGE
(
  recordid       VARCHAR2(36),
  orgid          VARCHAR2(36),
  routeid        VARCHAR2(36),
  busyears       NUMBER,
  buscount       NUMBER,
  jzdate         DATE,
  datasavelevel  VARCHAR2(2),
  storageorgtype VARCHAR2(2),
  recdate        DATE default sysdate
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_BUSYEARSTORAGE
  is '车辆使用年限结存表';
comment on column OSECD.JZ_BUSYEARSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_BUSYEARSTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_BUSYEARSTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_BUSYEARSTORAGE.busyears
  is '平均车龄';
comment on column OSECD.JZ_BUSYEARSTORAGE.buscount
  is '车辆数量';
comment on column OSECD.JZ_BUSYEARSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_BUSYEARSTORAGE.datasavelevel
  is '日期结存级别';
comment on column OSECD.JZ_BUSYEARSTORAGE.storageorgtype
  is '组织结存级别';
comment on column OSECD.JZ_BUSYEARSTORAGE.recdate
  is '记录时间';
create index OSECD.IX_BUSYEAR on OSECD.JZ_BUSYEARSTORAGE (JZDATE, DATASAVELEVEL, STORAGEORGTYPE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_CASHINCOME
prompt ============================
prompt
create table OSECD.JZ_CASHINCOME
(
  recordid         VARCHAR2(36) not null,
  jzdate           DATE,
  orgid            VARCHAR2(36),
  orgname          NVARCHAR2(60),
  routeid          VARCHAR2(20),
  routename        NVARCHAR2(20),
  busid            VARCHAR2(36),
  buscardid        NVARCHAR2(20),
  stationid        NVARCHAR2(36),
  sourcefrom       CHAR(1),
  sourcefromname   NVARCHAR2(50),
  ticketsort       CHAR(1),
  ticketsortname   NVARCHAR2(50),
  iccardtype       VARCHAR2(3),
  iccardname       NVARCHAR2(50),
  totalincome      NUMBER(18,2),
  passengerflow    NUMBER,
  favorable_income NUMBER(18,2),
  favorable_flow   NUMBER,
  datasavelevel    VARCHAR2(2),
  storageorgtype   CHAR(1),
  recdate          DATE default sysdate,
  loadconfig       INTEGER
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_CASHINCOME
  is '车辆收入结存表';
comment on column OSECD.JZ_CASHINCOME.recordid
  is '记录ID';
comment on column OSECD.JZ_CASHINCOME.jzdate
  is '结存日期';
comment on column OSECD.JZ_CASHINCOME.orgid
  is '组织编号';
comment on column OSECD.JZ_CASHINCOME.orgname
  is '组织名称';
comment on column OSECD.JZ_CASHINCOME.routeid
  is '线路编号';
comment on column OSECD.JZ_CASHINCOME.routename
  is '线路名称';
comment on column OSECD.JZ_CASHINCOME.busid
  is '车辆编号';
comment on column OSECD.JZ_CASHINCOME.buscardid
  is '车牌号';
comment on column OSECD.JZ_CASHINCOME.stationid
  is '站点编号';
comment on column OSECD.JZ_CASHINCOME.sourcefrom
  is '数据来源(1表示车辆票箱，2表示站点售票，3表示包车)';
comment on column OSECD.JZ_CASHINCOME.sourcefromname
  is '字典名称';
comment on column OSECD.JZ_CASHINCOME.ticketsort
  is '票款分类(1表示现金，2表示IC卡)';
comment on column OSECD.JZ_CASHINCOME.ticketsortname
  is '字典名称';
comment on column OSECD.JZ_CASHINCOME.iccardtype
  is 'IC卡类型，取字典表数据';
comment on column OSECD.JZ_CASHINCOME.iccardname
  is '字典名称';
comment on column OSECD.JZ_CASHINCOME.totalincome
  is '总收入';
comment on column OSECD.JZ_CASHINCOME.passengerflow
  is '客流量';
comment on column OSECD.JZ_CASHINCOME.favorable_income
  is '优惠金额';
comment on column OSECD.JZ_CASHINCOME.favorable_flow
  is '优惠人次';
comment on column OSECD.JZ_CASHINCOME.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_CASHINCOME.storageorgtype
  is '数据结存组织级别 0城市，1总公司，2分公司，3车队，4线路,5车辆，6站点';
comment on column OSECD.JZ_CASHINCOME.loadconfig
  is '运力配置';
create index OSECD.IDX_CASHINCOME on OSECD.JZ_CASHINCOME (JZDATE, ORGID, ROUTEID)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IDX_CASHINCOME1 on OSECD.JZ_CASHINCOME (DATASAVELEVEL, STORAGEORGTYPE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_CASHINCOME
  add constraint PK_CASHINCOME primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_CITYTRIPSTORAGE
prompt =================================
prompt
create table OSECD.JZ_CITYTRIPSTORAGE
(
  recordid      NVARCHAR2(36) not null,
  outgoingcount NUMBER,
  recdate       DATE default sysdate,
  jzdate        DATE
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_CITYTRIPSTORAGE
  is '城市出行总人次表';
comment on column OSECD.JZ_CITYTRIPSTORAGE.recordid
  is '记录ID';
comment on column OSECD.JZ_CITYTRIPSTORAGE.outgoingcount
  is '出行人次';
comment on column OSECD.JZ_CITYTRIPSTORAGE.jzdate
  is '结存日期';
alter table OSECD.JZ_CITYTRIPSTORAGE
  add constraint PK_CITYTRIPSTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_CONSUMECARDTYPE
prompt =================================
prompt
create table OSECD.JZ_CONSUMECARDTYPE
(
  recordid           VARCHAR2(36) not null,
  orgid              VARCHAR2(36) not null,
  orgname            NVARCHAR2(60),
  routeid            VARCHAR2(20),
  routename          NVARCHAR2(20),
  jzdate             DATE,
  timephasetype      VARCHAR2(2),
  timephasevalue     NVARCHAR2(20),
  timephasestarttime NUMBER(8,6),
  timephaseendtime   NUMBER(8,6),
  cardtype           VARCHAR2(3),
  cardname           NVARCHAR2(50),
  cardtypecount      NUMBER(8),
  datasavelevel      VARCHAR2(2),
  recdate            DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_CONSUMECARDTYPE
  is '刷卡人次分类统计结存表';
comment on column OSECD.JZ_CONSUMECARDTYPE.recordid
  is '记录ID';
comment on column OSECD.JZ_CONSUMECARDTYPE.orgid
  is '组织编号';
comment on column OSECD.JZ_CONSUMECARDTYPE.orgname
  is '组织名称';
comment on column OSECD.JZ_CONSUMECARDTYPE.routeid
  is '线路编号';
comment on column OSECD.JZ_CONSUMECARDTYPE.routename
  is '线路名称';
comment on column OSECD.JZ_CONSUMECARDTYPE.jzdate
  is '结存日期';
comment on column OSECD.JZ_CONSUMECARDTYPE.timephasetype
  is '峰段类型';
comment on column OSECD.JZ_CONSUMECARDTYPE.timephasevalue
  is '峰段名称';
comment on column OSECD.JZ_CONSUMECARDTYPE.timephasestarttime
  is '峰段开始时间(相对0点的天数)';
comment on column OSECD.JZ_CONSUMECARDTYPE.timephaseendtime
  is '峰段结束时间(相对0点的天数)';
comment on column OSECD.JZ_CONSUMECARDTYPE.cardtype
  is '刷卡类型(取字典表的定义)';
comment on column OSECD.JZ_CONSUMECARDTYPE.cardname
  is '字典名称';
comment on column OSECD.JZ_CONSUMECARDTYPE.cardtypecount
  is '刷卡数量';
comment on column OSECD.JZ_CONSUMECARDTYPE.datasavelevel
  is '数据结存级别';
create index OSECD.IDX_CONSUMECARDTYPE on OSECD.JZ_CONSUMECARDTYPE (JZDATE, ORGID, ROUTEID, TIMEPHASETYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_CONSUMECARDTYPE
  add constraint PK_CONSUMECARDTYPE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_CONSUMECARDTYPE2
prompt ==================================
prompt
create table OSECD.JZ_CONSUMECARDTYPE2
(
  recordid           NVARCHAR2(36) not null,
  orgid              VARCHAR2(36) not null,
  orgname            NVARCHAR2(60),
  routeid            VARCHAR2(20),
  routename          NVARCHAR2(20),
  timephasetype      NVARCHAR2(2),
  timephasevalue     NVARCHAR2(20),
  timephasestarttime NUMBER(8,6),
  timephaseendtime   NUMBER(8,6),
  cardtype           NVARCHAR2(20),
  cardname           NVARCHAR2(50),
  cardtypecount      NUMBER(8),
  datasavelevel      NVARCHAR2(20),
  recdate            DATE default sysdate,
  jzdate             DATE
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_CONSUMECARDTYPE2
  is '按五个峰段结存刷卡人次分类统计';
comment on column OSECD.JZ_CONSUMECARDTYPE2.recordid
  is '记录ID';
comment on column OSECD.JZ_CONSUMECARDTYPE2.orgid
  is '组织编号';
comment on column OSECD.JZ_CONSUMECARDTYPE2.orgname
  is '组织名称';
comment on column OSECD.JZ_CONSUMECARDTYPE2.routeid
  is '线路编号';
comment on column OSECD.JZ_CONSUMECARDTYPE2.routename
  is '线路名称';
comment on column OSECD.JZ_CONSUMECARDTYPE2.timephasetype
  is '峰段类型';
comment on column OSECD.JZ_CONSUMECARDTYPE2.timephasevalue
  is '峰段名称';
comment on column OSECD.JZ_CONSUMECARDTYPE2.timephasestarttime
  is '峰段开始时间(相对0点的天数)';
comment on column OSECD.JZ_CONSUMECARDTYPE2.timephaseendtime
  is '峰段结束时间(相对0点的天数)';
comment on column OSECD.JZ_CONSUMECARDTYPE2.cardtype
  is '刷卡类型(取字典表的定义)';
comment on column OSECD.JZ_CONSUMECARDTYPE2.cardname
  is '字典名称';
comment on column OSECD.JZ_CONSUMECARDTYPE2.cardtypecount
  is '刷卡数量';
comment on column OSECD.JZ_CONSUMECARDTYPE2.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_CONSUMECARDTYPE2.jzdate
  is '结存日期';
create index OSECD.IDX_CONSUMECARDTYPE2 on OSECD.JZ_CONSUMECARDTYPE2 (JZDATE, ORGID, ROUTEID, TIMEPHASETYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_CONSUMECARDTYPE2
  add constraint PK_CONSUMECARDTYPE2 primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_CORRIDORSTORAGE
prompt =================================
prompt
create table OSECD.JZ_CORRIDORSTORAGE
(
  recordid           VARCHAR2(36) not null,
  corridorid         VARCHAR2(36),
  jzdate             DATE,
  upcount            NUMBER,
  downcount          NUMBER,
  loadcount          NUMBER,
  loadconfig         NUMBER,
  recdate            DATE,
  timephasetype      VARCHAR2(2),
  timephasevalue     NVARCHAR2(50),
  timephasestarttime NUMBER(8,6),
  timephaseendtime   NUMBER(8,6),
  datasavelevel      VARCHAR2(2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_CORRIDORSTORAGE
  is '客运走廊数据结存表';
comment on column OSECD.JZ_CORRIDORSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_CORRIDORSTORAGE.corridorid
  is '客运走廊编号';
comment on column OSECD.JZ_CORRIDORSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_CORRIDORSTORAGE.upcount
  is '上车人数';
comment on column OSECD.JZ_CORRIDORSTORAGE.downcount
  is '下车人数';
comment on column OSECD.JZ_CORRIDORSTORAGE.loadcount
  is '载客人数';
comment on column OSECD.JZ_CORRIDORSTORAGE.loadconfig
  is '运力配置';
comment on column OSECD.JZ_CORRIDORSTORAGE.recdate
  is '记录时间';
comment on column OSECD.JZ_CORRIDORSTORAGE.timephasetype
  is '峰段类型';
comment on column OSECD.JZ_CORRIDORSTORAGE.timephasevalue
  is '峰段名称';
comment on column OSECD.JZ_CORRIDORSTORAGE.timephasestarttime
  is '峰段开始时间(相对0点的天数)';
comment on column OSECD.JZ_CORRIDORSTORAGE.timephaseendtime
  is '峰段结束时间(相对0点的天数)';
comment on column OSECD.JZ_CORRIDORSTORAGE.datasavelevel
  is '3-日结存，2-月结存，1-年结存，0-峰段结存';
create index OSECD.IX_JZCORRIDOR on OSECD.JZ_CORRIDORSTORAGE (CORRIDORID, JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_CORRIDORSTORAGE
  add constraint PK_JZCORRIDOR primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_DAYPASSENGERSTORAGE
prompt =====================================
prompt
create table OSECD.JZ_DAYPASSENGERSTORAGE
(
  recordid       NUMBER not null,
  orgid          VARCHAR2(36),
  routeid        VARCHAR2(36),
  stationid      VARCHAR2(36),
  jzdate         DATE,
  passengercount NUMBER,
  datasavelevel  VARCHAR2(2),
  storageorgtype VARCHAR2(2),
  recdate        DATE default SYSDATE,
  busid          VARCHAR2(32),
  buscardno      VARCHAR2(20)
)
partition by range (JZDATE)
(
  partition P_20150701 values less than (TO_DATE(' 2015-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_DAYPASSENGERSTORAGE
  is '日客流结存表';
comment on column OSECD.JZ_DAYPASSENGERSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_DAYPASSENGERSTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_DAYPASSENGERSTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_DAYPASSENGERSTORAGE.stationid
  is '站点编号';
comment on column OSECD.JZ_DAYPASSENGERSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_DAYPASSENGERSTORAGE.passengercount
  is '乘客数量';
comment on column OSECD.JZ_DAYPASSENGERSTORAGE.datasavelevel
  is '数据结存级别（1-年，2-月，3-日）';
comment on column OSECD.JZ_DAYPASSENGERSTORAGE.storageorgtype
  is '数据结存级别（1-总公司，2-分公司，3-车队，4-线路，5-车辆，6-站点,7-线路站点）';
comment on column OSECD.JZ_DAYPASSENGERSTORAGE.recdate
  is '记录日期';
comment on column OSECD.JZ_DAYPASSENGERSTORAGE.busid
  is '车辆ID';
comment on column OSECD.JZ_DAYPASSENGERSTORAGE.buscardno
  is '车牌号';
create index OSECD.IX_DAYPASSENGERSTORAGE on OSECD.JZ_DAYPASSENGERSTORAGE (DATASAVELEVEL, STORAGEORGTYPE, JZDATE)
  local;
create index OSECD.IX_DAYPASSENGERSTORAGE1 on OSECD.JZ_DAYPASSENGERSTORAGE (ROUTEID)
  local;
create index OSECD.IX_DAYPASSENGERSTORAGE2 on OSECD.JZ_DAYPASSENGERSTORAGE (STATIONID)
  local;
create index OSECD.IX_DAYPASSENGERSTORAGE3 on OSECD.JZ_DAYPASSENGERSTORAGE (BUSID, BUSCARDNO)
  local;

prompt
prompt Creating table JZ_DAYTAKEBUSSTORAGE
prompt ===================================
prompt
create table OSECD.JZ_DAYTAKEBUSSTORAGE
(
  recordid      VARCHAR2(36) not null,
  jzdate        DATE,
  daytakebus    NUMBER,
  datasavelevel VARCHAR2(2),
  recdate       DATE default sysdate,
  cardtype      VARCHAR2(3),
  cardname      NVARCHAR2(50),
  psgcount      NUMBER,
  peoplecount   NUMBER
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_DAYTAKEBUSSTORAGE
  is '人均公交日乘次结存表';
comment on column OSECD.JZ_DAYTAKEBUSSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_DAYTAKEBUSSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_DAYTAKEBUSSTORAGE.daytakebus
  is '人均公交日乘次';
comment on column OSECD.JZ_DAYTAKEBUSSTORAGE.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_DAYTAKEBUSSTORAGE.cardtype
  is '卡类型';
comment on column OSECD.JZ_DAYTAKEBUSSTORAGE.cardname
  is '字典名称';
comment on column OSECD.JZ_DAYTAKEBUSSTORAGE.psgcount
  is '出行人次';
comment on column OSECD.JZ_DAYTAKEBUSSTORAGE.peoplecount
  is '出行人数';
alter table OSECD.JZ_DAYTAKEBUSSTORAGE
  add constraint PK_DAYTAKEBUSSTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_DEROUNDTRIP
prompt =============================
prompt
create table OSECD.JZ_DEROUNDTRIP
(
  recordid       VARCHAR2(36),
  orgid          VARCHAR2(36),
  routeid        VARCHAR2(36),
  routename      VARCHAR2(60),
  shiftcount     NUMBER,
  jzdate         DATE,
  datasavelevel  VARCHAR2(2),
  storageorgtype VARCHAR2(2),
  recdate        DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_DEROUNDTRIP
  is '线路班次日结存表（深圳专用，研究院计算班次汇总）';
comment on column OSECD.JZ_DEROUNDTRIP.recordid
  is '记录编号';
comment on column OSECD.JZ_DEROUNDTRIP.orgid
  is '组织编号';
comment on column OSECD.JZ_DEROUNDTRIP.routeid
  is '线路编号';
comment on column OSECD.JZ_DEROUNDTRIP.routename
  is '线路名称';
comment on column OSECD.JZ_DEROUNDTRIP.shiftcount
  is '班次数';
comment on column OSECD.JZ_DEROUNDTRIP.jzdate
  is '结存业务日期';
comment on column OSECD.JZ_DEROUNDTRIP.datasavelevel
  is '结存级别，1-年，2-月，3-日';
comment on column OSECD.JZ_DEROUNDTRIP.storageorgtype
  is '组织结存级别，4-线路，其他-根据组织级别存储';
comment on column OSECD.JZ_DEROUNDTRIP.recdate
  is '结存记录时间';
create index OSECD.IX_JZROUNDTRIP on OSECD.JZ_DEROUNDTRIP (JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_DRIVETIMESTORAGE
prompt ==================================
prompt
create table OSECD.JZ_DRIVETIMESTORAGE
(
  recordid  VARCHAR2(36) not null,
  orgid     VARCHAR2(36),
  routeid   VARCHAR2(36),
  driverid  VARCHAR2(36),
  drivetime NUMBER,
  jzdate    DATE,
  recdate   DATE default SYSDATE
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_DRIVETIMESTORAGE
  is '驾驶员驾驶时间结存表';
comment on column OSECD.JZ_DRIVETIMESTORAGE.recordid
  is '记录编号（CD取序列S_EMPSTORAGE）';
comment on column OSECD.JZ_DRIVETIMESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_DRIVETIMESTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_DRIVETIMESTORAGE.driverid
  is '驾驶员编号（人员信息表EMPID）';
comment on column OSECD.JZ_DRIVETIMESTORAGE.drivetime
  is '驾驶时间长度（单位：小时）';
comment on column OSECD.JZ_DRIVETIMESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_DRIVETIMESTORAGE.recdate
  is '记录时间';
create index OSECD.IX_DRIVETIME on OSECD.JZ_DRIVETIMESTORAGE (JZDATE, DRIVETIME)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IX_DRIVETIME1 on OSECD.JZ_DRIVETIMESTORAGE (ORGID, ROUTEID, DRIVERID, DRIVETIME, JZDATE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_DRIVETIMESTORAGE
  add constraint PK_DRIVETIME primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_EMPLOYEEPHASESTORAGE
prompt ======================================
prompt
create table OSECD.JZ_EMPLOYEEPHASESTORAGE
(
  recordid            VARCHAR2(36) not null,
  orgid               VARCHAR2(36),
  orgname             NVARCHAR2(60),
  jzdate              DATE,
  storageempfsttype   VARCHAR2(2),
  storageempfstname   NVARCHAR2(50),
  storageempscdtype   VARCHAR2(2),
  storageempscdname   NVARCHAR2(50),
  storageempthirdtype NVARCHAR2(5),
  storageempthirdname NVARCHAR2(50),
  empcount            NUMBER(8),
  datasavelevel       VARCHAR2(2),
  storageorgtype      CHAR(1),
  recdate             DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_EMPLOYEEPHASESTORAGE
  is '人员数据结存表';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.storageempfsttype
  is '人员结存类型一级字典';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.storageempfstname
  is '字典名称';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.storageempscdtype
  is '人员结存类型二级字典';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.storageempscdname
  is '字典名称';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.storageempthirdtype
  is '人员结存类型三级字典';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.storageempthirdname
  is '字典名称';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.empcount
  is '人员数量';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.storageorgtype
  is '数据结存组织级别1表示总公司结存，2表示分公司结存，3表示车队结存，4表示线路结存';
comment on column OSECD.JZ_EMPLOYEEPHASESTORAGE.recdate
  is '记录日期';
alter table OSECD.JZ_EMPLOYEEPHASESTORAGE
  add constraint PK_EMPLOYEEPHASESTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_EQUIPMENTPHASESTORAGE
prompt =======================================
prompt
create table OSECD.JZ_EQUIPMENTPHASESTORAGE
(
  recordid               VARCHAR2(36) not null,
  orgid                  VARCHAR2(36),
  orgname                NVARCHAR2(60),
  jzdate                 DATE,
  storageequipfirsttype  VARCHAR2(2),
  storageequipfirstname  NVARCHAR2(50),
  storageequipsecondtype VARCHAR2(2),
  storageequipsecondname NVARCHAR2(50),
  statistictype          VARCHAR2(2),
  statisticname          NVARCHAR2(50),
  equipmentcount         NUMBER,
  datasavelevel          VARCHAR2(4),
  recdate                DATE default sysdate,
  areatype               VARCHAR2(10),
  areaname               NVARCHAR2(50)
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_EQUIPMENTPHASESTORAGE
  is '设备设施数据结存表';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.storageequipfirsttype
  is '设备设施结存类型一级字典';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.storageequipfirstname
  is '字典名称';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.storageequipsecondtype
  is '设备设施结存类型二级字典';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.storageequipsecondname
  is '字典名称';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.statistictype
  is '设备设施结存方式';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.statisticname
  is '字典名称';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.equipmentcount
  is '设备设施数量';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.areatype
  is '地区类型';
comment on column OSECD.JZ_EQUIPMENTPHASESTORAGE.areaname
  is '地区名称';
create index OSECD.IDX_EQUIPMENTSTORAGE on OSECD.JZ_EQUIPMENTPHASESTORAGE (JZDATE, STORAGEEQUIPFIRSTTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_EQUIPMENTPHASESTORAGE
  add constraint PK_EQUIPMENTPHASESTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_FSTANDLSTCONSUME
prompt ==================================
prompt
create table OSECD.JZ_FSTANDLSTCONSUME
(
  recordid   VARCHAR2(36) not null,
  routeid    VARCHAR2(36),
  segmentid  VARCHAR2(36),
  busid      VARCHAR2(36),
  jzdate     DATE,
  leavetime  DATE,
  arrivetime DATE,
  fstorlst   VARCHAR2(2),
  shiftnum   VARCHAR2(2),
  cardcount  NUMBER(8),
  recdate    DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_FSTANDLSTCONSUME
  is '线路首末班刷卡数据结存表';
comment on column OSECD.JZ_FSTANDLSTCONSUME.recordid
  is '记录编号';
comment on column OSECD.JZ_FSTANDLSTCONSUME.routeid
  is '线路编号';
comment on column OSECD.JZ_FSTANDLSTCONSUME.segmentid
  is '单程编号';
comment on column OSECD.JZ_FSTANDLSTCONSUME.busid
  is '对应班次的车辆编号';
comment on column OSECD.JZ_FSTANDLSTCONSUME.jzdate
  is '结存日期';
comment on column OSECD.JZ_FSTANDLSTCONSUME.leavetime
  is '发车时间';
comment on column OSECD.JZ_FSTANDLSTCONSUME.arrivetime
  is '到站时间';
comment on column OSECD.JZ_FSTANDLSTCONSUME.fstorlst
  is '首末班标志，1-首班 2-末班';
comment on column OSECD.JZ_FSTANDLSTCONSUME.shiftnum
  is '班次数量';
comment on column OSECD.JZ_FSTANDLSTCONSUME.cardcount
  is '刷卡数量';
comment on column OSECD.JZ_FSTANDLSTCONSUME.recdate
  is '记录时间';
create index OSECD.IX_FSTANDLSTCONSUME on OSECD.JZ_FSTANDLSTCONSUME (ROUTEID, JZDATE, FSTORLST)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_FSTANDLSTCONSUME
  add constraint PK_FSTANDLSTCONSUME primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_HOURBUSUSERATESTORAGE
prompt =======================================
prompt
create table OSECD.JZ_HOURBUSUSERATESTORAGE
(
  recordid         VARCHAR2(36) not null,
  orgid            VARCHAR2(20),
  routeid          VARCHAR2(20),
  routename        VARCHAR2(50),
  starttime        NUMBER,
  endtime          NUMBER,
  bussid           VARCHAR2(2),
  devotionempcount NUMBER,
  devotionbuscount NUMBER,
  planempcount     NUMBER,
  planbuscount     NUMBER,
  sumbuscount      NUMBER,
  psgcount         NUMBER,
  datasavelevel    VARCHAR2(2),
  storageorgtype   VARCHAR2(2),
  jzdate           DATE,
  recdate          DATE default SYSDATE
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_HOURBUSUSERATESTORAGE
  is '车辆时段利用率结存表';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.routename
  is '线路名称';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.starttime
  is '开始时间（相对于0点的分钟数）';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.endtime
  is '结束时间（相对于0点的分钟数）';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.bussid
  is '车次类型';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.devotionempcount
  is '投入人员数';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.devotionbuscount
  is '投入车辆数';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.planempcount
  is '计划人员数';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.planbuscount
  is '计划车辆数';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.sumbuscount
  is '总车辆数';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.psgcount
  is '客运量';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.datasavelevel
  is '数据结存级别：1-年，2-月，3-日';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.storageorgtype
  is '数据结存级别(1-总公司、2-分公司、3-车队、4-线路)';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_HOURBUSUSERATESTORAGE.recdate
  is '记录时间';
alter table OSECD.JZ_HOURBUSUSERATESTORAGE
  add constraint PK_HOURBUSUSERATE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_HOURCASHINCOME
prompt ================================
prompt
create table OSECD.JZ_HOURCASHINCOME
(
  recordid                 VARCHAR2(36) not null,
  orgid                    VARCHAR2(36),
  orgname                  NVARCHAR2(60),
  routeid                  VARCHAR2(36),
  routename                NVARCHAR2(20),
  jzdate                   DATE,
  starttime                NUMBER,
  endtime                  NUMBER,
  storagecashincomefsttype VARCHAR2(2),
  storagecashincomefstname NVARCHAR2(50),
  storagecashincomescdtype VARCHAR2(2),
  storagecashincomescdname NVARCHAR2(50),
  buscount                 NUMBER,
  busstdcount              NUMBER,
  runmiles                 NUMBER,
  unrunmiles               NUMBER,
  totalincome              NUMBER,
  passengerflow            NUMBER,
  favorableincome          NUMBER,
  favorableflow            NUMBER,
  datasavelevel            VARCHAR2(2),
  storageorgtype           VARCHAR2(2),
  recdate                  DATE default SYSDATE
)
partition by range (JZDATE)
(
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_HOURCASHINCOME
  is '运营收入时段数据结存表';
comment on column OSECD.JZ_HOURCASHINCOME.recordid
  is '记录编号';
comment on column OSECD.JZ_HOURCASHINCOME.orgid
  is '组织编号';
comment on column OSECD.JZ_HOURCASHINCOME.orgname
  is '组织名称';
comment on column OSECD.JZ_HOURCASHINCOME.routeid
  is '线路编号';
comment on column OSECD.JZ_HOURCASHINCOME.routename
  is '线路名称';
comment on column OSECD.JZ_HOURCASHINCOME.jzdate
  is '结存日期';
comment on column OSECD.JZ_HOURCASHINCOME.starttime
  is '时段开始时间，单位分钟';
comment on column OSECD.JZ_HOURCASHINCOME.endtime
  is '时段结束时间，单位分钟';
comment on column OSECD.JZ_HOURCASHINCOME.storagecashincomefsttype
  is '运营收入数据一级字典';
comment on column OSECD.JZ_HOURCASHINCOME.storagecashincomefstname
  is '运营收入数据一级字典名称';
comment on column OSECD.JZ_HOURCASHINCOME.storagecashincomescdtype
  is '运营收入数据二级字典';
comment on column OSECD.JZ_HOURCASHINCOME.storagecashincomescdname
  is '运营收入数据二级字典名称';
comment on column OSECD.JZ_HOURCASHINCOME.buscount
  is '车辆数量';
comment on column OSECD.JZ_HOURCASHINCOME.busstdcount
  is '车辆标台数';
comment on column OSECD.JZ_HOURCASHINCOME.runmiles
  is '预留字段，运营里程';
comment on column OSECD.JZ_HOURCASHINCOME.unrunmiles
  is '预留字段，非运营里程';
comment on column OSECD.JZ_HOURCASHINCOME.totalincome
  is '总收入';
comment on column OSECD.JZ_HOURCASHINCOME.passengerflow
  is '客流量';
comment on column OSECD.JZ_HOURCASHINCOME.favorableincome
  is '优惠金额';
comment on column OSECD.JZ_HOURCASHINCOME.favorableflow
  is '优惠人次';
comment on column OSECD.JZ_HOURCASHINCOME.datasavelevel
  is '数据结存级别：1-年，2-月，3-日';
comment on column OSECD.JZ_HOURCASHINCOME.storageorgtype
  is '组织结存级别，与组织级别';
comment on column OSECD.JZ_HOURCASHINCOME.recdate
  is '记录时间';
create index OSECD.IX_HOURCASHINCOME on OSECD.JZ_HOURCASHINCOME (JZDATE, STARTTIME, ENDTIME, DATASAVELEVEL, STORAGEORGTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_HOURCASHINCOME
  add constraint PK_HOURCASHINCOME primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_HOURDATASTORAGE
prompt =================================
prompt
create table OSECD.JZ_HOURDATASTORAGE
(
  recordid         VARCHAR2(36) not null,
  orgid            VARCHAR2(36),
  routeid          VARCHAR2(36),
  busid            VARCHAR2(36),
  buscardno        NVARCHAR2(20),
  stationid        VARCHAR2(36),
  jzdate           DATE,
  starttime        NUMBER,
  endtime          NUMBER,
  iccount          NUMBER,
  totalincome      NUMBER,
  passengerflow    NUMBER,
  favorable_income NUMBER,
  favorable_flow   NUMBER,
  loadconfig       NUMBER,
  buscount         NUMBER,
  datasavelevel    VARCHAR2(2),
  storageorgtype   VARCHAR2(2),
  recdate          DATE default sysdate,
  nextstationid    VARCHAR2(36),
  loadcount        NUMBER
)
partition by range (JZDATE)
(
  partition P_20130101 values less than (TO_DATE(' 2013-01-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130102 values less than (TO_DATE(' 2013-01-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130103 values less than (TO_DATE(' 2013-01-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130104 values less than (TO_DATE(' 2013-01-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130105 values less than (TO_DATE(' 2013-01-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130106 values less than (TO_DATE(' 2013-01-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130107 values less than (TO_DATE(' 2013-01-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130108 values less than (TO_DATE(' 2013-01-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130109 values less than (TO_DATE(' 2013-01-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130110 values less than (TO_DATE(' 2013-01-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130111 values less than (TO_DATE(' 2013-01-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130112 values less than (TO_DATE(' 2013-01-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130113 values less than (TO_DATE(' 2013-01-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130114 values less than (TO_DATE(' 2013-01-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130115 values less than (TO_DATE(' 2013-01-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130116 values less than (TO_DATE(' 2013-01-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130117 values less than (TO_DATE(' 2013-01-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130118 values less than (TO_DATE(' 2013-01-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130119 values less than (TO_DATE(' 2013-01-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130120 values less than (TO_DATE(' 2013-01-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130121 values less than (TO_DATE(' 2013-01-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130122 values less than (TO_DATE(' 2013-01-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130123 values less than (TO_DATE(' 2013-01-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130124 values less than (TO_DATE(' 2013-01-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130125 values less than (TO_DATE(' 2013-01-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130126 values less than (TO_DATE(' 2013-01-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130127 values less than (TO_DATE(' 2013-01-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130128 values less than (TO_DATE(' 2013-01-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130129 values less than (TO_DATE(' 2013-01-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130130 values less than (TO_DATE(' 2013-01-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130131 values less than (TO_DATE(' 2013-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130201 values less than (TO_DATE(' 2013-02-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130202 values less than (TO_DATE(' 2013-02-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130203 values less than (TO_DATE(' 2013-02-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130204 values less than (TO_DATE(' 2013-02-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130205 values less than (TO_DATE(' 2013-02-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130206 values less than (TO_DATE(' 2013-02-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130207 values less than (TO_DATE(' 2013-02-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130208 values less than (TO_DATE(' 2013-02-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130209 values less than (TO_DATE(' 2013-02-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130210 values less than (TO_DATE(' 2013-02-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130211 values less than (TO_DATE(' 2013-02-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130212 values less than (TO_DATE(' 2013-02-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130213 values less than (TO_DATE(' 2013-02-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130214 values less than (TO_DATE(' 2013-02-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130215 values less than (TO_DATE(' 2013-02-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130216 values less than (TO_DATE(' 2013-02-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130217 values less than (TO_DATE(' 2013-02-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130218 values less than (TO_DATE(' 2013-02-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130219 values less than (TO_DATE(' 2013-02-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130220 values less than (TO_DATE(' 2013-02-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130221 values less than (TO_DATE(' 2013-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130222 values less than (TO_DATE(' 2013-02-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130223 values less than (TO_DATE(' 2013-02-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130224 values less than (TO_DATE(' 2013-02-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130225 values less than (TO_DATE(' 2013-02-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130226 values less than (TO_DATE(' 2013-02-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130227 values less than (TO_DATE(' 2013-02-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130228 values less than (TO_DATE(' 2013-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130301 values less than (TO_DATE(' 2013-03-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130302 values less than (TO_DATE(' 2013-03-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130303 values less than (TO_DATE(' 2013-03-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130304 values less than (TO_DATE(' 2013-03-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130305 values less than (TO_DATE(' 2013-03-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130306 values less than (TO_DATE(' 2013-03-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130307 values less than (TO_DATE(' 2013-03-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130308 values less than (TO_DATE(' 2013-03-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130309 values less than (TO_DATE(' 2013-03-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130310 values less than (TO_DATE(' 2013-03-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130311 values less than (TO_DATE(' 2013-03-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130312 values less than (TO_DATE(' 2013-03-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130313 values less than (TO_DATE(' 2013-03-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130314 values less than (TO_DATE(' 2013-03-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130315 values less than (TO_DATE(' 2013-03-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130316 values less than (TO_DATE(' 2013-03-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130317 values less than (TO_DATE(' 2013-03-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130318 values less than (TO_DATE(' 2013-03-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130319 values less than (TO_DATE(' 2013-03-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130320 values less than (TO_DATE(' 2013-03-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130321 values less than (TO_DATE(' 2013-03-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130322 values less than (TO_DATE(' 2013-03-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130323 values less than (TO_DATE(' 2013-03-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130324 values less than (TO_DATE(' 2013-03-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130325 values less than (TO_DATE(' 2013-03-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130326 values less than (TO_DATE(' 2013-03-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130327 values less than (TO_DATE(' 2013-03-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130328 values less than (TO_DATE(' 2013-03-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130329 values less than (TO_DATE(' 2013-03-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130330 values less than (TO_DATE(' 2013-03-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130331 values less than (TO_DATE(' 2013-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130401 values less than (TO_DATE(' 2013-04-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130402 values less than (TO_DATE(' 2013-04-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130403 values less than (TO_DATE(' 2013-04-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130404 values less than (TO_DATE(' 2013-04-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130405 values less than (TO_DATE(' 2013-04-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130406 values less than (TO_DATE(' 2013-04-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130407 values less than (TO_DATE(' 2013-04-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130408 values less than (TO_DATE(' 2013-04-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130409 values less than (TO_DATE(' 2013-04-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130410 values less than (TO_DATE(' 2013-04-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130411 values less than (TO_DATE(' 2013-04-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130412 values less than (TO_DATE(' 2013-04-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130413 values less than (TO_DATE(' 2013-04-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130414 values less than (TO_DATE(' 2013-04-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130415 values less than (TO_DATE(' 2013-04-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130416 values less than (TO_DATE(' 2013-04-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130417 values less than (TO_DATE(' 2013-04-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130418 values less than (TO_DATE(' 2013-04-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130419 values less than (TO_DATE(' 2013-04-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130420 values less than (TO_DATE(' 2013-04-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130421 values less than (TO_DATE(' 2013-04-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130422 values less than (TO_DATE(' 2013-04-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130423 values less than (TO_DATE(' 2013-04-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130424 values less than (TO_DATE(' 2013-04-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130425 values less than (TO_DATE(' 2013-04-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130426 values less than (TO_DATE(' 2013-04-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130427 values less than (TO_DATE(' 2013-04-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130428 values less than (TO_DATE(' 2013-04-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130429 values less than (TO_DATE(' 2013-04-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130430 values less than (TO_DATE(' 2013-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130501 values less than (TO_DATE(' 2013-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130502 values less than (TO_DATE(' 2013-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130503 values less than (TO_DATE(' 2013-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130504 values less than (TO_DATE(' 2013-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130505 values less than (TO_DATE(' 2013-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130506 values less than (TO_DATE(' 2013-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130507 values less than (TO_DATE(' 2013-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130508 values less than (TO_DATE(' 2013-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130509 values less than (TO_DATE(' 2013-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130510 values less than (TO_DATE(' 2013-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130511 values less than (TO_DATE(' 2013-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130512 values less than (TO_DATE(' 2013-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130513 values less than (TO_DATE(' 2013-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130514 values less than (TO_DATE(' 2013-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130515 values less than (TO_DATE(' 2013-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130516 values less than (TO_DATE(' 2013-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130517 values less than (TO_DATE(' 2013-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130518 values less than (TO_DATE(' 2013-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130519 values less than (TO_DATE(' 2013-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130520 values less than (TO_DATE(' 2013-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130521 values less than (TO_DATE(' 2013-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130522 values less than (TO_DATE(' 2013-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130523 values less than (TO_DATE(' 2013-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130524 values less than (TO_DATE(' 2013-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130525 values less than (TO_DATE(' 2013-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130526 values less than (TO_DATE(' 2013-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130527 values less than (TO_DATE(' 2013-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130528 values less than (TO_DATE(' 2013-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130529 values less than (TO_DATE(' 2013-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130530 values less than (TO_DATE(' 2013-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130531 values less than (TO_DATE(' 2013-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130601 values less than (TO_DATE(' 2013-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130602 values less than (TO_DATE(' 2013-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130603 values less than (TO_DATE(' 2013-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130604 values less than (TO_DATE(' 2013-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130605 values less than (TO_DATE(' 2013-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130606 values less than (TO_DATE(' 2013-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130607 values less than (TO_DATE(' 2013-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130608 values less than (TO_DATE(' 2013-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130609 values less than (TO_DATE(' 2013-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130610 values less than (TO_DATE(' 2013-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130611 values less than (TO_DATE(' 2013-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130612 values less than (TO_DATE(' 2013-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130613 values less than (TO_DATE(' 2013-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130614 values less than (TO_DATE(' 2013-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130615 values less than (TO_DATE(' 2013-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130616 values less than (TO_DATE(' 2013-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130617 values less than (TO_DATE(' 2013-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130618 values less than (TO_DATE(' 2013-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130619 values less than (TO_DATE(' 2013-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130620 values less than (TO_DATE(' 2013-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130621 values less than (TO_DATE(' 2013-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130622 values less than (TO_DATE(' 2013-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130623 values less than (TO_DATE(' 2013-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130624 values less than (TO_DATE(' 2013-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130625 values less than (TO_DATE(' 2013-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130626 values less than (TO_DATE(' 2013-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130627 values less than (TO_DATE(' 2013-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130628 values less than (TO_DATE(' 2013-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130629 values less than (TO_DATE(' 2013-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130630 values less than (TO_DATE(' 2013-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130701 values less than (TO_DATE(' 2013-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130702 values less than (TO_DATE(' 2013-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130703 values less than (TO_DATE(' 2013-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130704 values less than (TO_DATE(' 2013-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130705 values less than (TO_DATE(' 2013-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130706 values less than (TO_DATE(' 2013-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130707 values less than (TO_DATE(' 2013-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130708 values less than (TO_DATE(' 2013-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130709 values less than (TO_DATE(' 2013-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130710 values less than (TO_DATE(' 2013-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130711 values less than (TO_DATE(' 2013-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130712 values less than (TO_DATE(' 2013-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130713 values less than (TO_DATE(' 2013-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130714 values less than (TO_DATE(' 2013-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130715 values less than (TO_DATE(' 2013-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130716 values less than (TO_DATE(' 2013-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130717 values less than (TO_DATE(' 2013-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130718 values less than (TO_DATE(' 2013-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130719 values less than (TO_DATE(' 2013-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130720 values less than (TO_DATE(' 2013-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130721 values less than (TO_DATE(' 2013-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130722 values less than (TO_DATE(' 2013-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130723 values less than (TO_DATE(' 2013-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130724 values less than (TO_DATE(' 2013-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130725 values less than (TO_DATE(' 2013-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130726 values less than (TO_DATE(' 2013-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130727 values less than (TO_DATE(' 2013-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130728 values less than (TO_DATE(' 2013-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130729 values less than (TO_DATE(' 2013-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130730 values less than (TO_DATE(' 2013-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130731 values less than (TO_DATE(' 2013-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130801 values less than (TO_DATE(' 2013-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130802 values less than (TO_DATE(' 2013-08-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130803 values less than (TO_DATE(' 2013-08-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130804 values less than (TO_DATE(' 2013-08-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130805 values less than (TO_DATE(' 2013-08-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130806 values less than (TO_DATE(' 2013-08-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130807 values less than (TO_DATE(' 2013-08-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130808 values less than (TO_DATE(' 2013-08-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130809 values less than (TO_DATE(' 2013-08-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130810 values less than (TO_DATE(' 2013-08-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130811 values less than (TO_DATE(' 2013-08-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130812 values less than (TO_DATE(' 2013-08-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130813 values less than (TO_DATE(' 2013-08-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130814 values less than (TO_DATE(' 2013-08-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130815 values less than (TO_DATE(' 2013-08-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130816 values less than (TO_DATE(' 2013-08-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130817 values less than (TO_DATE(' 2013-08-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130818 values less than (TO_DATE(' 2013-08-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130819 values less than (TO_DATE(' 2013-08-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130820 values less than (TO_DATE(' 2013-08-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130821 values less than (TO_DATE(' 2013-08-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130822 values less than (TO_DATE(' 2013-08-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130823 values less than (TO_DATE(' 2013-08-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130824 values less than (TO_DATE(' 2013-08-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130825 values less than (TO_DATE(' 2013-08-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130826 values less than (TO_DATE(' 2013-08-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130827 values less than (TO_DATE(' 2013-08-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130828 values less than (TO_DATE(' 2013-08-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130829 values less than (TO_DATE(' 2013-08-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130830 values less than (TO_DATE(' 2013-08-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130831 values less than (TO_DATE(' 2013-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130901 values less than (TO_DATE(' 2013-09-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130902 values less than (TO_DATE(' 2013-09-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130903 values less than (TO_DATE(' 2013-09-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130904 values less than (TO_DATE(' 2013-09-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130905 values less than (TO_DATE(' 2013-09-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130906 values less than (TO_DATE(' 2013-09-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130907 values less than (TO_DATE(' 2013-09-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130908 values less than (TO_DATE(' 2013-09-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130909 values less than (TO_DATE(' 2013-09-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130910 values less than (TO_DATE(' 2013-09-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130911 values less than (TO_DATE(' 2013-09-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130912 values less than (TO_DATE(' 2013-09-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130913 values less than (TO_DATE(' 2013-09-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130914 values less than (TO_DATE(' 2013-09-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130915 values less than (TO_DATE(' 2013-09-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130916 values less than (TO_DATE(' 2013-09-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130917 values less than (TO_DATE(' 2013-09-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130918 values less than (TO_DATE(' 2013-09-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130919 values less than (TO_DATE(' 2013-09-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130920 values less than (TO_DATE(' 2013-09-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130921 values less than (TO_DATE(' 2013-09-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130922 values less than (TO_DATE(' 2013-09-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130923 values less than (TO_DATE(' 2013-09-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130924 values less than (TO_DATE(' 2013-09-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130925 values less than (TO_DATE(' 2013-09-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130926 values less than (TO_DATE(' 2013-09-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130927 values less than (TO_DATE(' 2013-09-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130928 values less than (TO_DATE(' 2013-09-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130929 values less than (TO_DATE(' 2013-09-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130930 values less than (TO_DATE(' 2013-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131001 values less than (TO_DATE(' 2013-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131002 values less than (TO_DATE(' 2013-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131003 values less than (TO_DATE(' 2013-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131004 values less than (TO_DATE(' 2013-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131005 values less than (TO_DATE(' 2013-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131006 values less than (TO_DATE(' 2013-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131007 values less than (TO_DATE(' 2013-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131008 values less than (TO_DATE(' 2013-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131009 values less than (TO_DATE(' 2013-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131010 values less than (TO_DATE(' 2013-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131011 values less than (TO_DATE(' 2013-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131012 values less than (TO_DATE(' 2013-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131013 values less than (TO_DATE(' 2013-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131014 values less than (TO_DATE(' 2013-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131015 values less than (TO_DATE(' 2013-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131016 values less than (TO_DATE(' 2013-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131017 values less than (TO_DATE(' 2013-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131018 values less than (TO_DATE(' 2013-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131019 values less than (TO_DATE(' 2013-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131020 values less than (TO_DATE(' 2013-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131021 values less than (TO_DATE(' 2013-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131022 values less than (TO_DATE(' 2013-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131023 values less than (TO_DATE(' 2013-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131024 values less than (TO_DATE(' 2013-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131025 values less than (TO_DATE(' 2013-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131026 values less than (TO_DATE(' 2013-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131027 values less than (TO_DATE(' 2013-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131028 values less than (TO_DATE(' 2013-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131029 values less than (TO_DATE(' 2013-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131030 values less than (TO_DATE(' 2013-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131031 values less than (TO_DATE(' 2013-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131101 values less than (TO_DATE(' 2013-11-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131102 values less than (TO_DATE(' 2013-11-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131103 values less than (TO_DATE(' 2013-11-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131104 values less than (TO_DATE(' 2013-11-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131105 values less than (TO_DATE(' 2013-11-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131106 values less than (TO_DATE(' 2013-11-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131107 values less than (TO_DATE(' 2013-11-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131108 values less than (TO_DATE(' 2013-11-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131109 values less than (TO_DATE(' 2013-11-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131110 values less than (TO_DATE(' 2013-11-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131111 values less than (TO_DATE(' 2013-11-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131112 values less than (TO_DATE(' 2013-11-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131113 values less than (TO_DATE(' 2013-11-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131114 values less than (TO_DATE(' 2013-11-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131115 values less than (TO_DATE(' 2013-11-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131116 values less than (TO_DATE(' 2013-11-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131117 values less than (TO_DATE(' 2013-11-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131118 values less than (TO_DATE(' 2013-11-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131119 values less than (TO_DATE(' 2013-11-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131120 values less than (TO_DATE(' 2013-11-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131121 values less than (TO_DATE(' 2013-11-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131122 values less than (TO_DATE(' 2013-11-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131123 values less than (TO_DATE(' 2013-11-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131124 values less than (TO_DATE(' 2013-11-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131125 values less than (TO_DATE(' 2013-11-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131126 values less than (TO_DATE(' 2013-11-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131127 values less than (TO_DATE(' 2013-11-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131128 values less than (TO_DATE(' 2013-11-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131129 values less than (TO_DATE(' 2013-11-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131130 values less than (TO_DATE(' 2013-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131201 values less than (TO_DATE(' 2013-12-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131202 values less than (TO_DATE(' 2013-12-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131203 values less than (TO_DATE(' 2013-12-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131204 values less than (TO_DATE(' 2013-12-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131205 values less than (TO_DATE(' 2013-12-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131206 values less than (TO_DATE(' 2013-12-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131207 values less than (TO_DATE(' 2013-12-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131208 values less than (TO_DATE(' 2013-12-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131209 values less than (TO_DATE(' 2013-12-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131210 values less than (TO_DATE(' 2013-12-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131211 values less than (TO_DATE(' 2013-12-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131212 values less than (TO_DATE(' 2013-12-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131213 values less than (TO_DATE(' 2013-12-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131214 values less than (TO_DATE(' 2013-12-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131215 values less than (TO_DATE(' 2013-12-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131216 values less than (TO_DATE(' 2013-12-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131217 values less than (TO_DATE(' 2013-12-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131218 values less than (TO_DATE(' 2013-12-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131219 values less than (TO_DATE(' 2013-12-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131220 values less than (TO_DATE(' 2013-12-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131221 values less than (TO_DATE(' 2013-12-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131222 values less than (TO_DATE(' 2013-12-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131223 values less than (TO_DATE(' 2013-12-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131224 values less than (TO_DATE(' 2013-12-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131225 values less than (TO_DATE(' 2013-12-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131226 values less than (TO_DATE(' 2013-12-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131227 values less than (TO_DATE(' 2013-12-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131228 values less than (TO_DATE(' 2013-12-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131229 values less than (TO_DATE(' 2013-12-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131230 values less than (TO_DATE(' 2013-12-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131231 values less than (TO_DATE(' 2014-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140101 values less than (TO_DATE(' 2014-01-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140102 values less than (TO_DATE(' 2014-01-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140103 values less than (TO_DATE(' 2014-01-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140104 values less than (TO_DATE(' 2014-01-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140105 values less than (TO_DATE(' 2014-01-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140106 values less than (TO_DATE(' 2014-01-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140107 values less than (TO_DATE(' 2014-01-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140108 values less than (TO_DATE(' 2014-01-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140109 values less than (TO_DATE(' 2014-01-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140110 values less than (TO_DATE(' 2014-01-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140111 values less than (TO_DATE(' 2014-01-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140112 values less than (TO_DATE(' 2014-01-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140113 values less than (TO_DATE(' 2014-01-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140114 values less than (TO_DATE(' 2014-01-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140115 values less than (TO_DATE(' 2014-01-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140116 values less than (TO_DATE(' 2014-01-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140117 values less than (TO_DATE(' 2014-01-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140118 values less than (TO_DATE(' 2014-01-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140119 values less than (TO_DATE(' 2014-01-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140120 values less than (TO_DATE(' 2014-01-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140121 values less than (TO_DATE(' 2014-01-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140122 values less than (TO_DATE(' 2014-01-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140123 values less than (TO_DATE(' 2014-01-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140124 values less than (TO_DATE(' 2014-01-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140125 values less than (TO_DATE(' 2014-01-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140126 values less than (TO_DATE(' 2014-01-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140127 values less than (TO_DATE(' 2014-01-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140128 values less than (TO_DATE(' 2014-01-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140129 values less than (TO_DATE(' 2014-01-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140130 values less than (TO_DATE(' 2014-01-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140131 values less than (TO_DATE(' 2014-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140201 values less than (TO_DATE(' 2014-02-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140202 values less than (TO_DATE(' 2014-02-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140203 values less than (TO_DATE(' 2014-02-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140204 values less than (TO_DATE(' 2014-02-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140205 values less than (TO_DATE(' 2014-02-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140206 values less than (TO_DATE(' 2014-02-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140207 values less than (TO_DATE(' 2014-02-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140208 values less than (TO_DATE(' 2014-02-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140209 values less than (TO_DATE(' 2014-02-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140210 values less than (TO_DATE(' 2014-02-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140211 values less than (TO_DATE(' 2014-02-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140212 values less than (TO_DATE(' 2014-02-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140213 values less than (TO_DATE(' 2014-02-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140214 values less than (TO_DATE(' 2014-02-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140215 values less than (TO_DATE(' 2014-02-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140216 values less than (TO_DATE(' 2014-02-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140217 values less than (TO_DATE(' 2014-02-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140218 values less than (TO_DATE(' 2014-02-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140219 values less than (TO_DATE(' 2014-02-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140220 values less than (TO_DATE(' 2014-02-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140221 values less than (TO_DATE(' 2014-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140222 values less than (TO_DATE(' 2014-02-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140223 values less than (TO_DATE(' 2014-02-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140224 values less than (TO_DATE(' 2014-02-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140225 values less than (TO_DATE(' 2014-02-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140226 values less than (TO_DATE(' 2014-02-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140227 values less than (TO_DATE(' 2014-02-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140228 values less than (TO_DATE(' 2014-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140301 values less than (TO_DATE(' 2014-03-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140302 values less than (TO_DATE(' 2014-03-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140303 values less than (TO_DATE(' 2014-03-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140304 values less than (TO_DATE(' 2014-03-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140305 values less than (TO_DATE(' 2014-03-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140306 values less than (TO_DATE(' 2014-03-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140307 values less than (TO_DATE(' 2014-03-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140308 values less than (TO_DATE(' 2014-03-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140309 values less than (TO_DATE(' 2014-03-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140310 values less than (TO_DATE(' 2014-03-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140311 values less than (TO_DATE(' 2014-03-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140312 values less than (TO_DATE(' 2014-03-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140313 values less than (TO_DATE(' 2014-03-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140314 values less than (TO_DATE(' 2014-03-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140315 values less than (TO_DATE(' 2014-03-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140316 values less than (TO_DATE(' 2014-03-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140317 values less than (TO_DATE(' 2014-03-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140318 values less than (TO_DATE(' 2014-03-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140319 values less than (TO_DATE(' 2014-03-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140320 values less than (TO_DATE(' 2014-03-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140321 values less than (TO_DATE(' 2014-03-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140322 values less than (TO_DATE(' 2014-03-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140323 values less than (TO_DATE(' 2014-03-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140324 values less than (TO_DATE(' 2014-03-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140325 values less than (TO_DATE(' 2014-03-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140326 values less than (TO_DATE(' 2014-03-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140327 values less than (TO_DATE(' 2014-03-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140328 values less than (TO_DATE(' 2014-03-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140329 values less than (TO_DATE(' 2014-03-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140330 values less than (TO_DATE(' 2014-03-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140331 values less than (TO_DATE(' 2014-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140401 values less than (TO_DATE(' 2014-04-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140402 values less than (TO_DATE(' 2014-04-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140403 values less than (TO_DATE(' 2014-04-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140404 values less than (TO_DATE(' 2014-04-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140405 values less than (TO_DATE(' 2014-04-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140406 values less than (TO_DATE(' 2014-04-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140407 values less than (TO_DATE(' 2014-04-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140408 values less than (TO_DATE(' 2014-04-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140409 values less than (TO_DATE(' 2014-04-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140410 values less than (TO_DATE(' 2014-04-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140411 values less than (TO_DATE(' 2014-04-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140412 values less than (TO_DATE(' 2014-04-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140413 values less than (TO_DATE(' 2014-04-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140414 values less than (TO_DATE(' 2014-04-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140415 values less than (TO_DATE(' 2014-04-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140416 values less than (TO_DATE(' 2014-04-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140417 values less than (TO_DATE(' 2014-04-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140418 values less than (TO_DATE(' 2014-04-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140419 values less than (TO_DATE(' 2014-04-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140420 values less than (TO_DATE(' 2014-04-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140421 values less than (TO_DATE(' 2014-04-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140422 values less than (TO_DATE(' 2014-04-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140423 values less than (TO_DATE(' 2014-04-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140424 values less than (TO_DATE(' 2014-04-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140425 values less than (TO_DATE(' 2014-04-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140426 values less than (TO_DATE(' 2014-04-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140427 values less than (TO_DATE(' 2014-04-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140428 values less than (TO_DATE(' 2014-04-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140429 values less than (TO_DATE(' 2014-04-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140430 values less than (TO_DATE(' 2014-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140501 values less than (TO_DATE(' 2014-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140502 values less than (TO_DATE(' 2014-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140503 values less than (TO_DATE(' 2014-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140504 values less than (TO_DATE(' 2014-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140505 values less than (TO_DATE(' 2014-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140506 values less than (TO_DATE(' 2014-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140507 values less than (TO_DATE(' 2014-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140508 values less than (TO_DATE(' 2014-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140509 values less than (TO_DATE(' 2014-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140510 values less than (TO_DATE(' 2014-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140511 values less than (TO_DATE(' 2014-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140512 values less than (TO_DATE(' 2014-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140513 values less than (TO_DATE(' 2014-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140514 values less than (TO_DATE(' 2014-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140515 values less than (TO_DATE(' 2014-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140516 values less than (TO_DATE(' 2014-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140517 values less than (TO_DATE(' 2014-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140518 values less than (TO_DATE(' 2014-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140519 values less than (TO_DATE(' 2014-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140520 values less than (TO_DATE(' 2014-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140521 values less than (TO_DATE(' 2014-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140522 values less than (TO_DATE(' 2014-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140523 values less than (TO_DATE(' 2014-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140524 values less than (TO_DATE(' 2014-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140525 values less than (TO_DATE(' 2014-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140526 values less than (TO_DATE(' 2014-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140527 values less than (TO_DATE(' 2014-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140528 values less than (TO_DATE(' 2014-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140529 values less than (TO_DATE(' 2014-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140530 values less than (TO_DATE(' 2014-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140531 values less than (TO_DATE(' 2014-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140601 values less than (TO_DATE(' 2014-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140602 values less than (TO_DATE(' 2014-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140603 values less than (TO_DATE(' 2014-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140604 values less than (TO_DATE(' 2014-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140605 values less than (TO_DATE(' 2014-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140606 values less than (TO_DATE(' 2014-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140607 values less than (TO_DATE(' 2014-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140608 values less than (TO_DATE(' 2014-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140609 values less than (TO_DATE(' 2014-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140610 values less than (TO_DATE(' 2014-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140611 values less than (TO_DATE(' 2014-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140612 values less than (TO_DATE(' 2014-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140613 values less than (TO_DATE(' 2014-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140614 values less than (TO_DATE(' 2014-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140615 values less than (TO_DATE(' 2014-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140616 values less than (TO_DATE(' 2014-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140617 values less than (TO_DATE(' 2014-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140618 values less than (TO_DATE(' 2014-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140619 values less than (TO_DATE(' 2014-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140620 values less than (TO_DATE(' 2014-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140621 values less than (TO_DATE(' 2014-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140622 values less than (TO_DATE(' 2014-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140623 values less than (TO_DATE(' 2014-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140624 values less than (TO_DATE(' 2014-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140625 values less than (TO_DATE(' 2014-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140626 values less than (TO_DATE(' 2014-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140627 values less than (TO_DATE(' 2014-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140628 values less than (TO_DATE(' 2014-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140629 values less than (TO_DATE(' 2014-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140701 values less than (TO_DATE(' 2014-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140702 values less than (TO_DATE(' 2014-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140703 values less than (TO_DATE(' 2014-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140704 values less than (TO_DATE(' 2014-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140705 values less than (TO_DATE(' 2014-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140706 values less than (TO_DATE(' 2014-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140707 values less than (TO_DATE(' 2014-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140708 values less than (TO_DATE(' 2014-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140709 values less than (TO_DATE(' 2014-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140710 values less than (TO_DATE(' 2014-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140711 values less than (TO_DATE(' 2014-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140712 values less than (TO_DATE(' 2014-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140713 values less than (TO_DATE(' 2014-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140714 values less than (TO_DATE(' 2014-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140715 values less than (TO_DATE(' 2014-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140716 values less than (TO_DATE(' 2014-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140717 values less than (TO_DATE(' 2014-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140718 values less than (TO_DATE(' 2014-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140719 values less than (TO_DATE(' 2014-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140720 values less than (TO_DATE(' 2014-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140721 values less than (TO_DATE(' 2014-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140722 values less than (TO_DATE(' 2014-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140723 values less than (TO_DATE(' 2014-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140724 values less than (TO_DATE(' 2014-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140725 values less than (TO_DATE(' 2014-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140726 values less than (TO_DATE(' 2014-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140727 values less than (TO_DATE(' 2014-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140728 values less than (TO_DATE(' 2014-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140729 values less than (TO_DATE(' 2014-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140730 values less than (TO_DATE(' 2014-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140731 values less than (TO_DATE(' 2014-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140801 values less than (TO_DATE(' 2014-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140802 values less than (TO_DATE(' 2014-08-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140803 values less than (TO_DATE(' 2014-08-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140804 values less than (TO_DATE(' 2014-08-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140805 values less than (TO_DATE(' 2014-08-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140806 values less than (TO_DATE(' 2014-08-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140807 values less than (TO_DATE(' 2014-08-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140808 values less than (TO_DATE(' 2014-08-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140809 values less than (TO_DATE(' 2014-08-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140810 values less than (TO_DATE(' 2014-08-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140811 values less than (TO_DATE(' 2014-08-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140812 values less than (TO_DATE(' 2014-08-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140813 values less than (TO_DATE(' 2014-08-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140814 values less than (TO_DATE(' 2014-08-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140815 values less than (TO_DATE(' 2014-08-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140816 values less than (TO_DATE(' 2014-08-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140817 values less than (TO_DATE(' 2014-08-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140818 values less than (TO_DATE(' 2014-08-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140819 values less than (TO_DATE(' 2014-08-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140820 values less than (TO_DATE(' 2014-08-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140821 values less than (TO_DATE(' 2014-08-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140822 values less than (TO_DATE(' 2014-08-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140823 values less than (TO_DATE(' 2014-08-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140824 values less than (TO_DATE(' 2014-08-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140825 values less than (TO_DATE(' 2014-08-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140826 values less than (TO_DATE(' 2014-08-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140827 values less than (TO_DATE(' 2014-08-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140828 values less than (TO_DATE(' 2014-08-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140829 values less than (TO_DATE(' 2014-08-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140830 values less than (TO_DATE(' 2014-08-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140831 values less than (TO_DATE(' 2014-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140901 values less than (TO_DATE(' 2014-09-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140902 values less than (TO_DATE(' 2014-09-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140903 values less than (TO_DATE(' 2014-09-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140904 values less than (TO_DATE(' 2014-09-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140905 values less than (TO_DATE(' 2014-09-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140906 values less than (TO_DATE(' 2014-09-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140907 values less than (TO_DATE(' 2014-09-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140908 values less than (TO_DATE(' 2014-09-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140909 values less than (TO_DATE(' 2014-09-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140910 values less than (TO_DATE(' 2014-09-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140911 values less than (TO_DATE(' 2014-09-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140912 values less than (TO_DATE(' 2014-09-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140913 values less than (TO_DATE(' 2014-09-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140914 values less than (TO_DATE(' 2014-09-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140915 values less than (TO_DATE(' 2014-09-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140916 values less than (TO_DATE(' 2014-09-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140917 values less than (TO_DATE(' 2014-09-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140918 values less than (TO_DATE(' 2014-09-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140919 values less than (TO_DATE(' 2014-09-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140920 values less than (TO_DATE(' 2014-09-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140921 values less than (TO_DATE(' 2014-09-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140922 values less than (TO_DATE(' 2014-09-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140923 values less than (TO_DATE(' 2014-09-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140924 values less than (TO_DATE(' 2014-09-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140925 values less than (TO_DATE(' 2014-09-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140926 values less than (TO_DATE(' 2014-09-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140927 values less than (TO_DATE(' 2014-09-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140928 values less than (TO_DATE(' 2014-09-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140929 values less than (TO_DATE(' 2014-09-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140930 values less than (TO_DATE(' 2014-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141001 values less than (TO_DATE(' 2014-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141002 values less than (TO_DATE(' 2014-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141003 values less than (TO_DATE(' 2014-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141004 values less than (TO_DATE(' 2014-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141005 values less than (TO_DATE(' 2014-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141006 values less than (TO_DATE(' 2014-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141007 values less than (TO_DATE(' 2014-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141008 values less than (TO_DATE(' 2014-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141009 values less than (TO_DATE(' 2014-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141010 values less than (TO_DATE(' 2014-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141011 values less than (TO_DATE(' 2014-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141012 values less than (TO_DATE(' 2014-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141013 values less than (TO_DATE(' 2014-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141014 values less than (TO_DATE(' 2014-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141015 values less than (TO_DATE(' 2014-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141016 values less than (TO_DATE(' 2014-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141017 values less than (TO_DATE(' 2014-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141018 values less than (TO_DATE(' 2014-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141019 values less than (TO_DATE(' 2014-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141020 values less than (TO_DATE(' 2014-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141021 values less than (TO_DATE(' 2014-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141022 values less than (TO_DATE(' 2014-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141023 values less than (TO_DATE(' 2014-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141024 values less than (TO_DATE(' 2014-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141025 values less than (TO_DATE(' 2014-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141026 values less than (TO_DATE(' 2014-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141027 values less than (TO_DATE(' 2014-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141028 values less than (TO_DATE(' 2014-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141029 values less than (TO_DATE(' 2014-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141030 values less than (TO_DATE(' 2014-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141031 values less than (TO_DATE(' 2014-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141101 values less than (TO_DATE(' 2014-11-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141102 values less than (TO_DATE(' 2014-11-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141103 values less than (TO_DATE(' 2014-11-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141104 values less than (TO_DATE(' 2014-11-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141105 values less than (TO_DATE(' 2014-11-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141106 values less than (TO_DATE(' 2014-11-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141107 values less than (TO_DATE(' 2014-11-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141108 values less than (TO_DATE(' 2014-11-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141109 values less than (TO_DATE(' 2014-11-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141110 values less than (TO_DATE(' 2014-11-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141111 values less than (TO_DATE(' 2014-11-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141112 values less than (TO_DATE(' 2014-11-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141113 values less than (TO_DATE(' 2014-11-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141114 values less than (TO_DATE(' 2014-11-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141115 values less than (TO_DATE(' 2014-11-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141116 values less than (TO_DATE(' 2014-11-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141117 values less than (TO_DATE(' 2014-11-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141118 values less than (TO_DATE(' 2014-11-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141119 values less than (TO_DATE(' 2014-11-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141120 values less than (TO_DATE(' 2014-11-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141121 values less than (TO_DATE(' 2014-11-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141122 values less than (TO_DATE(' 2014-11-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141123 values less than (TO_DATE(' 2014-11-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141124 values less than (TO_DATE(' 2014-11-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141125 values less than (TO_DATE(' 2014-11-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141126 values less than (TO_DATE(' 2014-11-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141127 values less than (TO_DATE(' 2014-11-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141128 values less than (TO_DATE(' 2014-11-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141129 values less than (TO_DATE(' 2014-11-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141130 values less than (TO_DATE(' 2014-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141201 values less than (TO_DATE(' 2014-12-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141202 values less than (TO_DATE(' 2014-12-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141203 values less than (TO_DATE(' 2014-12-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141204 values less than (TO_DATE(' 2014-12-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141205 values less than (TO_DATE(' 2014-12-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141206 values less than (TO_DATE(' 2014-12-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141207 values less than (TO_DATE(' 2014-12-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141208 values less than (TO_DATE(' 2014-12-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141209 values less than (TO_DATE(' 2014-12-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141210 values less than (TO_DATE(' 2014-12-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141211 values less than (TO_DATE(' 2014-12-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141212 values less than (TO_DATE(' 2014-12-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141213 values less than (TO_DATE(' 2014-12-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141214 values less than (TO_DATE(' 2014-12-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141215 values less than (TO_DATE(' 2014-12-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141216 values less than (TO_DATE(' 2014-12-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141217 values less than (TO_DATE(' 2014-12-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141218 values less than (TO_DATE(' 2014-12-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141219 values less than (TO_DATE(' 2014-12-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141220 values less than (TO_DATE(' 2014-12-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141221 values less than (TO_DATE(' 2014-12-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141222 values less than (TO_DATE(' 2014-12-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141223 values less than (TO_DATE(' 2014-12-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141224 values less than (TO_DATE(' 2014-12-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141225 values less than (TO_DATE(' 2014-12-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141226 values less than (TO_DATE(' 2014-12-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141227 values less than (TO_DATE(' 2014-12-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141228 values less than (TO_DATE(' 2014-12-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141229 values less than (TO_DATE(' 2014-12-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141230 values less than (TO_DATE(' 2014-12-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141231 values less than (TO_DATE(' 2015-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150101 values less than (TO_DATE(' 2015-01-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150102 values less than (TO_DATE(' 2015-01-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150103 values less than (TO_DATE(' 2015-01-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150104 values less than (TO_DATE(' 2015-01-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150105 values less than (TO_DATE(' 2015-01-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150106 values less than (TO_DATE(' 2015-01-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150107 values less than (TO_DATE(' 2015-01-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150108 values less than (TO_DATE(' 2015-01-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150109 values less than (TO_DATE(' 2015-01-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150110 values less than (TO_DATE(' 2015-01-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150111 values less than (TO_DATE(' 2015-01-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150112 values less than (TO_DATE(' 2015-01-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150113 values less than (TO_DATE(' 2015-01-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150114 values less than (TO_DATE(' 2015-01-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150115 values less than (TO_DATE(' 2015-01-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150116 values less than (TO_DATE(' 2015-01-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150117 values less than (TO_DATE(' 2015-01-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150118 values less than (TO_DATE(' 2015-01-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150119 values less than (TO_DATE(' 2015-01-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150120 values less than (TO_DATE(' 2015-01-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150121 values less than (TO_DATE(' 2015-01-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150122 values less than (TO_DATE(' 2015-01-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150123 values less than (TO_DATE(' 2015-01-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150124 values less than (TO_DATE(' 2015-01-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150125 values less than (TO_DATE(' 2015-01-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150126 values less than (TO_DATE(' 2015-01-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150127 values less than (TO_DATE(' 2015-01-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150128 values less than (TO_DATE(' 2015-01-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150129 values less than (TO_DATE(' 2015-01-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150130 values less than (TO_DATE(' 2015-01-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150131 values less than (TO_DATE(' 2015-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150201 values less than (TO_DATE(' 2015-02-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150202 values less than (TO_DATE(' 2015-02-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150203 values less than (TO_DATE(' 2015-02-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150204 values less than (TO_DATE(' 2015-02-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150205 values less than (TO_DATE(' 2015-02-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150206 values less than (TO_DATE(' 2015-02-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150207 values less than (TO_DATE(' 2015-02-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150208 values less than (TO_DATE(' 2015-02-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150209 values less than (TO_DATE(' 2015-02-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150210 values less than (TO_DATE(' 2015-02-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150211 values less than (TO_DATE(' 2015-02-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150212 values less than (TO_DATE(' 2015-02-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150213 values less than (TO_DATE(' 2015-02-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150214 values less than (TO_DATE(' 2015-02-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150215 values less than (TO_DATE(' 2015-02-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150216 values less than (TO_DATE(' 2015-02-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150217 values less than (TO_DATE(' 2015-02-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150218 values less than (TO_DATE(' 2015-02-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150219 values less than (TO_DATE(' 2015-02-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150220 values less than (TO_DATE(' 2015-02-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150221 values less than (TO_DATE(' 2015-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150222 values less than (TO_DATE(' 2015-02-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150223 values less than (TO_DATE(' 2015-02-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150224 values less than (TO_DATE(' 2015-02-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150225 values less than (TO_DATE(' 2015-02-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150226 values less than (TO_DATE(' 2015-02-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150227 values less than (TO_DATE(' 2015-02-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150228 values less than (TO_DATE(' 2015-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150301 values less than (TO_DATE(' 2015-03-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150302 values less than (TO_DATE(' 2015-03-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150303 values less than (TO_DATE(' 2015-03-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150304 values less than (TO_DATE(' 2015-03-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150305 values less than (TO_DATE(' 2015-03-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150306 values less than (TO_DATE(' 2015-03-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150307 values less than (TO_DATE(' 2015-03-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150308 values less than (TO_DATE(' 2015-03-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150309 values less than (TO_DATE(' 2015-03-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150310 values less than (TO_DATE(' 2015-03-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150311 values less than (TO_DATE(' 2015-03-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150312 values less than (TO_DATE(' 2015-03-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150313 values less than (TO_DATE(' 2015-03-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150314 values less than (TO_DATE(' 2015-03-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150315 values less than (TO_DATE(' 2015-03-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150316 values less than (TO_DATE(' 2015-03-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150317 values less than (TO_DATE(' 2015-03-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150318 values less than (TO_DATE(' 2015-03-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150319 values less than (TO_DATE(' 2015-03-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150320 values less than (TO_DATE(' 2015-03-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150321 values less than (TO_DATE(' 2015-03-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150322 values less than (TO_DATE(' 2015-03-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150323 values less than (TO_DATE(' 2015-03-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150324 values less than (TO_DATE(' 2015-03-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150325 values less than (TO_DATE(' 2015-03-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150326 values less than (TO_DATE(' 2015-03-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150327 values less than (TO_DATE(' 2015-03-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150328 values less than (TO_DATE(' 2015-03-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150329 values less than (TO_DATE(' 2015-03-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150330 values less than (TO_DATE(' 2015-03-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150331 values less than (TO_DATE(' 2015-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150401 values less than (TO_DATE(' 2015-04-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150402 values less than (TO_DATE(' 2015-04-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150403 values less than (TO_DATE(' 2015-04-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150404 values less than (TO_DATE(' 2015-04-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150405 values less than (TO_DATE(' 2015-04-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150406 values less than (TO_DATE(' 2015-04-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150407 values less than (TO_DATE(' 2015-04-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150408 values less than (TO_DATE(' 2015-04-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150409 values less than (TO_DATE(' 2015-04-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150410 values less than (TO_DATE(' 2015-04-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150411 values less than (TO_DATE(' 2015-04-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150412 values less than (TO_DATE(' 2015-04-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150413 values less than (TO_DATE(' 2015-04-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150414 values less than (TO_DATE(' 2015-04-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150415 values less than (TO_DATE(' 2015-04-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150416 values less than (TO_DATE(' 2015-04-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150417 values less than (TO_DATE(' 2015-04-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150418 values less than (TO_DATE(' 2015-04-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150419 values less than (TO_DATE(' 2015-04-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150420 values less than (TO_DATE(' 2015-04-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150421 values less than (TO_DATE(' 2015-04-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150422 values less than (TO_DATE(' 2015-04-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150423 values less than (TO_DATE(' 2015-04-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150424 values less than (TO_DATE(' 2015-04-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150425 values less than (TO_DATE(' 2015-04-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150426 values less than (TO_DATE(' 2015-04-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150427 values less than (TO_DATE(' 2015-04-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150428 values less than (TO_DATE(' 2015-04-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150429 values less than (TO_DATE(' 2015-04-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150430 values less than (TO_DATE(' 2015-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150501 values less than (TO_DATE(' 2015-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150502 values less than (TO_DATE(' 2015-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150503 values less than (TO_DATE(' 2015-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150504 values less than (TO_DATE(' 2015-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150505 values less than (TO_DATE(' 2015-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150506 values less than (TO_DATE(' 2015-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150507 values less than (TO_DATE(' 2015-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150508 values less than (TO_DATE(' 2015-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150509 values less than (TO_DATE(' 2015-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150510 values less than (TO_DATE(' 2015-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150511 values less than (TO_DATE(' 2015-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150512 values less than (TO_DATE(' 2015-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150513 values less than (TO_DATE(' 2015-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150514 values less than (TO_DATE(' 2015-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150515 values less than (TO_DATE(' 2015-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150516 values less than (TO_DATE(' 2015-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150517 values less than (TO_DATE(' 2015-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150518 values less than (TO_DATE(' 2015-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150519 values less than (TO_DATE(' 2015-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150520 values less than (TO_DATE(' 2015-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150521 values less than (TO_DATE(' 2015-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150522 values less than (TO_DATE(' 2015-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150523 values less than (TO_DATE(' 2015-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150524 values less than (TO_DATE(' 2015-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150525 values less than (TO_DATE(' 2015-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150526 values less than (TO_DATE(' 2015-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150527 values less than (TO_DATE(' 2015-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150528 values less than (TO_DATE(' 2015-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150529 values less than (TO_DATE(' 2015-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150530 values less than (TO_DATE(' 2015-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150531 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150601 values less than (TO_DATE(' 2015-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150602 values less than (TO_DATE(' 2015-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150603 values less than (TO_DATE(' 2015-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150604 values less than (TO_DATE(' 2015-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150605 values less than (TO_DATE(' 2015-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150606 values less than (TO_DATE(' 2015-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150607 values less than (TO_DATE(' 2015-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150608 values less than (TO_DATE(' 2015-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150609 values less than (TO_DATE(' 2015-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150610 values less than (TO_DATE(' 2015-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150611 values less than (TO_DATE(' 2015-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150612 values less than (TO_DATE(' 2015-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150613 values less than (TO_DATE(' 2015-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150614 values less than (TO_DATE(' 2015-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150615 values less than (TO_DATE(' 2015-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150616 values less than (TO_DATE(' 2015-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150617 values less than (TO_DATE(' 2015-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150618 values less than (TO_DATE(' 2015-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150619 values less than (TO_DATE(' 2015-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150620 values less than (TO_DATE(' 2015-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150621 values less than (TO_DATE(' 2015-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150622 values less than (TO_DATE(' 2015-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150623 values less than (TO_DATE(' 2015-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150624 values less than (TO_DATE(' 2015-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150625 values less than (TO_DATE(' 2015-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150626 values less than (TO_DATE(' 2015-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150627 values less than (TO_DATE(' 2015-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150628 values less than (TO_DATE(' 2015-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150629 values less than (TO_DATE(' 2015-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150630 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150701 values less than (TO_DATE(' 2015-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150702 values less than (TO_DATE(' 2015-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150703 values less than (TO_DATE(' 2015-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150704 values less than (TO_DATE(' 2015-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150705 values less than (TO_DATE(' 2015-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150706 values less than (TO_DATE(' 2015-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150707 values less than (TO_DATE(' 2015-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150708 values less than (TO_DATE(' 2015-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150709 values less than (TO_DATE(' 2015-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150710 values less than (TO_DATE(' 2015-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150711 values less than (TO_DATE(' 2015-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150712 values less than (TO_DATE(' 2015-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150713 values less than (TO_DATE(' 2015-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150714 values less than (TO_DATE(' 2015-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150715 values less than (TO_DATE(' 2015-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150716 values less than (TO_DATE(' 2015-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150717 values less than (TO_DATE(' 2015-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150718 values less than (TO_DATE(' 2015-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150719 values less than (TO_DATE(' 2015-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150720 values less than (TO_DATE(' 2015-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150721 values less than (TO_DATE(' 2015-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150722 values less than (TO_DATE(' 2015-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150723 values less than (TO_DATE(' 2015-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150724 values less than (TO_DATE(' 2015-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150725 values less than (TO_DATE(' 2015-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150726 values less than (TO_DATE(' 2015-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150727 values less than (TO_DATE(' 2015-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150728 values less than (TO_DATE(' 2015-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150729 values less than (TO_DATE(' 2015-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150730 values less than (TO_DATE(' 2015-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150731 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150801 values less than (TO_DATE(' 2015-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150802 values less than (TO_DATE(' 2015-08-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150803 values less than (TO_DATE(' 2015-08-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150804 values less than (TO_DATE(' 2015-08-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150805 values less than (TO_DATE(' 2015-08-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150806 values less than (TO_DATE(' 2015-08-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150807 values less than (TO_DATE(' 2015-08-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150808 values less than (TO_DATE(' 2015-08-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150809 values less than (TO_DATE(' 2015-08-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150810 values less than (TO_DATE(' 2015-08-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150811 values less than (TO_DATE(' 2015-08-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150812 values less than (TO_DATE(' 2015-08-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150813 values less than (TO_DATE(' 2015-08-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150814 values less than (TO_DATE(' 2015-08-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150815 values less than (TO_DATE(' 2015-08-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150816 values less than (TO_DATE(' 2015-08-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150817 values less than (TO_DATE(' 2015-08-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150818 values less than (TO_DATE(' 2015-08-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150819 values less than (TO_DATE(' 2015-08-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150820 values less than (TO_DATE(' 2015-08-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150821 values less than (TO_DATE(' 2015-08-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150822 values less than (TO_DATE(' 2015-08-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150823 values less than (TO_DATE(' 2015-08-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150824 values less than (TO_DATE(' 2015-08-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150825 values less than (TO_DATE(' 2015-08-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150826 values less than (TO_DATE(' 2015-08-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150827 values less than (TO_DATE(' 2015-08-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150828 values less than (TO_DATE(' 2015-08-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150829 values less than (TO_DATE(' 2015-08-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150830 values less than (TO_DATE(' 2015-08-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150831 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150901 values less than (TO_DATE(' 2015-09-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150902 values less than (TO_DATE(' 2015-09-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150903 values less than (TO_DATE(' 2015-09-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150904 values less than (TO_DATE(' 2015-09-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150905 values less than (TO_DATE(' 2015-09-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150906 values less than (TO_DATE(' 2015-09-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150907 values less than (TO_DATE(' 2015-09-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150908 values less than (TO_DATE(' 2015-09-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150909 values less than (TO_DATE(' 2015-09-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150910 values less than (TO_DATE(' 2015-09-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150911 values less than (TO_DATE(' 2015-09-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150912 values less than (TO_DATE(' 2015-09-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150913 values less than (TO_DATE(' 2015-09-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150914 values less than (TO_DATE(' 2015-09-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150915 values less than (TO_DATE(' 2015-09-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150916 values less than (TO_DATE(' 2015-09-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150917 values less than (TO_DATE(' 2015-09-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150918 values less than (TO_DATE(' 2015-09-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150919 values less than (TO_DATE(' 2015-09-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150920 values less than (TO_DATE(' 2015-09-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150921 values less than (TO_DATE(' 2015-09-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150922 values less than (TO_DATE(' 2015-09-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150923 values less than (TO_DATE(' 2015-09-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150924 values less than (TO_DATE(' 2015-09-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150925 values less than (TO_DATE(' 2015-09-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150926 values less than (TO_DATE(' 2015-09-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150927 values less than (TO_DATE(' 2015-09-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150928 values less than (TO_DATE(' 2015-09-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150929 values less than (TO_DATE(' 2015-09-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150930 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151001 values less than (TO_DATE(' 2015-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151002 values less than (TO_DATE(' 2015-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151003 values less than (TO_DATE(' 2015-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151004 values less than (TO_DATE(' 2015-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151005 values less than (TO_DATE(' 2015-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151006 values less than (TO_DATE(' 2015-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151007 values less than (TO_DATE(' 2015-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151008 values less than (TO_DATE(' 2015-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151009 values less than (TO_DATE(' 2015-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151010 values less than (TO_DATE(' 2015-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151011 values less than (TO_DATE(' 2015-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151012 values less than (TO_DATE(' 2015-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151013 values less than (TO_DATE(' 2015-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151014 values less than (TO_DATE(' 2015-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151015 values less than (TO_DATE(' 2015-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151016 values less than (TO_DATE(' 2015-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151017 values less than (TO_DATE(' 2015-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151018 values less than (TO_DATE(' 2015-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151019 values less than (TO_DATE(' 2015-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151020 values less than (TO_DATE(' 2015-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151021 values less than (TO_DATE(' 2015-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151022 values less than (TO_DATE(' 2015-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151023 values less than (TO_DATE(' 2015-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151024 values less than (TO_DATE(' 2015-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151025 values less than (TO_DATE(' 2015-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151026 values less than (TO_DATE(' 2015-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151027 values less than (TO_DATE(' 2015-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151028 values less than (TO_DATE(' 2015-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151029 values less than (TO_DATE(' 2015-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151030 values less than (TO_DATE(' 2015-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151031 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151101 values less than (TO_DATE(' 2015-11-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151102 values less than (TO_DATE(' 2015-11-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151103 values less than (TO_DATE(' 2015-11-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151104 values less than (TO_DATE(' 2015-11-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151105 values less than (TO_DATE(' 2015-11-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151106 values less than (TO_DATE(' 2015-11-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151107 values less than (TO_DATE(' 2015-11-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151108 values less than (TO_DATE(' 2015-11-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151109 values less than (TO_DATE(' 2015-11-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151110 values less than (TO_DATE(' 2015-11-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151111 values less than (TO_DATE(' 2015-11-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151112 values less than (TO_DATE(' 2015-11-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151113 values less than (TO_DATE(' 2015-11-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151114 values less than (TO_DATE(' 2015-11-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151115 values less than (TO_DATE(' 2015-11-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151116 values less than (TO_DATE(' 2015-11-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151117 values less than (TO_DATE(' 2015-11-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151118 values less than (TO_DATE(' 2015-11-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151119 values less than (TO_DATE(' 2015-11-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151120 values less than (TO_DATE(' 2015-11-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151121 values less than (TO_DATE(' 2015-11-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151122 values less than (TO_DATE(' 2015-11-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151123 values less than (TO_DATE(' 2015-11-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151124 values less than (TO_DATE(' 2015-11-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151125 values less than (TO_DATE(' 2015-11-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151126 values less than (TO_DATE(' 2015-11-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151127 values less than (TO_DATE(' 2015-11-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151128 values less than (TO_DATE(' 2015-11-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151129 values less than (TO_DATE(' 2015-11-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151130 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151201 values less than (TO_DATE(' 2015-12-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151202 values less than (TO_DATE(' 2015-12-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151203 values less than (TO_DATE(' 2015-12-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151204 values less than (TO_DATE(' 2015-12-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151205 values less than (TO_DATE(' 2015-12-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151206 values less than (TO_DATE(' 2015-12-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151207 values less than (TO_DATE(' 2015-12-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151208 values less than (TO_DATE(' 2015-12-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151209 values less than (TO_DATE(' 2015-12-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151210 values less than (TO_DATE(' 2015-12-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151211 values less than (TO_DATE(' 2015-12-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151212 values less than (TO_DATE(' 2015-12-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151213 values less than (TO_DATE(' 2015-12-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151214 values less than (TO_DATE(' 2015-12-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151215 values less than (TO_DATE(' 2015-12-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151216 values less than (TO_DATE(' 2015-12-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151217 values less than (TO_DATE(' 2015-12-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151218 values less than (TO_DATE(' 2015-12-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151219 values less than (TO_DATE(' 2015-12-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151220 values less than (TO_DATE(' 2015-12-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151221 values less than (TO_DATE(' 2015-12-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151222 values less than (TO_DATE(' 2015-12-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151223 values less than (TO_DATE(' 2015-12-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151224 values less than (TO_DATE(' 2015-12-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151225 values less than (TO_DATE(' 2015-12-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151226 values less than (TO_DATE(' 2015-12-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151227 values less than (TO_DATE(' 2015-12-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151228 values less than (TO_DATE(' 2015-12-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151229 values less than (TO_DATE(' 2015-12-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151230 values less than (TO_DATE(' 2015-12-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151231 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160101 values less than (TO_DATE(' 2016-01-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160102 values less than (TO_DATE(' 2016-01-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160103 values less than (TO_DATE(' 2016-01-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160104 values less than (TO_DATE(' 2016-01-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160105 values less than (TO_DATE(' 2016-01-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160106 values less than (TO_DATE(' 2016-01-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160107 values less than (TO_DATE(' 2016-01-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160108 values less than (TO_DATE(' 2016-01-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160109 values less than (TO_DATE(' 2016-01-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160110 values less than (TO_DATE(' 2016-01-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160111 values less than (TO_DATE(' 2016-01-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160112 values less than (TO_DATE(' 2016-01-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160113 values less than (TO_DATE(' 2016-01-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160114 values less than (TO_DATE(' 2016-01-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160115 values less than (TO_DATE(' 2016-01-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160116 values less than (TO_DATE(' 2016-01-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160117 values less than (TO_DATE(' 2016-01-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160118 values less than (TO_DATE(' 2016-01-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160119 values less than (TO_DATE(' 2016-01-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160120 values less than (TO_DATE(' 2016-01-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160121 values less than (TO_DATE(' 2016-01-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160122 values less than (TO_DATE(' 2016-01-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160123 values less than (TO_DATE(' 2016-01-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160124 values less than (TO_DATE(' 2016-01-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160125 values less than (TO_DATE(' 2016-01-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160126 values less than (TO_DATE(' 2016-01-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160127 values less than (TO_DATE(' 2016-01-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160128 values less than (TO_DATE(' 2016-01-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160129 values less than (TO_DATE(' 2016-01-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160130 values less than (TO_DATE(' 2016-01-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160131 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160201 values less than (TO_DATE(' 2016-02-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160202 values less than (TO_DATE(' 2016-02-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160203 values less than (TO_DATE(' 2016-02-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160204 values less than (TO_DATE(' 2016-02-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160205 values less than (TO_DATE(' 2016-02-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160206 values less than (TO_DATE(' 2016-02-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160207 values less than (TO_DATE(' 2016-02-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160208 values less than (TO_DATE(' 2016-02-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160209 values less than (TO_DATE(' 2016-02-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160210 values less than (TO_DATE(' 2016-02-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160211 values less than (TO_DATE(' 2016-02-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160212 values less than (TO_DATE(' 2016-02-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160213 values less than (TO_DATE(' 2016-02-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160214 values less than (TO_DATE(' 2016-02-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160215 values less than (TO_DATE(' 2016-02-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160216 values less than (TO_DATE(' 2016-02-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160217 values less than (TO_DATE(' 2016-02-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160218 values less than (TO_DATE(' 2016-02-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160219 values less than (TO_DATE(' 2016-02-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160220 values less than (TO_DATE(' 2016-02-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160221 values less than (TO_DATE(' 2016-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160222 values less than (TO_DATE(' 2016-02-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160223 values less than (TO_DATE(' 2016-02-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160224 values less than (TO_DATE(' 2016-02-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160225 values less than (TO_DATE(' 2016-02-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160226 values less than (TO_DATE(' 2016-02-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160227 values less than (TO_DATE(' 2016-02-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160228 values less than (TO_DATE(' 2016-02-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160229 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160301 values less than (TO_DATE(' 2016-03-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160302 values less than (TO_DATE(' 2016-03-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160303 values less than (TO_DATE(' 2016-03-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160304 values less than (TO_DATE(' 2016-03-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160305 values less than (TO_DATE(' 2016-03-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160306 values less than (TO_DATE(' 2016-03-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160307 values less than (TO_DATE(' 2016-03-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160308 values less than (TO_DATE(' 2016-03-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160309 values less than (TO_DATE(' 2016-03-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160310 values less than (TO_DATE(' 2016-03-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160311 values less than (TO_DATE(' 2016-03-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160312 values less than (TO_DATE(' 2016-03-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160313 values less than (TO_DATE(' 2016-03-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160314 values less than (TO_DATE(' 2016-03-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160315 values less than (TO_DATE(' 2016-03-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160316 values less than (TO_DATE(' 2016-03-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160317 values less than (TO_DATE(' 2016-03-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160318 values less than (TO_DATE(' 2016-03-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160319 values less than (TO_DATE(' 2016-03-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160320 values less than (TO_DATE(' 2016-03-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160321 values less than (TO_DATE(' 2016-03-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160322 values less than (TO_DATE(' 2016-03-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160323 values less than (TO_DATE(' 2016-03-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160324 values less than (TO_DATE(' 2016-03-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160325 values less than (TO_DATE(' 2016-03-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160326 values less than (TO_DATE(' 2016-03-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160327 values less than (TO_DATE(' 2016-03-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160328 values less than (TO_DATE(' 2016-03-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160329 values less than (TO_DATE(' 2016-03-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160330 values less than (TO_DATE(' 2016-03-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160331 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160401 values less than (TO_DATE(' 2016-04-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160402 values less than (TO_DATE(' 2016-04-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160403 values less than (TO_DATE(' 2016-04-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160404 values less than (TO_DATE(' 2016-04-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160405 values less than (TO_DATE(' 2016-04-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160406 values less than (TO_DATE(' 2016-04-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160407 values less than (TO_DATE(' 2016-04-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160408 values less than (TO_DATE(' 2016-04-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160409 values less than (TO_DATE(' 2016-04-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160410 values less than (TO_DATE(' 2016-04-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160411 values less than (TO_DATE(' 2016-04-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160412 values less than (TO_DATE(' 2016-04-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160413 values less than (TO_DATE(' 2016-04-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160414 values less than (TO_DATE(' 2016-04-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160415 values less than (TO_DATE(' 2016-04-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160416 values less than (TO_DATE(' 2016-04-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160417 values less than (TO_DATE(' 2016-04-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160418 values less than (TO_DATE(' 2016-04-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160419 values less than (TO_DATE(' 2016-04-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160420 values less than (TO_DATE(' 2016-04-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160421 values less than (TO_DATE(' 2016-04-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160422 values less than (TO_DATE(' 2016-04-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160423 values less than (TO_DATE(' 2016-04-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160424 values less than (TO_DATE(' 2016-04-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160425 values less than (TO_DATE(' 2016-04-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160426 values less than (TO_DATE(' 2016-04-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160427 values less than (TO_DATE(' 2016-04-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160428 values less than (TO_DATE(' 2016-04-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160429 values less than (TO_DATE(' 2016-04-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160430 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160501 values less than (TO_DATE(' 2016-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160502 values less than (TO_DATE(' 2016-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160503 values less than (TO_DATE(' 2016-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160504 values less than (TO_DATE(' 2016-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160505 values less than (TO_DATE(' 2016-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160506 values less than (TO_DATE(' 2016-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160507 values less than (TO_DATE(' 2016-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160508 values less than (TO_DATE(' 2016-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160509 values less than (TO_DATE(' 2016-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160510 values less than (TO_DATE(' 2016-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160511 values less than (TO_DATE(' 2016-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160512 values less than (TO_DATE(' 2016-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160513 values less than (TO_DATE(' 2016-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160514 values less than (TO_DATE(' 2016-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160515 values less than (TO_DATE(' 2016-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160516 values less than (TO_DATE(' 2016-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160517 values less than (TO_DATE(' 2016-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160518 values less than (TO_DATE(' 2016-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160519 values less than (TO_DATE(' 2016-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160520 values less than (TO_DATE(' 2016-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160521 values less than (TO_DATE(' 2016-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160522 values less than (TO_DATE(' 2016-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160523 values less than (TO_DATE(' 2016-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160524 values less than (TO_DATE(' 2016-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160525 values less than (TO_DATE(' 2016-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160526 values less than (TO_DATE(' 2016-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160527 values less than (TO_DATE(' 2016-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160528 values less than (TO_DATE(' 2016-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160529 values less than (TO_DATE(' 2016-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160530 values less than (TO_DATE(' 2016-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160531 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160601 values less than (TO_DATE(' 2016-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160602 values less than (TO_DATE(' 2016-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160603 values less than (TO_DATE(' 2016-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160604 values less than (TO_DATE(' 2016-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160605 values less than (TO_DATE(' 2016-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160606 values less than (TO_DATE(' 2016-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160607 values less than (TO_DATE(' 2016-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160608 values less than (TO_DATE(' 2016-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160609 values less than (TO_DATE(' 2016-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160610 values less than (TO_DATE(' 2016-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160611 values less than (TO_DATE(' 2016-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160612 values less than (TO_DATE(' 2016-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160613 values less than (TO_DATE(' 2016-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160614 values less than (TO_DATE(' 2016-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160615 values less than (TO_DATE(' 2016-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160616 values less than (TO_DATE(' 2016-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160617 values less than (TO_DATE(' 2016-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160618 values less than (TO_DATE(' 2016-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160619 values less than (TO_DATE(' 2016-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160620 values less than (TO_DATE(' 2016-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160621 values less than (TO_DATE(' 2016-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160622 values less than (TO_DATE(' 2016-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160623 values less than (TO_DATE(' 2016-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160624 values less than (TO_DATE(' 2016-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160625 values less than (TO_DATE(' 2016-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160626 values less than (TO_DATE(' 2016-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160627 values less than (TO_DATE(' 2016-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160628 values less than (TO_DATE(' 2016-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160629 values less than (TO_DATE(' 2016-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160630 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160701 values less than (TO_DATE(' 2016-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160702 values less than (TO_DATE(' 2016-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160703 values less than (TO_DATE(' 2016-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160704 values less than (TO_DATE(' 2016-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160705 values less than (TO_DATE(' 2016-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160706 values less than (TO_DATE(' 2016-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160707 values less than (TO_DATE(' 2016-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160708 values less than (TO_DATE(' 2016-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160709 values less than (TO_DATE(' 2016-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160710 values less than (TO_DATE(' 2016-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160711 values less than (TO_DATE(' 2016-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160712 values less than (TO_DATE(' 2016-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160713 values less than (TO_DATE(' 2016-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160714 values less than (TO_DATE(' 2016-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160715 values less than (TO_DATE(' 2016-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160716 values less than (TO_DATE(' 2016-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160717 values less than (TO_DATE(' 2016-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160718 values less than (TO_DATE(' 2016-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160719 values less than (TO_DATE(' 2016-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160720 values less than (TO_DATE(' 2016-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160721 values less than (TO_DATE(' 2016-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160722 values less than (TO_DATE(' 2016-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160723 values less than (TO_DATE(' 2016-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160724 values less than (TO_DATE(' 2016-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160725 values less than (TO_DATE(' 2016-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160726 values less than (TO_DATE(' 2016-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160727 values less than (TO_DATE(' 2016-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160728 values less than (TO_DATE(' 2016-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160729 values less than (TO_DATE(' 2016-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160730 values less than (TO_DATE(' 2016-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160731 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161001 values less than (TO_DATE(' 2016-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161002 values less than (TO_DATE(' 2016-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161003 values less than (TO_DATE(' 2016-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161004 values less than (TO_DATE(' 2016-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161005 values less than (TO_DATE(' 2016-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161006 values less than (TO_DATE(' 2016-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161007 values less than (TO_DATE(' 2016-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161008 values less than (TO_DATE(' 2016-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161009 values less than (TO_DATE(' 2016-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161010 values less than (TO_DATE(' 2016-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161011 values less than (TO_DATE(' 2016-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161012 values less than (TO_DATE(' 2016-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161013 values less than (TO_DATE(' 2016-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161014 values less than (TO_DATE(' 2016-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161015 values less than (TO_DATE(' 2016-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161016 values less than (TO_DATE(' 2016-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161017 values less than (TO_DATE(' 2016-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161018 values less than (TO_DATE(' 2016-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161019 values less than (TO_DATE(' 2016-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161020 values less than (TO_DATE(' 2016-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161021 values less than (TO_DATE(' 2016-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161022 values less than (TO_DATE(' 2016-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161023 values less than (TO_DATE(' 2016-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161024 values less than (TO_DATE(' 2016-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161025 values less than (TO_DATE(' 2016-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161026 values less than (TO_DATE(' 2016-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161027 values less than (TO_DATE(' 2016-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161028 values less than (TO_DATE(' 2016-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161029 values less than (TO_DATE(' 2016-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161030 values less than (TO_DATE(' 2016-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161031 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_HOURDATASTORAGE
  is '时段刷卡信息结存表';
comment on column OSECD.JZ_HOURDATASTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_HOURDATASTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_HOURDATASTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_HOURDATASTORAGE.busid
  is '车辆编号';
comment on column OSECD.JZ_HOURDATASTORAGE.buscardno
  is '车牌号';
comment on column OSECD.JZ_HOURDATASTORAGE.stationid
  is '站点编号';
comment on column OSECD.JZ_HOURDATASTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_HOURDATASTORAGE.starttime
  is '时段开始时间(相对于零点的分钟数)';
comment on column OSECD.JZ_HOURDATASTORAGE.endtime
  is '时段结束时间';
comment on column OSECD.JZ_HOURDATASTORAGE.iccount
  is '刷卡数量';
comment on column OSECD.JZ_HOURDATASTORAGE.totalincome
  is '总收入';
comment on column OSECD.JZ_HOURDATASTORAGE.passengerflow
  is '客流量';
comment on column OSECD.JZ_HOURDATASTORAGE.favorable_income
  is '优惠金额';
comment on column OSECD.JZ_HOURDATASTORAGE.favorable_flow
  is '优惠人次';
comment on column OSECD.JZ_HOURDATASTORAGE.loadconfig
  is '运力配置';
comment on column OSECD.JZ_HOURDATASTORAGE.buscount
  is '投入车辆数量';
comment on column OSECD.JZ_HOURDATASTORAGE.datasavelevel
  is '数据结存级别（1-年，2-月，3-日）';
comment on column OSECD.JZ_HOURDATASTORAGE.storageorgtype
  is '数据结存级别（1-总公司，2-分公司，3-车队，4-线路，5-车辆，6-站点，7-线路和站点）';
comment on column OSECD.JZ_HOURDATASTORAGE.recdate
  is '记录日期';
comment on column OSECD.JZ_HOURDATASTORAGE.nextstationid
  is '下站站点编号，在结存级别7时使用';
comment on column OSECD.JZ_HOURDATASTORAGE.loadcount
  is '车上载客数量';
create index OSECD.IX_HOURDATA on OSECD.JZ_HOURDATASTORAGE (JZDATE, DATASAVELEVEL, STORAGEORGTYPE)
  local;
create index OSECD.IX_HOURDATA1 on OSECD.JZ_HOURDATASTORAGE (JZDATE, ROUTEID, STATIONID)
  local;

prompt
prompt Creating table JZ_HOURSPEEDSTORAGE
prompt ==================================
prompt
create table OSECD.JZ_HOURSPEEDSTORAGE
(
  recordid      VARCHAR2(36) not null,
  routeid       VARCHAR2(36),
  starttime     NUMBER,
  endtime       NUMBER,
  bussid        VARCHAR2(2),
  gpsrunmile    NUMBER,
  runtime       NUMBER,
  stoptime      NUMBER,
  datasavelevel VARCHAR2(2),
  datasavetype  VARCHAR2(2),
  jzdate        DATE,
  recdate       DATE default sysdate,
  gpssendmile   NUMBER,
  runspeed      NUMBER,
  sendspeed     NUMBER
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_HOURSPEEDSTORAGE
  is '时段速度结存表';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.starttime
  is '开始时间（相对于0点的分钟数）';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.endtime
  is '结束时间（相对于0点的分钟数）';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.bussid
  is '车次类型';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.gpsrunmile
  is 'GPS运营里程(公里)';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.runtime
  is '运营时间（包含中间站停站时间，单位分钟）';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.stoptime
  is '停站时间（分钟）';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.datasavelevel
  is '数据结存级别：1-年，2-月，3-日';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.datasavetype
  is '数据结存类型：1-线路，2-线网';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.recdate
  is '记录时间';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.gpssendmile
  is 'GPS运送里程';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.runspeed
  is '运营速度';
comment on column OSECD.JZ_HOURSPEEDSTORAGE.sendspeed
  is '运送速度';
create index OSECD.IX_HOURSPEED on OSECD.JZ_HOURSPEEDSTORAGE (ROUTEID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IX_HOURSPEED1 on OSECD.JZ_HOURSPEEDSTORAGE (STARTTIME, ENDTIME)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IX_HOURSPEED2 on OSECD.JZ_HOURSPEEDSTORAGE (JZDATE, DATASAVETYPE, DATASAVELEVEL)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_HOURSPEEDSTORAGE
  add constraint PK_HOURSPEED primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_INDICATORSTORAGE
prompt ==================================
prompt
create table OSECD.JZ_INDICATORSTORAGE
(
  recordid           VARCHAR2(36),
  indicatorid        VARCHAR2(36),
  orgid              VARCHAR2(36),
  orgname            NVARCHAR2(60),
  jzdate             DATE,
  indicatorvalue     NUMBER,
  datasavelevel      VARCHAR2(2),
  storageorgtype     VARCHAR2(2),
  recdate            DATE default sysdate,
  indicatorshowvalue VARCHAR2(36),
  indicatorscore     NUMBER(6,2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_INDICATORSTORAGE
  is '指标体系数据结存表(只结存系统级别指标)';
comment on column OSECD.JZ_INDICATORSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_INDICATORSTORAGE.indicatorid
  is '指标编号，对应指标信息表指标编号';
comment on column OSECD.JZ_INDICATORSTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_INDICATORSTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_INDICATORSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_INDICATORSTORAGE.indicatorvalue
  is '指标结存结果，百分比以四位小数表示';
comment on column OSECD.JZ_INDICATORSTORAGE.datasavelevel
  is '结存时间级别，1-年，2-月，3-日';
comment on column OSECD.JZ_INDICATORSTORAGE.storageorgtype
  is '组织结存级别，和组织级别一致，只结存到总公司，不往下结存';
comment on column OSECD.JZ_INDICATORSTORAGE.recdate
  is '结存记录时间';
comment on column OSECD.JZ_INDICATORSTORAGE.indicatorshowvalue
  is '结存结果显示，例如完成率，按照结存结果的百分比显示';
comment on column OSECD.JZ_INDICATORSTORAGE.indicatorscore
  is '指标得分';
create index OSECD.IX_INDICATORSTORAGE on OSECD.JZ_INDICATORSTORAGE (INDICATORID, JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_INDICATORWARNINGSTORAGE
prompt =========================================
prompt
create table OSECD.JZ_INDICATORWARNINGSTORAGE
(
  recordid               VARCHAR2(36) not null,
  indicatorid            VARCHAR2(36),
  indicatorname          VARCHAR2(50),
  indicatorunit          VARCHAR2(20),
  indicatorstandardvalue NUMBER,
  orgid                  VARCHAR2(36),
  orgname                VARCHAR2(36),
  indicatorvalue         NUMBER,
  jzdate                 DATE,
  storageorgtype         VARCHAR2(2),
  indicatortype          CHAR(1),
  isrealize              CHAR(1),
  indicatoraddress       VARCHAR2(100),
  recdate                DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_INDICATORWARNINGSTORAGE
  is '指标预警数据结存表';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.indicatorid
  is '指标ID';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.indicatorname
  is '指标名称';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.indicatorunit
  is '指标单位';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.indicatorstandardvalue
  is '指标标准值';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.orgid
  is '组织ID';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.indicatorvalue
  is '指标值';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.jzdate
  is '时间';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.storageorgtype
  is '数据结存级别(1-总公司，2-分公司，3-车队，4-线路)';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.indicatortype
  is '指标类型(1-指标值大趋向，2-指标值小趋向)';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.isrealize
  is '是否合格';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.indicatoraddress
  is '跳转地址';
comment on column OSECD.JZ_INDICATORWARNINGSTORAGE.recdate
  is '记录时间';
alter table OSECD.JZ_INDICATORWARNINGSTORAGE
  add constraint PK_INDICATORWARNING primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_LINENETSTORAGE
prompt ================================
prompt
create table OSECD.JZ_LINENETSTORAGE
(
  recordid         VARCHAR2(36) not null,
  regiontype       CHAR(1),
  regionname       VARCHAR2(100),
  linelength       NUMBER,
  linelength1      VARCHAR2(100),
  linecount        NUMBER,
  linecount1       VARCHAR2(100),
  avglinelenght    NUMBER,
  linedensity      NUMBER,
  linenetdensity   NUMBER,
  unstraightfactor NUMBER,
  regionarea       NUMBER,
  coverarea        NUMBER,
  stationcount     NUMBER,
  stationcount1    VARCHAR2(100),
  avgdistance      NUMBER,
  sitecount        NUMBER,
  sitecount1       VARCHAR2(100),
  linenetlength    NUMBER,
  jzdate           DATE,
  stationids       CLOB,
  routeids         CLOB,
  regioncode       VARCHAR2(12),
  coverarea2       NUMBER,
  recdate          DATE default sysdate,
  accommids        CLOB,
  accommroadlength NUMBER,
  accommlength     NUMBER,
  accommcount      NUMBER,
  datasavelevel    VARCHAR2(2)
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_LINENETSTORAGE
  is '线网布局结存表';
comment on column OSECD.JZ_LINENETSTORAGE.recordid
  is '记录ID';
comment on column OSECD.JZ_LINENETSTORAGE.regiontype
  is '区域类别（0全部；1表示环形区域；2表示行政区域；3表示街道办；4表示居委会）';
comment on column OSECD.JZ_LINENETSTORAGE.regionname
  is '区域名称';
comment on column OSECD.JZ_LINENETSTORAGE.linelength
  is '线路长度';
comment on column OSECD.JZ_LINENETSTORAGE.linelength1
  is '按线路类型的线路长度（1表示专用道；2表示主干线；3表示干线；4表示支线）';
comment on column OSECD.JZ_LINENETSTORAGE.linecount
  is '线路条数';
comment on column OSECD.JZ_LINENETSTORAGE.linecount1
  is '按线路类型的线路条数（1表示专用道；2表示主干线；3表示干线；4表示支线）';
comment on column OSECD.JZ_LINENETSTORAGE.avglinelenght
  is '平均线路长度';
comment on column OSECD.JZ_LINENETSTORAGE.linedensity
  is '线路密度';
comment on column OSECD.JZ_LINENETSTORAGE.linenetdensity
  is '线网密度';
comment on column OSECD.JZ_LINENETSTORAGE.unstraightfactor
  is '线路非直线系数';
comment on column OSECD.JZ_LINENETSTORAGE.regionarea
  is '区域面积';
comment on column OSECD.JZ_LINENETSTORAGE.coverarea
  is '站点覆盖面积(300米)';
comment on column OSECD.JZ_LINENETSTORAGE.stationcount
  is '站点数量';
comment on column OSECD.JZ_LINENETSTORAGE.stationcount1
  is '按站点类型的站点数量（1表示）';
comment on column OSECD.JZ_LINENETSTORAGE.avgdistance
  is '平均站距';
comment on column OSECD.JZ_LINENETSTORAGE.sitecount
  is '场站数量';
comment on column OSECD.JZ_LINENETSTORAGE.sitecount1
  is '按场站类型的场站数量（）';
comment on column OSECD.JZ_LINENETSTORAGE.linenetlength
  is '线网长度';
comment on column OSECD.JZ_LINENETSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_LINENETSTORAGE.stationids
  is '站点编码（电子地图图层数据）';
comment on column OSECD.JZ_LINENETSTORAGE.routeids
  is '线路编码（电子地图图层数据）';
comment on column OSECD.JZ_LINENETSTORAGE.regioncode
  is '区域编码';
comment on column OSECD.JZ_LINENETSTORAGE.coverarea2
  is '站点覆盖面积(500米)';
comment on column OSECD.JZ_LINENETSTORAGE.recdate
  is '写入日期';
comment on column OSECD.JZ_LINENETSTORAGE.accommids
  is '专用道编码（电子地图图层数据）';
comment on column OSECD.JZ_LINENETSTORAGE.accommroadlength
  is '专用道所在的道路长度（公里）';
comment on column OSECD.JZ_LINENETSTORAGE.accommlength
  is '专用道长度（公里）－根据道路长度和车道数计算所得';
comment on column OSECD.JZ_LINENETSTORAGE.datasavelevel
  is '数据结存级别(1-年结存，2-月结存，3-日结存，4-周结存)';
create index OSECD.IX_LINENET on OSECD.JZ_LINENETSTORAGE (JZDATE, REGIONTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_LINENETSTORAGE2
prompt =================================
prompt
create table OSECD.JZ_LINENETSTORAGE2
(
  recordid         VARCHAR2(36) not null,
  regiontype       CHAR(1),
  regionname       VARCHAR2(100),
  linelength       NUMBER,
  linelength1      VARCHAR2(100),
  linecount        NUMBER,
  linecount1       VARCHAR2(100),
  avglinelenght    NUMBER,
  linedensity      NUMBER,
  linenetdensity   NUMBER,
  unstraightfactor NUMBER,
  regionarea       NUMBER,
  coverarea        NUMBER,
  stationcount     NUMBER,
  stationcount1    VARCHAR2(100),
  avgdistance      NUMBER,
  sitecount        NUMBER(5),
  sitecount1       VARCHAR2(100),
  linenetlength    NUMBER,
  jzdate           DATE,
  stationids       CLOB,
  routeids         CLOB,
  regioncode       VARCHAR2(12),
  coverarea2       NUMBER,
  recdate          DATE default sysdate,
  accommids        CLOB,
  accommroadlength NUMBER,
  accommlength     NUMBER,
  accommcount      NUMBER
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_LINENETSTORAGE2
  is '线网指标计算结果表';
comment on column OSECD.JZ_LINENETSTORAGE2.recordid
  is '记录ID';
comment on column OSECD.JZ_LINENETSTORAGE2.regiontype
  is '区域类别（0全部；1表示环形区域；2表示行政区域；3表示街道办；4表示居委会）';
comment on column OSECD.JZ_LINENETSTORAGE2.regionname
  is '区域名称';
comment on column OSECD.JZ_LINENETSTORAGE2.linelength
  is '线路长度';
comment on column OSECD.JZ_LINENETSTORAGE2.linelength1
  is '按线路类型的线路长度（1表示专用道；2表示主干线；3表示干线；4表示支线）';
comment on column OSECD.JZ_LINENETSTORAGE2.linecount
  is '线路条数';
comment on column OSECD.JZ_LINENETSTORAGE2.linecount1
  is '按线路类型的线路条数（1表示专用道；2表示主干线；3表示干线；4表示支线）';
comment on column OSECD.JZ_LINENETSTORAGE2.avglinelenght
  is '平均线路长度';
comment on column OSECD.JZ_LINENETSTORAGE2.linedensity
  is '线路密度';
comment on column OSECD.JZ_LINENETSTORAGE2.linenetdensity
  is '线网密度';
comment on column OSECD.JZ_LINENETSTORAGE2.unstraightfactor
  is '线路非直线系数';
comment on column OSECD.JZ_LINENETSTORAGE2.regionarea
  is '区域面积';
comment on column OSECD.JZ_LINENETSTORAGE2.coverarea
  is '站点覆盖面积(300米)';
comment on column OSECD.JZ_LINENETSTORAGE2.stationcount
  is '站点数量';
comment on column OSECD.JZ_LINENETSTORAGE2.stationcount1
  is '按站点类型的站点数量（1表示）';
comment on column OSECD.JZ_LINENETSTORAGE2.avgdistance
  is '平均站距';
comment on column OSECD.JZ_LINENETSTORAGE2.sitecount
  is '场站数量';
comment on column OSECD.JZ_LINENETSTORAGE2.sitecount1
  is '按场站类型的场站数量（）';
comment on column OSECD.JZ_LINENETSTORAGE2.linenetlength
  is '线网长度';
comment on column OSECD.JZ_LINENETSTORAGE2.jzdate
  is '结存日期';
comment on column OSECD.JZ_LINENETSTORAGE2.stationids
  is '站点编码（电子地图图层数据）';
comment on column OSECD.JZ_LINENETSTORAGE2.routeids
  is '线路编码（电子地图图层数据）';
comment on column OSECD.JZ_LINENETSTORAGE2.regioncode
  is '区域编码';
comment on column OSECD.JZ_LINENETSTORAGE2.coverarea2
  is '站点覆盖面积(500米)';
comment on column OSECD.JZ_LINENETSTORAGE2.recdate
  is '写入日期';
comment on column OSECD.JZ_LINENETSTORAGE2.accommids
  is '专用道编码（电子地图图层数据）';
comment on column OSECD.JZ_LINENETSTORAGE2.accommroadlength
  is '专用道所在的道路长度（公里）';
comment on column OSECD.JZ_LINENETSTORAGE2.accommlength
  is '专用道长度（公里）－根据道路长度和车道数计算所得';
comment on column OSECD.JZ_LINENETSTORAGE2.accommcount
  is '专用道数量';
create index OSECD.IX_LINENET2 on OSECD.JZ_LINENETSTORAGE2 (JZDATE, REGIONTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_MCBUSINFOGS
prompt =============================
prompt
create table OSECD.JZ_MCBUSINFOGS
(
  recordid           VARCHAR2(36) not null,
  busid              VARCHAR2(36) not null,
  orgid              VARCHAR2(36),
  cardid             NVARCHAR2(20),
  busselfid          NVARCHAR2(20),
  buydate            DATE,
  usedate            DATE,
  usedfor            CHAR(1),
  uselesscyc         NUMBER(2),
  realuselessdate    DATE,
  uselessmiles       NUMBER(10,2),
  uselessflag        CHAR(1),
  stdcoefficient     NUMBER(5,3),
  hasiccardeqmt      CHAR(1) default 1,
  businvideocount    NUMBER(2),
  busoutvideocount   NUMBER(2),
  hasinbusled        CHAR(1) default 0,
  hasheadbusled      CHAR(1) default 0,
  hascondition       CHAR(1) default 1,
  islowfloor         CHAR(1) default 1,
  busgrade           CHAR(1),
  fueltype           VARCHAR2(2),
  milecoefficient    NUMBER(5,3),
  seatcount          NUMBER(3),
  standcount         NUMBER(3),
  busmachineid       NVARCHAR2(20),
  productid          NUMBER(10),
  isactive           CHAR(1),
  memos              NVARCHAR2(255),
  created            DATE,
  createdby          VARCHAR2(36),
  updated            DATE,
  updatedby          VARCHAR2(36),
  standardoilnum     NUMBER(6,2),
  upszbusid          VARCHAR2(8),
  totalmile          NUMBER,
  upszbusidtmp       VARCHAR2(8),
  vehicletype        VARCHAR2(2),
  oiltype            VARCHAR2(40),
  approvalretiredate DATE,
  buslength          NUMBER,
  approvedcount      NUMBER,
  bustype            VARCHAR2(2),
  buslengthtype      VARCHAR2(2),
  busoperatetype     VARCHAR2(2),
  busstatus          VARCHAR2(2),
  routeid            VARCHAR2(36),
  orgidfrom          VARCHAR2(36),
  jzdate             DATE,
  sfmanualup         VARCHAR2(2) default 0
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_MCBUSINFOGS
  is '车辆基本信息';
comment on column OSECD.JZ_MCBUSINFOGS.recordid
  is '记录编号';
comment on column OSECD.JZ_MCBUSINFOGS.busid
  is '车辆ID';
comment on column OSECD.JZ_MCBUSINFOGS.orgid
  is '组织ID';
comment on column OSECD.JZ_MCBUSINFOGS.cardid
  is '车牌号';
comment on column OSECD.JZ_MCBUSINFOGS.busselfid
  is '车辆自编号';
comment on column OSECD.JZ_MCBUSINFOGS.buydate
  is '购买日期';
comment on column OSECD.JZ_MCBUSINFOGS.usedate
  is '启用日期';
comment on column OSECD.JZ_MCBUSINFOGS.usedfor
  is '车辆用途(运营车0、公务车1、保修车2、加油车3)';
comment on column OSECD.JZ_MCBUSINFOGS.uselesscyc
  is '报废周期(年)';
comment on column OSECD.JZ_MCBUSINFOGS.realuselessdate
  is '实际报废时间';
comment on column OSECD.JZ_MCBUSINFOGS.uselessmiles
  is '报废里程';
comment on column OSECD.JZ_MCBUSINFOGS.uselessflag
  is '报废标志';
comment on column OSECD.JZ_MCBUSINFOGS.stdcoefficient
  is '标台系数';
comment on column OSECD.JZ_MCBUSINFOGS.hasiccardeqmt
  is '是否有IC卡打卡设备(1表示有，0表示无)';
comment on column OSECD.JZ_MCBUSINFOGS.businvideocount
  is '车内摄像头数量';
comment on column OSECD.JZ_MCBUSINFOGS.busoutvideocount
  is '违规监控摄像头数量';
comment on column OSECD.JZ_MCBUSINFOGS.hasinbusled
  is '是否有车内LED(1表示有，0表示无)';
comment on column OSECD.JZ_MCBUSINFOGS.hasheadbusled
  is '是否有车头LED(1表示有，0表示无)';
comment on column OSECD.JZ_MCBUSINFOGS.hascondition
  is '是否是空调车(1表示是，0表示否)';
comment on column OSECD.JZ_MCBUSINFOGS.islowfloor
  is '是否是低地板车（1是，0否）';
comment on column OSECD.JZ_MCBUSINFOGS.busgrade
  is '车辆级别(高、中、低档)';
comment on column OSECD.JZ_MCBUSINFOGS.fueltype
  is '车辆燃料类型';
comment on column OSECD.JZ_MCBUSINFOGS.milecoefficient
  is '里程换算系数';
comment on column OSECD.JZ_MCBUSINFOGS.seatcount
  is '座位数';
comment on column OSECD.JZ_MCBUSINFOGS.standcount
  is '站立人数';
comment on column OSECD.JZ_MCBUSINFOGS.busmachineid
  is '设备编号';
comment on column OSECD.JZ_MCBUSINFOGS.productid
  is '设备通讯号';
comment on column OSECD.JZ_MCBUSINFOGS.isactive
  is '是否有效';
comment on column OSECD.JZ_MCBUSINFOGS.memos
  is '备注';
comment on column OSECD.JZ_MCBUSINFOGS.created
  is '创建日期';
comment on column OSECD.JZ_MCBUSINFOGS.createdby
  is '创建者';
comment on column OSECD.JZ_MCBUSINFOGS.updated
  is '更新日期';
comment on column OSECD.JZ_MCBUSINFOGS.updatedby
  is '更新者';
comment on column OSECD.JZ_MCBUSINFOGS.standardoilnum
  is '燃油标准';
comment on column OSECD.JZ_MCBUSINFOGS.upszbusid
  is '上传深圳协议车辆ID';
comment on column OSECD.JZ_MCBUSINFOGS.totalmile
  is '里程数 KM';
comment on column OSECD.JZ_MCBUSINFOGS.upszbusidtmp
  is '上传深圳协议车辆ID,临时使用，当映射不成功时使用';
comment on column OSECD.JZ_MCBUSINFOGS.vehicletype
  is '车辆类型（计算车辆补贴时使用）';
comment on column OSECD.JZ_MCBUSINFOGS.oiltype
  is '燃油类型';
comment on column OSECD.JZ_MCBUSINFOGS.approvalretiredate
  is '核定报废日期';
comment on column OSECD.JZ_MCBUSINFOGS.buslength
  is '车长，单位米';
comment on column OSECD.JZ_MCBUSINFOGS.approvedcount
  is '车辆长度类型';
comment on column OSECD.JZ_MCBUSINFOGS.bustype
  is '车辆型号';
comment on column OSECD.JZ_MCBUSINFOGS.buslengthtype
  is '车辆长度类型';
comment on column OSECD.JZ_MCBUSINFOGS.busoperatetype
  is '车辆类别，1-运营车辆，2-摆停车，3-外租车，4-包车，5-其它';
comment on column OSECD.JZ_MCBUSINFOGS.busstatus
  is '车辆状态，1-正常，2-报废，3-封存，4-其它';
comment on column OSECD.JZ_MCBUSINFOGS.routeid
  is '所属线路编号';
comment on column OSECD.JZ_MCBUSINFOGS.orgidfrom
  is '车辆购买组织';
comment on column OSECD.JZ_MCBUSINFOGS.jzdate
  is '结转日期';
comment on column OSECD.JZ_MCBUSINFOGS.sfmanualup
  is '是否手动上传';
alter table OSECD.JZ_MCBUSINFOGS
  add constraint JZBUSINFO_PK primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_MCBUSINFOGS_COMMIT
prompt ====================================
prompt
create table OSECD.JZ_MCBUSINFOGS_COMMIT
(
  recordid           VARCHAR2(36) not null,
  fileid             VARCHAR2(36),
  busid              VARCHAR2(36),
  orgid              VARCHAR2(36),
  cardid             NVARCHAR2(20),
  busselfid          NVARCHAR2(20),
  buydate            DATE,
  usedate            DATE,
  usedfor            CHAR(1),
  uselesscyc         NUMBER(2),
  realuselessdate    DATE,
  uselessmiles       NUMBER(10,2),
  uselessflag        CHAR(1),
  stdcoefficient     NUMBER(5,3),
  hasiccardeqmt      CHAR(1) default 1,
  businvideocount    NUMBER(2),
  busoutvideocount   NUMBER(2),
  hasinbusled        CHAR(1) default 0,
  hasheadbusled      CHAR(1) default 0,
  hascondition       CHAR(1) default 1,
  islowfloor         CHAR(1) default 1,
  busgrade           CHAR(1),
  fueltype           VARCHAR2(2),
  milecoefficient    NUMBER(5,3),
  seatcount          NUMBER(3),
  standcount         NUMBER(3),
  busmachineid       NVARCHAR2(20),
  productid          NUMBER(10),
  isactive           CHAR(1),
  memos              NVARCHAR2(255),
  created            DATE,
  createdby          VARCHAR2(36),
  updated            DATE,
  updatedby          VARCHAR2(36),
  standardoilnum     NUMBER(6,2),
  upszbusid          VARCHAR2(8),
  totalmile          NUMBER,
  upszbusidtmp       VARCHAR2(8),
  vehicletype        VARCHAR2(2),
  oiltype            VARCHAR2(40),
  approvalretiredate DATE,
  buslength          NUMBER,
  approvedcount      NUMBER,
  bustype            VARCHAR2(2),
  buslengthtype      VARCHAR2(2),
  busoperatetype     VARCHAR2(2),
  busstatus          VARCHAR2(2),
  routeid            VARCHAR2(36),
  orgidfrom          VARCHAR2(36),
  startdate          DATE,
  enddate            DATE,
  isupdate           VARCHAR2(2) default 0
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_MCBUSINFOGS_COMMIT
  is '燃油补贴车辆上传记录';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.recordid
  is '记录编号';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.fileid
  is '文件编号';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.busid
  is '车辆ID';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.orgid
  is '组织ID';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.cardid
  is '车牌号';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.busselfid
  is '车辆自编号';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.buydate
  is '购买日期';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.usedate
  is '启用日期';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.usedfor
  is '车辆用途(运营车0、公务车1、保修车2、加油车3)';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.uselesscyc
  is '报废周期(年)';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.realuselessdate
  is '实际报废时间';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.uselessmiles
  is '报废里程';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.uselessflag
  is '报废标志';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.stdcoefficient
  is '标台系数';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.hasiccardeqmt
  is '是否有IC卡打卡设备(1表示有，0表示无)';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.businvideocount
  is '车内摄像头数量';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.busoutvideocount
  is '违规监控摄像头数量';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.hasinbusled
  is '是否有车内LED(1表示有，0表示无)';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.hasheadbusled
  is '是否有车头LED(1表示有，0表示无)';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.hascondition
  is '是否是空调车(1表示是，0表示否)';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.islowfloor
  is '是否是低地板车（1是，0否）';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.busgrade
  is '车辆级别(高、中、低档)';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.fueltype
  is '车辆燃料类型';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.milecoefficient
  is '里程换算系数';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.seatcount
  is '座位数';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.standcount
  is '站立人数';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.busmachineid
  is '设备编号';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.productid
  is '设备通讯号';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.isactive
  is '是否有效';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.memos
  is '备注';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.created
  is '创建日期';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.createdby
  is '创建者';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.updated
  is '更新日期';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.updatedby
  is '更新者';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.standardoilnum
  is '燃油标准';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.upszbusid
  is '上传深圳协议车辆ID';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.totalmile
  is '里程数 KM';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.upszbusidtmp
  is '上传深圳协议车辆ID,临时使用，当映射不成功时使用';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.vehicletype
  is '车辆类型（计算车辆补贴时使用）';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.oiltype
  is '燃油类型';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.approvalretiredate
  is '核定报废日期';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.buslength
  is '车长，单位米';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.approvedcount
  is '车辆长度类型';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.bustype
  is '车辆型号';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.buslengthtype
  is '车辆长度类型';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.busoperatetype
  is '车辆类别，1-运营车辆，2-摆停车，3-外租车，4-包车，5-其它';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.busstatus
  is '车辆状态，1-正常，2-报废，3-封存，4-其它';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.routeid
  is '所属线路编号';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.orgidfrom
  is '车辆购买组织';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.startdate
  is '开始日期';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.enddate
  is '结束日期';
comment on column OSECD.JZ_MCBUSINFOGS_COMMIT.isupdate
  is '是否已更新';
alter table OSECD.JZ_MCBUSINFOGS_COMMIT
  add constraint JZBUSINFOCOMMIT_PK primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_MCROUTEINFOGS
prompt ===============================
prompt
create table OSECD.JZ_MCROUTEINFOGS
(
  routeid                   VARCHAR2(20) not null,
  routename                 NVARCHAR2(50) not null,
  routecode                 NVARCHAR2(50),
  orgid                     VARCHAR2(36),
  routestyle                CHAR(1),
  routetype                 VARCHAR2(2),
  routegrade                VARCHAR2(2),
  principal                 NVARCHAR2(50),
  begindate                 DATE,
  enddate                   DATE,
  isconductor               CHAR(1),
  isapts                    CHAR(1),
  isexistsaccommodationroad CHAR(1),
  dispatchtype              CHAR(1),
  isactive                  CHAR(1),
  memos                     NVARCHAR2(255),
  created                   DATE,
  createdby                 VARCHAR2(36),
  updated                   DATE,
  updatedby                 VARCHAR2(36),
  reflectid                 VARCHAR2(36),
  upszrouteid               VARCHAR2(10),
  upszrouteidtmp            VARCHAR2(10),
  jzdate                    DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_MCROUTEINFOGS
  is '线路基础信息日备份表';
comment on column OSECD.JZ_MCROUTEINFOGS.routeid
  is '线路编号';
comment on column OSECD.JZ_MCROUTEINFOGS.routename
  is '线路名称';
comment on column OSECD.JZ_MCROUTEINFOGS.routecode
  is '线路编码';
comment on column OSECD.JZ_MCROUTEINFOGS.orgid
  is '所属组织';
comment on column OSECD.JZ_MCROUTEINFOGS.routestyle
  is '线路运行方式(取字典值，1-上下行、2-环行)';
comment on column OSECD.JZ_MCROUTEINFOGS.routetype
  is '线路类型';
comment on column OSECD.JZ_MCROUTEINFOGS.routegrade
  is '线路级别';
comment on column OSECD.JZ_MCROUTEINFOGS.principal
  is '负责人';
comment on column OSECD.JZ_MCROUTEINFOGS.begindate
  is '开通日期';
comment on column OSECD.JZ_MCROUTEINFOGS.enddate
  is '注销日期';
comment on column OSECD.JZ_MCROUTEINFOGS.isconductor
  is '是否有售票员';
comment on column OSECD.JZ_MCROUTEINFOGS.isapts
  is '是否使用调度系统进行调度';
comment on column OSECD.JZ_MCROUTEINFOGS.isexistsaccommodationroad
  is '线路上是否存在公交专用道';
comment on column OSECD.JZ_MCROUTEINFOGS.dispatchtype
  is '调度类型（单边调度、双边调度、集合调度）';
comment on column OSECD.JZ_MCROUTEINFOGS.isactive
  is '是否有效';
comment on column OSECD.JZ_MCROUTEINFOGS.memos
  is '备注';
comment on column OSECD.JZ_MCROUTEINFOGS.created
  is '创建日期';
comment on column OSECD.JZ_MCROUTEINFOGS.createdby
  is '创建者';
comment on column OSECD.JZ_MCROUTEINFOGS.updated
  is '更新日期';
comment on column OSECD.JZ_MCROUTEINFOGS.updatedby
  is '更新者';
comment on column OSECD.JZ_MCROUTEINFOGS.reflectid
  is '映射ID';
comment on column OSECD.JZ_MCROUTEINFOGS.upszrouteid
  is '上传深标线路ID';
comment on column OSECD.JZ_MCROUTEINFOGS.upszrouteidtmp
  is '上传深标线路ID,临时使用';
comment on column OSECD.JZ_MCROUTEINFOGS.jzdate
  is '结存时间';
create index OSECD.INDEX_JZ_MCROUTEINFOGS on OSECD.JZ_MCROUTEINFOGS (JZDATE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ODBASE
prompt ========================
prompt
create table OSECD.JZ_ODBASE
(
  cardno      VARCHAR2(20),
  actdatetime DATE,
  routecode   VARCHAR2(20),
  stationno   VARCHAR2(20),
  stationname VARCHAR2(30),
  consumeday  DATE
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ODBASE
  is 'OD分析基础表';
comment on column OSECD.JZ_ODBASE.cardno
  is 'IC卡卡号';
comment on column OSECD.JZ_ODBASE.actdatetime
  is '刷卡时间';
comment on column OSECD.JZ_ODBASE.routecode
  is '线路编码';
comment on column OSECD.JZ_ODBASE.stationno
  is '站点编码';
comment on column OSECD.JZ_ODBASE.stationname
  is '站点名称';
comment on column OSECD.JZ_ODBASE.consumeday
  is '消费日期（不带时间)';

prompt
prompt Creating table JZ_OPERATIONSVEHICLE
prompt ===================================
prompt
create table OSECD.JZ_OPERATIONSVEHICLE
(
  productid        NUMBER(10) not null,
  carid            VARCHAR2(20),
  orgcode          VARCHAR2(10),
  operationdate    DATE,
  operationmonth   DATE,
  operationquarter VARCHAR2(20)
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_OPERATIONSVEHICLE
  is '运营车辆记录表';
comment on column OSECD.JZ_OPERATIONSVEHICLE.productid
  is '车辆自编号';
comment on column OSECD.JZ_OPERATIONSVEHICLE.carid
  is '车牌号';
comment on column OSECD.JZ_OPERATIONSVEHICLE.orgcode
  is '组织编码';
comment on column OSECD.JZ_OPERATIONSVEHICLE.operationdate
  is '最后运营日期';
comment on column OSECD.JZ_OPERATIONSVEHICLE.operationmonth
  is '运营月份';
comment on column OSECD.JZ_OPERATIONSVEHICLE.operationquarter
  is '运营季度';
alter table OSECD.JZ_OPERATIONSVEHICLE
  add constraint PK_JZ_OPERATIONSVEHICLE primary key (PRODUCTID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ORGGRADETREE
prompt ==============================
prompt
create table OSECD.JZ_ORGGRADETREE
(
  orgtreeid   VARCHAR2(30),
  orgid       VARCHAR2(36),
  parentorgid VARCHAR2(36),
  orggrade    VARCHAR2(3),
  jzdate      DATE,
  recdate     DATE default sysdate,
  relation    VARCHAR2(2) default 1
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ORGGRADETREE
  is '结存组织级别表';
comment on column OSECD.JZ_ORGGRADETREE.orgtreeid
  is 'ID';
comment on column OSECD.JZ_ORGGRADETREE.orgid
  is '组织ID';
comment on column OSECD.JZ_ORGGRADETREE.parentorgid
  is '上级组织ID,包括直接上级和间接上级';
comment on column OSECD.JZ_ORGGRADETREE.orggrade
  is '上级组织级别';
comment on column OSECD.JZ_ORGGRADETREE.jzdate
  is '结存日期';
comment on column OSECD.JZ_ORGGRADETREE.recdate
  is '执行时间';
comment on column OSECD.JZ_ORGGRADETREE.relation
  is '关系，0 本级，1 直接上级，2 间接上级';
alter table OSECD.JZ_ORGGRADETREE
  add constraint UNQ_ORGGRADETREE unique (ORGID, PARENTORGID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ORGPHASESTORAGE
prompt =================================
prompt
create table OSECD.JZ_ORGPHASESTORAGE
(
  recordid      VARCHAR2(36),
  orgid         VARCHAR2(36),
  employeecount NUMBER default 0,
  buscount      NUMBER default 0,
  routecount    NUMBER default 0,
  sitecount     NUMBER default 0,
  jzdate        DATE,
  recdate       DATE default sysdate,
  orgname       VARCHAR2(36),
  totalincome   NUMBER default 0,
  totalcost     NUMBER default 0,
  busstdcount   NUMBER default 0,
  routelength   NUMBER default 0,
  drivercount   NUMBER default 0,
  avgbuslength  NUMBER default 0,
  avgbusyear    NUMBER default 0,
  avgbusmiles   NUMBER default 0,
  avgempage     NUMBER(10,2) default 0,
  avgempsalary  NUMBER(10,2) default 0,
  datasavelevel VARCHAR2(2),
  totalsalary   NUMBER default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ORGPHASESTORAGE
  is '组织结存表';
comment on column OSECD.JZ_ORGPHASESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_ORGPHASESTORAGE.orgid
  is '组织ID';
comment on column OSECD.JZ_ORGPHASESTORAGE.employeecount
  is '人员数';
comment on column OSECD.JZ_ORGPHASESTORAGE.buscount
  is '车辆数';
comment on column OSECD.JZ_ORGPHASESTORAGE.routecount
  is '线路条数';
comment on column OSECD.JZ_ORGPHASESTORAGE.sitecount
  is '场站数量';
comment on column OSECD.JZ_ORGPHASESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_ORGPHASESTORAGE.recdate
  is '记录日期';
comment on column OSECD.JZ_ORGPHASESTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_ORGPHASESTORAGE.totalincome
  is '组织总收入';
comment on column OSECD.JZ_ORGPHASESTORAGE.totalcost
  is '组织总支出';
comment on column OSECD.JZ_ORGPHASESTORAGE.busstdcount
  is '车辆标台数';
comment on column OSECD.JZ_ORGPHASESTORAGE.routelength
  is '线路长度,单位KM';
comment on column OSECD.JZ_ORGPHASESTORAGE.drivercount
  is '驾驶员数量';
comment on column OSECD.JZ_ORGPHASESTORAGE.avgbuslength
  is '车辆平均长度';
comment on column OSECD.JZ_ORGPHASESTORAGE.avgbusyear
  is '车辆平均车龄';
comment on column OSECD.JZ_ORGPHASESTORAGE.avgbusmiles
  is '车辆平均行驶里程（万公里）';
comment on column OSECD.JZ_ORGPHASESTORAGE.avgempage
  is '人员平均年龄';
comment on column OSECD.JZ_ORGPHASESTORAGE.avgempsalary
  is '人员平均工资';
comment on column OSECD.JZ_ORGPHASESTORAGE.datasavelevel
  is '数据结存级别(1-年结存，2-月结存，3-日结存，4-周结存)';
comment on column OSECD.JZ_ORGPHASESTORAGE.totalsalary
  is '人员总工资';

prompt
prompt Creating table JZ_PECCANCYDATASTORAGE
prompt =====================================
prompt
create table OSECD.JZ_PECCANCYDATASTORAGE
(
  recordid       VARCHAR2(36) not null,
  orgid          VARCHAR2(36),
  routeid        VARCHAR2(20),
  jzdate         DATE,
  peccancytype   VARCHAR2(20),
  peccancynum    NUMBER,
  storageorgtype VARCHAR2(2),
  datasavelevel  VARCHAR2(2),
  recdate        DATE default sysdate,
  peccancytime   NUMBER
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_PECCANCYDATASTORAGE
  is '车辆违规数据结存信息表';
comment on column OSECD.JZ_PECCANCYDATASTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_PECCANCYDATASTORAGE.orgid
  is '组织ID';
comment on column OSECD.JZ_PECCANCYDATASTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_PECCANCYDATASTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_PECCANCYDATASTORAGE.peccancytype
  is '违规类型';
comment on column OSECD.JZ_PECCANCYDATASTORAGE.peccancynum
  is '违规次数';
comment on column OSECD.JZ_PECCANCYDATASTORAGE.storageorgtype
  is '组织结存级别，4-线路，其他和组织级别一致';
comment on column OSECD.JZ_PECCANCYDATASTORAGE.datasavelevel
  is '时间结存级别，1-年，2-月，3-日';
comment on column OSECD.JZ_PECCANCYDATASTORAGE.recdate
  is '记录时间';
comment on column OSECD.JZ_PECCANCYDATASTORAGE.peccancytime
  is '违规时长合计(分钟)';
create index OSECD.IX_PECCANCY1 on OSECD.JZ_PECCANCYDATASTORAGE (ROUTEID, JZDATE, PECCANCYTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IX_PECCANCY2 on OSECD.JZ_PECCANCYDATASTORAGE (STORAGEORGTYPE, DATASAVELEVEL)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_PECCANCYDATASTORAGE
  add constraint PK_PECCANCY primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_PERIODSPEEDRECORD
prompt ===================================
prompt
create table OSECD.JZ_PERIODSPEEDRECORD
(
  recordid  VARCHAR2(36),
  recdate   DATE,
  avgspeed  NUMBER(6,2),
  gpsspeed  NUMBER(6,2),
  buscount  NUMBER default 0,
  speedtime DATE,
  sendspeed NUMBER(6,2)
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_PERIODSPEEDRECORD
  is '平均数据记录';
comment on column OSECD.JZ_PERIODSPEEDRECORD.recordid
  is 'ID';
comment on column OSECD.JZ_PERIODSPEEDRECORD.recdate
  is '记录日期';
comment on column OSECD.JZ_PERIODSPEEDRECORD.avgspeed
  is '平均运营速度（KM/H）';
comment on column OSECD.JZ_PERIODSPEEDRECORD.gpsspeed
  is '实时平均速度（KM/H）';
comment on column OSECD.JZ_PERIODSPEEDRECORD.buscount
  is '车辆数';
comment on column OSECD.JZ_PERIODSPEEDRECORD.speedtime
  is '速度时刻';
comment on column OSECD.JZ_PERIODSPEEDRECORD.sendspeed
  is '平均运送速度';
create index OSECD.INDEX_RECDATE on OSECD.JZ_PERIODSPEEDRECORD (RECDATE)
  tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_PHASEDRIVESTD
prompt ===============================
prompt
create table OSECD.JZ_PHASEDRIVESTD
(
  recid           VARCHAR2(36),
  orgid           VARCHAR2(20),
  orgname         VARCHAR2(50),
  jzdate          DATE,
  storagetype     CHAR(1),
  storagetypename VARCHAR2(20),
  violatetype     VARCHAR2(2),
  violatename     VARCHAR2(200),
  violatecount    NUMBER,
  datasavelevel   CHAR(1) default 2
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_PHASEDRIVESTD
  is '稽查结存表';
comment on column OSECD.JZ_PHASEDRIVESTD.recid
  is 'ID';
comment on column OSECD.JZ_PHASEDRIVESTD.orgid
  is '组织ID';
comment on column OSECD.JZ_PHASEDRIVESTD.orgname
  is '组织名称';
comment on column OSECD.JZ_PHASEDRIVESTD.jzdate
  is '结存日期';
comment on column OSECD.JZ_PHASEDRIVESTD.storagetype
  is '结存类型 0 全部 1 按类型';
comment on column OSECD.JZ_PHASEDRIVESTD.storagetypename
  is '结存类型名称';
comment on column OSECD.JZ_PHASEDRIVESTD.violatetype
  is '违章类型';
comment on column OSECD.JZ_PHASEDRIVESTD.violatename
  is '违章名称';
comment on column OSECD.JZ_PHASEDRIVESTD.violatecount
  is '违章数量';
comment on column OSECD.JZ_PHASEDRIVESTD.datasavelevel
  is '2 月份';
create index OSECD.IDX_DRIVESTD on OSECD.JZ_PHASEDRIVESTD (JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_REGIONPOPULATIONLD
prompt ====================================
prompt
create table OSECD.JZ_REGIONPOPULATIONLD
(
  recordid         VARCHAR2(36) not null,
  years            NUMBER(4),
  months           NUMBER(2),
  days             NUMBER(2),
  regionarea       VARCHAR2(6),
  populationcount  NUMBER,
  recdate          DATE default sysdate,
  populationcount2 NUMBER
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_REGIONPOPULATIONLD
  is '区域人口数据';
comment on column OSECD.JZ_REGIONPOPULATIONLD.recordid
  is '记录ID';
comment on column OSECD.JZ_REGIONPOPULATIONLD.years
  is '年度';
comment on column OSECD.JZ_REGIONPOPULATIONLD.months
  is '月度';
comment on column OSECD.JZ_REGIONPOPULATIONLD.days
  is '日期';
comment on column OSECD.JZ_REGIONPOPULATIONLD.regionarea
  is '行政区域编码';
comment on column OSECD.JZ_REGIONPOPULATIONLD.populationcount
  is '常驻人口';
comment on column OSECD.JZ_REGIONPOPULATIONLD.populationcount2
  is '流动人口';
alter table OSECD.JZ_REGIONPOPULATIONLD
  add constraint PK_REGIONPOPULATION primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_REGIONSTORAGE
prompt ===============================
prompt
create table OSECD.JZ_REGIONSTORAGE
(
  recordid       VARCHAR2(36) not null,
  jzdate         DATE not null,
  regiontype     CHAR(1) not null,
  regioncode     VARCHAR2(6) default 0 not null,
  regioncodename VARCHAR2(50) not null,
  indicator      VARCHAR2(6),
  indicatorname  VARCHAR2(50),
  indicatorvalue NUMBER(6,2),
  memo           VARCHAR2(255),
  recdate        DATE default sysdate not null
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_REGIONSTORAGE
  is '区域统计数据结存表';
comment on column OSECD.JZ_REGIONSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_REGIONSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_REGIONSTORAGE.regiontype
  is '区域类型';
comment on column OSECD.JZ_REGIONSTORAGE.regioncode
  is '区域编码（0为全部）';
comment on column OSECD.JZ_REGIONSTORAGE.regioncodename
  is '区域名称';
comment on column OSECD.JZ_REGIONSTORAGE.indicator
  is '指标编码';
comment on column OSECD.JZ_REGIONSTORAGE.indicatorname
  is '指标名称';
comment on column OSECD.JZ_REGIONSTORAGE.indicatorvalue
  is '指标值';
comment on column OSECD.JZ_REGIONSTORAGE.memo
  is '备注';
comment on column OSECD.JZ_REGIONSTORAGE.recdate
  is '记录日期';
alter table OSECD.JZ_REGIONSTORAGE
  add constraint PK_REGIONSTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ROOMEQUIPPHASESTORAGE
prompt =======================================
prompt
create table OSECD.JZ_ROOMEQUIPPHASESTORAGE
(
  recordid            VARCHAR2(36) not null,
  orgid               VARCHAR2(36),
  orgname             NVARCHAR2(60),
  jzdate              DATE,
  statistictype       VARCHAR2(2),
  statisticname       NVARCHAR2(50),
  storageequipfsttype VARCHAR2(2),
  storageequipfstname NVARCHAR2(50),
  storageequipscdtype VARCHAR2(2),
  storagequipscdname  NVARCHAR2(50),
  equipcount          NUMBER(4),
  datasavelevel       VARCHAR2(4),
  recdate             DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ROOMEQUIPPHASESTORAGE
  is '机房软硬件数据结存表';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.statistictype
  is '类型';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.statisticname
  is '类型名称';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.storageequipfsttype
  is '结存类型一级字典';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.storageequipfstname
  is '字典名称';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.storageequipscdtype
  is '结存类型二级字典';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.storagequipscdname
  is '字典名称';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.equipcount
  is '数量';
comment on column OSECD.JZ_ROOMEQUIPPHASESTORAGE.datasavelevel
  is '数据结存级别';
create index OSECD.IDX_ROOMEQUIPPHASESTORAGE on OSECD.JZ_ROOMEQUIPPHASESTORAGE (JZDATE, STATISTICTYPE, STORAGEEQUIPFSTTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_ROOMEQUIPPHASESTORAGE
  add constraint PK_ROOMEQUIPPHASESTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ROUTEBASICDATAPHASESTORAGE
prompt ============================================
prompt
create table OSECD.JZ_ROUTEBASICDATAPHASESTORAGE
(
  recordid                VARCHAR2(36) not null,
  orgid                   VARCHAR2(36),
  routeid                 VARCHAR2(20),
  routename               NVARCHAR2(20),
  subrouteid              VARCHAR2(20),
  subroutename            NVARCHAR2(30),
  jzdate                  DATE,
  buscount                NUMBER,
  standardbuscount        NUMBER,
  seatcount               NUMBER,
  psgcount                NUMBER,
  employeecount           NUMBER,
  stationcount            NUMBER,
  routelength             NUMBER,
  circulatetime           NUMBER(5),
  fststationid            VARCHAR2(36),
  lststationid            VARCHAR2(36),
  averagestationdistance  NUMBER,
  maxstationdistance      NUMBER,
  minstationdistance      NUMBER,
  accommodationlength     NUMBER,
  isapts                  CHAR(1),
  routenonbeelinecfst     NUMBER,
  routesidenonpoisecfst   NUMBER,
  routedirectnonpoisecfst NUMBER,
  routetimepoisecfst      NUMBER,
  datasavelevel           VARCHAR2(2),
  recdate                 DATE default sysdate,
  routecount              NUMBER,
  aptsrate                NUMBER,
  storageorgtype          CHAR(1),
  routedirctlength        NUMBER
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ROUTEBASICDATAPHASESTORAGE
  is '基础数据结存表';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.orgid
  is '组织ID';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.routename
  is '线路名称';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.subrouteid
  is '主子线ID';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.subroutename
  is '主子线名称';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.buscount
  is '车辆数';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.standardbuscount
  is '车辆标台数';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.seatcount
  is '座位数';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.psgcount
  is '客位数';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.employeecount
  is '人员数';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.stationcount
  is '站点数';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.routelength
  is '线路长度';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.circulatetime
  is '周转时间（分钟）';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.fststationid
  is '主站ID';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.lststationid
  is '副站ID';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.averagestationdistance
  is '平均站距(米) ';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.maxstationdistance
  is '最大站距(米)';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.minstationdistance
  is '最小站距(米)';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.accommodationlength
  is '使用专用道长度(km)';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.isapts
  is '是否使用调度系统';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.routenonbeelinecfst
  is '线路非直线系数';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.routesidenonpoisecfst
  is '线路客运量断面不均衡系数';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.routedirectnonpoisecfst
  is '线路客运量方向不均衡系数';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.routetimepoisecfst
  is '线路客运量时间不均衡系数';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.datasavelevel
  is '数据结存级别(2-月，1-年)';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.recdate
  is '记录日期';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.routecount
  is '线路条数';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.aptsrate
  is '调度系统普及率';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.storageorgtype
  is '数据结存级别(1-总公司，2-分公司，3-车队，4-线路)';
comment on column OSECD.JZ_ROUTEBASICDATAPHASESTORAGE.routedirctlength
  is '线路直接长度';
create index OSECD.IDX_ROUTEBASESTORAGE on OSECD.JZ_ROUTEBASICDATAPHASESTORAGE (JZDATE, ORGID, ROUTEID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_ROUTEBASICDATAPHASESTORAGE
  add constraint PK_ROUTEBASICDATAPHASESTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ROUTEDAYSPEEDSTORAGE
prompt ======================================
prompt
create table OSECD.JZ_ROUTEDAYSPEEDSTORAGE
(
  recordid           VARCHAR2(36) not null,
  orgid              VARCHAR2(36),
  routeid            VARCHAR2(20),
  routename          NVARCHAR2(20),
  jzdate             DATE,
  speed              NUMBER(8,3),
  gpsrunmile         NUMBER,
  runtime            NUMBER,
  stoptime           NUMBER,
  timephasetype      VARCHAR2(2),
  timephasevalue     NVARCHAR2(50),
  timephasestarttime NUMBER(8,6),
  timephaseendtime   NUMBER(8,6),
  datasavelevel      VARCHAR2(2),
  recdate            DATE default SYSDATE
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ROUTEDAYSPEEDSTORAGE
  is '线路运营速度结存表';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.orgid
  is '组织ID';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.routename
  is '线路名称';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.speed
  is '平均速度';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.gpsrunmile
  is '运营里程M';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.runtime
  is '运送时间（包含中间站停站时间）M';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.stoptime
  is '停站时间M';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.timephasetype
  is '峰段类型(-1表示非峰段结存)';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.timephasevalue
  is '峰段名称';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.timephasestarttime
  is '峰段开始时间(相对0点的小时数)';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.timephaseendtime
  is '峰段结束时间(相对0点的小时数)';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.datasavelevel
  is '数据结存级别(1-年，2-月，3-日)';
comment on column OSECD.JZ_ROUTEDAYSPEEDSTORAGE.recdate
  is '记录时间';
create index OSECD.INDEX_ROUTEDAYSPEED on OSECD.JZ_ROUTEDAYSPEEDSTORAGE (ORGID, ROUTEID, JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_ROUTEDAYSPEEDSTORAGE
  add constraint PK_JZ_ROUTEDAYSPEED primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ROUTEDAYSTORAGE
prompt =================================
prompt
create table OSECD.JZ_ROUTEDAYSTORAGE
(
  recordid             VARCHAR2(36) not null,
  orgid                VARCHAR2(36),
  routeid              VARCHAR2(20),
  routename            NVARCHAR2(20),
  jzdate               DATE,
  planseqcount         NUMBER,
  actualseqcount       NUMBER,
  planseqmile          NUMBER,
  gpsmiles             NUMBER,
  runmiles             NUMBER,
  unrunmiles           NUMBER,
  devotionbuscount     NUMBER,
  devotionempcount     NUMBER,
  planbuscount         NUMBER,
  planempcount         NUMBER,
  loadpsgcapability    NUMBER,
  fstlstseqcount       NUMBER,
  fstontimecount       NUMBER,
  lstontimecount       NUMBER,
  ontimeseqcount       NUMBER,
  bigstationontimerate NUMBER,
  bussendintervalstd   NUMBER,
  busdistancerate      NUMBER,
  stationkeepbackrate  NUMBER,
  overspeedcount       NUMBER,
  unrulestopcount      NUMBER,
  mdlopendoorcount     NUMBER,
  runcircletime        NUMBER,
  routeruntime         NUMBER,
  routestoptime        NUMBER,
  driverdrivetime      NUMBER,
  driveronworktime     NUMBER,
  datasavelevel        VARCHAR2(2),
  recdate              DATE default sysdate,
  storageorgtype       VARCHAR2(2),
  passengercount       NUMBER,
  accusecount          NUMBER,
  satisfycount         NUMBER,
  accusesolvecount     NUMBER,
  runtime              NUMBER,
  busworktime          NUMBER,
  sumbuscount          NUMBER,
  sumbusstdcount       NUMBER default 0,
  onlinebuscount       NUMBER default 0,
  standardseqcount     NUMBER default 0,
  fullseqcount         NUMBER default 0,
  totalincome          NUMBER(18,2) default 0
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ROUTEDAYSTORAGE
  is '线路日结存表';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.orgid
  is '组织ID';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.routename
  is '线路名称';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.planseqcount
  is '计划班次数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.actualseqcount
  is '实际班次数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.planseqmile
  is '计划里程数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.gpsmiles
  is 'GPS里程';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.runmiles
  is '营运里程';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.unrunmiles
  is '非营运里程';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.devotionbuscount
  is '投入车辆数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.devotionempcount
  is '投入驾驶员数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.planbuscount
  is '计划投入车辆数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.planempcount
  is '计划投入驾驶员数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.loadpsgcapability
  is '载客能力';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.fstlstseqcount
  is '线路首末班车次数（上下行为4，环行为2）';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.fstontimecount
  is '首班准点车次数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.lstontimecount
  is '末班准点车次数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.ontimeseqcount
  is '准点班次数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.bigstationontimerate
  is '大站准点率';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.bussendintervalstd
  is '发车间隔合格班次数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.busdistancerate
  is '车距合格率';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.stationkeepbackrate
  is '车站平均留客率';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.overspeedcount
  is '超速次数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.unrulestopcount
  is '不规范停车次数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.mdlopendoorcount
  is '中途开关门次数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.runcircletime
  is '运营周期时间(分钟)';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.routeruntime
  is '运营行驶时间(分钟)';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.routestoptime
  is '线路停站时间(分钟)';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.driverdrivetime
  is '驾驶员驾驶时间';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.driveronworktime
  is '驾驶员工作时间';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.datasavelevel
  is '数据结存级别(1-年，2-月，3-日)';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.storageorgtype
  is '数据结存级别(总公司、分公司、车队、线路)';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.passengercount
  is '出行总人次';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.accusecount
  is '乘客投诉数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.satisfycount
  is '乘客满意数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.accusesolvecount
  is '投诉处理数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.runtime
  is '车辆运营时间';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.busworktime
  is '车辆全天工作时间';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.sumbuscount
  is '总配车数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.sumbusstdcount
  is '总配车标台数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.onlinebuscount
  is '在线车辆数据';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.standardseqcount
  is '基准班次数(考核用班次基准，来自表BZ_ROUTESEQMONTHSTD)';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.fullseqcount
  is '完整班次数';
comment on column OSECD.JZ_ROUTEDAYSTORAGE.totalincome
  is '总收入';
create index OSECD.IDX_ROUTEDAY on OSECD.JZ_ROUTEDAYSTORAGE (JZDATE, ROUTEID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IDX_ROUTEDAY1 on OSECD.JZ_ROUTEDAYSTORAGE (JZDATE, DATASAVELEVEL, STORAGEORGTYPE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_ROUTEDAYSTORAGE
  add constraint PK_ROUTEDAYSTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ROUTEFSTANDLSTSEQTIME
prompt =======================================
prompt
create table OSECD.JZ_ROUTEFSTANDLSTSEQTIME
(
  recordid             VARCHAR2(36) not null,
  routeid              VARCHAR2(20),
  startdate            DATE,
  enddate              DATE,
  startweek            NUMBER(1),
  endweek              NUMBER(1),
  mainstationfsttime   DATE,
  mainstationlsttime   DATE,
  secondstationfsttime DATE,
  secondstationlsttime DATE,
  jzdate               DATE
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ROUTEFSTANDLSTSEQTIME
  is '线路首末班时间结存表';
comment on column OSECD.JZ_ROUTEFSTANDLSTSEQTIME.recordid
  is '记录ID';
comment on column OSECD.JZ_ROUTEFSTANDLSTSEQTIME.routeid
  is '线路编号';
comment on column OSECD.JZ_ROUTEFSTANDLSTSEQTIME.startdate
  is '开始日期';
comment on column OSECD.JZ_ROUTEFSTANDLSTSEQTIME.enddate
  is '结束日期';
comment on column OSECD.JZ_ROUTEFSTANDLSTSEQTIME.startweek
  is '开始周几';
comment on column OSECD.JZ_ROUTEFSTANDLSTSEQTIME.endweek
  is '结束周几';
comment on column OSECD.JZ_ROUTEFSTANDLSTSEQTIME.mainstationfsttime
  is '主站首班时间';
comment on column OSECD.JZ_ROUTEFSTANDLSTSEQTIME.mainstationlsttime
  is '主站末班时间';
comment on column OSECD.JZ_ROUTEFSTANDLSTSEQTIME.secondstationfsttime
  is '副站首班时间';
comment on column OSECD.JZ_ROUTEFSTANDLSTSEQTIME.secondstationlsttime
  is '副站末班时间';
comment on column OSECD.JZ_ROUTEFSTANDLSTSEQTIME.jzdate
  is '结存日期';
alter table OSECD.JZ_ROUTEFSTANDLSTSEQTIME
  add constraint PK_JZROUTEFSTANDLSTSEQTIME primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ROUTENETSTORAGE
prompt =================================
prompt
create table OSECD.JZ_ROUTENETSTORAGE
(
  recordid               NVARCHAR2(36) not null,
  jzdate                 DATE,
  areatypefirsttype      VARCHAR2(10),
  areatypefirstname      NVARCHAR2(50),
  areatypesecondtype     VARCHAR2(10),
  areatypesecondname     NVARCHAR2(50),
  areaacreage            NUMBER,
  routelength            NUMBER,
  routenetlength         NUMBER,
  threehdstshcoverrate   NUMBER,
  threehdpeoplecoverrate NUMBER,
  fivehdstshcoverrate    NUMBER,
  fivehdpeoplecoverrate  NUMBER,
  hingecount             NUMBER,
  accommodationlength    NUMBER,
  averagestationdistance NUMBER,
  datasavelevel          VARCHAR2(2),
  recdate                DATE default sysdate,
  firstcrosscount        NUMBER,
  routecount             NUMBER,
  accommcount            NUMBER default 0,
  coverarea              NUMBER default 0,
  coverarea2             NUMBER default 0,
  avglinelenght          NUMBER default 0,
  linedensity            NUMBER default 0,
  linenetdensity         NUMBER default 0,
  unstraightfactor       NUMBER default 0,
  avgdistance            NUMBER default 0,
  sitecount              NUMBER default 0
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ROUTENETSTORAGE
  is '线网数据结存表';
comment on column OSECD.JZ_ROUTENETSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_ROUTENETSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_ROUTENETSTORAGE.areatypefirsttype
  is '地区类型一级字典';
comment on column OSECD.JZ_ROUTENETSTORAGE.areatypefirstname
  is '字典名称';
comment on column OSECD.JZ_ROUTENETSTORAGE.areatypesecondtype
  is '地区类型二级字典';
comment on column OSECD.JZ_ROUTENETSTORAGE.areatypesecondname
  is '字典名称';
comment on column OSECD.JZ_ROUTENETSTORAGE.areaacreage
  is '区域面积(平方公里)';
comment on column OSECD.JZ_ROUTENETSTORAGE.routelength
  is '线路长度(公里)';
comment on column OSECD.JZ_ROUTENETSTORAGE.routenetlength
  is '线网长度(公里)';
comment on column OSECD.JZ_ROUTENETSTORAGE.threehdstshcoverrate
  is '300米站点覆盖率';
comment on column OSECD.JZ_ROUTENETSTORAGE.threehdpeoplecoverrate
  is '300米站点人口覆盖率';
comment on column OSECD.JZ_ROUTENETSTORAGE.fivehdstshcoverrate
  is '500米站点面积覆盖率';
comment on column OSECD.JZ_ROUTENETSTORAGE.fivehdpeoplecoverrate
  is '500米站点人口覆盖率';
comment on column OSECD.JZ_ROUTENETSTORAGE.hingecount
  is '交通枢纽个数';
comment on column OSECD.JZ_ROUTENETSTORAGE.accommodationlength
  is '公交专用道长度(公里)';
comment on column OSECD.JZ_ROUTENETSTORAGE.averagestationdistance
  is '公交站点平均站距(米)';
comment on column OSECD.JZ_ROUTENETSTORAGE.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_ROUTENETSTORAGE.firstcrosscount
  is '优先路口个数';
comment on column OSECD.JZ_ROUTENETSTORAGE.routecount
  is '线路数量';
comment on column OSECD.JZ_ROUTENETSTORAGE.accommcount
  is '专用道数量';
comment on column OSECD.JZ_ROUTENETSTORAGE.coverarea
  is '站点覆盖面积(300米)';
comment on column OSECD.JZ_ROUTENETSTORAGE.coverarea2
  is '站点覆盖面积(500米)';
comment on column OSECD.JZ_ROUTENETSTORAGE.avglinelenght
  is '平均线路长度';
comment on column OSECD.JZ_ROUTENETSTORAGE.linedensity
  is '线路密度';
comment on column OSECD.JZ_ROUTENETSTORAGE.linenetdensity
  is '线网密度';
comment on column OSECD.JZ_ROUTENETSTORAGE.unstraightfactor
  is '线路非直线系数';
comment on column OSECD.JZ_ROUTENETSTORAGE.avgdistance
  is '平均站距';
comment on column OSECD.JZ_ROUTENETSTORAGE.sitecount
  is '场站数量';
alter table OSECD.JZ_ROUTENETSTORAGE
  add constraint PK_ROUTENETSTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ROUTEPASSRATE
prompt ===============================
prompt
create table OSECD.JZ_ROUTEPASSRATE
(
  recid          NUMBER,
  orgid          VARCHAR2(32),
  routeid        VARCHAR2(20),
  jzdate         DATE,
  timephasetype  VARCHAR2(2),
  timephasename  VARCHAR2(30),
  standardcount  NUMBER,
  passcount      NUMBER,
  fullrate       NUMBER(5,4),
  datasavelevel  VARCHAR2(3),
  storageorgtype VARCHAR2(3),
  recdate        DATE default SYSDATE
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ROUTEPASSRATE
  is '线路满载率';
comment on column OSECD.JZ_ROUTEPASSRATE.recid
  is 'ID';
comment on column OSECD.JZ_ROUTEPASSRATE.orgid
  is '组织ID';
comment on column OSECD.JZ_ROUTEPASSRATE.routeid
  is '线路ID';
comment on column OSECD.JZ_ROUTEPASSRATE.jzdate
  is '结转日期';
comment on column OSECD.JZ_ROUTEPASSRATE.timephasetype
  is '峰段值';
comment on column OSECD.JZ_ROUTEPASSRATE.timephasename
  is '峰段名称';
comment on column OSECD.JZ_ROUTEPASSRATE.standardcount
  is '核定载客数';
comment on column OSECD.JZ_ROUTEPASSRATE.passcount
  is '实际载客率';
comment on column OSECD.JZ_ROUTEPASSRATE.fullrate
  is '满载率';
comment on column OSECD.JZ_ROUTEPASSRATE.datasavelevel
  is '时间结存级别；1-年，2-月，3-日';
comment on column OSECD.JZ_ROUTEPASSRATE.storageorgtype
  is '组织结存级别；4-线路，其他按照组织级别';
comment on column OSECD.JZ_ROUTEPASSRATE.recdate
  is '记录时间';
create index OSECD.IDX_ROUTEPASSRATE on OSECD.JZ_ROUTEPASSRATE (ROUTEID, JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ROUTEPHASEFSTLSTSTATION
prompt =========================================
prompt
create table OSECD.JZ_ROUTEPHASEFSTLSTSTATION
(
  busrrid        VARCHAR2(36) not null,
  orgid          VARCHAR2(36),
  routeid        VARCHAR2(20),
  jzdate         DATE,
  recdate        DATE,
  memos          VARCHAR2(255),
  intimecount    NUMBER(5),
  latecount      NUMBER(5),
  totalcount     NUMBER(5),
  datasavelevel  VARCHAR2(2),
  storageorgtype CHAR(1),
  routename      VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ROUTEPHASEFSTLSTSTATION
  is '线路首末班站点准点结存';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.busrrid
  is '序号';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.orgid
  is '组织编号';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.routeid
  is '线路';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.jzdate
  is '结存日期';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.recdate
  is '记录时间';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.memos
  is '备注';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.intimecount
  is '准点次数';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.latecount
  is '不准点次数';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.totalcount
  is '总次数';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.storageorgtype
  is '数据结存组织级别1表示总公司结存，2表示分公司结存，3表示车队结存，4表示线路结存';
comment on column OSECD.JZ_ROUTEPHASEFSTLSTSTATION.routename
  is '线路名称';
create index OSECD.IDX_ROUTEPHASEFSTLSTSTATION on OSECD.JZ_ROUTEPHASEFSTLSTSTATION (JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ROUTEPHASESTORAGE
prompt ===================================
prompt
create table OSECD.JZ_ROUTEPHASESTORAGE
(
  recordid               VARCHAR2(36) not null,
  orgid                  VARCHAR2(36),
  orgname                VARCHAR2(60),
  jzdate                 DATE,
  storageroutefirsttype  VARCHAR2(2),
  storageroutefirstname  VARCHAR2(50),
  storageroutesecondtype VARCHAR2(2),
  storageroutesecondname VARCHAR2(50),
  routecount             NUMBER(6),
  routelength            NUMBER(10,2),
  datasavelevel          VARCHAR2(2),
  recdate                DATE default sysdate
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ROUTEPHASESTORAGE
  is '线路信息结存表';
comment on column OSECD.JZ_ROUTEPHASESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_ROUTEPHASESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_ROUTEPHASESTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_ROUTEPHASESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_ROUTEPHASESTORAGE.storageroutefirsttype
  is '线路结存类型一级字典';
comment on column OSECD.JZ_ROUTEPHASESTORAGE.storageroutefirstname
  is '字典名称';
comment on column OSECD.JZ_ROUTEPHASESTORAGE.storageroutesecondtype
  is '线路结存类型二级字典';
comment on column OSECD.JZ_ROUTEPHASESTORAGE.storageroutesecondname
  is '字典名称';
comment on column OSECD.JZ_ROUTEPHASESTORAGE.routecount
  is '线路数量';
comment on column OSECD.JZ_ROUTEPHASESTORAGE.routelength
  is '线路长度（单位KM)';
comment on column OSECD.JZ_ROUTEPHASESTORAGE.datasavelevel
  is '数据结存级别';
create index OSECD.IDX_ROUTESTORAGE on OSECD.JZ_ROUTEPHASESTORAGE (ORGID, JZDATE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ROUTETYPEDAYSTORAGE
prompt =====================================
prompt
create table OSECD.JZ_ROUTETYPEDAYSTORAGE
(
  recordid                VARCHAR2(36) not null,
  orgid                   VARCHAR2(36),
  routeid                 VARCHAR2(20),
  routename               NVARCHAR2(20),
  jzdate                  DATE,
  gpsmiles                NUMBER,
  runmiles                NUMBER,
  unrunmiles              NUMBER,
  buscount                NUMBER,
  busstdcount             NUMBER,
  datasavelevel           VARCHAR2(2),
  recdate                 DATE default sysdate,
  storageorgtype          VARCHAR2(2),
  runtime                 NUMBER default 0,
  storageroutetypefsttype VARCHAR2(2),
  storageroutetypefstname NVARCHAR2(50),
  storageroutetypescdtype VARCHAR2(2),
  storageroutetypescdname NVARCHAR2(50),
  storageroutetypetrdtype VARCHAR2(2),
  storageroutetypetrdname NVARCHAR2(50),
  seqcount                NUMBER
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ROUTETYPEDAYSTORAGE
  is '线路类型日结存表';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.routename
  is '线路名称';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.gpsmiles
  is 'GPS里程';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.runmiles
  is '运营里程';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.unrunmiles
  is '非运营里程';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.buscount
  is '车辆数量';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.busstdcount
  is '车辆标台数';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.datasavelevel
  is '结存级别，1-日，2-月，3-年';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.recdate
  is '记录日期';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.storageorgtype
  is '数据结存组织级别1表示总公司结存，2表示分公司结存，3表示组织结存，4表示线路结存';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.runtime
  is '运营时间';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.storageroutetypefsttype
  is '线路类型一级字典';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.storageroutetypefstname
  is '字典名称';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.storageroutetypescdtype
  is '线路类型二级字典';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.storageroutetypescdname
  is '字典名称';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.storageroutetypetrdtype
  is '线路类型三级字典';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.storageroutetypetrdname
  is '字典名称';
comment on column OSECD.JZ_ROUTETYPEDAYSTORAGE.seqcount
  is '班次数量';
alter table OSECD.JZ_ROUTETYPEDAYSTORAGE
  add constraint PK_ROUTETYPEDAYSTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_ROUTETYPEPHASESTORAGE
prompt =======================================
prompt
create table OSECD.JZ_ROUTETYPEPHASESTORAGE
(
  recordid                VARCHAR2(36) not null,
  orgid                   VARCHAR2(36),
  orgname                 NVARCHAR2(60),
  jzdate                  DATE,
  storageroutetypefsttype VARCHAR2(2),
  storageroutetypefstname NVARCHAR2(50),
  storageroutetypescdtype VARCHAR2(2),
  storageroutetypescdname NVARCHAR2(50),
  routecount              NUMBER(4),
  routelength             NUMBER(8,2),
  datasavelevel           VARCHAR2(2),
  storageorgtype          CHAR(1),
  recdate                 DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_ROUTETYPEPHASESTORAGE
  is '线路类型结存表';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.storageroutetypefsttype
  is '线路类型一级字典';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.storageroutetypefstname
  is '字典名称';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.storageroutetypescdtype
  is '线路类型二级字典';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.storageroutetypescdname
  is '字典名称';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.routecount
  is '线路数量';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.routelength
  is '线路长度(公里)';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_ROUTETYPEPHASESTORAGE.storageorgtype
  is '数据结存组织级别1表示总公司结存，2表示分公司结存，3表示车队结存，4表示线路结存';
create index OSECD.IDX_ROUTETYPESTORAGE on OSECD.JZ_ROUTETYPEPHASESTORAGE (JZDATE, ORGID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_ROUTETYPEPHASESTORAGE
  add constraint PK_ROUTETYPEPHASESTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_RSITEROUTENAME
prompt ================================
prompt
create table OSECD.JZ_RSITEROUTENAME
(
  jz_id      VARCHAR2(36),
  siteid     VARCHAR2(36),
  sitename   VARCHAR2(72),
  routeids   VARCHAR2(4000),
  routenames VARCHAR2(4000),
  jzdate     DATE,
  recdate    DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_RSITEROUTENAME
  is '场站线路名称';
comment on column OSECD.JZ_RSITEROUTENAME.jz_id
  is 'ID';
comment on column OSECD.JZ_RSITEROUTENAME.siteid
  is '场ID';
comment on column OSECD.JZ_RSITEROUTENAME.sitename
  is '场站名称';
comment on column OSECD.JZ_RSITEROUTENAME.routeids
  is '线路ID';
comment on column OSECD.JZ_RSITEROUTENAME.routenames
  is '线路名称';
comment on column OSECD.JZ_RSITEROUTENAME.jzdate
  is '结存日期';
comment on column OSECD.JZ_RSITEROUTENAME.recdate
  is '记录时间';

prompt
prompt Creating table JZ_RSTATIONROUTENAME
prompt ===================================
prompt
create table OSECD.JZ_RSTATIONROUTENAME
(
  jz_id       VARCHAR2(36) not null,
  stationid   VARCHAR2(36),
  stationname VARCHAR2(40),
  routeid     VARCHAR2(4000),
  routename   VARCHAR2(4000)
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_RSTATIONROUTENAME
  is '经过站点线路名称';
comment on column OSECD.JZ_RSTATIONROUTENAME.jz_id
  is 'ID';
comment on column OSECD.JZ_RSTATIONROUTENAME.stationid
  is '站点ID';
comment on column OSECD.JZ_RSTATIONROUTENAME.stationname
  is '站点名称';
comment on column OSECD.JZ_RSTATIONROUTENAME.routeid
  is '合并的ROUTEID';
comment on column OSECD.JZ_RSTATIONROUTENAME.routename
  is '合并的线路名称';
alter table OSECD.JZ_RSTATIONROUTENAME
  add constraint PK_JZRSTATIONROUTENAME primary key (JZ_ID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_RUNMILESTORAGE
prompt ================================
prompt
create table OSECD.JZ_RUNMILESTORAGE
(
  recordid              VARCHAR2(36) not null,
  orgid                 VARCHAR2(36),
  orgname               NVARCHAR2(60),
  routeid               VARCHAR2(36),
  routename             NVARCHAR2(20),
  jzdate                DATE,
  storagerunmilefsttype VARCHAR2(2),
  storagerunmilefstname NVARCHAR2(50),
  storagerunmilescdtype VARCHAR2(2),
  storagerunmilescdname NVARCHAR2(50),
  buscount              NUMBER,
  busstdcount           NUMBER,
  runmiles              NUMBER,
  unrunmiles            NUMBER,
  datasavelevel         VARCHAR2(2),
  storageorgtype        VARCHAR2(2),
  recdate               DATE default SYSDATE
)
partition by range (JZDATE)
(
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_RUNMILESTORAGE
  is '运营里程数据结存表';
comment on column OSECD.JZ_RUNMILESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_RUNMILESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_RUNMILESTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_RUNMILESTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_RUNMILESTORAGE.routename
  is '线路名称';
comment on column OSECD.JZ_RUNMILESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_RUNMILESTORAGE.storagerunmilefsttype
  is '运营里程一级字典';
comment on column OSECD.JZ_RUNMILESTORAGE.storagerunmilefstname
  is '运营里程一级字典名称';
comment on column OSECD.JZ_RUNMILESTORAGE.storagerunmilescdtype
  is '运营里程二级字典';
comment on column OSECD.JZ_RUNMILESTORAGE.storagerunmilescdname
  is '运营里程二级字典名称';
comment on column OSECD.JZ_RUNMILESTORAGE.buscount
  is '车辆数量';
comment on column OSECD.JZ_RUNMILESTORAGE.busstdcount
  is '车辆标台数';
comment on column OSECD.JZ_RUNMILESTORAGE.runmiles
  is '运营里程';
comment on column OSECD.JZ_RUNMILESTORAGE.unrunmiles
  is '预留字段，非运营里程';
comment on column OSECD.JZ_RUNMILESTORAGE.datasavelevel
  is '数据结存级别：1-年，2-月，3-日';
comment on column OSECD.JZ_RUNMILESTORAGE.storageorgtype
  is '组织结存级别';
comment on column OSECD.JZ_RUNMILESTORAGE.recdate
  is '记录时间';
create index OSECD.IX_RUNMILE on OSECD.JZ_RUNMILESTORAGE (JZDATE, DATASAVELEVEL, STORAGEORGTYPE)
  local;
alter table OSECD.JZ_RUNMILESTORAGE
  add constraint PK_RUNMILE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_SAFETYEVENTINFO
prompt =================================
prompt
create table OSECD.JZ_SAFETYEVENTINFO
(
  recordid                    NVARCHAR2(36) not null,
  orgid                       VARCHAR2(36) not null,
  orgname                     NVARCHAR2(60),
  routeid                     VARCHAR2(20),
  routename                   NVARCHAR2(20),
  jzdate                      DATE,
  accidenttype                VARCHAR2(2),
  accidenttypename            NVARCHAR2(50),
  dutyaccidentcount           NUMBER(4),
  nondutyaccidentcount        NUMBER(4),
  dutyaccidentdeathcount      NUMBER(4),
  nondutyaccidentdeathcount   NUMBER(4),
  dutyaccidentinjurecount     NUMBER(4),
  nondutyaccidentinjurecount  NUMBER(4),
  dutyaccidenteconomicloss    NUMBER(6,2),
  nondutyaccidenteconomicloss NUMBER(6,2),
  datasavelevel               VARCHAR2(2),
  recdate                     DATE default sysdate,
  storageorgtype              VARCHAR2(2)
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_SAFETYEVENTINFO
  is '安全状态事件数据';
comment on column OSECD.JZ_SAFETYEVENTINFO.recordid
  is '记录ID';
comment on column OSECD.JZ_SAFETYEVENTINFO.orgid
  is '组织编号';
comment on column OSECD.JZ_SAFETYEVENTINFO.orgname
  is '组织名称';
comment on column OSECD.JZ_SAFETYEVENTINFO.routeid
  is '线路编号';
comment on column OSECD.JZ_SAFETYEVENTINFO.routename
  is '线路名称';
comment on column OSECD.JZ_SAFETYEVENTINFO.jzdate
  is '结存日期';
comment on column OSECD.JZ_SAFETYEVENTINFO.accidenttype
  is '事件字典类型(行车事故、车内事件、其它事件等)';
comment on column OSECD.JZ_SAFETYEVENTINFO.accidenttypename
  is '字典名称';
comment on column OSECD.JZ_SAFETYEVENTINFO.dutyaccidentcount
  is '责任事故次数';
comment on column OSECD.JZ_SAFETYEVENTINFO.nondutyaccidentcount
  is '非责任事故次数';
comment on column OSECD.JZ_SAFETYEVENTINFO.dutyaccidentdeathcount
  is '责任事故死亡人数';
comment on column OSECD.JZ_SAFETYEVENTINFO.nondutyaccidentdeathcount
  is '非责任事故死亡人数';
comment on column OSECD.JZ_SAFETYEVENTINFO.dutyaccidentinjurecount
  is '行车责任事故受伤人数';
comment on column OSECD.JZ_SAFETYEVENTINFO.nondutyaccidentinjurecount
  is '非责任事故受伤人数';
comment on column OSECD.JZ_SAFETYEVENTINFO.dutyaccidenteconomicloss
  is '行车责任事故经济损失(万元)';
comment on column OSECD.JZ_SAFETYEVENTINFO.nondutyaccidenteconomicloss
  is '非责任事故经济损失(万元)';
comment on column OSECD.JZ_SAFETYEVENTINFO.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_SAFETYEVENTINFO.storageorgtype
  is '组织结存级别';
alter table OSECD.JZ_SAFETYEVENTINFO
  add constraint PK_SAFETYEVENTINFO primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_SAFETYSTANDARD
prompt ================================
prompt
create table OSECD.JZ_SAFETYSTANDARD
(
  recordid           VARCHAR2(36) not null,
  orgid              VARCHAR2(36),
  orgname            NVARCHAR2(60),
  routeid            VARCHAR2(36),
  routename          NVARCHAR2(20),
  jzdate             DATE,
  safetystandardtype VARCHAR2(2),
  safetystandardname VARCHAR2(50),
  peccancycount      NUMBER,
  storageorgtype     VARCHAR2(2),
  datasavelevel      VARCHAR2(2),
  recdate            DATE default sysdate
)
partition by range (JZDATE)
(
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_SAFETYSTANDARD
  is '安全运营规范数据结存表';
comment on column OSECD.JZ_SAFETYSTANDARD.recordid
  is '记录编号';
comment on column OSECD.JZ_SAFETYSTANDARD.orgid
  is '组织编号';
comment on column OSECD.JZ_SAFETYSTANDARD.orgname
  is '组织名称';
comment on column OSECD.JZ_SAFETYSTANDARD.routeid
  is '线路编号';
comment on column OSECD.JZ_SAFETYSTANDARD.routename
  is '线路名称';
comment on column OSECD.JZ_SAFETYSTANDARD.jzdate
  is '结存日期';
comment on column OSECD.JZ_SAFETYSTANDARD.safetystandardtype
  is '违反安全规范类型';
comment on column OSECD.JZ_SAFETYSTANDARD.safetystandardname
  is '违反安全规范名称';
comment on column OSECD.JZ_SAFETYSTANDARD.peccancycount
  is '违反次数';
comment on column OSECD.JZ_SAFETYSTANDARD.storageorgtype
  is '组织结存级别';
comment on column OSECD.JZ_SAFETYSTANDARD.datasavelevel
  is '日期结存级别';
comment on column OSECD.JZ_SAFETYSTANDARD.recdate
  is '记录时间';
create index OSECD.IX_SAFETYSTANDARDJZ on OSECD.JZ_SAFETYSTANDARD (JZDATE, STORAGEORGTYPE, DATASAVELEVEL)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_SAFETYSTANDARD
  add constraint PK_SAFETYSTANDARDJZ primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_SITEPHASESTORAGE
prompt ==================================
prompt
create table OSECD.JZ_SITEPHASESTORAGE
(
  recordid              VARCHAR2(36) not null,
  orgid                 VARCHAR2(36),
  orgname               NVARCHAR2(60),
  jzdate                DATE,
  storagesitefirsttype  VARCHAR2(2),
  storagesitefirstname  NVARCHAR2(50),
  storagesitesecondtype VARCHAR2(36),
  storagesitesecondname NVARCHAR2(50),
  statistictype         VARCHAR2(2),
  statisticname         NVARCHAR2(50),
  sitecount             NUMBER(4),
  siteacre              NUMBER(8,2),
  sitecapability        NUMBER(8),
  siterequrementcount   NUMBER(8),
  datasavelevel         VARCHAR2(2),
  recdate               DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_SITEPHASESTORAGE
  is '场站数据结存表';
comment on column OSECD.JZ_SITEPHASESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_SITEPHASESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_SITEPHASESTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_SITEPHASESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_SITEPHASESTORAGE.storagesitefirsttype
  is '场站结存类型一级字典';
comment on column OSECD.JZ_SITEPHASESTORAGE.storagesitefirstname
  is '字典名称';
comment on column OSECD.JZ_SITEPHASESTORAGE.storagesitesecondtype
  is '场站结存类型二级字典';
comment on column OSECD.JZ_SITEPHASESTORAGE.storagesitesecondname
  is '字典名称';
comment on column OSECD.JZ_SITEPHASESTORAGE.statistictype
  is '场站结存方式';
comment on column OSECD.JZ_SITEPHASESTORAGE.statisticname
  is '字典名称';
comment on column OSECD.JZ_SITEPHASESTORAGE.sitecount
  is '场站数量';
comment on column OSECD.JZ_SITEPHASESTORAGE.siteacre
  is '场站面积(平方米)';
comment on column OSECD.JZ_SITEPHASESTORAGE.sitecapability
  is '场站供应能力(辆)';
comment on column OSECD.JZ_SITEPHASESTORAGE.siterequrementcount
  is '场站需求量(辆)';
comment on column OSECD.JZ_SITEPHASESTORAGE.datasavelevel
  is '数据结存级别';
create index OSECD.IDX_SITEBASESTORAGE on OSECD.JZ_SITEPHASESTORAGE (JZDATE, STORAGESITEFIRSTTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_SITEPHASESTORAGE
  add constraint PK_SITEPHASESTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_SOFTPHASESTORAGE
prompt ==================================
prompt
create table OSECD.JZ_SOFTPHASESTORAGE
(
  recordid           VARCHAR2(36) not null,
  orgid              VARCHAR2(36),
  orgname            NVARCHAR2(60),
  jzdate             DATE,
  storagesoftfsttype VARCHAR2(2),
  storagesoftfstname NVARCHAR2(50),
  storagesoftscdtype VARCHAR2(2),
  storagesofscdtname NVARCHAR2(50),
  softcount          NUMBER(4),
  datasavelevel      VARCHAR2(4),
  recdate            DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_SOFTPHASESTORAGE
  is '设备设施数据结存表';
comment on column OSECD.JZ_SOFTPHASESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_SOFTPHASESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_SOFTPHASESTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_SOFTPHASESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_SOFTPHASESTORAGE.storagesoftfsttype
  is '软件结存类型一级字典';
comment on column OSECD.JZ_SOFTPHASESTORAGE.storagesoftfstname
  is '字典名称';
comment on column OSECD.JZ_SOFTPHASESTORAGE.storagesoftscdtype
  is '软件结存类型二级字典';
comment on column OSECD.JZ_SOFTPHASESTORAGE.storagesofscdtname
  is '字典名称';
comment on column OSECD.JZ_SOFTPHASESTORAGE.softcount
  is '软件数量';
comment on column OSECD.JZ_SOFTPHASESTORAGE.datasavelevel
  is '数据结存级别';
create index OSECD.IDX_SOFTPHASESTORAGE on OSECD.JZ_SOFTPHASESTORAGE (JZDATE, STORAGESOFTFSTTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_SOFTPHASESTORAGE
  add constraint PK_SOFTPHASESTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_STAINTERSPEED
prompt ===============================
prompt
create table OSECD.JZ_STAINTERSPEED
(
  recordid      VARCHAR2(36) not null,
  routeid       VARCHAR2(36),
  bussid        VARCHAR2(2),
  stationno     VARCHAR2(10),
  nextstano     VARCHAR2(10),
  starttime     NUMBER,
  endtime       NUMBER,
  runtimes      NUMBER,
  runmiles      NUMBER,
  datasavelevel VARCHAR2(2),
  jzdate        DATE,
  recdate       DATE default sysdate,
  sendtimes     NUMBER,
  sendmiles     NUMBER,
  sendspeed     NUMBER,
  avgspeed      NUMBER
)
partition by range (JZDATE)
(
  partition P_201201 values less than (TO_DATE(' 2012-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201202 values less than (TO_DATE(' 2012-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201203 values less than (TO_DATE(' 2012-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201204 values less than (TO_DATE(' 2012-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201205 values less than (TO_DATE(' 2012-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201206 values less than (TO_DATE(' 2012-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201207 values less than (TO_DATE(' 2012-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201208 values less than (TO_DATE(' 2012-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201209 values less than (TO_DATE(' 2012-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201210 values less than (TO_DATE(' 2012-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201211 values less than (TO_DATE(' 2012-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201212 values less than (TO_DATE(' 2013-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201301 values less than (TO_DATE(' 2013-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201302 values less than (TO_DATE(' 2013-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201303 values less than (TO_DATE(' 2013-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201304 values less than (TO_DATE(' 2013-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201305 values less than (TO_DATE(' 2013-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201306 values less than (TO_DATE(' 2013-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201307 values less than (TO_DATE(' 2013-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201308 values less than (TO_DATE(' 2013-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201309 values less than (TO_DATE(' 2013-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201310 values less than (TO_DATE(' 2013-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201311 values less than (TO_DATE(' 2013-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201312 values less than (TO_DATE(' 2014-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201401 values less than (TO_DATE(' 2014-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201402 values less than (TO_DATE(' 2014-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201403 values less than (TO_DATE(' 2014-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201404 values less than (TO_DATE(' 2014-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201405 values less than (TO_DATE(' 2014-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201406 values less than (TO_DATE(' 2014-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201407 values less than (TO_DATE(' 2014-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201408 values less than (TO_DATE(' 2014-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201409 values less than (TO_DATE(' 2014-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201410 values less than (TO_DATE(' 2014-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201411 values less than (TO_DATE(' 2014-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201412 values less than (TO_DATE(' 2015-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201501 values less than (TO_DATE(' 2015-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201502 values less than (TO_DATE(' 2015-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201503 values less than (TO_DATE(' 2015-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201504 values less than (TO_DATE(' 2015-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201505 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201506 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150701 values less than (TO_DATE(' 2015-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150702 values less than (TO_DATE(' 2015-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150703 values less than (TO_DATE(' 2015-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150704 values less than (TO_DATE(' 2015-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150705 values less than (TO_DATE(' 2015-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150706 values less than (TO_DATE(' 2015-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150707 values less than (TO_DATE(' 2015-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150708 values less than (TO_DATE(' 2015-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150709 values less than (TO_DATE(' 2015-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150710 values less than (TO_DATE(' 2015-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150711 values less than (TO_DATE(' 2015-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150712 values less than (TO_DATE(' 2015-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150713 values less than (TO_DATE(' 2015-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150714 values less than (TO_DATE(' 2015-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150715 values less than (TO_DATE(' 2015-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150716 values less than (TO_DATE(' 2015-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150717 values less than (TO_DATE(' 2015-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150718 values less than (TO_DATE(' 2015-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150719 values less than (TO_DATE(' 2015-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150720 values less than (TO_DATE(' 2015-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150721 values less than (TO_DATE(' 2015-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150722 values less than (TO_DATE(' 2015-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150723 values less than (TO_DATE(' 2015-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150724 values less than (TO_DATE(' 2015-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150725 values less than (TO_DATE(' 2015-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150726 values less than (TO_DATE(' 2015-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150727 values less than (TO_DATE(' 2015-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150728 values less than (TO_DATE(' 2015-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150729 values less than (TO_DATE(' 2015-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150730 values less than (TO_DATE(' 2015-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150731 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150801 values less than (TO_DATE(' 2015-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150802 values less than (TO_DATE(' 2015-08-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150803 values less than (TO_DATE(' 2015-08-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150804 values less than (TO_DATE(' 2015-08-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150805 values less than (TO_DATE(' 2015-08-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150806 values less than (TO_DATE(' 2015-08-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150807 values less than (TO_DATE(' 2015-08-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150808 values less than (TO_DATE(' 2015-08-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150809 values less than (TO_DATE(' 2015-08-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150810 values less than (TO_DATE(' 2015-08-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150811 values less than (TO_DATE(' 2015-08-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150812 values less than (TO_DATE(' 2015-08-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150813 values less than (TO_DATE(' 2015-08-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150814 values less than (TO_DATE(' 2015-08-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150815 values less than (TO_DATE(' 2015-08-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150816 values less than (TO_DATE(' 2015-08-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150817 values less than (TO_DATE(' 2015-08-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150818 values less than (TO_DATE(' 2015-08-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150819 values less than (TO_DATE(' 2015-08-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150820 values less than (TO_DATE(' 2015-08-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150821 values less than (TO_DATE(' 2015-08-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150822 values less than (TO_DATE(' 2015-08-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150823 values less than (TO_DATE(' 2015-08-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150824 values less than (TO_DATE(' 2015-08-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150825 values less than (TO_DATE(' 2015-08-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150826 values less than (TO_DATE(' 2015-08-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150827 values less than (TO_DATE(' 2015-08-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150828 values less than (TO_DATE(' 2015-08-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150829 values less than (TO_DATE(' 2015-08-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150830 values less than (TO_DATE(' 2015-08-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150831 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150901 values less than (TO_DATE(' 2015-09-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150902 values less than (TO_DATE(' 2015-09-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150903 values less than (TO_DATE(' 2015-09-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150904 values less than (TO_DATE(' 2015-09-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150905 values less than (TO_DATE(' 2015-09-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150906 values less than (TO_DATE(' 2015-09-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150907 values less than (TO_DATE(' 2015-09-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150908 values less than (TO_DATE(' 2015-09-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150909 values less than (TO_DATE(' 2015-09-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150910 values less than (TO_DATE(' 2015-09-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150911 values less than (TO_DATE(' 2015-09-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150912 values less than (TO_DATE(' 2015-09-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150913 values less than (TO_DATE(' 2015-09-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150914 values less than (TO_DATE(' 2015-09-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150915 values less than (TO_DATE(' 2015-09-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150916 values less than (TO_DATE(' 2015-09-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150917 values less than (TO_DATE(' 2015-09-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150918 values less than (TO_DATE(' 2015-09-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150919 values less than (TO_DATE(' 2015-09-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150920 values less than (TO_DATE(' 2015-09-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150921 values less than (TO_DATE(' 2015-09-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150922 values less than (TO_DATE(' 2015-09-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150923 values less than (TO_DATE(' 2015-09-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150924 values less than (TO_DATE(' 2015-09-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150925 values less than (TO_DATE(' 2015-09-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150926 values less than (TO_DATE(' 2015-09-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150927 values less than (TO_DATE(' 2015-09-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150928 values less than (TO_DATE(' 2015-09-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150929 values less than (TO_DATE(' 2015-09-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150930 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151001 values less than (TO_DATE(' 2015-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151002 values less than (TO_DATE(' 2015-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151003 values less than (TO_DATE(' 2015-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151004 values less than (TO_DATE(' 2015-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151005 values less than (TO_DATE(' 2015-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151006 values less than (TO_DATE(' 2015-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151007 values less than (TO_DATE(' 2015-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151008 values less than (TO_DATE(' 2015-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151009 values less than (TO_DATE(' 2015-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151010 values less than (TO_DATE(' 2015-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151011 values less than (TO_DATE(' 2015-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151012 values less than (TO_DATE(' 2015-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151013 values less than (TO_DATE(' 2015-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151014 values less than (TO_DATE(' 2015-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151015 values less than (TO_DATE(' 2015-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151016 values less than (TO_DATE(' 2015-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151017 values less than (TO_DATE(' 2015-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151018 values less than (TO_DATE(' 2015-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151019 values less than (TO_DATE(' 2015-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151020 values less than (TO_DATE(' 2015-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151021 values less than (TO_DATE(' 2015-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151022 values less than (TO_DATE(' 2015-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151023 values less than (TO_DATE(' 2015-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151024 values less than (TO_DATE(' 2015-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151025 values less than (TO_DATE(' 2015-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151026 values less than (TO_DATE(' 2015-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151027 values less than (TO_DATE(' 2015-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151028 values less than (TO_DATE(' 2015-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151029 values less than (TO_DATE(' 2015-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151030 values less than (TO_DATE(' 2015-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151031 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151101 values less than (TO_DATE(' 2015-11-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151102 values less than (TO_DATE(' 2015-11-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151103 values less than (TO_DATE(' 2015-11-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151104 values less than (TO_DATE(' 2015-11-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151105 values less than (TO_DATE(' 2015-11-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151106 values less than (TO_DATE(' 2015-11-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151107 values less than (TO_DATE(' 2015-11-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151108 values less than (TO_DATE(' 2015-11-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151109 values less than (TO_DATE(' 2015-11-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151110 values less than (TO_DATE(' 2015-11-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151111 values less than (TO_DATE(' 2015-11-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151112 values less than (TO_DATE(' 2015-11-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151113 values less than (TO_DATE(' 2015-11-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151114 values less than (TO_DATE(' 2015-11-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151115 values less than (TO_DATE(' 2015-11-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151116 values less than (TO_DATE(' 2015-11-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151117 values less than (TO_DATE(' 2015-11-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151118 values less than (TO_DATE(' 2015-11-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151119 values less than (TO_DATE(' 2015-11-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151120 values less than (TO_DATE(' 2015-11-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151121 values less than (TO_DATE(' 2015-11-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151122 values less than (TO_DATE(' 2015-11-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151123 values less than (TO_DATE(' 2015-11-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151124 values less than (TO_DATE(' 2015-11-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151125 values less than (TO_DATE(' 2015-11-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151126 values less than (TO_DATE(' 2015-11-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151127 values less than (TO_DATE(' 2015-11-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151128 values less than (TO_DATE(' 2015-11-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151129 values less than (TO_DATE(' 2015-11-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151130 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151201 values less than (TO_DATE(' 2015-12-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151202 values less than (TO_DATE(' 2015-12-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151203 values less than (TO_DATE(' 2015-12-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151204 values less than (TO_DATE(' 2015-12-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151205 values less than (TO_DATE(' 2015-12-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151206 values less than (TO_DATE(' 2015-12-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151207 values less than (TO_DATE(' 2015-12-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151208 values less than (TO_DATE(' 2015-12-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151209 values less than (TO_DATE(' 2015-12-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151210 values less than (TO_DATE(' 2015-12-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151211 values less than (TO_DATE(' 2015-12-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151212 values less than (TO_DATE(' 2015-12-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151213 values less than (TO_DATE(' 2015-12-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151214 values less than (TO_DATE(' 2015-12-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151215 values less than (TO_DATE(' 2015-12-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151216 values less than (TO_DATE(' 2015-12-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151217 values less than (TO_DATE(' 2015-12-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151218 values less than (TO_DATE(' 2015-12-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151219 values less than (TO_DATE(' 2015-12-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151220 values less than (TO_DATE(' 2015-12-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151221 values less than (TO_DATE(' 2015-12-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151222 values less than (TO_DATE(' 2015-12-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151223 values less than (TO_DATE(' 2015-12-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151224 values less than (TO_DATE(' 2015-12-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151225 values less than (TO_DATE(' 2015-12-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151226 values less than (TO_DATE(' 2015-12-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151227 values less than (TO_DATE(' 2015-12-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151228 values less than (TO_DATE(' 2015-12-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151229 values less than (TO_DATE(' 2015-12-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151230 values less than (TO_DATE(' 2015-12-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151231 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160101 values less than (TO_DATE(' 2016-01-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160102 values less than (TO_DATE(' 2016-01-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160103 values less than (TO_DATE(' 2016-01-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160104 values less than (TO_DATE(' 2016-01-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160105 values less than (TO_DATE(' 2016-01-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160106 values less than (TO_DATE(' 2016-01-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160107 values less than (TO_DATE(' 2016-01-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160108 values less than (TO_DATE(' 2016-01-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160109 values less than (TO_DATE(' 2016-01-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160110 values less than (TO_DATE(' 2016-01-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160111 values less than (TO_DATE(' 2016-01-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160112 values less than (TO_DATE(' 2016-01-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160113 values less than (TO_DATE(' 2016-01-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160114 values less than (TO_DATE(' 2016-01-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160115 values less than (TO_DATE(' 2016-01-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160116 values less than (TO_DATE(' 2016-01-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160117 values less than (TO_DATE(' 2016-01-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160118 values less than (TO_DATE(' 2016-01-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160119 values less than (TO_DATE(' 2016-01-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160120 values less than (TO_DATE(' 2016-01-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160121 values less than (TO_DATE(' 2016-01-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160122 values less than (TO_DATE(' 2016-01-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160123 values less than (TO_DATE(' 2016-01-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160124 values less than (TO_DATE(' 2016-01-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160125 values less than (TO_DATE(' 2016-01-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160126 values less than (TO_DATE(' 2016-01-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160127 values less than (TO_DATE(' 2016-01-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160128 values less than (TO_DATE(' 2016-01-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160129 values less than (TO_DATE(' 2016-01-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160130 values less than (TO_DATE(' 2016-01-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160131 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160201 values less than (TO_DATE(' 2016-02-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160202 values less than (TO_DATE(' 2016-02-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160203 values less than (TO_DATE(' 2016-02-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160204 values less than (TO_DATE(' 2016-02-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160205 values less than (TO_DATE(' 2016-02-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160206 values less than (TO_DATE(' 2016-02-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160207 values less than (TO_DATE(' 2016-02-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160208 values less than (TO_DATE(' 2016-02-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160209 values less than (TO_DATE(' 2016-02-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160210 values less than (TO_DATE(' 2016-02-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160211 values less than (TO_DATE(' 2016-02-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160212 values less than (TO_DATE(' 2016-02-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160213 values less than (TO_DATE(' 2016-02-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160214 values less than (TO_DATE(' 2016-02-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160215 values less than (TO_DATE(' 2016-02-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160216 values less than (TO_DATE(' 2016-02-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160217 values less than (TO_DATE(' 2016-02-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160218 values less than (TO_DATE(' 2016-02-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160219 values less than (TO_DATE(' 2016-02-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160220 values less than (TO_DATE(' 2016-02-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160221 values less than (TO_DATE(' 2016-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160222 values less than (TO_DATE(' 2016-02-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160223 values less than (TO_DATE(' 2016-02-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160224 values less than (TO_DATE(' 2016-02-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160225 values less than (TO_DATE(' 2016-02-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160226 values less than (TO_DATE(' 2016-02-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160227 values less than (TO_DATE(' 2016-02-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160228 values less than (TO_DATE(' 2016-02-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160229 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160301 values less than (TO_DATE(' 2016-03-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160302 values less than (TO_DATE(' 2016-03-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160303 values less than (TO_DATE(' 2016-03-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160304 values less than (TO_DATE(' 2016-03-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160305 values less than (TO_DATE(' 2016-03-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160306 values less than (TO_DATE(' 2016-03-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160307 values less than (TO_DATE(' 2016-03-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160308 values less than (TO_DATE(' 2016-03-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160309 values less than (TO_DATE(' 2016-03-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160310 values less than (TO_DATE(' 2016-03-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160311 values less than (TO_DATE(' 2016-03-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160312 values less than (TO_DATE(' 2016-03-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160313 values less than (TO_DATE(' 2016-03-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160314 values less than (TO_DATE(' 2016-03-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160315 values less than (TO_DATE(' 2016-03-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160316 values less than (TO_DATE(' 2016-03-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160317 values less than (TO_DATE(' 2016-03-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160318 values less than (TO_DATE(' 2016-03-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160319 values less than (TO_DATE(' 2016-03-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160320 values less than (TO_DATE(' 2016-03-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160321 values less than (TO_DATE(' 2016-03-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160322 values less than (TO_DATE(' 2016-03-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160323 values less than (TO_DATE(' 2016-03-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160324 values less than (TO_DATE(' 2016-03-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160325 values less than (TO_DATE(' 2016-03-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160326 values less than (TO_DATE(' 2016-03-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160327 values less than (TO_DATE(' 2016-03-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160328 values less than (TO_DATE(' 2016-03-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160329 values less than (TO_DATE(' 2016-03-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160330 values less than (TO_DATE(' 2016-03-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160331 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160401 values less than (TO_DATE(' 2016-04-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160402 values less than (TO_DATE(' 2016-04-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160403 values less than (TO_DATE(' 2016-04-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160404 values less than (TO_DATE(' 2016-04-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160405 values less than (TO_DATE(' 2016-04-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160406 values less than (TO_DATE(' 2016-04-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160407 values less than (TO_DATE(' 2016-04-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160408 values less than (TO_DATE(' 2016-04-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160409 values less than (TO_DATE(' 2016-04-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160410 values less than (TO_DATE(' 2016-04-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160411 values less than (TO_DATE(' 2016-04-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160412 values less than (TO_DATE(' 2016-04-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160413 values less than (TO_DATE(' 2016-04-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160414 values less than (TO_DATE(' 2016-04-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160415 values less than (TO_DATE(' 2016-04-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160416 values less than (TO_DATE(' 2016-04-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160417 values less than (TO_DATE(' 2016-04-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160418 values less than (TO_DATE(' 2016-04-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160419 values less than (TO_DATE(' 2016-04-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160420 values less than (TO_DATE(' 2016-04-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160421 values less than (TO_DATE(' 2016-04-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160422 values less than (TO_DATE(' 2016-04-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160423 values less than (TO_DATE(' 2016-04-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160424 values less than (TO_DATE(' 2016-04-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160425 values less than (TO_DATE(' 2016-04-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160426 values less than (TO_DATE(' 2016-04-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160427 values less than (TO_DATE(' 2016-04-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160428 values less than (TO_DATE(' 2016-04-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160429 values less than (TO_DATE(' 2016-04-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160430 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160501 values less than (TO_DATE(' 2016-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160502 values less than (TO_DATE(' 2016-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160503 values less than (TO_DATE(' 2016-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160504 values less than (TO_DATE(' 2016-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160505 values less than (TO_DATE(' 2016-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160506 values less than (TO_DATE(' 2016-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160507 values less than (TO_DATE(' 2016-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160508 values less than (TO_DATE(' 2016-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160509 values less than (TO_DATE(' 2016-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160510 values less than (TO_DATE(' 2016-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160511 values less than (TO_DATE(' 2016-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160512 values less than (TO_DATE(' 2016-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160513 values less than (TO_DATE(' 2016-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160514 values less than (TO_DATE(' 2016-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160515 values less than (TO_DATE(' 2016-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160516 values less than (TO_DATE(' 2016-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160517 values less than (TO_DATE(' 2016-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160518 values less than (TO_DATE(' 2016-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160519 values less than (TO_DATE(' 2016-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160520 values less than (TO_DATE(' 2016-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160521 values less than (TO_DATE(' 2016-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160522 values less than (TO_DATE(' 2016-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160523 values less than (TO_DATE(' 2016-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160524 values less than (TO_DATE(' 2016-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160525 values less than (TO_DATE(' 2016-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160526 values less than (TO_DATE(' 2016-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160527 values less than (TO_DATE(' 2016-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160528 values less than (TO_DATE(' 2016-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160529 values less than (TO_DATE(' 2016-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160530 values less than (TO_DATE(' 2016-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160531 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160601 values less than (TO_DATE(' 2016-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160602 values less than (TO_DATE(' 2016-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160603 values less than (TO_DATE(' 2016-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160604 values less than (TO_DATE(' 2016-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160605 values less than (TO_DATE(' 2016-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160606 values less than (TO_DATE(' 2016-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160607 values less than (TO_DATE(' 2016-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160608 values less than (TO_DATE(' 2016-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160609 values less than (TO_DATE(' 2016-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160610 values less than (TO_DATE(' 2016-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160611 values less than (TO_DATE(' 2016-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160612 values less than (TO_DATE(' 2016-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160613 values less than (TO_DATE(' 2016-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160614 values less than (TO_DATE(' 2016-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160615 values less than (TO_DATE(' 2016-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160616 values less than (TO_DATE(' 2016-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160617 values less than (TO_DATE(' 2016-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160618 values less than (TO_DATE(' 2016-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160619 values less than (TO_DATE(' 2016-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160620 values less than (TO_DATE(' 2016-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160621 values less than (TO_DATE(' 2016-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160622 values less than (TO_DATE(' 2016-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160623 values less than (TO_DATE(' 2016-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160624 values less than (TO_DATE(' 2016-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160625 values less than (TO_DATE(' 2016-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160626 values less than (TO_DATE(' 2016-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160627 values less than (TO_DATE(' 2016-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160628 values less than (TO_DATE(' 2016-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160629 values less than (TO_DATE(' 2016-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160630 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160701 values less than (TO_DATE(' 2016-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160702 values less than (TO_DATE(' 2016-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160703 values less than (TO_DATE(' 2016-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160704 values less than (TO_DATE(' 2016-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160705 values less than (TO_DATE(' 2016-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160706 values less than (TO_DATE(' 2016-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160707 values less than (TO_DATE(' 2016-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160708 values less than (TO_DATE(' 2016-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160709 values less than (TO_DATE(' 2016-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160710 values less than (TO_DATE(' 2016-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160711 values less than (TO_DATE(' 2016-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160712 values less than (TO_DATE(' 2016-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160713 values less than (TO_DATE(' 2016-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160714 values less than (TO_DATE(' 2016-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160715 values less than (TO_DATE(' 2016-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160716 values less than (TO_DATE(' 2016-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160717 values less than (TO_DATE(' 2016-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160718 values less than (TO_DATE(' 2016-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160719 values less than (TO_DATE(' 2016-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160720 values less than (TO_DATE(' 2016-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160721 values less than (TO_DATE(' 2016-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160722 values less than (TO_DATE(' 2016-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160723 values less than (TO_DATE(' 2016-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160724 values less than (TO_DATE(' 2016-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160725 values less than (TO_DATE(' 2016-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160726 values less than (TO_DATE(' 2016-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160727 values less than (TO_DATE(' 2016-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160728 values less than (TO_DATE(' 2016-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160729 values less than (TO_DATE(' 2016-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160730 values less than (TO_DATE(' 2016-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160731 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161001 values less than (TO_DATE(' 2016-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161002 values less than (TO_DATE(' 2016-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161003 values less than (TO_DATE(' 2016-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161004 values less than (TO_DATE(' 2016-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161005 values less than (TO_DATE(' 2016-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161006 values less than (TO_DATE(' 2016-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161007 values less than (TO_DATE(' 2016-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161008 values less than (TO_DATE(' 2016-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161009 values less than (TO_DATE(' 2016-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161010 values less than (TO_DATE(' 2016-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161011 values less than (TO_DATE(' 2016-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161012 values less than (TO_DATE(' 2016-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161013 values less than (TO_DATE(' 2016-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161014 values less than (TO_DATE(' 2016-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161015 values less than (TO_DATE(' 2016-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161016 values less than (TO_DATE(' 2016-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161017 values less than (TO_DATE(' 2016-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161018 values less than (TO_DATE(' 2016-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161019 values less than (TO_DATE(' 2016-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161020 values less than (TO_DATE(' 2016-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161021 values less than (TO_DATE(' 2016-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161022 values less than (TO_DATE(' 2016-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161023 values less than (TO_DATE(' 2016-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161024 values less than (TO_DATE(' 2016-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161025 values less than (TO_DATE(' 2016-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161026 values less than (TO_DATE(' 2016-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161027 values less than (TO_DATE(' 2016-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161028 values less than (TO_DATE(' 2016-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161029 values less than (TO_DATE(' 2016-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161030 values less than (TO_DATE(' 2016-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161031 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_STAINTERSPEED
  is '站点之间时段速度数据结存';
comment on column OSECD.JZ_STAINTERSPEED.recordid
  is '记录编号';
comment on column OSECD.JZ_STAINTERSPEED.routeid
  is '线路编号';
comment on column OSECD.JZ_STAINTERSPEED.bussid
  is '车次类型（对应字典BUSSID,4-上行，5-下行，6-环行）';
comment on column OSECD.JZ_STAINTERSPEED.stationno
  is '本站站点统一编号';
comment on column OSECD.JZ_STAINTERSPEED.nextstano
  is '下站站点统一编号';
comment on column OSECD.JZ_STAINTERSPEED.starttime
  is '时段开始时间（相对于0点分钟数，取整数）';
comment on column OSECD.JZ_STAINTERSPEED.endtime
  is '时段结束时间（相对于0点分钟数，取整数）';
comment on column OSECD.JZ_STAINTERSPEED.runtimes
  is '运营时间（分钟）';
comment on column OSECD.JZ_STAINTERSPEED.runmiles
  is '运营里程（米）';
comment on column OSECD.JZ_STAINTERSPEED.datasavelevel
  is '数据结存级别（预留字段，1-年，2-月，3-日；目前只结存到日）';
comment on column OSECD.JZ_STAINTERSPEED.jzdate
  is '结存日期';
comment on column OSECD.JZ_STAINTERSPEED.recdate
  is '记录时间';
comment on column OSECD.JZ_STAINTERSPEED.sendtimes
  is '运送时间（分钟）';
comment on column OSECD.JZ_STAINTERSPEED.sendmiles
  is '运送里程（米）';
comment on column OSECD.JZ_STAINTERSPEED.sendspeed
  is '运送速度';
comment on column OSECD.JZ_STAINTERSPEED.avgspeed
  is '运营速度';
create index OSECD.IX_STAINTERSPEED3 on OSECD.JZ_STAINTERSPEED (ROUTEID, STATIONNO, NEXTSTANO, JZDATE)
  local;
create index OSECD.IX_STAINTERSPEED4 on OSECD.JZ_STAINTERSPEED (JZDATE, STARTTIME, ENDTIME)
  local;
alter table OSECD.JZ_STAINTERSPEED
  add constraint PK_STAINTERSPEED primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_STAINTERSPEED_NOW
prompt ===================================
prompt
create table OSECD.JZ_STAINTERSPEED_NOW
(
  recordid    VARCHAR2(36) not null,
  routeid     VARCHAR2(36),
  stationno   VARCHAR2(10),
  nextstano   VARCHAR2(10),
  actdatetime DATE default sysdate,
  runtimes    NUMBER,
  runmiles    NUMBER,
  runspeed    NUMBER,
  recdate     DATE default sysdate
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_STAINTERSPEED_NOW
  is '站点之间实时速度';
comment on column OSECD.JZ_STAINTERSPEED_NOW.recordid
  is '记录编号';
comment on column OSECD.JZ_STAINTERSPEED_NOW.routeid
  is '线路编号';
comment on column OSECD.JZ_STAINTERSPEED_NOW.stationno
  is '本站站点统一编号';
comment on column OSECD.JZ_STAINTERSPEED_NOW.nextstano
  is '下站站点统一编号';
comment on column OSECD.JZ_STAINTERSPEED_NOW.actdatetime
  is '业务时间';
comment on column OSECD.JZ_STAINTERSPEED_NOW.runtimes
  is '运营时间（分钟）';
comment on column OSECD.JZ_STAINTERSPEED_NOW.runmiles
  is '运营里程（米）';
comment on column OSECD.JZ_STAINTERSPEED_NOW.runspeed
  is '运营速度';
comment on column OSECD.JZ_STAINTERSPEED_NOW.recdate
  is '记录时间';
create index OSECD.IX_STAINTERSPEED_NOW on OSECD.JZ_STAINTERSPEED_NOW (STATIONNO, NEXTSTANO, RECDATE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_STAINTERSPEED_NOW
  add constraint PK_STAINTERSPEED_NOW primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_STATIONCONSUME
prompt ================================
prompt
create table OSECD.JZ_STATIONCONSUME
(
  recordid  VARCHAR2(36) not null,
  routeid   VARCHAR2(36),
  routename NVARCHAR2(20),
  stationno VARCHAR2(36),
  busid     VARCHAR2(36),
  cardid    NVARCHAR2(20),
  arrtime   DATE,
  iccardnum NUMBER,
  jzdate    DATE,
  recdate   DATE default sysdate
)
partition by range (JZDATE)
(
  partition P_20130101 values less than (TO_DATE(' 2013-01-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130102 values less than (TO_DATE(' 2013-01-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130103 values less than (TO_DATE(' 2013-01-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130104 values less than (TO_DATE(' 2013-01-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130105 values less than (TO_DATE(' 2013-01-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130106 values less than (TO_DATE(' 2013-01-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130107 values less than (TO_DATE(' 2013-01-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130108 values less than (TO_DATE(' 2013-01-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130109 values less than (TO_DATE(' 2013-01-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130110 values less than (TO_DATE(' 2013-01-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130111 values less than (TO_DATE(' 2013-01-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130112 values less than (TO_DATE(' 2013-01-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130113 values less than (TO_DATE(' 2013-01-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130114 values less than (TO_DATE(' 2013-01-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130115 values less than (TO_DATE(' 2013-01-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130116 values less than (TO_DATE(' 2013-01-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130117 values less than (TO_DATE(' 2013-01-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130118 values less than (TO_DATE(' 2013-01-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130119 values less than (TO_DATE(' 2013-01-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130120 values less than (TO_DATE(' 2013-01-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130121 values less than (TO_DATE(' 2013-01-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130122 values less than (TO_DATE(' 2013-01-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130123 values less than (TO_DATE(' 2013-01-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130124 values less than (TO_DATE(' 2013-01-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130125 values less than (TO_DATE(' 2013-01-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130126 values less than (TO_DATE(' 2013-01-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130127 values less than (TO_DATE(' 2013-01-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130128 values less than (TO_DATE(' 2013-01-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130129 values less than (TO_DATE(' 2013-01-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130130 values less than (TO_DATE(' 2013-01-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130131 values less than (TO_DATE(' 2013-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130201 values less than (TO_DATE(' 2013-02-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130202 values less than (TO_DATE(' 2013-02-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130203 values less than (TO_DATE(' 2013-02-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130204 values less than (TO_DATE(' 2013-02-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130205 values less than (TO_DATE(' 2013-02-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130206 values less than (TO_DATE(' 2013-02-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130207 values less than (TO_DATE(' 2013-02-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130208 values less than (TO_DATE(' 2013-02-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130209 values less than (TO_DATE(' 2013-02-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130210 values less than (TO_DATE(' 2013-02-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130211 values less than (TO_DATE(' 2013-02-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130212 values less than (TO_DATE(' 2013-02-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130213 values less than (TO_DATE(' 2013-02-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130214 values less than (TO_DATE(' 2013-02-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130215 values less than (TO_DATE(' 2013-02-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130216 values less than (TO_DATE(' 2013-02-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130217 values less than (TO_DATE(' 2013-02-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130218 values less than (TO_DATE(' 2013-02-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130219 values less than (TO_DATE(' 2013-02-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130220 values less than (TO_DATE(' 2013-02-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130221 values less than (TO_DATE(' 2013-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130222 values less than (TO_DATE(' 2013-02-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130223 values less than (TO_DATE(' 2013-02-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130224 values less than (TO_DATE(' 2013-02-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130225 values less than (TO_DATE(' 2013-02-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130226 values less than (TO_DATE(' 2013-02-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130227 values less than (TO_DATE(' 2013-02-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130228 values less than (TO_DATE(' 2013-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130301 values less than (TO_DATE(' 2013-03-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130302 values less than (TO_DATE(' 2013-03-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130303 values less than (TO_DATE(' 2013-03-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130304 values less than (TO_DATE(' 2013-03-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130305 values less than (TO_DATE(' 2013-03-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130306 values less than (TO_DATE(' 2013-03-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130307 values less than (TO_DATE(' 2013-03-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130308 values less than (TO_DATE(' 2013-03-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130309 values less than (TO_DATE(' 2013-03-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130310 values less than (TO_DATE(' 2013-03-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130311 values less than (TO_DATE(' 2013-03-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130312 values less than (TO_DATE(' 2013-03-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130313 values less than (TO_DATE(' 2013-03-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130314 values less than (TO_DATE(' 2013-03-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130315 values less than (TO_DATE(' 2013-03-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130316 values less than (TO_DATE(' 2013-03-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130317 values less than (TO_DATE(' 2013-03-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130318 values less than (TO_DATE(' 2013-03-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130319 values less than (TO_DATE(' 2013-03-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130320 values less than (TO_DATE(' 2013-03-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130321 values less than (TO_DATE(' 2013-03-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130322 values less than (TO_DATE(' 2013-03-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130323 values less than (TO_DATE(' 2013-03-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130324 values less than (TO_DATE(' 2013-03-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130325 values less than (TO_DATE(' 2013-03-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130326 values less than (TO_DATE(' 2013-03-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130327 values less than (TO_DATE(' 2013-03-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130328 values less than (TO_DATE(' 2013-03-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130329 values less than (TO_DATE(' 2013-03-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130330 values less than (TO_DATE(' 2013-03-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130331 values less than (TO_DATE(' 2013-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130401 values less than (TO_DATE(' 2013-04-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130402 values less than (TO_DATE(' 2013-04-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130403 values less than (TO_DATE(' 2013-04-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130404 values less than (TO_DATE(' 2013-04-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130405 values less than (TO_DATE(' 2013-04-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130406 values less than (TO_DATE(' 2013-04-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130407 values less than (TO_DATE(' 2013-04-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130408 values less than (TO_DATE(' 2013-04-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130409 values less than (TO_DATE(' 2013-04-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130410 values less than (TO_DATE(' 2013-04-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130411 values less than (TO_DATE(' 2013-04-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130412 values less than (TO_DATE(' 2013-04-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130413 values less than (TO_DATE(' 2013-04-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130414 values less than (TO_DATE(' 2013-04-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130415 values less than (TO_DATE(' 2013-04-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130416 values less than (TO_DATE(' 2013-04-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130417 values less than (TO_DATE(' 2013-04-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130418 values less than (TO_DATE(' 2013-04-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130419 values less than (TO_DATE(' 2013-04-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130420 values less than (TO_DATE(' 2013-04-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130421 values less than (TO_DATE(' 2013-04-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130422 values less than (TO_DATE(' 2013-04-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130423 values less than (TO_DATE(' 2013-04-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130424 values less than (TO_DATE(' 2013-04-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130425 values less than (TO_DATE(' 2013-04-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130426 values less than (TO_DATE(' 2013-04-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130427 values less than (TO_DATE(' 2013-04-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130428 values less than (TO_DATE(' 2013-04-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130429 values less than (TO_DATE(' 2013-04-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130430 values less than (TO_DATE(' 2013-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130501 values less than (TO_DATE(' 2013-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130502 values less than (TO_DATE(' 2013-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130503 values less than (TO_DATE(' 2013-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130504 values less than (TO_DATE(' 2013-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130505 values less than (TO_DATE(' 2013-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130506 values less than (TO_DATE(' 2013-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130507 values less than (TO_DATE(' 2013-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130508 values less than (TO_DATE(' 2013-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130509 values less than (TO_DATE(' 2013-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130510 values less than (TO_DATE(' 2013-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130511 values less than (TO_DATE(' 2013-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130512 values less than (TO_DATE(' 2013-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130513 values less than (TO_DATE(' 2013-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130514 values less than (TO_DATE(' 2013-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130515 values less than (TO_DATE(' 2013-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130516 values less than (TO_DATE(' 2013-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130517 values less than (TO_DATE(' 2013-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130518 values less than (TO_DATE(' 2013-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130519 values less than (TO_DATE(' 2013-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130520 values less than (TO_DATE(' 2013-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130521 values less than (TO_DATE(' 2013-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130522 values less than (TO_DATE(' 2013-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130523 values less than (TO_DATE(' 2013-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130524 values less than (TO_DATE(' 2013-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130525 values less than (TO_DATE(' 2013-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130526 values less than (TO_DATE(' 2013-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130527 values less than (TO_DATE(' 2013-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130528 values less than (TO_DATE(' 2013-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130529 values less than (TO_DATE(' 2013-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130530 values less than (TO_DATE(' 2013-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130531 values less than (TO_DATE(' 2013-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130601 values less than (TO_DATE(' 2013-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130602 values less than (TO_DATE(' 2013-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130603 values less than (TO_DATE(' 2013-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130604 values less than (TO_DATE(' 2013-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130605 values less than (TO_DATE(' 2013-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130606 values less than (TO_DATE(' 2013-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130607 values less than (TO_DATE(' 2013-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130608 values less than (TO_DATE(' 2013-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130609 values less than (TO_DATE(' 2013-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130610 values less than (TO_DATE(' 2013-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130611 values less than (TO_DATE(' 2013-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130612 values less than (TO_DATE(' 2013-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130613 values less than (TO_DATE(' 2013-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130614 values less than (TO_DATE(' 2013-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130615 values less than (TO_DATE(' 2013-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130616 values less than (TO_DATE(' 2013-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130617 values less than (TO_DATE(' 2013-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130618 values less than (TO_DATE(' 2013-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130619 values less than (TO_DATE(' 2013-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130620 values less than (TO_DATE(' 2013-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130621 values less than (TO_DATE(' 2013-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130622 values less than (TO_DATE(' 2013-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130623 values less than (TO_DATE(' 2013-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130624 values less than (TO_DATE(' 2013-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130625 values less than (TO_DATE(' 2013-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130626 values less than (TO_DATE(' 2013-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130627 values less than (TO_DATE(' 2013-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130628 values less than (TO_DATE(' 2013-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130629 values less than (TO_DATE(' 2013-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130630 values less than (TO_DATE(' 2013-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130701 values less than (TO_DATE(' 2013-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130702 values less than (TO_DATE(' 2013-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130703 values less than (TO_DATE(' 2013-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130704 values less than (TO_DATE(' 2013-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130705 values less than (TO_DATE(' 2013-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130706 values less than (TO_DATE(' 2013-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130707 values less than (TO_DATE(' 2013-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130708 values less than (TO_DATE(' 2013-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130709 values less than (TO_DATE(' 2013-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130710 values less than (TO_DATE(' 2013-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130711 values less than (TO_DATE(' 2013-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130712 values less than (TO_DATE(' 2013-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130713 values less than (TO_DATE(' 2013-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130714 values less than (TO_DATE(' 2013-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130715 values less than (TO_DATE(' 2013-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130716 values less than (TO_DATE(' 2013-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130717 values less than (TO_DATE(' 2013-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130718 values less than (TO_DATE(' 2013-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130719 values less than (TO_DATE(' 2013-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130720 values less than (TO_DATE(' 2013-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130721 values less than (TO_DATE(' 2013-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130722 values less than (TO_DATE(' 2013-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130723 values less than (TO_DATE(' 2013-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130724 values less than (TO_DATE(' 2013-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130725 values less than (TO_DATE(' 2013-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130726 values less than (TO_DATE(' 2013-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130727 values less than (TO_DATE(' 2013-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130728 values less than (TO_DATE(' 2013-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130729 values less than (TO_DATE(' 2013-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130730 values less than (TO_DATE(' 2013-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130731 values less than (TO_DATE(' 2013-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130801 values less than (TO_DATE(' 2013-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130802 values less than (TO_DATE(' 2013-08-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130803 values less than (TO_DATE(' 2013-08-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130804 values less than (TO_DATE(' 2013-08-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130805 values less than (TO_DATE(' 2013-08-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130806 values less than (TO_DATE(' 2013-08-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130807 values less than (TO_DATE(' 2013-08-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130808 values less than (TO_DATE(' 2013-08-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130809 values less than (TO_DATE(' 2013-08-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130810 values less than (TO_DATE(' 2013-08-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130811 values less than (TO_DATE(' 2013-08-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130812 values less than (TO_DATE(' 2013-08-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130813 values less than (TO_DATE(' 2013-08-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130814 values less than (TO_DATE(' 2013-08-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130815 values less than (TO_DATE(' 2013-08-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130816 values less than (TO_DATE(' 2013-08-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130817 values less than (TO_DATE(' 2013-08-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130818 values less than (TO_DATE(' 2013-08-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130819 values less than (TO_DATE(' 2013-08-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130820 values less than (TO_DATE(' 2013-08-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130821 values less than (TO_DATE(' 2013-08-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130822 values less than (TO_DATE(' 2013-08-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130823 values less than (TO_DATE(' 2013-08-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130824 values less than (TO_DATE(' 2013-08-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130825 values less than (TO_DATE(' 2013-08-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130826 values less than (TO_DATE(' 2013-08-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130827 values less than (TO_DATE(' 2013-08-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130828 values less than (TO_DATE(' 2013-08-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130829 values less than (TO_DATE(' 2013-08-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130830 values less than (TO_DATE(' 2013-08-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130831 values less than (TO_DATE(' 2013-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130901 values less than (TO_DATE(' 2013-09-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130902 values less than (TO_DATE(' 2013-09-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130903 values less than (TO_DATE(' 2013-09-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130904 values less than (TO_DATE(' 2013-09-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130905 values less than (TO_DATE(' 2013-09-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130906 values less than (TO_DATE(' 2013-09-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130907 values less than (TO_DATE(' 2013-09-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130908 values less than (TO_DATE(' 2013-09-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130909 values less than (TO_DATE(' 2013-09-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130910 values less than (TO_DATE(' 2013-09-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130911 values less than (TO_DATE(' 2013-09-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130912 values less than (TO_DATE(' 2013-09-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130913 values less than (TO_DATE(' 2013-09-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130914 values less than (TO_DATE(' 2013-09-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130915 values less than (TO_DATE(' 2013-09-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130916 values less than (TO_DATE(' 2013-09-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130917 values less than (TO_DATE(' 2013-09-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130918 values less than (TO_DATE(' 2013-09-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130919 values less than (TO_DATE(' 2013-09-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130920 values less than (TO_DATE(' 2013-09-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130921 values less than (TO_DATE(' 2013-09-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130922 values less than (TO_DATE(' 2013-09-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130923 values less than (TO_DATE(' 2013-09-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130924 values less than (TO_DATE(' 2013-09-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130925 values less than (TO_DATE(' 2013-09-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130926 values less than (TO_DATE(' 2013-09-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130927 values less than (TO_DATE(' 2013-09-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130928 values less than (TO_DATE(' 2013-09-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130929 values less than (TO_DATE(' 2013-09-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20130930 values less than (TO_DATE(' 2013-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131001 values less than (TO_DATE(' 2013-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131002 values less than (TO_DATE(' 2013-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131003 values less than (TO_DATE(' 2013-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131004 values less than (TO_DATE(' 2013-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131005 values less than (TO_DATE(' 2013-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131006 values less than (TO_DATE(' 2013-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131007 values less than (TO_DATE(' 2013-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131008 values less than (TO_DATE(' 2013-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131009 values less than (TO_DATE(' 2013-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131010 values less than (TO_DATE(' 2013-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131011 values less than (TO_DATE(' 2013-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131012 values less than (TO_DATE(' 2013-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131013 values less than (TO_DATE(' 2013-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131014 values less than (TO_DATE(' 2013-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131015 values less than (TO_DATE(' 2013-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131016 values less than (TO_DATE(' 2013-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131017 values less than (TO_DATE(' 2013-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131018 values less than (TO_DATE(' 2013-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131019 values less than (TO_DATE(' 2013-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131020 values less than (TO_DATE(' 2013-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131021 values less than (TO_DATE(' 2013-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131022 values less than (TO_DATE(' 2013-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131023 values less than (TO_DATE(' 2013-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131024 values less than (TO_DATE(' 2013-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131025 values less than (TO_DATE(' 2013-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131026 values less than (TO_DATE(' 2013-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131027 values less than (TO_DATE(' 2013-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131028 values less than (TO_DATE(' 2013-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131029 values less than (TO_DATE(' 2013-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131030 values less than (TO_DATE(' 2013-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131031 values less than (TO_DATE(' 2013-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131101 values less than (TO_DATE(' 2013-11-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131102 values less than (TO_DATE(' 2013-11-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131103 values less than (TO_DATE(' 2013-11-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131104 values less than (TO_DATE(' 2013-11-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131105 values less than (TO_DATE(' 2013-11-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131106 values less than (TO_DATE(' 2013-11-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131107 values less than (TO_DATE(' 2013-11-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131108 values less than (TO_DATE(' 2013-11-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131109 values less than (TO_DATE(' 2013-11-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131110 values less than (TO_DATE(' 2013-11-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131111 values less than (TO_DATE(' 2013-11-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131112 values less than (TO_DATE(' 2013-11-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131113 values less than (TO_DATE(' 2013-11-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131114 values less than (TO_DATE(' 2013-11-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131115 values less than (TO_DATE(' 2013-11-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131116 values less than (TO_DATE(' 2013-11-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131117 values less than (TO_DATE(' 2013-11-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131118 values less than (TO_DATE(' 2013-11-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131119 values less than (TO_DATE(' 2013-11-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131120 values less than (TO_DATE(' 2013-11-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131121 values less than (TO_DATE(' 2013-11-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131122 values less than (TO_DATE(' 2013-11-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131123 values less than (TO_DATE(' 2013-11-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131124 values less than (TO_DATE(' 2013-11-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131125 values less than (TO_DATE(' 2013-11-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131126 values less than (TO_DATE(' 2013-11-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131127 values less than (TO_DATE(' 2013-11-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131128 values less than (TO_DATE(' 2013-11-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131129 values less than (TO_DATE(' 2013-11-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131130 values less than (TO_DATE(' 2013-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131201 values less than (TO_DATE(' 2013-12-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131202 values less than (TO_DATE(' 2013-12-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131203 values less than (TO_DATE(' 2013-12-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131204 values less than (TO_DATE(' 2013-12-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131205 values less than (TO_DATE(' 2013-12-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131206 values less than (TO_DATE(' 2013-12-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131207 values less than (TO_DATE(' 2013-12-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131208 values less than (TO_DATE(' 2013-12-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131209 values less than (TO_DATE(' 2013-12-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131210 values less than (TO_DATE(' 2013-12-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131211 values less than (TO_DATE(' 2013-12-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131212 values less than (TO_DATE(' 2013-12-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131213 values less than (TO_DATE(' 2013-12-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131214 values less than (TO_DATE(' 2013-12-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131215 values less than (TO_DATE(' 2013-12-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131216 values less than (TO_DATE(' 2013-12-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131217 values less than (TO_DATE(' 2013-12-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131218 values less than (TO_DATE(' 2013-12-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131219 values less than (TO_DATE(' 2013-12-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131220 values less than (TO_DATE(' 2013-12-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131221 values less than (TO_DATE(' 2013-12-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131222 values less than (TO_DATE(' 2013-12-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131223 values less than (TO_DATE(' 2013-12-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131224 values less than (TO_DATE(' 2013-12-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131225 values less than (TO_DATE(' 2013-12-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131226 values less than (TO_DATE(' 2013-12-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131227 values less than (TO_DATE(' 2013-12-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131228 values less than (TO_DATE(' 2013-12-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131229 values less than (TO_DATE(' 2013-12-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131230 values less than (TO_DATE(' 2013-12-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20131231 values less than (TO_DATE(' 2014-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140101 values less than (TO_DATE(' 2014-01-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140102 values less than (TO_DATE(' 2014-01-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140103 values less than (TO_DATE(' 2014-01-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140104 values less than (TO_DATE(' 2014-01-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140105 values less than (TO_DATE(' 2014-01-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140106 values less than (TO_DATE(' 2014-01-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140107 values less than (TO_DATE(' 2014-01-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140108 values less than (TO_DATE(' 2014-01-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140109 values less than (TO_DATE(' 2014-01-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140110 values less than (TO_DATE(' 2014-01-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140111 values less than (TO_DATE(' 2014-01-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140112 values less than (TO_DATE(' 2014-01-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140113 values less than (TO_DATE(' 2014-01-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140114 values less than (TO_DATE(' 2014-01-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140115 values less than (TO_DATE(' 2014-01-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140116 values less than (TO_DATE(' 2014-01-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140117 values less than (TO_DATE(' 2014-01-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140118 values less than (TO_DATE(' 2014-01-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140119 values less than (TO_DATE(' 2014-01-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140120 values less than (TO_DATE(' 2014-01-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140121 values less than (TO_DATE(' 2014-01-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140122 values less than (TO_DATE(' 2014-01-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140123 values less than (TO_DATE(' 2014-01-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140124 values less than (TO_DATE(' 2014-01-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140125 values less than (TO_DATE(' 2014-01-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140126 values less than (TO_DATE(' 2014-01-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140127 values less than (TO_DATE(' 2014-01-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140128 values less than (TO_DATE(' 2014-01-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140129 values less than (TO_DATE(' 2014-01-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140130 values less than (TO_DATE(' 2014-01-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140131 values less than (TO_DATE(' 2014-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140201 values less than (TO_DATE(' 2014-02-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140202 values less than (TO_DATE(' 2014-02-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140203 values less than (TO_DATE(' 2014-02-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140204 values less than (TO_DATE(' 2014-02-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140205 values less than (TO_DATE(' 2014-02-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140206 values less than (TO_DATE(' 2014-02-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140207 values less than (TO_DATE(' 2014-02-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140208 values less than (TO_DATE(' 2014-02-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140209 values less than (TO_DATE(' 2014-02-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140210 values less than (TO_DATE(' 2014-02-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140211 values less than (TO_DATE(' 2014-02-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140212 values less than (TO_DATE(' 2014-02-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140213 values less than (TO_DATE(' 2014-02-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140214 values less than (TO_DATE(' 2014-02-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140215 values less than (TO_DATE(' 2014-02-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140216 values less than (TO_DATE(' 2014-02-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140217 values less than (TO_DATE(' 2014-02-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140218 values less than (TO_DATE(' 2014-02-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140219 values less than (TO_DATE(' 2014-02-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140220 values less than (TO_DATE(' 2014-02-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140221 values less than (TO_DATE(' 2014-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140222 values less than (TO_DATE(' 2014-02-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140223 values less than (TO_DATE(' 2014-02-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140224 values less than (TO_DATE(' 2014-02-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140225 values less than (TO_DATE(' 2014-02-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140226 values less than (TO_DATE(' 2014-02-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140227 values less than (TO_DATE(' 2014-02-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140228 values less than (TO_DATE(' 2014-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140301 values less than (TO_DATE(' 2014-03-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140302 values less than (TO_DATE(' 2014-03-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140303 values less than (TO_DATE(' 2014-03-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140304 values less than (TO_DATE(' 2014-03-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140305 values less than (TO_DATE(' 2014-03-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140306 values less than (TO_DATE(' 2014-03-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140307 values less than (TO_DATE(' 2014-03-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140308 values less than (TO_DATE(' 2014-03-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140309 values less than (TO_DATE(' 2014-03-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140310 values less than (TO_DATE(' 2014-03-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140311 values less than (TO_DATE(' 2014-03-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140312 values less than (TO_DATE(' 2014-03-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140313 values less than (TO_DATE(' 2014-03-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140314 values less than (TO_DATE(' 2014-03-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140315 values less than (TO_DATE(' 2014-03-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140316 values less than (TO_DATE(' 2014-03-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140317 values less than (TO_DATE(' 2014-03-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140318 values less than (TO_DATE(' 2014-03-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140319 values less than (TO_DATE(' 2014-03-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140320 values less than (TO_DATE(' 2014-03-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140321 values less than (TO_DATE(' 2014-03-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140322 values less than (TO_DATE(' 2014-03-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140323 values less than (TO_DATE(' 2014-03-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140324 values less than (TO_DATE(' 2014-03-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140325 values less than (TO_DATE(' 2014-03-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140326 values less than (TO_DATE(' 2014-03-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140327 values less than (TO_DATE(' 2014-03-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140328 values less than (TO_DATE(' 2014-03-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140329 values less than (TO_DATE(' 2014-03-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140330 values less than (TO_DATE(' 2014-03-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140331 values less than (TO_DATE(' 2014-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140401 values less than (TO_DATE(' 2014-04-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140402 values less than (TO_DATE(' 2014-04-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140403 values less than (TO_DATE(' 2014-04-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140404 values less than (TO_DATE(' 2014-04-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140405 values less than (TO_DATE(' 2014-04-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140406 values less than (TO_DATE(' 2014-04-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140407 values less than (TO_DATE(' 2014-04-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140408 values less than (TO_DATE(' 2014-04-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140409 values less than (TO_DATE(' 2014-04-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140410 values less than (TO_DATE(' 2014-04-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140411 values less than (TO_DATE(' 2014-04-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140412 values less than (TO_DATE(' 2014-04-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140413 values less than (TO_DATE(' 2014-04-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140414 values less than (TO_DATE(' 2014-04-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140415 values less than (TO_DATE(' 2014-04-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140416 values less than (TO_DATE(' 2014-04-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140417 values less than (TO_DATE(' 2014-04-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140418 values less than (TO_DATE(' 2014-04-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140419 values less than (TO_DATE(' 2014-04-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140420 values less than (TO_DATE(' 2014-04-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140421 values less than (TO_DATE(' 2014-04-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140422 values less than (TO_DATE(' 2014-04-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140423 values less than (TO_DATE(' 2014-04-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140424 values less than (TO_DATE(' 2014-04-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140425 values less than (TO_DATE(' 2014-04-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140426 values less than (TO_DATE(' 2014-04-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140427 values less than (TO_DATE(' 2014-04-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140428 values less than (TO_DATE(' 2014-04-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140429 values less than (TO_DATE(' 2014-04-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140430 values less than (TO_DATE(' 2014-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140501 values less than (TO_DATE(' 2014-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140502 values less than (TO_DATE(' 2014-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140503 values less than (TO_DATE(' 2014-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140504 values less than (TO_DATE(' 2014-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140505 values less than (TO_DATE(' 2014-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140506 values less than (TO_DATE(' 2014-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140507 values less than (TO_DATE(' 2014-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140508 values less than (TO_DATE(' 2014-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140509 values less than (TO_DATE(' 2014-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140510 values less than (TO_DATE(' 2014-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140511 values less than (TO_DATE(' 2014-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140512 values less than (TO_DATE(' 2014-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140513 values less than (TO_DATE(' 2014-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140514 values less than (TO_DATE(' 2014-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140515 values less than (TO_DATE(' 2014-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140516 values less than (TO_DATE(' 2014-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140517 values less than (TO_DATE(' 2014-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140518 values less than (TO_DATE(' 2014-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140519 values less than (TO_DATE(' 2014-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140520 values less than (TO_DATE(' 2014-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140521 values less than (TO_DATE(' 2014-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140522 values less than (TO_DATE(' 2014-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140523 values less than (TO_DATE(' 2014-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140524 values less than (TO_DATE(' 2014-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140525 values less than (TO_DATE(' 2014-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140526 values less than (TO_DATE(' 2014-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140527 values less than (TO_DATE(' 2014-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140528 values less than (TO_DATE(' 2014-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140529 values less than (TO_DATE(' 2014-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140530 values less than (TO_DATE(' 2014-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140531 values less than (TO_DATE(' 2014-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140601 values less than (TO_DATE(' 2014-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140602 values less than (TO_DATE(' 2014-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140603 values less than (TO_DATE(' 2014-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140604 values less than (TO_DATE(' 2014-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140605 values less than (TO_DATE(' 2014-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140606 values less than (TO_DATE(' 2014-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140607 values less than (TO_DATE(' 2014-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140608 values less than (TO_DATE(' 2014-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140609 values less than (TO_DATE(' 2014-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140610 values less than (TO_DATE(' 2014-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140611 values less than (TO_DATE(' 2014-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140612 values less than (TO_DATE(' 2014-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140613 values less than (TO_DATE(' 2014-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140614 values less than (TO_DATE(' 2014-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140615 values less than (TO_DATE(' 2014-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140616 values less than (TO_DATE(' 2014-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140617 values less than (TO_DATE(' 2014-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140618 values less than (TO_DATE(' 2014-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140619 values less than (TO_DATE(' 2014-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140620 values less than (TO_DATE(' 2014-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140621 values less than (TO_DATE(' 2014-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140622 values less than (TO_DATE(' 2014-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140623 values less than (TO_DATE(' 2014-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140624 values less than (TO_DATE(' 2014-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140625 values less than (TO_DATE(' 2014-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140626 values less than (TO_DATE(' 2014-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140627 values less than (TO_DATE(' 2014-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140628 values less than (TO_DATE(' 2014-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140629 values less than (TO_DATE(' 2014-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140630 values less than (TO_DATE(' 2014-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140701 values less than (TO_DATE(' 2014-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140702 values less than (TO_DATE(' 2014-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140703 values less than (TO_DATE(' 2014-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140704 values less than (TO_DATE(' 2014-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140705 values less than (TO_DATE(' 2014-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140706 values less than (TO_DATE(' 2014-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140707 values less than (TO_DATE(' 2014-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140708 values less than (TO_DATE(' 2014-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140709 values less than (TO_DATE(' 2014-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140710 values less than (TO_DATE(' 2014-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140711 values less than (TO_DATE(' 2014-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140712 values less than (TO_DATE(' 2014-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140713 values less than (TO_DATE(' 2014-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140714 values less than (TO_DATE(' 2014-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140715 values less than (TO_DATE(' 2014-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140716 values less than (TO_DATE(' 2014-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140717 values less than (TO_DATE(' 2014-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140718 values less than (TO_DATE(' 2014-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140719 values less than (TO_DATE(' 2014-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140720 values less than (TO_DATE(' 2014-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140721 values less than (TO_DATE(' 2014-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140722 values less than (TO_DATE(' 2014-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140723 values less than (TO_DATE(' 2014-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140724 values less than (TO_DATE(' 2014-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140725 values less than (TO_DATE(' 2014-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140726 values less than (TO_DATE(' 2014-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140727 values less than (TO_DATE(' 2014-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140728 values less than (TO_DATE(' 2014-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140729 values less than (TO_DATE(' 2014-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140730 values less than (TO_DATE(' 2014-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140731 values less than (TO_DATE(' 2014-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140801 values less than (TO_DATE(' 2014-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140802 values less than (TO_DATE(' 2014-08-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140803 values less than (TO_DATE(' 2014-08-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140804 values less than (TO_DATE(' 2014-08-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140805 values less than (TO_DATE(' 2014-08-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140806 values less than (TO_DATE(' 2014-08-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140807 values less than (TO_DATE(' 2014-08-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140808 values less than (TO_DATE(' 2014-08-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140809 values less than (TO_DATE(' 2014-08-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140810 values less than (TO_DATE(' 2014-08-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140811 values less than (TO_DATE(' 2014-08-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140812 values less than (TO_DATE(' 2014-08-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140813 values less than (TO_DATE(' 2014-08-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140814 values less than (TO_DATE(' 2014-08-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140815 values less than (TO_DATE(' 2014-08-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140816 values less than (TO_DATE(' 2014-08-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140817 values less than (TO_DATE(' 2014-08-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140818 values less than (TO_DATE(' 2014-08-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140819 values less than (TO_DATE(' 2014-08-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140820 values less than (TO_DATE(' 2014-08-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140821 values less than (TO_DATE(' 2014-08-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140822 values less than (TO_DATE(' 2014-08-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140823 values less than (TO_DATE(' 2014-08-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140824 values less than (TO_DATE(' 2014-08-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140825 values less than (TO_DATE(' 2014-08-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140826 values less than (TO_DATE(' 2014-08-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140827 values less than (TO_DATE(' 2014-08-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140828 values less than (TO_DATE(' 2014-08-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140829 values less than (TO_DATE(' 2014-08-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140830 values less than (TO_DATE(' 2014-08-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140831 values less than (TO_DATE(' 2014-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140901 values less than (TO_DATE(' 2014-09-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140902 values less than (TO_DATE(' 2014-09-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140903 values less than (TO_DATE(' 2014-09-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140904 values less than (TO_DATE(' 2014-09-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140905 values less than (TO_DATE(' 2014-09-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140906 values less than (TO_DATE(' 2014-09-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140907 values less than (TO_DATE(' 2014-09-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140908 values less than (TO_DATE(' 2014-09-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140909 values less than (TO_DATE(' 2014-09-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140910 values less than (TO_DATE(' 2014-09-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140911 values less than (TO_DATE(' 2014-09-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140912 values less than (TO_DATE(' 2014-09-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140913 values less than (TO_DATE(' 2014-09-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140914 values less than (TO_DATE(' 2014-09-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140915 values less than (TO_DATE(' 2014-09-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140916 values less than (TO_DATE(' 2014-09-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140917 values less than (TO_DATE(' 2014-09-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140918 values less than (TO_DATE(' 2014-09-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140919 values less than (TO_DATE(' 2014-09-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140920 values less than (TO_DATE(' 2014-09-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140921 values less than (TO_DATE(' 2014-09-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140922 values less than (TO_DATE(' 2014-09-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140923 values less than (TO_DATE(' 2014-09-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140924 values less than (TO_DATE(' 2014-09-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140925 values less than (TO_DATE(' 2014-09-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140926 values less than (TO_DATE(' 2014-09-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140927 values less than (TO_DATE(' 2014-09-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140928 values less than (TO_DATE(' 2014-09-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140929 values less than (TO_DATE(' 2014-09-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20140930 values less than (TO_DATE(' 2014-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141001 values less than (TO_DATE(' 2014-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141002 values less than (TO_DATE(' 2014-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141003 values less than (TO_DATE(' 2014-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141004 values less than (TO_DATE(' 2014-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141005 values less than (TO_DATE(' 2014-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141006 values less than (TO_DATE(' 2014-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141007 values less than (TO_DATE(' 2014-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141008 values less than (TO_DATE(' 2014-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141009 values less than (TO_DATE(' 2014-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141010 values less than (TO_DATE(' 2014-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141011 values less than (TO_DATE(' 2014-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141012 values less than (TO_DATE(' 2014-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141013 values less than (TO_DATE(' 2014-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141014 values less than (TO_DATE(' 2014-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141015 values less than (TO_DATE(' 2014-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141016 values less than (TO_DATE(' 2014-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141017 values less than (TO_DATE(' 2014-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141018 values less than (TO_DATE(' 2014-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141019 values less than (TO_DATE(' 2014-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141020 values less than (TO_DATE(' 2014-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141021 values less than (TO_DATE(' 2014-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141022 values less than (TO_DATE(' 2014-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141023 values less than (TO_DATE(' 2014-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141024 values less than (TO_DATE(' 2014-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141025 values less than (TO_DATE(' 2014-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141026 values less than (TO_DATE(' 2014-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141027 values less than (TO_DATE(' 2014-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141028 values less than (TO_DATE(' 2014-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141029 values less than (TO_DATE(' 2014-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141030 values less than (TO_DATE(' 2014-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141031 values less than (TO_DATE(' 2014-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141101 values less than (TO_DATE(' 2014-11-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141102 values less than (TO_DATE(' 2014-11-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141103 values less than (TO_DATE(' 2014-11-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141104 values less than (TO_DATE(' 2014-11-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141105 values less than (TO_DATE(' 2014-11-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141106 values less than (TO_DATE(' 2014-11-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141107 values less than (TO_DATE(' 2014-11-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141108 values less than (TO_DATE(' 2014-11-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141109 values less than (TO_DATE(' 2014-11-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141110 values less than (TO_DATE(' 2014-11-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141111 values less than (TO_DATE(' 2014-11-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141112 values less than (TO_DATE(' 2014-11-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141113 values less than (TO_DATE(' 2014-11-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141114 values less than (TO_DATE(' 2014-11-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141115 values less than (TO_DATE(' 2014-11-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141116 values less than (TO_DATE(' 2014-11-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141117 values less than (TO_DATE(' 2014-11-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141118 values less than (TO_DATE(' 2014-11-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141119 values less than (TO_DATE(' 2014-11-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141120 values less than (TO_DATE(' 2014-11-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141121 values less than (TO_DATE(' 2014-11-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141122 values less than (TO_DATE(' 2014-11-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141123 values less than (TO_DATE(' 2014-11-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141124 values less than (TO_DATE(' 2014-11-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141125 values less than (TO_DATE(' 2014-11-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141126 values less than (TO_DATE(' 2014-11-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141127 values less than (TO_DATE(' 2014-11-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141128 values less than (TO_DATE(' 2014-11-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141129 values less than (TO_DATE(' 2014-11-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141130 values less than (TO_DATE(' 2014-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141201 values less than (TO_DATE(' 2014-12-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141202 values less than (TO_DATE(' 2014-12-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141203 values less than (TO_DATE(' 2014-12-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141204 values less than (TO_DATE(' 2014-12-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141205 values less than (TO_DATE(' 2014-12-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141206 values less than (TO_DATE(' 2014-12-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141207 values less than (TO_DATE(' 2014-12-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141208 values less than (TO_DATE(' 2014-12-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141209 values less than (TO_DATE(' 2014-12-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141210 values less than (TO_DATE(' 2014-12-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141211 values less than (TO_DATE(' 2014-12-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141212 values less than (TO_DATE(' 2014-12-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141213 values less than (TO_DATE(' 2014-12-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141214 values less than (TO_DATE(' 2014-12-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141215 values less than (TO_DATE(' 2014-12-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141216 values less than (TO_DATE(' 2014-12-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141217 values less than (TO_DATE(' 2014-12-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141218 values less than (TO_DATE(' 2014-12-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141219 values less than (TO_DATE(' 2014-12-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141220 values less than (TO_DATE(' 2014-12-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141221 values less than (TO_DATE(' 2014-12-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141222 values less than (TO_DATE(' 2014-12-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141223 values less than (TO_DATE(' 2014-12-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141224 values less than (TO_DATE(' 2014-12-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141225 values less than (TO_DATE(' 2014-12-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141226 values less than (TO_DATE(' 2014-12-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141227 values less than (TO_DATE(' 2014-12-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141228 values less than (TO_DATE(' 2014-12-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141229 values less than (TO_DATE(' 2014-12-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141230 values less than (TO_DATE(' 2014-12-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20141231 values less than (TO_DATE(' 2015-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150101 values less than (TO_DATE(' 2015-01-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150102 values less than (TO_DATE(' 2015-01-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150103 values less than (TO_DATE(' 2015-01-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150104 values less than (TO_DATE(' 2015-01-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150105 values less than (TO_DATE(' 2015-01-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150106 values less than (TO_DATE(' 2015-01-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150107 values less than (TO_DATE(' 2015-01-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150108 values less than (TO_DATE(' 2015-01-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150109 values less than (TO_DATE(' 2015-01-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150110 values less than (TO_DATE(' 2015-01-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150111 values less than (TO_DATE(' 2015-01-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150112 values less than (TO_DATE(' 2015-01-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150113 values less than (TO_DATE(' 2015-01-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150114 values less than (TO_DATE(' 2015-01-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150115 values less than (TO_DATE(' 2015-01-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150116 values less than (TO_DATE(' 2015-01-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150117 values less than (TO_DATE(' 2015-01-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150118 values less than (TO_DATE(' 2015-01-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150119 values less than (TO_DATE(' 2015-01-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150120 values less than (TO_DATE(' 2015-01-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150121 values less than (TO_DATE(' 2015-01-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150122 values less than (TO_DATE(' 2015-01-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150123 values less than (TO_DATE(' 2015-01-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150124 values less than (TO_DATE(' 2015-01-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150125 values less than (TO_DATE(' 2015-01-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150126 values less than (TO_DATE(' 2015-01-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150127 values less than (TO_DATE(' 2015-01-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150128 values less than (TO_DATE(' 2015-01-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150129 values less than (TO_DATE(' 2015-01-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150130 values less than (TO_DATE(' 2015-01-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150131 values less than (TO_DATE(' 2015-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150201 values less than (TO_DATE(' 2015-02-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150202 values less than (TO_DATE(' 2015-02-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150203 values less than (TO_DATE(' 2015-02-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150204 values less than (TO_DATE(' 2015-02-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150205 values less than (TO_DATE(' 2015-02-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150206 values less than (TO_DATE(' 2015-02-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150207 values less than (TO_DATE(' 2015-02-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150208 values less than (TO_DATE(' 2015-02-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150209 values less than (TO_DATE(' 2015-02-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150210 values less than (TO_DATE(' 2015-02-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150211 values less than (TO_DATE(' 2015-02-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150212 values less than (TO_DATE(' 2015-02-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150213 values less than (TO_DATE(' 2015-02-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150214 values less than (TO_DATE(' 2015-02-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150215 values less than (TO_DATE(' 2015-02-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150216 values less than (TO_DATE(' 2015-02-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150217 values less than (TO_DATE(' 2015-02-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150218 values less than (TO_DATE(' 2015-02-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150219 values less than (TO_DATE(' 2015-02-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150220 values less than (TO_DATE(' 2015-02-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150221 values less than (TO_DATE(' 2015-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150222 values less than (TO_DATE(' 2015-02-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150223 values less than (TO_DATE(' 2015-02-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150224 values less than (TO_DATE(' 2015-02-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150225 values less than (TO_DATE(' 2015-02-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150226 values less than (TO_DATE(' 2015-02-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150227 values less than (TO_DATE(' 2015-02-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150228 values less than (TO_DATE(' 2015-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150301 values less than (TO_DATE(' 2015-03-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150302 values less than (TO_DATE(' 2015-03-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150303 values less than (TO_DATE(' 2015-03-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150304 values less than (TO_DATE(' 2015-03-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150305 values less than (TO_DATE(' 2015-03-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150306 values less than (TO_DATE(' 2015-03-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150307 values less than (TO_DATE(' 2015-03-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150308 values less than (TO_DATE(' 2015-03-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150309 values less than (TO_DATE(' 2015-03-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150310 values less than (TO_DATE(' 2015-03-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150311 values less than (TO_DATE(' 2015-03-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150312 values less than (TO_DATE(' 2015-03-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150313 values less than (TO_DATE(' 2015-03-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150314 values less than (TO_DATE(' 2015-03-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150315 values less than (TO_DATE(' 2015-03-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150316 values less than (TO_DATE(' 2015-03-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150317 values less than (TO_DATE(' 2015-03-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150318 values less than (TO_DATE(' 2015-03-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150319 values less than (TO_DATE(' 2015-03-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150320 values less than (TO_DATE(' 2015-03-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150321 values less than (TO_DATE(' 2015-03-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150322 values less than (TO_DATE(' 2015-03-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150323 values less than (TO_DATE(' 2015-03-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150324 values less than (TO_DATE(' 2015-03-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150325 values less than (TO_DATE(' 2015-03-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150326 values less than (TO_DATE(' 2015-03-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150327 values less than (TO_DATE(' 2015-03-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150328 values less than (TO_DATE(' 2015-03-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150329 values less than (TO_DATE(' 2015-03-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150330 values less than (TO_DATE(' 2015-03-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150331 values less than (TO_DATE(' 2015-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150401 values less than (TO_DATE(' 2015-04-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150402 values less than (TO_DATE(' 2015-04-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150403 values less than (TO_DATE(' 2015-04-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150404 values less than (TO_DATE(' 2015-04-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150405 values less than (TO_DATE(' 2015-04-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150406 values less than (TO_DATE(' 2015-04-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150407 values less than (TO_DATE(' 2015-04-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150408 values less than (TO_DATE(' 2015-04-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150409 values less than (TO_DATE(' 2015-04-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150410 values less than (TO_DATE(' 2015-04-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150411 values less than (TO_DATE(' 2015-04-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150412 values less than (TO_DATE(' 2015-04-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150413 values less than (TO_DATE(' 2015-04-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150414 values less than (TO_DATE(' 2015-04-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150415 values less than (TO_DATE(' 2015-04-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150416 values less than (TO_DATE(' 2015-04-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150417 values less than (TO_DATE(' 2015-04-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150418 values less than (TO_DATE(' 2015-04-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150419 values less than (TO_DATE(' 2015-04-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150420 values less than (TO_DATE(' 2015-04-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150421 values less than (TO_DATE(' 2015-04-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150422 values less than (TO_DATE(' 2015-04-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150423 values less than (TO_DATE(' 2015-04-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150424 values less than (TO_DATE(' 2015-04-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150425 values less than (TO_DATE(' 2015-04-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150426 values less than (TO_DATE(' 2015-04-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150427 values less than (TO_DATE(' 2015-04-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150428 values less than (TO_DATE(' 2015-04-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150429 values less than (TO_DATE(' 2015-04-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150430 values less than (TO_DATE(' 2015-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150501 values less than (TO_DATE(' 2015-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150502 values less than (TO_DATE(' 2015-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150503 values less than (TO_DATE(' 2015-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150504 values less than (TO_DATE(' 2015-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150505 values less than (TO_DATE(' 2015-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150506 values less than (TO_DATE(' 2015-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150507 values less than (TO_DATE(' 2015-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150508 values less than (TO_DATE(' 2015-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150509 values less than (TO_DATE(' 2015-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150510 values less than (TO_DATE(' 2015-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150511 values less than (TO_DATE(' 2015-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150512 values less than (TO_DATE(' 2015-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150513 values less than (TO_DATE(' 2015-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150514 values less than (TO_DATE(' 2015-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150515 values less than (TO_DATE(' 2015-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150516 values less than (TO_DATE(' 2015-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150517 values less than (TO_DATE(' 2015-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150518 values less than (TO_DATE(' 2015-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150519 values less than (TO_DATE(' 2015-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150520 values less than (TO_DATE(' 2015-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150521 values less than (TO_DATE(' 2015-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150522 values less than (TO_DATE(' 2015-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150523 values less than (TO_DATE(' 2015-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150524 values less than (TO_DATE(' 2015-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150525 values less than (TO_DATE(' 2015-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150526 values less than (TO_DATE(' 2015-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150527 values less than (TO_DATE(' 2015-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150528 values less than (TO_DATE(' 2015-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150529 values less than (TO_DATE(' 2015-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150530 values less than (TO_DATE(' 2015-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150531 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150601 values less than (TO_DATE(' 2015-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150602 values less than (TO_DATE(' 2015-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150603 values less than (TO_DATE(' 2015-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150604 values less than (TO_DATE(' 2015-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150605 values less than (TO_DATE(' 2015-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150606 values less than (TO_DATE(' 2015-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150607 values less than (TO_DATE(' 2015-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150608 values less than (TO_DATE(' 2015-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150609 values less than (TO_DATE(' 2015-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150610 values less than (TO_DATE(' 2015-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150611 values less than (TO_DATE(' 2015-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150612 values less than (TO_DATE(' 2015-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150613 values less than (TO_DATE(' 2015-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150614 values less than (TO_DATE(' 2015-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150615 values less than (TO_DATE(' 2015-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150616 values less than (TO_DATE(' 2015-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150617 values less than (TO_DATE(' 2015-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150618 values less than (TO_DATE(' 2015-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150619 values less than (TO_DATE(' 2015-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150620 values less than (TO_DATE(' 2015-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150621 values less than (TO_DATE(' 2015-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150622 values less than (TO_DATE(' 2015-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150623 values less than (TO_DATE(' 2015-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150624 values less than (TO_DATE(' 2015-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150625 values less than (TO_DATE(' 2015-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150626 values less than (TO_DATE(' 2015-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150627 values less than (TO_DATE(' 2015-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150628 values less than (TO_DATE(' 2015-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150629 values less than (TO_DATE(' 2015-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150630 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150801 values less than (TO_DATE(' 2015-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150802 values less than (TO_DATE(' 2015-08-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150803 values less than (TO_DATE(' 2015-08-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150804 values less than (TO_DATE(' 2015-08-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150805 values less than (TO_DATE(' 2015-08-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150806 values less than (TO_DATE(' 2015-08-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150807 values less than (TO_DATE(' 2015-08-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150808 values less than (TO_DATE(' 2015-08-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150809 values less than (TO_DATE(' 2015-08-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150810 values less than (TO_DATE(' 2015-08-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150811 values less than (TO_DATE(' 2015-08-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150812 values less than (TO_DATE(' 2015-08-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150813 values less than (TO_DATE(' 2015-08-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150814 values less than (TO_DATE(' 2015-08-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150815 values less than (TO_DATE(' 2015-08-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150816 values less than (TO_DATE(' 2015-08-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150817 values less than (TO_DATE(' 2015-08-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150818 values less than (TO_DATE(' 2015-08-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150819 values less than (TO_DATE(' 2015-08-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150820 values less than (TO_DATE(' 2015-08-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150821 values less than (TO_DATE(' 2015-08-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150822 values less than (TO_DATE(' 2015-08-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150823 values less than (TO_DATE(' 2015-08-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150824 values less than (TO_DATE(' 2015-08-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150825 values less than (TO_DATE(' 2015-08-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150826 values less than (TO_DATE(' 2015-08-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150827 values less than (TO_DATE(' 2015-08-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150828 values less than (TO_DATE(' 2015-08-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150829 values less than (TO_DATE(' 2015-08-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150830 values less than (TO_DATE(' 2015-08-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150831 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150901 values less than (TO_DATE(' 2015-09-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150902 values less than (TO_DATE(' 2015-09-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150903 values less than (TO_DATE(' 2015-09-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150904 values less than (TO_DATE(' 2015-09-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150905 values less than (TO_DATE(' 2015-09-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150906 values less than (TO_DATE(' 2015-09-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150907 values less than (TO_DATE(' 2015-09-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150908 values less than (TO_DATE(' 2015-09-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150909 values less than (TO_DATE(' 2015-09-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150910 values less than (TO_DATE(' 2015-09-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150911 values less than (TO_DATE(' 2015-09-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150912 values less than (TO_DATE(' 2015-09-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150913 values less than (TO_DATE(' 2015-09-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150914 values less than (TO_DATE(' 2015-09-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150915 values less than (TO_DATE(' 2015-09-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150916 values less than (TO_DATE(' 2015-09-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150917 values less than (TO_DATE(' 2015-09-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150918 values less than (TO_DATE(' 2015-09-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150919 values less than (TO_DATE(' 2015-09-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150920 values less than (TO_DATE(' 2015-09-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150921 values less than (TO_DATE(' 2015-09-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150922 values less than (TO_DATE(' 2015-09-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150923 values less than (TO_DATE(' 2015-09-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150924 values less than (TO_DATE(' 2015-09-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150925 values less than (TO_DATE(' 2015-09-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150926 values less than (TO_DATE(' 2015-09-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150927 values less than (TO_DATE(' 2015-09-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150928 values less than (TO_DATE(' 2015-09-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150929 values less than (TO_DATE(' 2015-09-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150930 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151001 values less than (TO_DATE(' 2015-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151002 values less than (TO_DATE(' 2015-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151003 values less than (TO_DATE(' 2015-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151004 values less than (TO_DATE(' 2015-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151005 values less than (TO_DATE(' 2015-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151006 values less than (TO_DATE(' 2015-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151007 values less than (TO_DATE(' 2015-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151008 values less than (TO_DATE(' 2015-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151009 values less than (TO_DATE(' 2015-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151010 values less than (TO_DATE(' 2015-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151011 values less than (TO_DATE(' 2015-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151012 values less than (TO_DATE(' 2015-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151013 values less than (TO_DATE(' 2015-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151014 values less than (TO_DATE(' 2015-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151015 values less than (TO_DATE(' 2015-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151016 values less than (TO_DATE(' 2015-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151017 values less than (TO_DATE(' 2015-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151018 values less than (TO_DATE(' 2015-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151019 values less than (TO_DATE(' 2015-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151020 values less than (TO_DATE(' 2015-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151021 values less than (TO_DATE(' 2015-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151022 values less than (TO_DATE(' 2015-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151023 values less than (TO_DATE(' 2015-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151024 values less than (TO_DATE(' 2015-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151025 values less than (TO_DATE(' 2015-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151026 values less than (TO_DATE(' 2015-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151027 values less than (TO_DATE(' 2015-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151028 values less than (TO_DATE(' 2015-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151029 values less than (TO_DATE(' 2015-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151030 values less than (TO_DATE(' 2015-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151031 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151101 values less than (TO_DATE(' 2015-11-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151102 values less than (TO_DATE(' 2015-11-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151103 values less than (TO_DATE(' 2015-11-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151104 values less than (TO_DATE(' 2015-11-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151105 values less than (TO_DATE(' 2015-11-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151106 values less than (TO_DATE(' 2015-11-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151107 values less than (TO_DATE(' 2015-11-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151108 values less than (TO_DATE(' 2015-11-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151109 values less than (TO_DATE(' 2015-11-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151110 values less than (TO_DATE(' 2015-11-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151111 values less than (TO_DATE(' 2015-11-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151112 values less than (TO_DATE(' 2015-11-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151113 values less than (TO_DATE(' 2015-11-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151114 values less than (TO_DATE(' 2015-11-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151115 values less than (TO_DATE(' 2015-11-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151116 values less than (TO_DATE(' 2015-11-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151117 values less than (TO_DATE(' 2015-11-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151118 values less than (TO_DATE(' 2015-11-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151119 values less than (TO_DATE(' 2015-11-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151120 values less than (TO_DATE(' 2015-11-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151121 values less than (TO_DATE(' 2015-11-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151122 values less than (TO_DATE(' 2015-11-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151123 values less than (TO_DATE(' 2015-11-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151124 values less than (TO_DATE(' 2015-11-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151125 values less than (TO_DATE(' 2015-11-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151126 values less than (TO_DATE(' 2015-11-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151127 values less than (TO_DATE(' 2015-11-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151128 values less than (TO_DATE(' 2015-11-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151129 values less than (TO_DATE(' 2015-11-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151130 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151201 values less than (TO_DATE(' 2015-12-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151202 values less than (TO_DATE(' 2015-12-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151203 values less than (TO_DATE(' 2015-12-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151204 values less than (TO_DATE(' 2015-12-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151205 values less than (TO_DATE(' 2015-12-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151206 values less than (TO_DATE(' 2015-12-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151207 values less than (TO_DATE(' 2015-12-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151208 values less than (TO_DATE(' 2015-12-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151209 values less than (TO_DATE(' 2015-12-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151210 values less than (TO_DATE(' 2015-12-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151211 values less than (TO_DATE(' 2015-12-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151212 values less than (TO_DATE(' 2015-12-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151213 values less than (TO_DATE(' 2015-12-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151214 values less than (TO_DATE(' 2015-12-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151215 values less than (TO_DATE(' 2015-12-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151216 values less than (TO_DATE(' 2015-12-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151217 values less than (TO_DATE(' 2015-12-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151218 values less than (TO_DATE(' 2015-12-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151219 values less than (TO_DATE(' 2015-12-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151220 values less than (TO_DATE(' 2015-12-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151221 values less than (TO_DATE(' 2015-12-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151222 values less than (TO_DATE(' 2015-12-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151223 values less than (TO_DATE(' 2015-12-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151224 values less than (TO_DATE(' 2015-12-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151225 values less than (TO_DATE(' 2015-12-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151226 values less than (TO_DATE(' 2015-12-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151227 values less than (TO_DATE(' 2015-12-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151228 values less than (TO_DATE(' 2015-12-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151229 values less than (TO_DATE(' 2015-12-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151230 values less than (TO_DATE(' 2015-12-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151231 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160101 values less than (TO_DATE(' 2016-01-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160102 values less than (TO_DATE(' 2016-01-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160103 values less than (TO_DATE(' 2016-01-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160104 values less than (TO_DATE(' 2016-01-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160105 values less than (TO_DATE(' 2016-01-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160106 values less than (TO_DATE(' 2016-01-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160107 values less than (TO_DATE(' 2016-01-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160108 values less than (TO_DATE(' 2016-01-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160109 values less than (TO_DATE(' 2016-01-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160110 values less than (TO_DATE(' 2016-01-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160111 values less than (TO_DATE(' 2016-01-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160112 values less than (TO_DATE(' 2016-01-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160113 values less than (TO_DATE(' 2016-01-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160114 values less than (TO_DATE(' 2016-01-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160115 values less than (TO_DATE(' 2016-01-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160116 values less than (TO_DATE(' 2016-01-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160117 values less than (TO_DATE(' 2016-01-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160118 values less than (TO_DATE(' 2016-01-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160119 values less than (TO_DATE(' 2016-01-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160120 values less than (TO_DATE(' 2016-01-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160121 values less than (TO_DATE(' 2016-01-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160122 values less than (TO_DATE(' 2016-01-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160123 values less than (TO_DATE(' 2016-01-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160124 values less than (TO_DATE(' 2016-01-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160125 values less than (TO_DATE(' 2016-01-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160126 values less than (TO_DATE(' 2016-01-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160127 values less than (TO_DATE(' 2016-01-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160128 values less than (TO_DATE(' 2016-01-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160129 values less than (TO_DATE(' 2016-01-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160130 values less than (TO_DATE(' 2016-01-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160131 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160201 values less than (TO_DATE(' 2016-02-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160202 values less than (TO_DATE(' 2016-02-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160203 values less than (TO_DATE(' 2016-02-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160204 values less than (TO_DATE(' 2016-02-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160205 values less than (TO_DATE(' 2016-02-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160206 values less than (TO_DATE(' 2016-02-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160207 values less than (TO_DATE(' 2016-02-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160208 values less than (TO_DATE(' 2016-02-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160209 values less than (TO_DATE(' 2016-02-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160210 values less than (TO_DATE(' 2016-02-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160211 values less than (TO_DATE(' 2016-02-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160212 values less than (TO_DATE(' 2016-02-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160213 values less than (TO_DATE(' 2016-02-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160214 values less than (TO_DATE(' 2016-02-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160215 values less than (TO_DATE(' 2016-02-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160216 values less than (TO_DATE(' 2016-02-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160217 values less than (TO_DATE(' 2016-02-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160218 values less than (TO_DATE(' 2016-02-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160219 values less than (TO_DATE(' 2016-02-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160220 values less than (TO_DATE(' 2016-02-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160221 values less than (TO_DATE(' 2016-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160222 values less than (TO_DATE(' 2016-02-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160223 values less than (TO_DATE(' 2016-02-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160224 values less than (TO_DATE(' 2016-02-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160225 values less than (TO_DATE(' 2016-02-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160226 values less than (TO_DATE(' 2016-02-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160227 values less than (TO_DATE(' 2016-02-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160228 values less than (TO_DATE(' 2016-02-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160229 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160301 values less than (TO_DATE(' 2016-03-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160302 values less than (TO_DATE(' 2016-03-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160303 values less than (TO_DATE(' 2016-03-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160304 values less than (TO_DATE(' 2016-03-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160305 values less than (TO_DATE(' 2016-03-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160306 values less than (TO_DATE(' 2016-03-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160307 values less than (TO_DATE(' 2016-03-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160308 values less than (TO_DATE(' 2016-03-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160309 values less than (TO_DATE(' 2016-03-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160310 values less than (TO_DATE(' 2016-03-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160311 values less than (TO_DATE(' 2016-03-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160312 values less than (TO_DATE(' 2016-03-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160313 values less than (TO_DATE(' 2016-03-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160314 values less than (TO_DATE(' 2016-03-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160315 values less than (TO_DATE(' 2016-03-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160316 values less than (TO_DATE(' 2016-03-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160317 values less than (TO_DATE(' 2016-03-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160318 values less than (TO_DATE(' 2016-03-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160319 values less than (TO_DATE(' 2016-03-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160320 values less than (TO_DATE(' 2016-03-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160321 values less than (TO_DATE(' 2016-03-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160322 values less than (TO_DATE(' 2016-03-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160323 values less than (TO_DATE(' 2016-03-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160324 values less than (TO_DATE(' 2016-03-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160325 values less than (TO_DATE(' 2016-03-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160326 values less than (TO_DATE(' 2016-03-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160327 values less than (TO_DATE(' 2016-03-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160328 values less than (TO_DATE(' 2016-03-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160329 values less than (TO_DATE(' 2016-03-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160330 values less than (TO_DATE(' 2016-03-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160331 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160401 values less than (TO_DATE(' 2016-04-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160402 values less than (TO_DATE(' 2016-04-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160403 values less than (TO_DATE(' 2016-04-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160404 values less than (TO_DATE(' 2016-04-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160405 values less than (TO_DATE(' 2016-04-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160406 values less than (TO_DATE(' 2016-04-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160407 values less than (TO_DATE(' 2016-04-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160408 values less than (TO_DATE(' 2016-04-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160409 values less than (TO_DATE(' 2016-04-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160410 values less than (TO_DATE(' 2016-04-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160411 values less than (TO_DATE(' 2016-04-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160412 values less than (TO_DATE(' 2016-04-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160413 values less than (TO_DATE(' 2016-04-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160414 values less than (TO_DATE(' 2016-04-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160415 values less than (TO_DATE(' 2016-04-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160416 values less than (TO_DATE(' 2016-04-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160417 values less than (TO_DATE(' 2016-04-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160418 values less than (TO_DATE(' 2016-04-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160419 values less than (TO_DATE(' 2016-04-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160420 values less than (TO_DATE(' 2016-04-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160421 values less than (TO_DATE(' 2016-04-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160422 values less than (TO_DATE(' 2016-04-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160423 values less than (TO_DATE(' 2016-04-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160424 values less than (TO_DATE(' 2016-04-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160425 values less than (TO_DATE(' 2016-04-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160426 values less than (TO_DATE(' 2016-04-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160427 values less than (TO_DATE(' 2016-04-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160428 values less than (TO_DATE(' 2016-04-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160429 values less than (TO_DATE(' 2016-04-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160430 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160501 values less than (TO_DATE(' 2016-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160502 values less than (TO_DATE(' 2016-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160503 values less than (TO_DATE(' 2016-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160504 values less than (TO_DATE(' 2016-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160505 values less than (TO_DATE(' 2016-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160506 values less than (TO_DATE(' 2016-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160507 values less than (TO_DATE(' 2016-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160508 values less than (TO_DATE(' 2016-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160509 values less than (TO_DATE(' 2016-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160510 values less than (TO_DATE(' 2016-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160511 values less than (TO_DATE(' 2016-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160512 values less than (TO_DATE(' 2016-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160513 values less than (TO_DATE(' 2016-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160514 values less than (TO_DATE(' 2016-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160515 values less than (TO_DATE(' 2016-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160516 values less than (TO_DATE(' 2016-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160517 values less than (TO_DATE(' 2016-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160518 values less than (TO_DATE(' 2016-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160519 values less than (TO_DATE(' 2016-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160520 values less than (TO_DATE(' 2016-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160521 values less than (TO_DATE(' 2016-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160522 values less than (TO_DATE(' 2016-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160523 values less than (TO_DATE(' 2016-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160524 values less than (TO_DATE(' 2016-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160525 values less than (TO_DATE(' 2016-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160526 values less than (TO_DATE(' 2016-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160527 values less than (TO_DATE(' 2016-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160528 values less than (TO_DATE(' 2016-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160529 values less than (TO_DATE(' 2016-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160530 values less than (TO_DATE(' 2016-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160531 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160601 values less than (TO_DATE(' 2016-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160602 values less than (TO_DATE(' 2016-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160603 values less than (TO_DATE(' 2016-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160604 values less than (TO_DATE(' 2016-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160605 values less than (TO_DATE(' 2016-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160606 values less than (TO_DATE(' 2016-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160607 values less than (TO_DATE(' 2016-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160608 values less than (TO_DATE(' 2016-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160609 values less than (TO_DATE(' 2016-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160610 values less than (TO_DATE(' 2016-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160611 values less than (TO_DATE(' 2016-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160612 values less than (TO_DATE(' 2016-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160613 values less than (TO_DATE(' 2016-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160614 values less than (TO_DATE(' 2016-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160615 values less than (TO_DATE(' 2016-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160616 values less than (TO_DATE(' 2016-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160617 values less than (TO_DATE(' 2016-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160618 values less than (TO_DATE(' 2016-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160619 values less than (TO_DATE(' 2016-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160620 values less than (TO_DATE(' 2016-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160621 values less than (TO_DATE(' 2016-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160622 values less than (TO_DATE(' 2016-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160623 values less than (TO_DATE(' 2016-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160624 values less than (TO_DATE(' 2016-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160625 values less than (TO_DATE(' 2016-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160626 values less than (TO_DATE(' 2016-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160627 values less than (TO_DATE(' 2016-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160628 values less than (TO_DATE(' 2016-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160629 values less than (TO_DATE(' 2016-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160630 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160701 values less than (TO_DATE(' 2016-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160702 values less than (TO_DATE(' 2016-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160703 values less than (TO_DATE(' 2016-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160704 values less than (TO_DATE(' 2016-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160705 values less than (TO_DATE(' 2016-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160706 values less than (TO_DATE(' 2016-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160707 values less than (TO_DATE(' 2016-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160708 values less than (TO_DATE(' 2016-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160709 values less than (TO_DATE(' 2016-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160710 values less than (TO_DATE(' 2016-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160711 values less than (TO_DATE(' 2016-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160712 values less than (TO_DATE(' 2016-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160713 values less than (TO_DATE(' 2016-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160714 values less than (TO_DATE(' 2016-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160715 values less than (TO_DATE(' 2016-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160716 values less than (TO_DATE(' 2016-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160717 values less than (TO_DATE(' 2016-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160718 values less than (TO_DATE(' 2016-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160719 values less than (TO_DATE(' 2016-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160720 values less than (TO_DATE(' 2016-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160721 values less than (TO_DATE(' 2016-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160722 values less than (TO_DATE(' 2016-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160723 values less than (TO_DATE(' 2016-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160724 values less than (TO_DATE(' 2016-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160725 values less than (TO_DATE(' 2016-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160726 values less than (TO_DATE(' 2016-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160727 values less than (TO_DATE(' 2016-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160728 values less than (TO_DATE(' 2016-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160729 values less than (TO_DATE(' 2016-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160730 values less than (TO_DATE(' 2016-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160731 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161001 values less than (TO_DATE(' 2016-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161002 values less than (TO_DATE(' 2016-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161003 values less than (TO_DATE(' 2016-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161004 values less than (TO_DATE(' 2016-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161005 values less than (TO_DATE(' 2016-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161006 values less than (TO_DATE(' 2016-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161007 values less than (TO_DATE(' 2016-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161008 values less than (TO_DATE(' 2016-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161009 values less than (TO_DATE(' 2016-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161010 values less than (TO_DATE(' 2016-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161011 values less than (TO_DATE(' 2016-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161012 values less than (TO_DATE(' 2016-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161013 values less than (TO_DATE(' 2016-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161014 values less than (TO_DATE(' 2016-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161015 values less than (TO_DATE(' 2016-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161016 values less than (TO_DATE(' 2016-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161017 values less than (TO_DATE(' 2016-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161018 values less than (TO_DATE(' 2016-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161019 values less than (TO_DATE(' 2016-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161020 values less than (TO_DATE(' 2016-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161021 values less than (TO_DATE(' 2016-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161022 values less than (TO_DATE(' 2016-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161023 values less than (TO_DATE(' 2016-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161024 values less than (TO_DATE(' 2016-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161025 values less than (TO_DATE(' 2016-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161026 values less than (TO_DATE(' 2016-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161027 values less than (TO_DATE(' 2016-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161028 values less than (TO_DATE(' 2016-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161029 values less than (TO_DATE(' 2016-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161030 values less than (TO_DATE(' 2016-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161031 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_JZ
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.JZ_STATIONCONSUME
  is '站点刷卡数据结存表';
comment on column OSECD.JZ_STATIONCONSUME.recordid
  is '记录编号';
comment on column OSECD.JZ_STATIONCONSUME.routeid
  is '线路编号';
comment on column OSECD.JZ_STATIONCONSUME.routename
  is '线路名称';
comment on column OSECD.JZ_STATIONCONSUME.stationno
  is '站点编号';
comment on column OSECD.JZ_STATIONCONSUME.busid
  is '车辆编号';
comment on column OSECD.JZ_STATIONCONSUME.cardid
  is '车牌号';
comment on column OSECD.JZ_STATIONCONSUME.arrtime
  is '到站时间';
comment on column OSECD.JZ_STATIONCONSUME.iccardnum
  is '刷卡数量';
comment on column OSECD.JZ_STATIONCONSUME.jzdate
  is '结存日期';
comment on column OSECD.JZ_STATIONCONSUME.recdate
  is '记录日期';
create index OSECD.IX_STATIONCONSUME1 on OSECD.JZ_STATIONCONSUME (JZDATE, STATIONNO, ARRTIME)
  local;
create index OSECD.IX_STATIONCONSUME2 on OSECD.JZ_STATIONCONSUME (RECORDID)
  local;

prompt
prompt Creating table JZ_STATIONPHASESTORAGE
prompt =====================================
prompt
create table OSECD.JZ_STATIONPHASESTORAGE
(
  recordid                 VARCHAR2(36) not null,
  orgid                    VARCHAR2(36),
  orgname                  NVARCHAR2(60),
  areatype                 VARCHAR2(10),
  areaname                 NVARCHAR2(50),
  jzdate                   DATE,
  storagestationfirsttype  VARCHAR2(10),
  storagestationfirstname  NVARCHAR2(50),
  storagestationsecondtype VARCHAR2(10),
  storagestationsecondname NVARCHAR2(50),
  stationcount             NUMBER(6),
  stationlength            NUMBER(8,2),
  stationstopbuscount      NUMBER(8),
  datasavelevel            VARCHAR2(2),
  recdate                  DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_STATIONPHASESTORAGE
  is '站点数据结存表';
comment on column OSECD.JZ_STATIONPHASESTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_STATIONPHASESTORAGE.orgid
  is '组织编号';
comment on column OSECD.JZ_STATIONPHASESTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_STATIONPHASESTORAGE.areatype
  is '地区类型';
comment on column OSECD.JZ_STATIONPHASESTORAGE.areaname
  is '字典名称';
comment on column OSECD.JZ_STATIONPHASESTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_STATIONPHASESTORAGE.storagestationfirsttype
  is '站点结存类型一级字典';
comment on column OSECD.JZ_STATIONPHASESTORAGE.storagestationfirstname
  is '字典名称';
comment on column OSECD.JZ_STATIONPHASESTORAGE.storagestationsecondtype
  is '站点结存类型二级字典';
comment on column OSECD.JZ_STATIONPHASESTORAGE.storagestationsecondname
  is '字典名称';
comment on column OSECD.JZ_STATIONPHASESTORAGE.stationcount
  is '站点数量';
comment on column OSECD.JZ_STATIONPHASESTORAGE.stationlength
  is '站点长度';
comment on column OSECD.JZ_STATIONPHASESTORAGE.stationstopbuscount
  is '站点停车数';
comment on column OSECD.JZ_STATIONPHASESTORAGE.datasavelevel
  is '数据结存级别';
create index OSECD.IDX_STATIONBASESTORAGE on OSECD.JZ_STATIONPHASESTORAGE (JZDATE, AREATYPE, STORAGESTATIONFIRSTTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_STATIONPHASESTORAGE
  add constraint PK_STATIONPHASESTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_TIMEPHASEDATASTORAGE
prompt ======================================
prompt
create table OSECD.JZ_TIMEPHASEDATASTORAGE
(
  recordid             VARCHAR2(36) not null,
  orgid                VARCHAR2(36),
  routeid              VARCHAR2(20),
  routename            NVARCHAR2(20),
  jzdate               DATE,
  timephasetype        VARCHAR2(2),
  timephasevalue       NVARCHAR2(50),
  timephasestarttime   NUMBER(8,6),
  timephaseendtime     NUMBER(8,6),
  timephaseinterval    NUMBER(5,2),
  timephasecircletime  NUMBER(5,2),
  stdseqs              NUMBER,
  loadpsgcapability    NUMBER,
  planseqmile          NUMBER(18,2),
  gpsmiles             NUMBER(18,2),
  runmiles             NUMBER(18,2),
  unrunmiles           NUMBER(18,2),
  devotionbuscount     NUMBER,
  devotionempcount     NUMBER,
  planbuscount         NUMBER,
  planempcount         NUMBER,
  psgcount             NUMBER,
  planseqcount         NUMBER,
  actualseqcount       NUMBER,
  actualinterval       NUMBER(8,2),
  actualcircletime     NUMBER(8,2),
  bussendintervalstd   NUMBER,
  busdistancerate      NUMBER(5,2),
  stationkeepbackrate  NUMBER(5,2),
  overspeedcount       NUMBER,
  unrulestopcount      NUMBER,
  mdlopendoorcount     NUMBER,
  runcircletime        NUMBER(8,2),
  routeruntime         NUMBER(8,2),
  routestoptime        NUMBER(8,2),
  bussendspeed         NUMBER(8,2),
  busrunspeed          NUMBER(8,2),
  ontimeseqcount       NUMBER,
  bigstationontimerate NUMBER(5,2),
  datasavelevel        VARCHAR2(2),
  recdate              DATE default sysdate,
  sumbuscount          NUMBER,
  routecode            NVARCHAR2(36),
  storageorgtype       VARCHAR2(2),
  timephasetime        NUMBER(18,2),
  runtimes             NUMBER(18,2),
  fullseqcount         NUMBER
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_TIMEPHASEDATASTORAGE
  is '峰段数据结存表(公交公司)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.orgid
  is '组织ID';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.routeid
  is '线路编号';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.routename
  is '线路编号';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.timephasetype
  is '峰段类型';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.timephasevalue
  is '峰段名称';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.timephasestarttime
  is '峰段开始时间(相对0点的天数)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.timephaseendtime
  is '峰段结束时间(相对0点的天数)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.timephaseinterval
  is '峰段发车间隔（分钟）';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.timephasecircletime
  is '峰段周转时间（分钟）';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.stdseqs
  is '标准车次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.loadpsgcapability
  is '载客能力';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.planseqmile
  is '计划里程';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.gpsmiles
  is 'GPS里程';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.runmiles
  is '营运里程';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.unrunmiles
  is '非营运里程';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.devotionbuscount
  is '投入车辆数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.devotionempcount
  is '投入人员数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.planbuscount
  is '计划投入车辆数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.planempcount
  is '计划投入驾驶员数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.psgcount
  is '客运量';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.planseqcount
  is '计划班次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.actualseqcount
  is '实际班次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.actualinterval
  is '实际平均发车间隔（分钟）';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.actualcircletime
  is '实际平均周转时间（分钟）';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.bussendintervalstd
  is '发车间隔合格班次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.busdistancerate
  is '车距合格率';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.stationkeepbackrate
  is '车站平均留客率';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.overspeedcount
  is '超速次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.unrulestopcount
  is '不规范停车次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.mdlopendoorcount
  is '中途开关门次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.runcircletime
  is '运营周期时间(分钟)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.routeruntime
  is '线路行驶时间(分钟)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.routestoptime
  is '线路停站时间(分钟)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.bussendspeed
  is '运送车速(公里/小时)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.busrunspeed
  is '运营车速(公里/小时)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.ontimeseqcount
  is '准点班次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.bigstationontimerate
  is '大站准点率';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.datasavelevel
  is '数据结存级别';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.sumbuscount
  is '总配车数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.routecode
  is '线路编码';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.storageorgtype
  is '数据结存级别(1-总公司，2-分公司，3-车队，4-线路)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.timephasetime
  is '峰段时间（小时）';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.runtimes
  is '运营时间(小时)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE.fullseqcount
  is '完整班次数';
create index OSECD.IDX_TIMEPHASE on OSECD.JZ_TIMEPHASEDATASTORAGE (JZDATE, DATASAVELEVEL, STORAGEORGTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_TIMEPHASEDATASTORAGE
  add constraint PK_TIMEPHASESTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_TIMEPHASEDATASTORAGE2
prompt =======================================
prompt
create table OSECD.JZ_TIMEPHASEDATASTORAGE2
(
  recordid             VARCHAR2(36) not null,
  orgid                VARCHAR2(36),
  routeid              VARCHAR2(20),
  routename            NVARCHAR2(20),
  jzdate               DATE,
  timephasetype        VARCHAR2(2),
  timephasevalue       NVARCHAR2(50),
  timephasestarttime   NUMBER(8,6),
  timephaseendtime     NUMBER(8,6),
  timephaseinterval    NUMBER(5,2),
  timephasecircletime  NUMBER(5,2),
  stdseqs              NUMBER,
  loadpsgcapability    NUMBER,
  planseqmile          NUMBER(30,2),
  gpsmiles             NUMBER(30,2),
  runmiles             NUMBER(30,2),
  unrunmiles           NUMBER(30,2),
  devotionbuscount     NUMBER,
  devotionempcount     NUMBER,
  planbuscount         NUMBER,
  planempcount         NUMBER,
  psgcount             NUMBER,
  planseqcount         NUMBER,
  actualseqcount       NUMBER,
  actualinterval       NUMBER(8,2),
  actualcircletime     NUMBER(8,2),
  bussendintervalstd   NUMBER,
  busdistancerate      NUMBER(5,2),
  stationkeepbackrate  NUMBER(5,2),
  overspeedcount       NUMBER,
  unrulestopcount      NUMBER,
  mdlopendoorcount     NUMBER,
  runcircletime        NUMBER(8,2),
  routeruntime         NUMBER(8,2),
  routestoptime        NUMBER(8,2),
  bussendspeed         NUMBER(8,2),
  busrunspeed          NUMBER(8,2),
  ontimeseqcount       NUMBER,
  bigstationontimerate NUMBER(5,2),
  datasavelevel        VARCHAR2(2),
  recdate              DATE default sysdate,
  sumbuscount          NUMBER,
  routecode            NVARCHAR2(36),
  storageorgtype       VARCHAR2(2),
  timephasetime        NUMBER(18,2),
  runtimes             NUMBER(18,2),
  fullseqcount         NUMBER,
  onlinebuscount       NUMBER,
  runbuscount          NUMBER,
  unrunbuscount        NUMBER
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_TIMEPHASEDATASTORAGE2
  is '峰段数据结存表(五个峰段)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.recordid
  is '记录编号';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.orgid
  is '组织ID';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.routeid
  is '线路编号';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.routename
  is '线路编号';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.jzdate
  is '结存日期';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.timephasetype
  is '峰段类型';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.timephasevalue
  is '峰段名称';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.timephasestarttime
  is '峰段开始时间(相对0点的天数)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.timephaseendtime
  is '峰段结束时间(相对0点的天数)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.timephaseinterval
  is '峰段发车间隔（分钟）';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.timephasecircletime
  is '峰段周转时间（分钟）';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.stdseqs
  is '标准车次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.loadpsgcapability
  is '载客能力';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.planseqmile
  is '计划里程';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.gpsmiles
  is 'GPS里程';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.runmiles
  is '营运里程';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.unrunmiles
  is '非营运里程';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.devotionbuscount
  is '投入车辆数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.devotionempcount
  is '投入人员数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.planbuscount
  is '计划投入车辆数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.planempcount
  is '计划投入驾驶员数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.psgcount
  is '客运量';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.planseqcount
  is '计划班次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.actualseqcount
  is '实际班次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.actualinterval
  is '实际平均发车间隔（分钟）';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.actualcircletime
  is '实际平均周转时间（分钟）';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.bussendintervalstd
  is '发车间隔合格班次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.busdistancerate
  is '车距合格率';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.stationkeepbackrate
  is '车站平均留客率';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.overspeedcount
  is '超速次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.unrulestopcount
  is '不规范停车次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.mdlopendoorcount
  is '中途开关门次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.runcircletime
  is '运营周期时间(分钟)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.routeruntime
  is '线路行驶时间(分钟)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.routestoptime
  is '线路停站时间(分钟)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.bussendspeed
  is '运送车速(公里/小时)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.busrunspeed
  is '运营车速(公里/小时)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.ontimeseqcount
  is '准点班次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.bigstationontimerate
  is '大站准点率';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.datasavelevel
  is '数据结存级别(1-年，2-月，3-日)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.sumbuscount
  is '总配车数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.routecode
  is '线路编码';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.storageorgtype
  is '数据结存级别(1-总公司，2-分公司，3-车队，4-线路)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.timephasetime
  is '峰段时间（小时）';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.runtimes
  is '运营时间(小时)';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.fullseqcount
  is '完整班次数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.onlinebuscount
  is 'GPS在线车辆数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.runbuscount
  is '投入运营车辆数';
comment on column OSECD.JZ_TIMEPHASEDATASTORAGE2.unrunbuscount
  is '投入非运营车辆数';
create index OSECD.IDX_TIMEPHASE1 on OSECD.JZ_TIMEPHASEDATASTORAGE2 (ORGID, SUMBUSCOUNT)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IDX_TIMEPHASE2 on OSECD.JZ_TIMEPHASEDATASTORAGE2 (JZDATE, ROUTEID, TIMEPHASETYPE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.UNQ_DATALEVEL on OSECD.JZ_TIMEPHASEDATASTORAGE2 (JZDATE, DATASAVELEVEL, STORAGEORGTYPE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_TIMEPHASEDATASTORAGE2
  add constraint PK_TIMEPHASESTORAGE2 primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_TRANSHIPSTORAGE
prompt =================================
prompt
create table OSECD.JZ_TRANSHIPSTORAGE
(
  recordid           VARCHAR2(36) not null,
  passengernum       NUMBER,
  passengercount     NUMBER,
  transhipcount      NUMBER,
  passengermaxcount  NUMBER,
  transhipcofficient NUMBER,
  jzdate             DATE,
  datasavelevel      VARCHAR2(2),
  recdate            DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_TRANSHIPSTORAGE
  is '城市公交出行换乘系数结存表';
comment on column OSECD.JZ_TRANSHIPSTORAGE.recordid
  is '记录编号';
comment on column OSECD.JZ_TRANSHIPSTORAGE.passengernum
  is '出行人数';
comment on column OSECD.JZ_TRANSHIPSTORAGE.passengercount
  is '出行次数';
comment on column OSECD.JZ_TRANSHIPSTORAGE.transhipcount
  is '换乘次数';
comment on column OSECD.JZ_TRANSHIPSTORAGE.passengermaxcount
  is '出行人次';
comment on column OSECD.JZ_TRANSHIPSTORAGE.transhipcofficient
  is '换乘系数';
comment on column OSECD.JZ_TRANSHIPSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_TRANSHIPSTORAGE.datasavelevel
  is '结存级别：1-年，2-月，3-日';
comment on column OSECD.JZ_TRANSHIPSTORAGE.recdate
  is '记录时间';
create index OSECD.IX_TRANSHIP on OSECD.JZ_TRANSHIPSTORAGE (JZDATE, DATASAVELEVEL)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.JZ_TRANSHIPSTORAGE
  add constraint PK_TRANSHIP primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_TWOROUTEREPEATEINDEX
prompt ======================================
prompt
create table OSECD.JZ_TWOROUTEREPEATEINDEX
(
  rid           VARCHAR2(32),
  routeid       VARCHAR2(20),
  routename     VARCHAR2(50),
  routelength   NUMBER,
  routeid2      VARCHAR2(20),
  routename2    VARCHAR2(50),
  routelength2  NUMBER,
  repeatelength NUMBER,
  jzdate        DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_TWOROUTEREPEATEINDEX
  is '两线路重复系数';
comment on column OSECD.JZ_TWOROUTEREPEATEINDEX.rid
  is 'ID';
comment on column OSECD.JZ_TWOROUTEREPEATEINDEX.routeid
  is '线路ID';
comment on column OSECD.JZ_TWOROUTEREPEATEINDEX.routename
  is '线路名称';
comment on column OSECD.JZ_TWOROUTEREPEATEINDEX.routelength
  is '线路长度，单位KM';
comment on column OSECD.JZ_TWOROUTEREPEATEINDEX.routeid2
  is '线路ID';
comment on column OSECD.JZ_TWOROUTEREPEATEINDEX.routename2
  is '线路名称';
comment on column OSECD.JZ_TWOROUTEREPEATEINDEX.routelength2
  is '线路长度，单位KM';
comment on column OSECD.JZ_TWOROUTEREPEATEINDEX.repeatelength
  is '重复道路长度';
comment on column OSECD.JZ_TWOROUTEREPEATEINDEX.jzdate
  is '结转日期';
create index OSECD.IDX_TWOROUTEREPEATE on OSECD.JZ_TWOROUTEREPEATEINDEX (ROUTEID, ROUTEID2, JZDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table JZ_USELESSBUSSTORAGE
prompt ===================================
prompt
create table OSECD.JZ_USELESSBUSSTORAGE
(
  recordid              VARCHAR2(36) not null,
  orgid                 VARCHAR2(36) not null,
  orgname               NVARCHAR2(60) not null,
  jzdate                DATE,
  realuselessbuscount   NUMBER(4) not null,
  shoulduselessbuscount NUMBER(4) not null,
  recdate               DATE default sysdate
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.JZ_USELESSBUSSTORAGE
  is '报废车辆结存';
comment on column OSECD.JZ_USELESSBUSSTORAGE.recordid
  is '记录ID';
comment on column OSECD.JZ_USELESSBUSSTORAGE.orgid
  is '组织ID';
comment on column OSECD.JZ_USELESSBUSSTORAGE.orgname
  is '组织名称';
comment on column OSECD.JZ_USELESSBUSSTORAGE.jzdate
  is '结存日期';
comment on column OSECD.JZ_USELESSBUSSTORAGE.realuselessbuscount
  is '实际报废车辆数';
comment on column OSECD.JZ_USELESSBUSSTORAGE.shoulduselessbuscount
  is '企业应该报废车辆数';
alter table OSECD.JZ_USELESSBUSSTORAGE
  add constraint PK_USELESSBUSSTORAGE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MAP_AREA
prompt =======================
prompt
create table OSECD.MAP_AREA
(
  ma_id         NUMBER not null,
  ma_type       VARCHAR2(100),
  ma_name       VARCHAR2(200),
  ma_desc       VARCHAR2(4000),
  ma_shapeid    VARCHAR2(100),
  ma_relatedata VARCHAR2(4000),
  ma_isactive   VARCHAR2(100),
  createdate    DATE,
  createdesc    VARCHAR2(100),
  updatedate    DATE,
  updatedesc    VARCHAR2(100),
  ma_order      NUMBER,
  ma_relateid   VARCHAR2(100),
  ma_roadtype   CHAR(1)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MAP_AREA.ma_id
  is '标识';
comment on column OSECD.MAP_AREA.ma_type
  is '类型（重点道口\道口路线）';
comment on column OSECD.MAP_AREA.ma_name
  is '名称';
comment on column OSECD.MAP_AREA.ma_desc
  is '描述';
comment on column OSECD.MAP_AREA.ma_shapeid
  is '关联MAP_SHAPE表中图形ID ';
comment on column OSECD.MAP_AREA.ma_relatedata
  is '关联数据 重点道口为道口路线 道口路线为站到站ID';
comment on column OSECD.MAP_AREA.ma_isactive
  is '有效';
comment on column OSECD.MAP_AREA.createdate
  is '创建日期';
comment on column OSECD.MAP_AREA.createdesc
  is '创建描述';
comment on column OSECD.MAP_AREA.updatedate
  is '更新日期';
comment on column OSECD.MAP_AREA.updatedesc
  is '更新描述';
comment on column OSECD.MAP_AREA.ma_order
  is '排序';
comment on column OSECD.MAP_AREA.ma_relateid
  is '关联ID';
comment on column OSECD.MAP_AREA.ma_roadtype
  is '重点路段类型（1、道路 2、关口）';
alter table OSECD.MAP_AREA
  add constraint PK_MAP_AREA primary key (MA_ID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MAP_AREA_DETAIL
prompt ==============================
prompt
create table OSECD.MAP_AREA_DETAIL
(
  mainroadid     VARCHAR2(36),
  mainroadname   VARCHAR2(200),
  subroutename   VARCHAR2(200),
  startstationno VARCHAR2(36),
  endstationno   VARCHAR2(36),
  ma_roadtype    CHAR(1)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MAP_AREA_DETAIL.mainroadid
  is '编号';
comment on column OSECD.MAP_AREA_DETAIL.mainroadname
  is '道路名称';
comment on column OSECD.MAP_AREA_DETAIL.subroutename
  is '道路方向';
comment on column OSECD.MAP_AREA_DETAIL.startstationno
  is '开始站点';
comment on column OSECD.MAP_AREA_DETAIL.endstationno
  is '结束站点';
comment on column OSECD.MAP_AREA_DETAIL.ma_roadtype
  is '重点路段类型（1、道路 2、关口）';
create index OSECD.IX_MAPTEST on OSECD.MAP_AREA_DETAIL (MAINROADID, STARTSTATIONNO, ENDSTATIONNO)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MAP_STATIONTOSTATIONINFO
prompt =======================================
prompt
create table OSECD.MAP_STATIONTOSTATIONINFO
(
  ss_id                     NUMBER not null,
  ss_fromstationid          VARCHAR2(100),
  ss_fromstationcodenum     VARCHAR2(100),
  ss_tostationid            VARCHAR2(100),
  ss_tostationcodenum       VARCHAR2(100),
  ss_distance               NUMBER(10,2),
  ss_lineids                VARCHAR2(1000),
  ss_linenames              VARCHAR2(1000),
  ss_segmentids             VARCHAR2(2000),
  ss_segmentnames           VARCHAR2(2000),
  ss_sharp                  BLOB,
  ss_sharppoint             CLOB,
  ss_fromstationtolinemeter NUMBER(10,2),
  ss_tostationtolinemeter   NUMBER(10,2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 4M
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_id
  is '标识';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_fromstationid
  is '开始站ID';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_fromstationcodenum
  is '开始站编码';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_tostationid
  is '结束站ID';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_tostationcodenum
  is '结束站编码';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_distance
  is '距离单位米';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_lineids
  is '线路ID列表';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_linenames
  is '线路名称列表';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_segmentids
  is '单程ID';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_segmentnames
  is '单程名称';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_sharp
  is 'arcgis图形';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_sharppoint
  is '图形点数据';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_fromstationtolinemeter
  is '开始站到线路距离';
comment on column OSECD.MAP_STATIONTOSTATIONINFO.ss_tostationtolinemeter
  is '结束站到线路距离';
alter table OSECD.MAP_STATIONTOSTATIONINFO
  add constraint PK_MAP_STATIONTOSTATIONINFO primary key (SS_ID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 256K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCACCOMMODATIONROADINFOGS
prompt ========================================
prompt
create table OSECD.MCACCOMMODATIONROADINFOGS
(
  recordid              VARCHAR2(36) not null,
  accommodationroadid   NVARCHAR2(20) not null,
  accommodationroadname NVARCHAR2(50) not null,
  regionlevel           VARCHAR2(2),
  accommodationtype     VARCHAR2(2),
  begindate             DATE,
  enddate               DATE,
  miles                 NUMBER(5,2),
  roadmiles             NUMBER(5,2),
  linecount             NUMBER(1) default 1,
  designspeed           NUMBER(5,2),
  crossingcount         NUMBER(2),
  isactive              CHAR(1),
  memos                 NVARCHAR2(255),
  created               DATE,
  createby              VARCHAR2(36),
  updated               DATE,
  updateby              VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCACCOMMODATIONROADINFOGS
  is '专用道基础信息表';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.recordid
  is '记录ID';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.accommodationroadid
  is '专用道编号';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.accommodationroadname
  is '专用道名称';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.regionlevel
  is '地区类型';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.accommodationtype
  is '专用道类型（全天、白天、夜间、高峰、等）';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.begindate
  is '启用日期';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.enddate
  is '终止日期';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.miles
  is '专用道长度（公里）';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.roadmiles
  is '道路长度（公里）';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.linecount
  is '车道数';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.designspeed
  is '设计时速';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.crossingcount
  is '路口数';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.isactive
  is '是否有效';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.memos
  is '备注';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.created
  is '创建日期';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.createby
  is '创建者';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.updated
  is '修改日期';
comment on column OSECD.MCACCOMMODATIONROADINFOGS.updateby
  is '修改者';
alter table OSECD.MCACCOMMODATIONROADINFOGS
  add constraint PK_ACCOMMODATIONROADINFO primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCACCOMMODATIONROADINFOGS
  add constraint UQ_ACCOMMODATION_ACCOMMODATIO unique (ACCOMMODATIONROADID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCACCOMMODATIONROADINFOGS_MAP
prompt ============================================
prompt
create table OSECD.MCACCOMMODATIONROADINFOGS_MAP
(
  accommid      NVARCHAR2(20) not null,
  accommname    NVARCHAR2(50) not null,
  regionlevel   VARCHAR2(20),
  accommtype    VARCHAR2(20),
  begindate     DATE,
  enddate       DATE,
  miles         NUMBER(5,2),
  roadmiles     NUMBER(5,2),
  linecount     NUMBER(1) default 1,
  designspeed   NUMBER(5,2),
  crossingcount NUMBER(2),
  isactive      CHAR(1),
  memos         NVARCHAR2(255),
  created       DATE,
  createby      VARCHAR2(36),
  updated       DATE,
  updateby      VARCHAR2(36),
  shape         SDO_GEOMETRY
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.accommid
  is '专用道编号';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.accommname
  is '专用道名称';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.regionlevel
  is '地区类型';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.accommtype
  is '专用道类型（全天、白天、夜间、高峰、等）';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.begindate
  is '启用日期';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.enddate
  is '终止日期';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.miles
  is '专用道长度（公里）';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.roadmiles
  is '道路长度（公里）';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.linecount
  is '车道数';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.designspeed
  is '设计时速';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.crossingcount
  is '路口数';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.isactive
  is '是否有效';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.memos
  is '备注';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.created
  is '创建日期';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.createby
  is '创建者';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.updated
  is '修改日期';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.updateby
  is '修改者';
comment on column OSECD.MCACCOMMODATIONROADINFOGS_MAP.shape
  is '画图专用';

prompt
prompt Creating table MCALARMAREAINFOGS
prompt ================================
prompt
create table OSECD.MCALARMAREAINFOGS
(
  areaid     VARCHAR2(36) not null,
  areaname   NVARCHAR2(50),
  shape      SDO_GEOMETRY,
  areatype   VARCHAR2(2),
  longitude1 NUMBER(9,6),
  latitude1  NUMBER(9,6),
  longitude2 NUMBER(9,6),
  latitude2  NUMBER(9,6),
  radius     NUMBER,
  begindate  DATE default DATE'2000-01-01',
  enddate    DATE default DATE'9999-12-31',
  created    DATE,
  createdby  VARCHAR2(36),
  updated    DATE,
  updatedby  VARCHAR2(36),
  stdvalue   NUMBER
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCALARMAREAINFOGS
  is '报警区域信息表';
comment on column OSECD.MCALARMAREAINFOGS.areaid
  is '报警区域编号';
comment on column OSECD.MCALARMAREAINFOGS.areaname
  is '报警区域名称';
comment on column OSECD.MCALARMAREAINFOGS.shape
  is '区域';
comment on column OSECD.MCALARMAREAINFOGS.areatype
  is '1-圆，2-矩形';
comment on column OSECD.MCALARMAREAINFOGS.longitude1
  is '经度1（圆心经度，矩形左上点经度)';
comment on column OSECD.MCALARMAREAINFOGS.latitude1
  is '纬度1（圆心纬度，矩形左上点纬度)';
comment on column OSECD.MCALARMAREAINFOGS.longitude2
  is '经度2(圆形为空，矩形右下点经度)';
comment on column OSECD.MCALARMAREAINFOGS.latitude2
  is '纬度2(圆形为空，矩形右下点纬度)';
comment on column OSECD.MCALARMAREAINFOGS.radius
  is '半径';
comment on column OSECD.MCALARMAREAINFOGS.begindate
  is '生效日期';
comment on column OSECD.MCALARMAREAINFOGS.enddate
  is '失效日期';
comment on column OSECD.MCALARMAREAINFOGS.created
  is '创建日期';
comment on column OSECD.MCALARMAREAINFOGS.createdby
  is '创建者';
comment on column OSECD.MCALARMAREAINFOGS.updated
  is '更新日期';
comment on column OSECD.MCALARMAREAINFOGS.updatedby
  is '更新者';
comment on column OSECD.MCALARMAREAINFOGS.stdvalue
  is '标准值';
alter table OSECD.MCALARMAREAINFOGS
  add constraint PK_ALARNMAREA primary key (AREAID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCAREABUREAUINFOGS
prompt =================================
prompt
create table OSECD.MCAREABUREAUINFOGS
(
  areabureauid   VARCHAR2(36),
  areabureauname VARCHAR2(50),
  shortname      VARCHAR2(50),
  isactive       VARCHAR2(1),
  sortid         NUMBER
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCAREABUREAUINFOGS
  is '辖区局基础信息表';
comment on column OSECD.MCAREABUREAUINFOGS.areabureauid
  is '辖区局编码';
comment on column OSECD.MCAREABUREAUINFOGS.areabureauname
  is '辖区局名称';
comment on column OSECD.MCAREABUREAUINFOGS.shortname
  is '简称';
comment on column OSECD.MCAREABUREAUINFOGS.isactive
  is '是否有效 0 无效 1有效';
comment on column OSECD.MCAREABUREAUINFOGS.sortid
  is '顺序号';

prompt
prompt Creating table MCBUSCHANGEINFOGS
prompt ================================
prompt
create table OSECD.MCBUSCHANGEINFOGS
(
  recordid  VARCHAR2(36) not null,
  orgid     VARCHAR2(36),
  orgname   VARCHAR2(60),
  routeid   VARCHAR2(36),
  routename VARCHAR2(36),
  busid     VARCHAR2(36),
  cardid    VARCHAR2(20),
  runmonth  DATE,
  busstatus VARCHAR2(10),
  begindate DATE,
  enddate   DATE,
  created   DATE,
  createdby VARCHAR2(36),
  updtaed   DATE,
  updatedby VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCBUSCHANGEINFOGS
  is '车辆状态变动企业上报数据信息表';
comment on column OSECD.MCBUSCHANGEINFOGS.recordid
  is '记录编号';
comment on column OSECD.MCBUSCHANGEINFOGS.orgid
  is '组织编号';
comment on column OSECD.MCBUSCHANGEINFOGS.orgname
  is '组织名称';
comment on column OSECD.MCBUSCHANGEINFOGS.routeid
  is '线路编号';
comment on column OSECD.MCBUSCHANGEINFOGS.routename
  is '线路名称';
comment on column OSECD.MCBUSCHANGEINFOGS.busid
  is '车辆编号';
comment on column OSECD.MCBUSCHANGEINFOGS.cardid
  is '车牌号';
comment on column OSECD.MCBUSCHANGEINFOGS.runmonth
  is '运营月份';
comment on column OSECD.MCBUSCHANGEINFOGS.busstatus
  is '车辆状态';
comment on column OSECD.MCBUSCHANGEINFOGS.begindate
  is '启用日期';
comment on column OSECD.MCBUSCHANGEINFOGS.enddate
  is '注销日期';
comment on column OSECD.MCBUSCHANGEINFOGS.created
  is '创建时间';
comment on column OSECD.MCBUSCHANGEINFOGS.createdby
  is '创建人';
comment on column OSECD.MCBUSCHANGEINFOGS.updtaed
  is '更新时间';
comment on column OSECD.MCBUSCHANGEINFOGS.updatedby
  is '更新人';
create index OSECD.IX_BUSCHANGEINFO on OSECD.MCBUSCHANGEINFOGS (ORGID, RUNMONTH)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCBUSCHANGEINFOGS
  add constraint PK_BUSCHANGEINFO primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCBUSCHANGEINFOGS_TEMP
prompt =====================================
prompt
create table OSECD.MCBUSCHANGEINFOGS_TEMP
(
  recordid  VARCHAR2(36),
  fileid    VARCHAR2(36),
  orgid     VARCHAR2(36),
  orgname   VARCHAR2(60),
  routeid   VARCHAR2(36),
  routename VARCHAR2(36),
  busid     VARCHAR2(36),
  cardid    VARCHAR2(20),
  runmonth  DATE,
  busstatus VARCHAR2(10),
  begindate DATE,
  enddate   DATE,
  created   DATE,
  createdby VARCHAR2(36),
  updtaed   DATE,
  updatedby VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCBUSCHANGEINFOGS_TEMP
  is '车辆状态变动企业上报数据信息表';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.recordid
  is '记录编号';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.fileid
  is '上传文件编号';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.orgid
  is '组织编号';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.orgname
  is '组织名称';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.routeid
  is '线路编号';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.routename
  is '线路名称';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.busid
  is '车辆编号';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.cardid
  is '车牌号';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.runmonth
  is '运营月份';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.busstatus
  is '车辆状态';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.begindate
  is '启用日期';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.enddate
  is '注销日期';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.created
  is '创建时间';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.createdby
  is '创建人';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.updtaed
  is '更新时间';
comment on column OSECD.MCBUSCHANGEINFOGS_TEMP.updatedby
  is '更新人';

prompt
prompt Creating table MCBUSINFOGS
prompt ==========================
prompt
create table OSECD.MCBUSINFOGS
(
  busid                VARCHAR2(36) not null,
  orgid                VARCHAR2(36),
  cardid               NVARCHAR2(20),
  busselfid            NVARCHAR2(20),
  buydate              DATE,
  usedate              DATE,
  usedfor              CHAR(1),
  uselesscyc           NUMBER(2),
  realuselessdate      DATE,
  uselessmiles         NUMBER(10,2),
  uselessflag          CHAR(1),
  stdcoefficient       NUMBER(5,3),
  hasiccardeqmt        CHAR(1) default 1,
  businvideocount      NUMBER(2),
  busoutvideocount     NUMBER(2),
  hasinbusled          CHAR(1) default 0,
  hasheadbusled        CHAR(1) default 0,
  hascondition         CHAR(1) default 1,
  islowfloor           CHAR(1) default 1,
  busgrade             CHAR(1),
  fueltype             VARCHAR2(2),
  milecoefficient      NUMBER(5,3),
  seatcount            NUMBER(3),
  standcount           NUMBER(3),
  busmachineid         NVARCHAR2(20),
  productid            NUMBER(10),
  isactive             CHAR(1),
  memos                NVARCHAR2(255),
  created              DATE,
  createdby            VARCHAR2(36),
  updated              DATE,
  updatedby            VARCHAR2(36),
  standardoilnum       NUMBER(6,2),
  buslength            NUMBER,
  bustype              VARCHAR2(40),
  oiltype              VARCHAR2(40),
  upszbusid            VARCHAR2(8),
  totalmile            NUMBER,
  upszbusidtmp         VARCHAR2(2),
  vehicletype          VARCHAR2(8),
  buslengthtype        VARCHAR2(2),
  busoperatetype       VARCHAR2(2) default 1,
  busstatus            VARCHAR2(2) default 1,
  orgidfrom            VARCHAR2(36),
  routeid              VARCHAR2(36),
  roadcertificatedate  DATE,
  drivecertificatedate DATE,
  isdoublefloor        CHAR(1),
  cardcolour           CHAR(1),
  lastannualcheckdate  DATE,
  lastmataindate       DATE,
  platcode             VARCHAR2(2) default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCBUSINFOGS
  is '车辆基本信息';
comment on column OSECD.MCBUSINFOGS.busid
  is '车辆ID';
comment on column OSECD.MCBUSINFOGS.orgid
  is '组织ID';
comment on column OSECD.MCBUSINFOGS.cardid
  is '车牌号';
comment on column OSECD.MCBUSINFOGS.busselfid
  is '车辆自编号';
comment on column OSECD.MCBUSINFOGS.buydate
  is '购买日期';
comment on column OSECD.MCBUSINFOGS.usedate
  is '启用日期';
comment on column OSECD.MCBUSINFOGS.usedfor
  is '车辆用途(运营车0、公务车1、保修车2、加油车3)';
comment on column OSECD.MCBUSINFOGS.uselesscyc
  is '报废周期(年)';
comment on column OSECD.MCBUSINFOGS.realuselessdate
  is '实际报废时间';
comment on column OSECD.MCBUSINFOGS.uselessmiles
  is '报废里程';
comment on column OSECD.MCBUSINFOGS.uselessflag
  is '报废标志';
comment on column OSECD.MCBUSINFOGS.stdcoefficient
  is '标台系数';
comment on column OSECD.MCBUSINFOGS.hasiccardeqmt
  is '是否有IC卡打卡设备(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS.businvideocount
  is '车内摄像头数量';
comment on column OSECD.MCBUSINFOGS.busoutvideocount
  is '违规监控摄像头数量';
comment on column OSECD.MCBUSINFOGS.hasinbusled
  is '是否有车内LED(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS.hasheadbusled
  is '是否有车头LED(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS.hascondition
  is '是否是空调车(1表示是，0表示否)';
comment on column OSECD.MCBUSINFOGS.islowfloor
  is '是否是低地板车（1是，0否）';
comment on column OSECD.MCBUSINFOGS.busgrade
  is '车辆级别(高、中、低档)';
comment on column OSECD.MCBUSINFOGS.fueltype
  is '车辆燃料类型';
comment on column OSECD.MCBUSINFOGS.milecoefficient
  is '里程换算系数';
comment on column OSECD.MCBUSINFOGS.seatcount
  is '座位数';
comment on column OSECD.MCBUSINFOGS.standcount
  is '站立人数';
comment on column OSECD.MCBUSINFOGS.busmachineid
  is '设备编号';
comment on column OSECD.MCBUSINFOGS.productid
  is '设备通讯号';
comment on column OSECD.MCBUSINFOGS.isactive
  is '是否有效';
comment on column OSECD.MCBUSINFOGS.memos
  is '备注';
comment on column OSECD.MCBUSINFOGS.created
  is '创建日期';
comment on column OSECD.MCBUSINFOGS.createdby
  is '创建者';
comment on column OSECD.MCBUSINFOGS.updated
  is '更新日期';
comment on column OSECD.MCBUSINFOGS.updatedby
  is '更新者';
comment on column OSECD.MCBUSINFOGS.standardoilnum
  is '车辆能耗标准';
comment on column OSECD.MCBUSINFOGS.buslength
  is '车辆长度(米）';
comment on column OSECD.MCBUSINFOGS.bustype
  is '车辆型号';
comment on column OSECD.MCBUSINFOGS.oiltype
  is '燃油类型';
comment on column OSECD.MCBUSINFOGS.totalmile
  is '里程数 KM';
comment on column OSECD.MCBUSINFOGS.vehicletype
  is '车辆类型（计算车辆补贴时使用）';
comment on column OSECD.MCBUSINFOGS.buslengthtype
  is '车辆长度类型';
comment on column OSECD.MCBUSINFOGS.busoperatetype
  is '车辆类别，1-运营车辆，2-摆停车，3-外租车，4-包车，5-其它';
comment on column OSECD.MCBUSINFOGS.busstatus
  is '车辆状态，1-正常，2-报废，3-封存，4-其它';
comment on column OSECD.MCBUSINFOGS.orgidfrom
  is '车辆购买组织';
comment on column OSECD.MCBUSINFOGS.routeid
  is '所属线路编号';
comment on column OSECD.MCBUSINFOGS.roadcertificatedate
  is '道路运输证办理时间';
comment on column OSECD.MCBUSINFOGS.drivecertificatedate
  is '行驶证办理时间';
comment on column OSECD.MCBUSINFOGS.isdoublefloor
  is '是否双层';
comment on column OSECD.MCBUSINFOGS.cardcolour
  is '车牌颜色';
comment on column OSECD.MCBUSINFOGS.lastannualcheckdate
  is '上次年检时间';
comment on column OSECD.MCBUSINFOGS.lastmataindate
  is '上次保养时间';
comment on column OSECD.MCBUSINFOGS.platcode
  is '平台编码';
create index OSECD.IX_BUSINFO1 on OSECD.MCBUSINFOGS (PRODUCTID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCBUSINFOGS
  add constraint BUSINFO_PK1 primary key (BUSID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCBUSINFOGS_BUS
prompt ==============================
prompt
create table OSECD.MCBUSINFOGS_BUS
(
  busid            VARCHAR2(36) not null,
  orgid            VARCHAR2(36),
  cardid           NVARCHAR2(20),
  busselfid        NVARCHAR2(20),
  buydate          DATE,
  usedate          DATE,
  usedfor          CHAR(1),
  uselesscyc       NUMBER(2),
  realuselessdate  DATE,
  uselessmiles     NUMBER(10,2),
  uselessflag      CHAR(1),
  stdcoefficient   NUMBER(5,3),
  hasiccardeqmt    CHAR(1),
  businvideocount  NUMBER(2),
  busoutvideocount NUMBER(2),
  hasinbusled      CHAR(1),
  hasheadbusled    CHAR(1),
  hascondition     CHAR(1),
  islowfloor       CHAR(1),
  busgrade         CHAR(1),
  fueltype         VARCHAR2(2),
  milecoefficient  NUMBER(5,3),
  seatcount        NUMBER(3),
  standcount       NUMBER(3),
  busmachineid     NVARCHAR2(20),
  productid        NUMBER(10),
  isactive         CHAR(1),
  memos            NVARCHAR2(255),
  created          DATE,
  createdby        VARCHAR2(20),
  updated          DATE,
  updatedby        VARCHAR2(20),
  standardoilnum   NUMBER(6,2),
  buslength        NUMBER,
  bustype          VARCHAR2(40),
  oiltype          VARCHAR2(40),
  upszbusid        VARCHAR2(8),
  totalmile        NUMBER,
  upszbusidtmp     VARCHAR2(2),
  vehicletype      VARCHAR2(8),
  buslengthtype    VARCHAR2(2),
  busoperatetype   VARCHAR2(2),
  busstatus        VARCHAR2(2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCBUSINFOGS_BUS
  is '车辆基本信息';
comment on column OSECD.MCBUSINFOGS_BUS.busid
  is '车辆ID';
comment on column OSECD.MCBUSINFOGS_BUS.orgid
  is '组织ID';
comment on column OSECD.MCBUSINFOGS_BUS.cardid
  is '车牌号';
comment on column OSECD.MCBUSINFOGS_BUS.busselfid
  is '车辆自编号';
comment on column OSECD.MCBUSINFOGS_BUS.buydate
  is '购买日期';
comment on column OSECD.MCBUSINFOGS_BUS.usedate
  is '启用日期';
comment on column OSECD.MCBUSINFOGS_BUS.usedfor
  is '车辆用途(运营车0、公务车1、保修车2、加油车3)';
comment on column OSECD.MCBUSINFOGS_BUS.uselesscyc
  is '报废周期(年)';
comment on column OSECD.MCBUSINFOGS_BUS.realuselessdate
  is '实际报废时间';
comment on column OSECD.MCBUSINFOGS_BUS.uselessmiles
  is '报废里程';
comment on column OSECD.MCBUSINFOGS_BUS.uselessflag
  is '报废标志';
comment on column OSECD.MCBUSINFOGS_BUS.stdcoefficient
  is '标台系数';
comment on column OSECD.MCBUSINFOGS_BUS.hasiccardeqmt
  is '是否有IC卡打卡设备(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS_BUS.businvideocount
  is '车内摄像头数量';
comment on column OSECD.MCBUSINFOGS_BUS.busoutvideocount
  is '违规监控摄像头数量';
comment on column OSECD.MCBUSINFOGS_BUS.hasinbusled
  is '是否有车内LED(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS_BUS.hasheadbusled
  is '是否有车头LED(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS_BUS.hascondition
  is '是否是空调车(1表示是，0表示否)';
comment on column OSECD.MCBUSINFOGS_BUS.islowfloor
  is '是否是低地板车（1是，0否）';
comment on column OSECD.MCBUSINFOGS_BUS.busgrade
  is '车辆级别(高、中、低档)';
comment on column OSECD.MCBUSINFOGS_BUS.fueltype
  is '车辆燃料类型';
comment on column OSECD.MCBUSINFOGS_BUS.milecoefficient
  is '里程换算系数';
comment on column OSECD.MCBUSINFOGS_BUS.seatcount
  is '座位数';
comment on column OSECD.MCBUSINFOGS_BUS.standcount
  is '站立人数';
comment on column OSECD.MCBUSINFOGS_BUS.busmachineid
  is '设备编号';
comment on column OSECD.MCBUSINFOGS_BUS.productid
  is '设备通讯号';
comment on column OSECD.MCBUSINFOGS_BUS.isactive
  is '是否有效';
comment on column OSECD.MCBUSINFOGS_BUS.memos
  is '备注';
comment on column OSECD.MCBUSINFOGS_BUS.created
  is '创建日期';
comment on column OSECD.MCBUSINFOGS_BUS.createdby
  is '创建者';
comment on column OSECD.MCBUSINFOGS_BUS.updated
  is '更新日期';
comment on column OSECD.MCBUSINFOGS_BUS.updatedby
  is '更新者';
comment on column OSECD.MCBUSINFOGS_BUS.standardoilnum
  is '车辆能耗标准';
comment on column OSECD.MCBUSINFOGS_BUS.buslength
  is '车辆长度(米）';
comment on column OSECD.MCBUSINFOGS_BUS.bustype
  is '车辆型号';
comment on column OSECD.MCBUSINFOGS_BUS.oiltype
  is '燃油类型';
comment on column OSECD.MCBUSINFOGS_BUS.totalmile
  is '里程数 KM';
comment on column OSECD.MCBUSINFOGS_BUS.vehicletype
  is '车辆类型（计算车辆补贴时使用）';
comment on column OSECD.MCBUSINFOGS_BUS.buslengthtype
  is '车辆长度类型';
comment on column OSECD.MCBUSINFOGS_BUS.busoperatetype
  is '车辆类别，1-运营车辆，2-摆停车，3-外租车，4-包车，5-其它';
comment on column OSECD.MCBUSINFOGS_BUS.busstatus
  is '车辆状态，1-正常，2-报废，3-封存，4-其它';
create index OSECD.IX_BUSINFO on OSECD.MCBUSINFOGS_BUS (PRODUCTID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCBUSINFOGS_BUS
  add constraint BUSINFO_PK primary key (BUSID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCBUSINFOGS_GJ
prompt =============================
prompt
create table OSECD.MCBUSINFOGS_GJ
(
  busid                VARCHAR2(36) not null,
  orgid                VARCHAR2(36),
  cardid               NVARCHAR2(20),
  busselfid            NVARCHAR2(20),
  buydate              DATE,
  usedate              DATE,
  usedfor              CHAR(1),
  uselesscyc           NUMBER(2),
  realuselessdate      DATE,
  uselessmiles         NUMBER(10,2),
  uselessflag          CHAR(1),
  stdcoefficient       NUMBER(5,3),
  hasiccardeqmt        CHAR(1),
  businvideocount      NUMBER(2),
  busoutvideocount     NUMBER(2),
  hasinbusled          CHAR(1),
  hasheadbusled        CHAR(1),
  hascondition         CHAR(1),
  islowfloor           CHAR(1),
  busgrade             CHAR(1),
  fueltype             VARCHAR2(2),
  milecoefficient      NUMBER(5,3),
  seatcount            NUMBER(3),
  standcount           NUMBER(3),
  busmachineid         NVARCHAR2(20),
  productid            NUMBER(10),
  isactive             CHAR(1),
  memos                NVARCHAR2(255),
  created              DATE,
  createdby            VARCHAR2(36),
  updated              DATE,
  updatedby            VARCHAR2(36),
  standardoilnum       NUMBER(6,2),
  upszbusid            VARCHAR2(8),
  totalmile            NUMBER,
  upszbusidtmp         VARCHAR2(8),
  vehicletype          VARCHAR2(2),
  buslength            NUMBER,
  bustype              VARCHAR2(40),
  oiltype              VARCHAR2(40),
  buslengthtype        VARCHAR2(2),
  busoperatetype       VARCHAR2(2),
  busstatus            VARCHAR2(2),
  roadcertificatedate  DATE,
  drivecertificatedate DATE,
  isdoublefloor        CHAR(1),
  cardcolour           CHAR(1),
  lastannualcheckdate  DATE,
  lastmataindate       DATE,
  routeid              VARCHAR2(20),
  platcode             VARCHAR2(2) default '0',
  uploadtime           DATE default SYSDATE,
  isneglect            CHAR(1) default '0'
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCBUSINFOGS_GJ
  is '公交上传车辆表';
comment on column OSECD.MCBUSINFOGS_GJ.busid
  is '车辆ID';
comment on column OSECD.MCBUSINFOGS_GJ.orgid
  is '组织ID';
comment on column OSECD.MCBUSINFOGS_GJ.cardid
  is '车牌号';
comment on column OSECD.MCBUSINFOGS_GJ.busselfid
  is '车辆自编号';
comment on column OSECD.MCBUSINFOGS_GJ.buydate
  is '购买日期';
comment on column OSECD.MCBUSINFOGS_GJ.usedate
  is '启用日期';
comment on column OSECD.MCBUSINFOGS_GJ.usedfor
  is '车辆用途(运营车0、公务车1、保修车2、加油车3)';
comment on column OSECD.MCBUSINFOGS_GJ.uselesscyc
  is '报废周期(年)';
comment on column OSECD.MCBUSINFOGS_GJ.realuselessdate
  is '实际报废时间';
comment on column OSECD.MCBUSINFOGS_GJ.uselessmiles
  is '报废里程';
comment on column OSECD.MCBUSINFOGS_GJ.uselessflag
  is '报废标志';
comment on column OSECD.MCBUSINFOGS_GJ.stdcoefficient
  is '标台系数';
comment on column OSECD.MCBUSINFOGS_GJ.hasiccardeqmt
  is '是否有IC卡打卡设备(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS_GJ.businvideocount
  is '车内摄像头数量';
comment on column OSECD.MCBUSINFOGS_GJ.busoutvideocount
  is '违规监控摄像头数量';
comment on column OSECD.MCBUSINFOGS_GJ.hasinbusled
  is '是否有车内LED(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS_GJ.hasheadbusled
  is '是否有车头LED(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS_GJ.hascondition
  is '是否是空调车(1表示是，0表示否)';
comment on column OSECD.MCBUSINFOGS_GJ.islowfloor
  is '是否是低地板车（1是，0否）';
comment on column OSECD.MCBUSINFOGS_GJ.busgrade
  is '车辆级别(高、中、低档)';
comment on column OSECD.MCBUSINFOGS_GJ.fueltype
  is '车辆燃料类型';
comment on column OSECD.MCBUSINFOGS_GJ.milecoefficient
  is '里程换算系数';
comment on column OSECD.MCBUSINFOGS_GJ.seatcount
  is '座位数';
comment on column OSECD.MCBUSINFOGS_GJ.standcount
  is '站立人数';
comment on column OSECD.MCBUSINFOGS_GJ.busmachineid
  is '设备编号';
comment on column OSECD.MCBUSINFOGS_GJ.productid
  is '设备通讯号';
comment on column OSECD.MCBUSINFOGS_GJ.isactive
  is '是否有效';
comment on column OSECD.MCBUSINFOGS_GJ.memos
  is '备注';
comment on column OSECD.MCBUSINFOGS_GJ.created
  is '创建日期';
comment on column OSECD.MCBUSINFOGS_GJ.createdby
  is '创建者';
comment on column OSECD.MCBUSINFOGS_GJ.updated
  is '更新日期';
comment on column OSECD.MCBUSINFOGS_GJ.updatedby
  is '更新者';
comment on column OSECD.MCBUSINFOGS_GJ.standardoilnum
  is '燃油标准';
comment on column OSECD.MCBUSINFOGS_GJ.upszbusid
  is '上传深圳协议车辆ID';
comment on column OSECD.MCBUSINFOGS_GJ.totalmile
  is '里程数 KM';
comment on column OSECD.MCBUSINFOGS_GJ.upszbusidtmp
  is '上传深圳协议车辆ID,临时使用，当映射不成功时使用';
comment on column OSECD.MCBUSINFOGS_GJ.vehicletype
  is '车辆类型（计算车辆补贴时使用）';
comment on column OSECD.MCBUSINFOGS_GJ.buslength
  is '车辆长度(米）';
comment on column OSECD.MCBUSINFOGS_GJ.bustype
  is '车辆型号';
comment on column OSECD.MCBUSINFOGS_GJ.oiltype
  is '燃油类型';
comment on column OSECD.MCBUSINFOGS_GJ.buslengthtype
  is '车辆长度类型';
comment on column OSECD.MCBUSINFOGS_GJ.busoperatetype
  is '车辆类别，1-运营车辆，2-摆停车，3-外租车，4-包车，5-其它';
comment on column OSECD.MCBUSINFOGS_GJ.busstatus
  is '车辆状态，1-正常，2-报废，3-封存，4-其它';
comment on column OSECD.MCBUSINFOGS_GJ.roadcertificatedate
  is '道路运输证办理时间';
comment on column OSECD.MCBUSINFOGS_GJ.drivecertificatedate
  is '行驶证办理时间';
comment on column OSECD.MCBUSINFOGS_GJ.isdoublefloor
  is '是否双层';
comment on column OSECD.MCBUSINFOGS_GJ.cardcolour
  is '车牌颜色';
comment on column OSECD.MCBUSINFOGS_GJ.lastannualcheckdate
  is '上次年检时间';
comment on column OSECD.MCBUSINFOGS_GJ.lastmataindate
  is '上次保养时间';
comment on column OSECD.MCBUSINFOGS_GJ.routeid
  is '线路ID';
comment on column OSECD.MCBUSINFOGS_GJ.platcode
  is '平台编码';
comment on column OSECD.MCBUSINFOGS_GJ.uploadtime
  is '上传时间';
comment on column OSECD.MCBUSINFOGS_GJ.isneglect
  is '是否忽略';
create index OSECD.IDX_MCBUSINFOGJ on OSECD.MCBUSINFOGS_GJ (CARDID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCBUSINFOGS_SGJ
prompt ==============================
prompt
create table OSECD.MCBUSINFOGS_SGJ
(
  busid                    VARCHAR2(20) not null,
  orgid                    VARCHAR2(20) not null,
  cardid                   NVARCHAR2(20) not null,
  busselfid                NVARCHAR2(20) not null,
  buydate                  DATE,
  usedate                  DATE,
  bustid                   VARCHAR2(20),
  chassisno                NVARCHAR2(30),
  certificatedate          DATE,
  bussid                   VARCHAR2(20) not null,
  summile                  NUMBER(10,2),
  sumtime                  NUMBER(10,2),
  lstdate                  DATE,
  flag                     CHAR(1) default '1',
  memos                    VARCHAR2(255),
  checktype                VARCHAR2(2),
  bustype                  VARCHAR2(2),
  busstructure             VARCHAR2(2),
  isair                    CHAR(1),
  created                  DATE default sysdate,
  createby                 VARCHAR2(20),
  updated                  DATE,
  updateby                 VARCHAR2(20),
  isactive                 CHAR(1) default '1',
  usenature                VARCHAR2(2),
  category                 VARCHAR2(20),
  engineid                 VARCHAR2(20),
  compressorno             NVARCHAR2(20),
  batterycount             NUMBER(4),
  countryflg               VARCHAR2(20),
  operationsno             NVARCHAR2(20),
  responsible              VARCHAR2(20),
  origindata               NVARCHAR2(20),
  originno                 NVARCHAR2(20),
  supplier                 VARCHAR2(20),
  importcertificate        NVARCHAR2(20),
  importcertificateno      NVARCHAR2(20),
  warrantydate             DATE,
  dutypaidcertificate      NVARCHAR2(20),
  dutypaidcertificateno    NVARCHAR2(20),
  repairdemand             NVARCHAR2(255),
  registno                 NVARCHAR2(20),
  buyprice                 NUMBER(10,2),
  producedate              DATE,
  registerdate             DATE,
  intodate                 DATE,
  annualdate               DATE,
  validity                 DATE,
  uselife                  NUMBER(3),
  getkind                  VARCHAR2(2),
  imgpath                  VARCHAR2(20),
  startmile                NUMBER(10,2),
  outercolor               VARCHAR2(2),
  status                   VARCHAR2(2),
  retain1                  VARCHAR2(50) default '无屏',
  retain2                  VARCHAR2(50),
  retain3                  VARCHAR2(50),
  retain4                  VARCHAR2(50),
  retain5                  VARCHAR2(50),
  retain6                  VARCHAR2(50),
  retain7                  VARCHAR2(50),
  retain8                  VARCHAR2(50),
  retain9                  VARCHAR2(50),
  retain10                 VARCHAR2(50),
  manufactory              VARCHAR2(20),
  motortype                VARCHAR2(20),
  oiltype                  VARCHAR2(20),
  oiltname                 VARCHAR2(30),
  passengers               NUMBER(3),
  power                    NUMBER(6,2),
  transmission             NVARCHAR2(20),
  tiretype                 NVARCHAR2(20),
  torsional                NUMBER(8,3),
  stdbusnum                NUMBER(1),
  volume                   NUMBER(6,2),
  volumestand              VARCHAR2(20),
  boxtype                  VARCHAR2(30),
  airconditiontype         VARCHAR2(30),
  allowpassengers          NUMBER(4),
  mass                     NUMBER(8,2),
  maxmass                  NUMBER(8,2),
  dimension                VARCHAR2(50),
  busselftype              VARCHAR2(50),
  steeringkind             VARCHAR2(2),
  approvedweight           NUMBER(8,2),
  tractionweight           NUMBER(8,2),
  chassis                  VARCHAR2(20),
  chassisinfo              NVARCHAR2(255),
  brandmodel               NVARCHAR2(20),
  seatcount                NUMBER(4),
  cabpassenger             NUMBER(4),
  tirecount                NUMBER(4),
  cargosize                NVARCHAR2(50),
  shrapnalcount            NUMBER(4),
  axes                     NUMBER(4),
  wheelbase                NUMBER(5),
  trackbefore              NUMBER(4),
  trackbehind              NUMBER(4),
  engineno                 VARCHAR2(20),
  suspension               VARCHAR2(20),
  retarder                 VARCHAR2(20),
  clutch                   VARCHAR2(20),
  brakingmode              VARCHAR2(20),
  brakes                   VARCHAR2(20),
  brakeadjusting           VARCHAR2(20),
  traversingmechanism      VARCHAR2(20),
  centralizedlubrication   VARCHAR2(20),
  carheater                VARCHAR2(20),
  canbus                   VARCHAR2(20),
  drivingshaft             VARCHAR2(20),
  vernum                   NUMBER(10) default 0,
  initializedate           DATE,
  oilboxvolume             NUMBER(5,2),
  purchasetax              NUMBER(10,2),
  licensefee               NUMBER(10,2),
  isretarder               CHAR(1),
  orderstatus              VARCHAR2(2),
  bushisstatus             VARCHAR2(2),
  buscardid                VARCHAR2(20),
  posid1                   VARCHAR2(8),
  posid2                   VARCHAR2(8),
  fueluserupstandardid     VARCHAR2(2),
  fuelcostoffset           VARCHAR2(2),
  productserial            VARCHAR2(30),
  dvrserial                VARCHAR2(30),
  canflag                  VARCHAR2(2),
  canversionid             VARCHAR2(20),
  postprocessingsystem     VARCHAR2(5),
  auxoiltype               VARCHAR2(20),
  selfown                  VARCHAR2(2) default 1,
  oldenginetype            VARCHAR2(20),
  oldtiretype              VARCHAR2(20),
  oldengineno              VARCHAR2(20),
  busowner                 NVARCHAR2(20),
  posno                    VARCHAR2(20),
  firdefperiod             NUMBER(8),
  secdefperiod             NUMBER(8),
  thirdseccount            NUMBER(2),
  busalldefyear            NUMBER(2),
  gaskind                  VARCHAR2(2),
  startsymbol              VARCHAR2(20),
  isinstalloillmeasurement CHAR(1),
  ispushed                 CHAR(1),
  buscustomtype            VARCHAR2(3),
  busoncecardid            VARCHAR2(20)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCBUSINFOGS_SGJ
  is '车辆基本信息表';
comment on column OSECD.MCBUSINFOGS_SGJ.busid
  is '序号';
comment on column OSECD.MCBUSINFOGS_SGJ.orgid
  is '组织';
comment on column OSECD.MCBUSINFOGS_SGJ.cardid
  is '车牌号';
comment on column OSECD.MCBUSINFOGS_SGJ.busselfid
  is '车辆自编号';
comment on column OSECD.MCBUSINFOGS_SGJ.buydate
  is '车辆的购入时间';
comment on column OSECD.MCBUSINFOGS_SGJ.usedate
  is '车辆启用日期';
comment on column OSECD.MCBUSINFOGS_SGJ.bustid
  is '车辆型号ID';
comment on column OSECD.MCBUSINFOGS_SGJ.chassisno
  is '底盘号';
comment on column OSECD.MCBUSINFOGS_SGJ.certificatedate
  is '发证日期';
comment on column OSECD.MCBUSINFOGS_SGJ.bussid
  is '车辆营运状态类型';
comment on column OSECD.MCBUSINFOGS_SGJ.summile
  is '车辆营运总里程';
comment on column OSECD.MCBUSINFOGS_SGJ.sumtime
  is '车辆营运总时间';
comment on column OSECD.MCBUSINFOGS_SGJ.lstdate
  is '最后记录日期';
comment on column OSECD.MCBUSINFOGS_SGJ.flag
  is '车辆是否有效';
comment on column OSECD.MCBUSINFOGS_SGJ.memos
  is '备注';
comment on column OSECD.MCBUSINFOGS_SGJ.checktype
  is '核算类型';
comment on column OSECD.MCBUSINFOGS_SGJ.bustype
  is '车辆型号';
comment on column OSECD.MCBUSINFOGS_SGJ.busstructure
  is '车辆结构';
comment on column OSECD.MCBUSINFOGS_SGJ.isair
  is '是否空调车(1是0否)';
comment on column OSECD.MCBUSINFOGS_SGJ.created
  is '创建时间';
comment on column OSECD.MCBUSINFOGS_SGJ.createby
  is '创建者';
comment on column OSECD.MCBUSINFOGS_SGJ.updated
  is '更新时间';
comment on column OSECD.MCBUSINFOGS_SGJ.updateby
  is '更新者';
comment on column OSECD.MCBUSINFOGS_SGJ.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.MCBUSINFOGS_SGJ.usenature
  is '营运性质(非营运、营运)';
comment on column OSECD.MCBUSINFOGS_SGJ.category
  is '类别(大型、中型、小型、微型)';
comment on column OSECD.MCBUSINFOGS_SGJ.engineid
  is '发动机号';
comment on column OSECD.MCBUSINFOGS_SGJ.compressorno
  is '压缩机编号';
comment on column OSECD.MCBUSINFOGS_SGJ.batterycount
  is '电瓶数量';
comment on column OSECD.MCBUSINFOGS_SGJ.countryflg
  is '国产/进口 ';
comment on column OSECD.MCBUSINFOGS_SGJ.operationsno
  is '运营证号';
comment on column OSECD.MCBUSINFOGS_SGJ.responsible
  is '责任人';
comment on column OSECD.MCBUSINFOGS_SGJ.origindata
  is '来历凭证';
comment on column OSECD.MCBUSINFOGS_SGJ.originno
  is '来历凭证编号';
comment on column OSECD.MCBUSINFOGS_SGJ.supplier
  is '供应商';
comment on column OSECD.MCBUSINFOGS_SGJ.importcertificate
  is '进口凭证';
comment on column OSECD.MCBUSINFOGS_SGJ.importcertificateno
  is '进口凭证编号';
comment on column OSECD.MCBUSINFOGS_SGJ.warrantydate
  is '保修时间';
comment on column OSECD.MCBUSINFOGS_SGJ.dutypaidcertificate
  is '完税凭证';
comment on column OSECD.MCBUSINFOGS_SGJ.dutypaidcertificateno
  is '完税凭证编号';
comment on column OSECD.MCBUSINFOGS_SGJ.repairdemand
  is '维护要求';
comment on column OSECD.MCBUSINFOGS_SGJ.registno
  is '登记证号';
comment on column OSECD.MCBUSINFOGS_SGJ.buyprice
  is '购买价格';
comment on column OSECD.MCBUSINFOGS_SGJ.producedate
  is '出厂日期';
comment on column OSECD.MCBUSINFOGS_SGJ.registerdate
  is '注册日期';
comment on column OSECD.MCBUSINFOGS_SGJ.intodate
  is '转入日期';
comment on column OSECD.MCBUSINFOGS_SGJ.annualdate
  is '年检日期';
comment on column OSECD.MCBUSINFOGS_SGJ.validity
  is '保修日期';
comment on column OSECD.MCBUSINFOGS_SGJ.uselife
  is '使用年限';
comment on column OSECD.MCBUSINFOGS_SGJ.getkind
  is '获得方式';
comment on column OSECD.MCBUSINFOGS_SGJ.imgpath
  is '车辆照片';
comment on column OSECD.MCBUSINFOGS_SGJ.startmile
  is '车辆初始里程';
comment on column OSECD.MCBUSINFOGS_SGJ.outercolor
  is '外廓颜色';
comment on column OSECD.MCBUSINFOGS_SGJ.status
  is '状态（正常使用、停用、报废）';
comment on column OSECD.MCBUSINFOGS_SGJ.retain1
  is '预留字段1';
comment on column OSECD.MCBUSINFOGS_SGJ.retain2
  is '预留字段2';
comment on column OSECD.MCBUSINFOGS_SGJ.retain3
  is '预留字段3';
comment on column OSECD.MCBUSINFOGS_SGJ.retain4
  is '预留字段4';
comment on column OSECD.MCBUSINFOGS_SGJ.retain5
  is '预留字段5';
comment on column OSECD.MCBUSINFOGS_SGJ.retain6
  is '预留字段6';
comment on column OSECD.MCBUSINFOGS_SGJ.retain7
  is '预留字段7';
comment on column OSECD.MCBUSINFOGS_SGJ.retain8
  is '预留字段8';
comment on column OSECD.MCBUSINFOGS_SGJ.retain9
  is '预留字段9';
comment on column OSECD.MCBUSINFOGS_SGJ.retain10
  is '预留字段10';
comment on column OSECD.MCBUSINFOGS_SGJ.manufactory
  is '车辆的生产厂家';
comment on column OSECD.MCBUSINFOGS_SGJ.motortype
  is '发动机类型';
comment on column OSECD.MCBUSINFOGS_SGJ.oiltype
  is '燃油类型(汽油、柴油、天然气、电力、混合动力)';
comment on column OSECD.MCBUSINFOGS_SGJ.oiltname
  is '燃油名称';
comment on column OSECD.MCBUSINFOGS_SGJ.passengers
  is '载客数';
comment on column OSECD.MCBUSINFOGS_SGJ.power
  is '额定功率';
comment on column OSECD.MCBUSINFOGS_SGJ.transmission
  is '变速箱';
comment on column OSECD.MCBUSINFOGS_SGJ.tiretype
  is '轮胎规格';
comment on column OSECD.MCBUSINFOGS_SGJ.torsional
  is '最大扭矩';
comment on column OSECD.MCBUSINFOGS_SGJ.stdbusnum
  is '相当于国家标准车辆数';
comment on column OSECD.MCBUSINFOGS_SGJ.volume
  is '排气量';
comment on column OSECD.MCBUSINFOGS_SGJ.volumestand
  is '排放标准';
comment on column OSECD.MCBUSINFOGS_SGJ.boxtype
  is '波箱型号';
comment on column OSECD.MCBUSINFOGS_SGJ.airconditiontype
  is '空调型号';
comment on column OSECD.MCBUSINFOGS_SGJ.allowpassengers
  is '允许站立人数';
comment on column OSECD.MCBUSINFOGS_SGJ.mass
  is '整车整备质量';
comment on column OSECD.MCBUSINFOGS_SGJ.maxmass
  is '最大总质量';
comment on column OSECD.MCBUSINFOGS_SGJ.dimension
  is '外廓尺寸';
comment on column OSECD.MCBUSINFOGS_SGJ.busselftype
  is '自编类型';
comment on column OSECD.MCBUSINFOGS_SGJ.steeringkind
  is '转向形式(机械式液压动力、电子液压助力、电动助力)';
comment on column OSECD.MCBUSINFOGS_SGJ.approvedweight
  is '核定载质量';
comment on column OSECD.MCBUSINFOGS_SGJ.tractionweight
  is '准牵引质量';
comment on column OSECD.MCBUSINFOGS_SGJ.chassis
  is '底盘类型(传动系、行驶系、转向系和制动系)';
comment on column OSECD.MCBUSINFOGS_SGJ.chassisinfo
  is '底盘描述';
comment on column OSECD.MCBUSINFOGS_SGJ.brandmodel
  is '厂牌型号';
comment on column OSECD.MCBUSINFOGS_SGJ.seatcount
  is '座位数';
comment on column OSECD.MCBUSINFOGS_SGJ.cabpassenger
  is '驾室载客';
comment on column OSECD.MCBUSINFOGS_SGJ.tirecount
  is '轮胎数';
comment on column OSECD.MCBUSINFOGS_SGJ.cargosize
  is '货箱内尺寸';
comment on column OSECD.MCBUSINFOGS_SGJ.shrapnalcount
  is '钢板弹簧片数';
comment on column OSECD.MCBUSINFOGS_SGJ.axes
  is '轴数';
comment on column OSECD.MCBUSINFOGS_SGJ.wheelbase
  is '轴距';
comment on column OSECD.MCBUSINFOGS_SGJ.trackbefore
  is '前轮距';
comment on column OSECD.MCBUSINFOGS_SGJ.trackbehind
  is '后轮距';
comment on column OSECD.MCBUSINFOGS_SGJ.suspension
  is '悬挂方式';
comment on column OSECD.MCBUSINFOGS_SGJ.retarder
  is '缓速器';
comment on column OSECD.MCBUSINFOGS_SGJ.clutch
  is '离合器';
comment on column OSECD.MCBUSINFOGS_SGJ.brakingmode
  is '制动方式';
comment on column OSECD.MCBUSINFOGS_SGJ.brakes
  is '制动器型号';
comment on column OSECD.MCBUSINFOGS_SGJ.brakeadjusting
  is '制动器间隙调整方式';
comment on column OSECD.MCBUSINFOGS_SGJ.traversingmechanism
  is '方向机';
comment on column OSECD.MCBUSINFOGS_SGJ.centralizedlubrication
  is '集中润滑';
comment on column OSECD.MCBUSINFOGS_SGJ.carheater
  is '暖风系统';
comment on column OSECD.MCBUSINFOGS_SGJ.canbus
  is 'CAN总线';
comment on column OSECD.MCBUSINFOGS_SGJ.drivingshaft
  is '传动轴';
comment on column OSECD.MCBUSINFOGS_SGJ.vernum
  is '行版本号';
comment on column OSECD.MCBUSINFOGS_SGJ.initializedate
  is '开始计算日期';
comment on column OSECD.MCBUSINFOGS_SGJ.oilboxvolume
  is '燃油箱容积';
comment on column OSECD.MCBUSINFOGS_SGJ.purchasetax
  is '车辆购置税';
comment on column OSECD.MCBUSINFOGS_SGJ.licensefee
  is '上牌费';
comment on column OSECD.MCBUSINFOGS_SGJ.isretarder
  is '是否安装缓速器(1是0否)';
comment on column OSECD.MCBUSINFOGS_SGJ.orderstatus
  is '车辆维修状态';
comment on column OSECD.MCBUSINFOGS_SGJ.bushisstatus
  is '车辆维修前状态';
comment on column OSECD.MCBUSINFOGS_SGJ.posid1
  is '无锡POS机ID1';
comment on column OSECD.MCBUSINFOGS_SGJ.posid2
  is '无锡POS机ID2';
comment on column OSECD.MCBUSINFOGS_SGJ.fueluserupstandardid
  is '油耗标定';
comment on column OSECD.MCBUSINFOGS_SGJ.fuelcostoffset
  is '标定偏移比例（%）';
comment on column OSECD.MCBUSINFOGS_SGJ.productserial
  is '车载机序列号';
comment on column OSECD.MCBUSINFOGS_SGJ.dvrserial
  is 'DVR序列号';
comment on column OSECD.MCBUSINFOGS_SGJ.canflag
  is 'CAN数据采集标志位，字典CANDATATYPE';
comment on column OSECD.MCBUSINFOGS_SGJ.canversionid
  is 'Can协议版本ID';
comment on column OSECD.MCBUSINFOGS_SGJ.postprocessingsystem
  is '后处理系统';
comment on column OSECD.MCBUSINFOGS_SGJ.auxoiltype
  is '辅助燃料';
comment on column OSECD.MCBUSINFOGS_SGJ.selfown
  is '是否公共自有车辆(0:非公交车辆 1:公交车辆)';
comment on column OSECD.MCBUSINFOGS_SGJ.oldenginetype
  is '原车发动机类型';
comment on column OSECD.MCBUSINFOGS_SGJ.oldtiretype
  is '原车轮胎型号';
comment on column OSECD.MCBUSINFOGS_SGJ.oldengineno
  is '原车发动机编号';
comment on column OSECD.MCBUSINFOGS_SGJ.busowner
  is '车主';
comment on column OSECD.MCBUSINFOGS_SGJ.posno
  is 'POS机编号';
comment on column OSECD.MCBUSINFOGS_SGJ.firdefperiod
  is '一保额定里程（公里）';
comment on column OSECD.MCBUSINFOGS_SGJ.secdefperiod
  is '二保额定里程（公里）';
comment on column OSECD.MCBUSINFOGS_SGJ.thirdseccount
  is '三保(二保累计次数)';
comment on column OSECD.MCBUSINFOGS_SGJ.busalldefyear
  is '车辆大修(年)';
comment on column OSECD.MCBUSINFOGS_SGJ.startsymbol
  is '启用文号';
comment on column OSECD.MCBUSINFOGS_SGJ.ispushed
  is '是否向乘客推送车内图像';
comment on column OSECD.MCBUSINFOGS_SGJ.buscustomtype
  is '车辆自定义类型';
comment on column OSECD.MCBUSINFOGS_SGJ.busoncecardid
  is '车辆临时牌照';

prompt
prompt Creating table MCBUSINFOGS_WS
prompt =============================
prompt
create table OSECD.MCBUSINFOGS_WS
(
  busid            NVARCHAR2(36) not null,
  orgid            VARCHAR2(36),
  cardid           NVARCHAR2(20),
  busselfid        NVARCHAR2(20),
  buydate          DATE,
  usedate          DATE,
  usedfor          CHAR(1),
  uselesscyc       NUMBER(2),
  realuselessdate  DATE,
  uselessmiles     NUMBER(10,2),
  uselessflag      CHAR(1),
  stdcoefficient   NUMBER(5,3),
  hasiccardeqmt    CHAR(1),
  businvideocount  NUMBER(2),
  busoutvideocount NUMBER(2),
  hasinbusled      CHAR(1),
  hasheadbusled    CHAR(1),
  hascondition     CHAR(1),
  islowfloor       CHAR(1),
  busgrade         CHAR(1),
  fueltype         VARCHAR2(2),
  milecoefficient  NUMBER(5,3),
  seatcount        NUMBER(3),
  standcount       NUMBER(3),
  busmachineid     NVARCHAR2(20),
  productid        NUMBER(10),
  isactive         CHAR(1),
  memos            NVARCHAR2(255),
  uploadtime       DATE,
  uploadflag       CHAR(1) default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCBUSINFOGS_WS
  is '车辆基本信息（数据上传）';
comment on column OSECD.MCBUSINFOGS_WS.busid
  is '车辆ID';
comment on column OSECD.MCBUSINFOGS_WS.orgid
  is '组织ID';
comment on column OSECD.MCBUSINFOGS_WS.cardid
  is '车牌号';
comment on column OSECD.MCBUSINFOGS_WS.busselfid
  is '车辆自编号';
comment on column OSECD.MCBUSINFOGS_WS.buydate
  is '购买日期';
comment on column OSECD.MCBUSINFOGS_WS.usedate
  is '启用日期';
comment on column OSECD.MCBUSINFOGS_WS.usedfor
  is '车辆用途(运营车0、公务车1、保修车2、加油车3)';
comment on column OSECD.MCBUSINFOGS_WS.uselesscyc
  is '报废周期(年)';
comment on column OSECD.MCBUSINFOGS_WS.realuselessdate
  is '实际报废时间';
comment on column OSECD.MCBUSINFOGS_WS.uselessmiles
  is '报废里程';
comment on column OSECD.MCBUSINFOGS_WS.uselessflag
  is '报废标志';
comment on column OSECD.MCBUSINFOGS_WS.stdcoefficient
  is '标台系数';
comment on column OSECD.MCBUSINFOGS_WS.hasiccardeqmt
  is '是否有IC卡打卡设备(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS_WS.businvideocount
  is '车内摄像头数量';
comment on column OSECD.MCBUSINFOGS_WS.busoutvideocount
  is '违规监控摄像头数量';
comment on column OSECD.MCBUSINFOGS_WS.hasinbusled
  is '是否有车内LED(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS_WS.hasheadbusled
  is '是否有车头LED(1表示有，0表示无)';
comment on column OSECD.MCBUSINFOGS_WS.hascondition
  is '是否是空调车(1表示是，0表示否)';
comment on column OSECD.MCBUSINFOGS_WS.islowfloor
  is '是否是低地板车（1是，0否）';
comment on column OSECD.MCBUSINFOGS_WS.busgrade
  is '车辆级别(高、中、低档)';
comment on column OSECD.MCBUSINFOGS_WS.fueltype
  is '车辆燃料类型';
comment on column OSECD.MCBUSINFOGS_WS.milecoefficient
  is '里程换算系数';
comment on column OSECD.MCBUSINFOGS_WS.seatcount
  is '座位数';
comment on column OSECD.MCBUSINFOGS_WS.standcount
  is '站立人数';
comment on column OSECD.MCBUSINFOGS_WS.busmachineid
  is '设备编号';
comment on column OSECD.MCBUSINFOGS_WS.productid
  is '设备通讯号';
comment on column OSECD.MCBUSINFOGS_WS.isactive
  is '是否有效';
comment on column OSECD.MCBUSINFOGS_WS.memos
  is '备注';
comment on column OSECD.MCBUSINFOGS_WS.uploadtime
  is '上传时间';
comment on column OSECD.MCBUSINFOGS_WS.uploadflag
  is '是否已经同步 1 已经同步';
alter table OSECD.MCBUSINFOGS_WS
  add constraint PK_BUSINFOWS primary key (BUSID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCBUSSENDINTERVALGS
prompt ==================================
prompt
create table OSECD.MCBUSSENDINTERVALGS
(
  recordid        VARCHAR2(36) not null,
  routeid         VARCHAR2(36),
  timephasekey    VARCHAR2(2) not null,
  timephasename   NVARCHAR2(40) not null,
  startdate       DATE not null,
  enddate         DATE not null,
  starttime       NUMBER(8,6),
  endtime         NUMBER(8,6),
  bussendinterval NUMBER not null,
  created         DATE,
  createdby       VARCHAR2(36),
  updated         DATE,
  updatedby       VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCBUSSENDINTERVALGS
  is '发车间隔标准数据表';
comment on column OSECD.MCBUSSENDINTERVALGS.recordid
  is '记录编号';
comment on column OSECD.MCBUSSENDINTERVALGS.routeid
  is '线路编号';
comment on column OSECD.MCBUSSENDINTERVALGS.timephasekey
  is '峰段编号（对应字典中峰段的key）';
comment on column OSECD.MCBUSSENDINTERVALGS.timephasename
  is '峰段编号（对应字典中峰段的value）';
comment on column OSECD.MCBUSSENDINTERVALGS.startdate
  is '生效日期';
comment on column OSECD.MCBUSSENDINTERVALGS.enddate
  is '失效日期';
comment on column OSECD.MCBUSSENDINTERVALGS.starttime
  is '峰段开始时间（数字格式，相对于0点的小时值）';
comment on column OSECD.MCBUSSENDINTERVALGS.endtime
  is '峰段结束时间（数字格式，相对于0点的小时值）';
comment on column OSECD.MCBUSSENDINTERVALGS.bussendinterval
  is '标准发车间隔(分钟)';
comment on column OSECD.MCBUSSENDINTERVALGS.created
  is '创建日期';
comment on column OSECD.MCBUSSENDINTERVALGS.createdby
  is '创建者';
comment on column OSECD.MCBUSSENDINTERVALGS.updated
  is '更新日期';
comment on column OSECD.MCBUSSENDINTERVALGS.updatedby
  is '更新者';
create index OSECD.IX_BUSSENDINTERVAL on OSECD.MCBUSSENDINTERVALGS (ROUTEID, STARTDATE, ENDDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCBUSSTDNUM
prompt ==========================
prompt
create table OSECD.MCBUSSTDNUM
(
  buslentype    VARCHAR2(2) not null,
  stdnum        NUMBER(4,2) not null,
  stdbustype    CHAR(1) not null,
  isdoublefloor CHAR(1) not null,
  minlength     NUMBER not null,
  maxlength     NUMBER not null,
  lengthname    VARCHAR2(100)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCBUSSTDNUM
  is '车辆标台系数';
comment on column OSECD.MCBUSSTDNUM.buslentype
  is 'BUSLENTYPE';
comment on column OSECD.MCBUSSTDNUM.stdnum
  is '标台数';
comment on column OSECD.MCBUSSTDNUM.stdbustype
  is '车辆类型 1 公交车 2 轨道车辆';
comment on column OSECD.MCBUSSTDNUM.isdoublefloor
  is '是否双层';
comment on column OSECD.MCBUSSTDNUM.minlength
  is '最小车长';
comment on column OSECD.MCBUSSTDNUM.maxlength
  is '最大车长';
comment on column OSECD.MCBUSSTDNUM.lengthname
  is '长度名称';

prompt
prompt Creating table MCCODEREFLECT
prompt ============================
prompt
create table OSECD.MCCODEREFLECT
(
  reflecttype VARCHAR2(20),
  fromcode    VARCHAR2(30),
  tocode      VARCHAR2(30)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCCODEREFLECT
  is '编码映射基础表';
comment on column OSECD.MCCODEREFLECT.reflecttype
  is '编码类型';
comment on column OSECD.MCCODEREFLECT.fromcode
  is '源编码';
comment on column OSECD.MCCODEREFLECT.tocode
  is '目标编码，与字典对应';
create index OSECD.IDX_MCCODEREFLECT on OSECD.MCCODEREFLECT (REFLECTTYPE, FROMCODE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCCORRIDORINFOGS
prompt ===============================
prompt
create table OSECD.MCCORRIDORINFOGS
(
  corridorid     VARCHAR2(36) not null,
  corridorname   VARCHAR2(100),
  startstationno VARCHAR2(8),
  endstationno   VARCHAR2(8),
  startstationid VARCHAR2(36),
  endstationid   VARCHAR2(36),
  created        DATE,
  updated        DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCCORRIDORINFOGS
  is '客运走廊基础信息表';
comment on column OSECD.MCCORRIDORINFOGS.corridorid
  is '客运走廊编号';
comment on column OSECD.MCCORRIDORINFOGS.corridorname
  is '客运走廊名称';
comment on column OSECD.MCCORRIDORINFOGS.startstationno
  is '客运走廊起始站点NO';
comment on column OSECD.MCCORRIDORINFOGS.endstationno
  is '客运走廊终到站点NO';
comment on column OSECD.MCCORRIDORINFOGS.startstationid
  is '客运走廊起始站点ID';
comment on column OSECD.MCCORRIDORINFOGS.endstationid
  is '客运走廊终到站点ID';
comment on column OSECD.MCCORRIDORINFOGS.created
  is '创建时间';
comment on column OSECD.MCCORRIDORINFOGS.updated
  is '更新时间';
alter table OSECD.MCCORRIDORINFOGS
  add constraint PK_CORRIDOR primary key (CORRIDORID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCEMPCONTACTSINFOGS
prompt ==================================
prompt
create table OSECD.MCEMPCONTACTSINFOGS
(
  recordid     VARCHAR2(36) not null,
  empid        VARCHAR2(36),
  orgid        VARCHAR2(36),
  orgname      VARCHAR2(20),
  empname      VARCHAR2(60),
  empposition  VARCHAR2(2),
  empaddress   VARCHAR2(200),
  empemail     VARCHAR2(100),
  cellphoneno  VARCHAR2(20),
  cellphoneno2 VARCHAR2(20),
  telephoneno  VARCHAR2(20),
  telephoneno2 VARCHAR2(20),
  emptype      VARCHAR2(2),
  isactive     VARCHAR2(2) default 1,
  created      DATE,
  createdby    VARCHAR2(36),
  updated      DATE,
  updatedby    VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCEMPCONTACTSINFOGS
  is '通讯录信息表';
comment on column OSECD.MCEMPCONTACTSINFOGS.recordid
  is '记录编号';
comment on column OSECD.MCEMPCONTACTSINFOGS.empid
  is '人员编号';
comment on column OSECD.MCEMPCONTACTSINFOGS.orgid
  is '组织编号';
comment on column OSECD.MCEMPCONTACTSINFOGS.orgname
  is '组织名称';
comment on column OSECD.MCEMPCONTACTSINFOGS.empname
  is '人员姓名';
comment on column OSECD.MCEMPCONTACTSINFOGS.empposition
  is '人员岗位';
comment on column OSECD.MCEMPCONTACTSINFOGS.empaddress
  is '联系人地址';
comment on column OSECD.MCEMPCONTACTSINFOGS.empemail
  is '联系人邮件';
comment on column OSECD.MCEMPCONTACTSINFOGS.cellphoneno
  is '联系人手机';
comment on column OSECD.MCEMPCONTACTSINFOGS.cellphoneno2
  is '联系人手机2(备用)';
comment on column OSECD.MCEMPCONTACTSINFOGS.telephoneno
  is '联系人座机';
comment on column OSECD.MCEMPCONTACTSINFOGS.telephoneno2
  is '联系人座机2(备用)';
comment on column OSECD.MCEMPCONTACTSINFOGS.emptype
  is '人员类型，默认类型1-违规数据发送';
comment on column OSECD.MCEMPCONTACTSINFOGS.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.MCEMPCONTACTSINFOGS.created
  is '创建人';
comment on column OSECD.MCEMPCONTACTSINFOGS.createdby
  is '创建时间';
comment on column OSECD.MCEMPCONTACTSINFOGS.updated
  is '更信任';
comment on column OSECD.MCEMPCONTACTSINFOGS.updatedby
  is '更新时间';
alter table OSECD.MCEMPCONTACTSINFOGS
  add constraint PK_EMPCONTACTS primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCEMPLOYEEINFOGS
prompt ===============================
prompt
create table OSECD.MCEMPLOYEEINFOGS
(
  empid         VARCHAR2(36) not null,
  orgid         VARCHAR2(36),
  empname       NVARCHAR2(20),
  cardid        NVARCHAR2(20),
  positiontype  VARCHAR2(5),
  technicalpost VARCHAR2(2),
  sex           CHAR(1),
  diploma       VARCHAR2(2),
  birthdate     DATE,
  drivetype     VARCHAR2(2),
  getdrivedate  DATE,
  startdate     DATE,
  enddate       DATE,
  idcard        NVARCHAR2(36),
  opserviceid   NVARCHAR2(8),
  iccardid      NVARCHAR2(8),
  oncecardid    NVARCHAR2(18),
  isactive      CHAR(1),
  memos         NVARCHAR2(255),
  created       DATE,
  createdby     VARCHAR2(36),
  updated       DATE,
  updatedby     VARCHAR2(36),
  salary        NUMBER(10,3)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCEMPLOYEEINFOGS
  is '人员基础信息表';
comment on column OSECD.MCEMPLOYEEINFOGS.empid
  is '人员编号';
comment on column OSECD.MCEMPLOYEEINFOGS.orgid
  is '所属组织';
comment on column OSECD.MCEMPLOYEEINFOGS.empname
  is '人员姓名';
comment on column OSECD.MCEMPLOYEEINFOGS.cardid
  is '人员工号';
comment on column OSECD.MCEMPLOYEEINFOGS.positiontype
  is '人员岗位类型1驾驶员';
comment on column OSECD.MCEMPLOYEEINFOGS.technicalpost
  is '职称';
comment on column OSECD.MCEMPLOYEEINFOGS.sex
  is '性别';
comment on column OSECD.MCEMPLOYEEINFOGS.diploma
  is '文化程度';
comment on column OSECD.MCEMPLOYEEINFOGS.birthdate
  is '出生日期';
comment on column OSECD.MCEMPLOYEEINFOGS.drivetype
  is '驾驶证类型';
comment on column OSECD.MCEMPLOYEEINFOGS.getdrivedate
  is '首次取得驾照日期';
comment on column OSECD.MCEMPLOYEEINFOGS.startdate
  is '入职时间';
comment on column OSECD.MCEMPLOYEEINFOGS.enddate
  is '离开时间';
comment on column OSECD.MCEMPLOYEEINFOGS.idcard
  is '身份证号';
comment on column OSECD.MCEMPLOYEEINFOGS.opserviceid
  is '营运服务证号';
comment on column OSECD.MCEMPLOYEEINFOGS.iccardid
  is 'IC卡号';
comment on column OSECD.MCEMPLOYEEINFOGS.oncecardid
  is '一卡通编号';
comment on column OSECD.MCEMPLOYEEINFOGS.isactive
  is '是否有效';
comment on column OSECD.MCEMPLOYEEINFOGS.memos
  is '备注';
comment on column OSECD.MCEMPLOYEEINFOGS.created
  is '创建日期';
comment on column OSECD.MCEMPLOYEEINFOGS.createdby
  is '创建者';
comment on column OSECD.MCEMPLOYEEINFOGS.updated
  is '更新日期';
comment on column OSECD.MCEMPLOYEEINFOGS.updatedby
  is '更新者';
comment on column OSECD.MCEMPLOYEEINFOGS.salary
  is '工资';
alter table OSECD.MCEMPLOYEEINFOGS
  add constraint PK_EMPLOYEEINFO primary key (EMPID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCEMPLOYEEINFOGS_WS
prompt ==================================
prompt
create table OSECD.MCEMPLOYEEINFOGS_WS
(
  empid         VARCHAR2(36) not null,
  orgid         VARCHAR2(36),
  empname       NVARCHAR2(20),
  cardid        NVARCHAR2(20),
  positiontype  VARCHAR2(2),
  technicalpost VARCHAR2(2),
  sex           CHAR(1),
  diploma       VARCHAR2(2),
  birthdate     DATE,
  drivetype     VARCHAR2(2),
  getdrivedate  DATE,
  startdate     DATE,
  enddate       DATE,
  idcard        NVARCHAR2(18),
  opserviceid   NVARCHAR2(8),
  iccardid      NVARCHAR2(8),
  oncecardid    NVARCHAR2(18),
  isactive      CHAR(1),
  memos         NVARCHAR2(255)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCEMPLOYEEINFOGS_WS
  is '人员基础信息表（数据上传）';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.empid
  is '人员编号';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.orgid
  is '所属组织';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.empname
  is '人员姓名';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.cardid
  is '人员工号';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.positiontype
  is '人员岗位类型';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.technicalpost
  is '职称';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.sex
  is '性别';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.diploma
  is '文化程度';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.birthdate
  is '出生日期';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.drivetype
  is '驾驶证类型';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.getdrivedate
  is '首次取得驾照日期';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.startdate
  is '入职时间';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.enddate
  is '离开时间';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.idcard
  is '身份证号';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.opserviceid
  is '营运服务证号';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.iccardid
  is 'IC卡号';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.oncecardid
  is '一卡通编号';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.isactive
  is '是否有效';
comment on column OSECD.MCEMPLOYEEINFOGS_WS.memos
  is '备注';
alter table OSECD.MCEMPLOYEEINFOGS_WS
  add constraint PK_EMPLOYEEINFOWS primary key (EMPID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCEQUIPMENT
prompt ==========================
prompt
create table OSECD.MCEQUIPMENT
(
  id          VARCHAR2(36) not null,
  equipmentno VARCHAR2(36),
  equipname   VARCHAR2(50),
  equiptype   VARCHAR2(2),
  ipaddress   VARCHAR2(30),
  port        NUMBER,
  orgid       VARCHAR2(36),
  equiplabel  VARCHAR2(40),
  equipmodel  VARCHAR2(40),
  isactive    CHAR(1),
  usedate     DATE,
  regionarea  VARCHAR2(2),
  regionlevel VARCHAR2(2),
  isgood      VARCHAR2(2),
  longitude   NUMBER(9,6),
  latitude    NUMBER(9,6)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCEQUIPMENT
  is '设备设施信息';
comment on column OSECD.MCEQUIPMENT.id
  is 'ID';
comment on column OSECD.MCEQUIPMENT.equipmentno
  is '设备编号';
comment on column OSECD.MCEQUIPMENT.equipname
  is '设备名称';
comment on column OSECD.MCEQUIPMENT.equiptype
  is '设备类型（1：LED信息发布终端；2：电子站牌；3：其他设备）';
comment on column OSECD.MCEQUIPMENT.ipaddress
  is 'IP地址';
comment on column OSECD.MCEQUIPMENT.port
  is '端口号';
comment on column OSECD.MCEQUIPMENT.orgid
  is '组织ID';
comment on column OSECD.MCEQUIPMENT.equiplabel
  is '厂牌';
comment on column OSECD.MCEQUIPMENT.equipmodel
  is '型号';
comment on column OSECD.MCEQUIPMENT.isactive
  is '有效标志，0=无效，1=有效';
comment on column OSECD.MCEQUIPMENT.usedate
  is '启用时间';
comment on column OSECD.MCEQUIPMENT.regionarea
  is '所属地区编号';
comment on column OSECD.MCEQUIPMENT.regionlevel
  is '地区类型';
comment on column OSECD.MCEQUIPMENT.isgood
  is '完好标志，0=损坏，1=完好';
comment on column OSECD.MCEQUIPMENT.longitude
  is '经度';
comment on column OSECD.MCEQUIPMENT.latitude
  is '纬度';
alter table OSECD.MCEQUIPMENT
  add constraint PK_MCEQUIPMENT primary key (ID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCFUNCTIONINFOGS
prompt ===============================
prompt
create table OSECD.MCFUNCTIONINFOGS
(
  funccode      VARCHAR2(36) not null,
  syscode       NUMBER(2) not null,
  parentcode    VARCHAR2(36),
  funcname      NVARCHAR2(100) not null,
  funccalssname NVARCHAR2(100),
  funcdllname   NVARCHAR2(100),
  orderid       NUMBER not null,
  refcode       NVARCHAR2(20),
  memos         NVARCHAR2(255),
  isactive      CHAR(1) default '1' not null,
  created       DATE default sysdate not null,
  createby      VARCHAR2(36) not null,
  updated       DATE,
  updateby      VARCHAR2(36),
  imagesource   NVARCHAR2(100),
  description   NVARCHAR2(256),
  menutype      CHAR(1) default 1
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCFUNCTIONINFOGS
  is '菜单';
comment on column OSECD.MCFUNCTIONINFOGS.funccode
  is '功能编码';
comment on column OSECD.MCFUNCTIONINFOGS.syscode
  is '子系统类型编码';
comment on column OSECD.MCFUNCTIONINFOGS.parentcode
  is '上级编码';
comment on column OSECD.MCFUNCTIONINFOGS.funcname
  is '功能名称';
comment on column OSECD.MCFUNCTIONINFOGS.funccalssname
  is '功能界面类';
comment on column OSECD.MCFUNCTIONINFOGS.funcdllname
  is '功能界面所有DLL名称';
comment on column OSECD.MCFUNCTIONINFOGS.orderid
  is '菜单显示顺序';
comment on column OSECD.MCFUNCTIONINFOGS.refcode
  is '引用菜单编码';
comment on column OSECD.MCFUNCTIONINFOGS.memos
  is '备注';
comment on column OSECD.MCFUNCTIONINFOGS.isactive
  is '状态（是否有效）';
comment on column OSECD.MCFUNCTIONINFOGS.created
  is '创建时间';
comment on column OSECD.MCFUNCTIONINFOGS.createby
  is '创建人';
comment on column OSECD.MCFUNCTIONINFOGS.updated
  is '修改时间';
comment on column OSECD.MCFUNCTIONINFOGS.updateby
  is '修改人';
comment on column OSECD.MCFUNCTIONINFOGS.imagesource
  is '图片资源';
comment on column OSECD.MCFUNCTIONINFOGS.description
  is '功能描述';
comment on column OSECD.MCFUNCTIONINFOGS.menutype
  is '菜单类型(0通用菜单，1行业监管，2应急指挥)';
alter table OSECD.MCFUNCTIONINFOGS
  add constraint PK_FUNCTIONINFO primary key (FUNCCODE)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCHOLIDAYINFOGS
prompt ==============================
prompt
create table OSECD.MCHOLIDAYINFOGS
(
  recordid    VARCHAR2(36) not null,
  holidayname VARCHAR2(200),
  begindate   DATE,
  enddate     DATE,
  isactive    VARCHAR2(1),
  created     DATE,
  createdby   VARCHAR2(36),
  updated     DATE,
  updatedby   VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCHOLIDAYINFOGS
  is '节假日信息表';
comment on column OSECD.MCHOLIDAYINFOGS.recordid
  is '记录编号';
comment on column OSECD.MCHOLIDAYINFOGS.holidayname
  is '节假日名称';
comment on column OSECD.MCHOLIDAYINFOGS.begindate
  is '开始日期';
comment on column OSECD.MCHOLIDAYINFOGS.enddate
  is '结束日期';
comment on column OSECD.MCHOLIDAYINFOGS.isactive
  is '是否有效';
comment on column OSECD.MCHOLIDAYINFOGS.created
  is '创建时间';
comment on column OSECD.MCHOLIDAYINFOGS.createdby
  is '创建人';
comment on column OSECD.MCHOLIDAYINFOGS.updated
  is '更新时间';
comment on column OSECD.MCHOLIDAYINFOGS.updatedby
  is '更新人';
create index OSECD.IX_HOLIDAY on OSECD.MCHOLIDAYINFOGS (BEGINDATE, ENDDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCHOLIDAYINFOGS
  add constraint PK_HOLIDAY primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCINDICATORGS
prompt ============================
prompt
create table OSECD.MCINDICATORGS
(
  indicatorid    VARCHAR2(36) not null,
  indicatorname  VARCHAR2(100),
  indicatortype  VARCHAR2(2),
  indicatorlevel VARCHAR2(2),
  menulink       VARCHAR2(200),
  isactive       VARCHAR2(2),
  ischecked      VARCHAR2(2),
  checked        DATE,
  checkedby      VARCHAR2(36),
  memo           VARCHAR2(500)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCINDICATORGS
  is '指标明细信息表';
comment on column OSECD.MCINDICATORGS.indicatorid
  is '指标编号';
comment on column OSECD.MCINDICATORGS.indicatorname
  is '指标名称';
comment on column OSECD.MCINDICATORGS.indicatortype
  is '指标类型，1-行业指标，2-企业指标，3-共用指标';
comment on column OSECD.MCINDICATORGS.indicatorlevel
  is '指标级别，-1-指标体系，0-系统，1-用户';
comment on column OSECD.MCINDICATORGS.menulink
  is '菜单链接';
comment on column OSECD.MCINDICATORGS.isactive
  is '是否有效，0-无效，1-有效';
comment on column OSECD.MCINDICATORGS.ischecked
  is '是否已检查，0-否，1-是';
comment on column OSECD.MCINDICATORGS.checked
  is '备用字段，检查时间';
comment on column OSECD.MCINDICATORGS.checkedby
  is '备用字段，检查人';
comment on column OSECD.MCINDICATORGS.memo
  is '指标说明';
alter table OSECD.MCINDICATORGS
  add constraint PK_INDICATOR1 primary key (INDICATORID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCINDICATORINFOGS
prompt ================================
prompt
create table OSECD.MCINDICATORINFOGS
(
  code        VARCHAR2(36) not null,
  parentcode  VARCHAR2(36),
  name        NVARCHAR2(100) not null,
  unit        NVARCHAR2(20),
  datasource  NVARCHAR2(100),
  stat_desc   NVARCHAR2(512),
  use_desc    NVARCHAR2(512),
  imagesource NVARCHAR2(100),
  isactive    CHAR(1) default '1' not null,
  created     DATE default sysdate not null,
  createby    VARCHAR2(36) default 'system' not null,
  updated     DATE,
  updateby    VARCHAR2(36),
  memos       NVARCHAR2(256),
  orderid     NUMBER(6) default 0 not null,
  menulink    NVARCHAR2(100)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCINDICATORINFOGS
  is '统计指标信息表';
comment on column OSECD.MCINDICATORINFOGS.code
  is '指标编码';
comment on column OSECD.MCINDICATORINFOGS.parentcode
  is '上级指标编码';
comment on column OSECD.MCINDICATORINFOGS.name
  is '指标名称';
comment on column OSECD.MCINDICATORINFOGS.unit
  is '统计单位';
comment on column OSECD.MCINDICATORINFOGS.datasource
  is '数据来源';
comment on column OSECD.MCINDICATORINFOGS.stat_desc
  is '统计或分析说明';
comment on column OSECD.MCINDICATORINFOGS.use_desc
  is '数据应用说明';
comment on column OSECD.MCINDICATORINFOGS.imagesource
  is '图标资源';
comment on column OSECD.MCINDICATORINFOGS.isactive
  is '状态（是否有效） ';
comment on column OSECD.MCINDICATORINFOGS.created
  is '创建时间';
comment on column OSECD.MCINDICATORINFOGS.createby
  is '创建人';
comment on column OSECD.MCINDICATORINFOGS.updated
  is '修改时间';
comment on column OSECD.MCINDICATORINFOGS.updateby
  is '修改人';
comment on column OSECD.MCINDICATORINFOGS.memos
  is '备注';
comment on column OSECD.MCINDICATORINFOGS.orderid
  is '序号';
alter table OSECD.MCINDICATORINFOGS
  add constraint PK_INDICATOR primary key (CODE)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCINDICATORSCOREGS
prompt =================================
prompt
create table OSECD.MCINDICATORSCOREGS
(
  recordid        VARCHAR2(36) not null,
  indicatorid     VARCHAR2(36) not null,
  minvalue        NUMBER,
  maxvalue        NUMBER,
  indicatorscore  NUMBER,
  calctype        VARCHAR2(2),
  indicatorscore2 NUMBER
)
tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCINDICATORSCOREGS
  is '指标分值配置信息表';
comment on column OSECD.MCINDICATORSCOREGS.recordid
  is '记录编号';
comment on column OSECD.MCINDICATORSCOREGS.indicatorid
  is '指标编号';
comment on column OSECD.MCINDICATORSCOREGS.minvalue
  is '区间范围小值,百分比以四位小数表示';
comment on column OSECD.MCINDICATORSCOREGS.maxvalue
  is '区间范围大值,百分比以四位小数表示';
comment on column OSECD.MCINDICATORSCOREGS.indicatorscore
  is '指标配置得分（百分制）,如果calctype选择的是公式类型，则，这个项存储A值';
comment on column OSECD.MCINDICATORSCOREGS.calctype
  is '计分方式，1 指标计算值，2 区间定值，3公式法 v=a+bx';
comment on column OSECD.MCINDICATORSCOREGS.indicatorscore2
  is '指标配置得分2,如果calctype选择的是公式类型，则，这个项存储B值';
alter table OSECD.MCINDICATORSCOREGS
  add constraint PK_INDICATORSCORE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCMACHINEEQUIPMENT
prompt =================================
prompt
create table OSECD.MCMACHINEEQUIPMENT
(
  id         VARCHAR2(36) not null,
  equipno    VARCHAR2(36),
  equipname  VARCHAR2(50),
  equiptype  NUMBER,
  ipaddress  VARCHAR2(50),
  position   VARCHAR2(50),
  equiplabel VARCHAR2(30),
  equipmodel VARCHAR2(30),
  usedate    DATE,
  isactive   NUMBER,
  remark     VARCHAR2(500)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCMACHINEEQUIPMENT
  is '机房设备设施';
comment on column OSECD.MCMACHINEEQUIPMENT.id
  is 'ID';
comment on column OSECD.MCMACHINEEQUIPMENT.equipno
  is '机房设备编号';
comment on column OSECD.MCMACHINEEQUIPMENT.equipname
  is '机房设备名称';
comment on column OSECD.MCMACHINEEQUIPMENT.equiptype
  is '机房设备类型（1：服务器；2：网络设备；3：存储设备；4：UPS设备；5：消防设备；6：其他设备）';
comment on column OSECD.MCMACHINEEQUIPMENT.ipaddress
  is 'IP地址';
comment on column OSECD.MCMACHINEEQUIPMENT.position
  is '设备位置';
comment on column OSECD.MCMACHINEEQUIPMENT.equiplabel
  is '厂牌';
comment on column OSECD.MCMACHINEEQUIPMENT.equipmodel
  is '型号';
comment on column OSECD.MCMACHINEEQUIPMENT.usedate
  is '启用日期';
comment on column OSECD.MCMACHINEEQUIPMENT.isactive
  is '有效标志，0=无效，1=有效';
comment on column OSECD.MCMACHINEEQUIPMENT.remark
  is '备注';
alter table OSECD.MCMACHINEEQUIPMENT
  add constraint PK_MCMACHINEEQUIPMENT primary key (ID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCONHOURSTAND
prompt ============================
prompt
create table OSECD.MCONHOURSTAND
(
  onhourstandid VARCHAR2(36) not null,
  routeid       VARCHAR2(20) not null,
  subrouteid    VARCHAR2(20) not null,
  segmentid     VARCHAR2(20) not null,
  starttime     NUMBER(8,6) not null,
  endtime       NUMBER(8,6) not null,
  updated       DATE,
  updateby      VARCHAR2(36),
  created       DATE,
  createby      VARCHAR2(36),
  isactive      CHAR(1),
  startdate     DATE,
  enddate       DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCONHOURSTAND
  is '单程站点早晚点考核标准主表';
comment on column OSECD.MCONHOURSTAND.onhourstandid
  is '序号';
comment on column OSECD.MCONHOURSTAND.routeid
  is '线路ID';
comment on column OSECD.MCONHOURSTAND.subrouteid
  is '子线ID';
comment on column OSECD.MCONHOURSTAND.segmentid
  is '单程ID';
comment on column OSECD.MCONHOURSTAND.starttime
  is '开始时间';
comment on column OSECD.MCONHOURSTAND.endtime
  is '结束时间';
comment on column OSECD.MCONHOURSTAND.startdate
  is '开始日期';
comment on column OSECD.MCONHOURSTAND.enddate
  is '结束日期';
alter table OSECD.MCONHOURSTAND
  add constraint PK_ONHOURSTAND primary key (ONHOURSTANDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCONHOURSTANDDETAIL
prompt ==================================
prompt
create table OSECD.MCONHOURSTANDDETAIL
(
  onhourstandid       VARCHAR2(36) not null,
  onhourstanddetailid VARCHAR2(36),
  routeid             VARCHAR2(20),
  subrouteid          VARCHAR2(20),
  segmentid           VARCHAR2(20),
  dualserialid        NUMBER(3),
  stationid           VARCHAR2(36),
  onhourtime          NUMBER(3),
  offsetpos           NUMBER(3),
  offsetneg           NUMBER(3),
  alstationtype       CHAR(1),
  updated             DATE,
  updateby            VARCHAR2(36),
  created             DATE,
  createby            VARCHAR2(36),
  isactive            CHAR(1)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCONHOURSTANDDETAIL
  is '单程站点早晚点标准明细表';
comment on column OSECD.MCONHOURSTANDDETAIL.onhourstandid
  is '主表ID';
comment on column OSECD.MCONHOURSTANDDETAIL.onhourstanddetailid
  is '序号';
comment on column OSECD.MCONHOURSTANDDETAIL.routeid
  is '线路ID';
comment on column OSECD.MCONHOURSTANDDETAIL.subrouteid
  is '子线ID';
comment on column OSECD.MCONHOURSTANDDETAIL.segmentid
  is '单程ID';
comment on column OSECD.MCONHOURSTANDDETAIL.dualserialid
  is '站点双程号';
comment on column OSECD.MCONHOURSTANDDETAIL.stationid
  is '站点ID';
comment on column OSECD.MCONHOURSTANDDETAIL.onhourtime
  is '准点时间（主站到此站时间）';
comment on column OSECD.MCONHOURSTANDDETAIL.offsetpos
  is '准点余量正值';
comment on column OSECD.MCONHOURSTANDDETAIL.offsetneg
  is '准点余量负值（正值表示）';
comment on column OSECD.MCONHOURSTANDDETAIL.alstationtype
  is '考核到/离站 参考字典表ALStaionType';

prompt
prompt Creating table MCORGADDINFOGS
prompt =============================
prompt
create table OSECD.MCORGADDINFOGS
(
  orgid       VARCHAR2(36) not null,
  busvideourl VARCHAR2(200),
  sbusicon    VARCHAR2(50),
  mbusicon    VARCHAR2(50),
  carno       VARCHAR2(20),
  datatype    CHAR(1),
  phones      VARCHAR2(100)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCORGADDINFOGS.orgid
  is '组织ID';
comment on column OSECD.MCORGADDINFOGS.busvideourl
  is '车辆视频URL';
comment on column OSECD.MCORGADDINFOGS.sbusicon
  is '单一车辆使用图标';
comment on column OSECD.MCORGADDINFOGS.mbusicon
  is '聚集车辆使用图标';
comment on column OSECD.MCORGADDINFOGS.carno
  is '车牌号';
comment on column OSECD.MCORGADDINFOGS.datatype
  is '0-公司，1-车辆';
comment on column OSECD.MCORGADDINFOGS.phones
  is '联系人电话(逗号分割)';

prompt
prompt Creating table MCORGINFOGS
prompt ==========================
prompt
create table OSECD.MCORGINFOGS
(
  orgid           VARCHAR2(36) not null,
  orgcode         NVARCHAR2(20),
  orgname         NVARCHAR2(60),
  orggrade        VARCHAR2(2),
  orgtype         VARCHAR2(2),
  parentorgid     VARCHAR2(36),
  regionarea      VARCHAR2(10),
  regionlevel     VARCHAR2(2),
  principal       NVARCHAR2(50),
  linkman         NVARCHAR2(50),
  address         NVARCHAR2(256),
  telephone       NVARCHAR2(50),
  post            NVARCHAR2(6),
  fax             NVARCHAR2(20),
  registerdate    DATE,
  isactive        CHAR(1),
  memos           NVARCHAR2(255),
  updated         DATE,
  updatedby       VARCHAR2(36),
  created         DATE,
  createdby       VARCHAR2(36),
  areabureauid    VARCHAR2(36),
  orgtreeposition VARCHAR2(2),
  empcount        NUMBER default 0,
  buscount        NUMBER default 0,
  routecount      NUMBER default 0,
  sitecount       NUMBER default 0,
  drivercount     NUMBER default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCORGINFOGS
  is '公交企业基础信息表';
comment on column OSECD.MCORGINFOGS.orgid
  is '组织ID';
comment on column OSECD.MCORGINFOGS.orgcode
  is '组织编码';
comment on column OSECD.MCORGINFOGS.orgname
  is '组织名称';
comment on column OSECD.MCORGINFOGS.orggrade
  is '组织级别(总公司、分公司、车队)';
comment on column OSECD.MCORGINFOGS.orgtype
  is '组织类型（区分运营组织还是非运营组织，取字典值）';
comment on column OSECD.MCORGINFOGS.parentorgid
  is '父组织ID';
comment on column OSECD.MCORGINFOGS.regionarea
  is '所属地区编码';
comment on column OSECD.MCORGINFOGS.regionlevel
  is '服务地区类型（中心城区、近郊区、远郊区）';
comment on column OSECD.MCORGINFOGS.principal
  is '企业负责人';
comment on column OSECD.MCORGINFOGS.linkman
  is '联系人';
comment on column OSECD.MCORGINFOGS.address
  is '企业地址';
comment on column OSECD.MCORGINFOGS.telephone
  is '联系电话';
comment on column OSECD.MCORGINFOGS.post
  is '邮编';
comment on column OSECD.MCORGINFOGS.fax
  is '传真';
comment on column OSECD.MCORGINFOGS.registerdate
  is '注册时间';
comment on column OSECD.MCORGINFOGS.isactive
  is '是否有效（1有效，0无效）';
comment on column OSECD.MCORGINFOGS.memos
  is '备注';
comment on column OSECD.MCORGINFOGS.updated
  is '更新日期';
comment on column OSECD.MCORGINFOGS.updatedby
  is '更新者';
comment on column OSECD.MCORGINFOGS.created
  is '更新日期';
comment on column OSECD.MCORGINFOGS.createdby
  is '创建者';
comment on column OSECD.MCORGINFOGS.areabureauid
  is '辖区局ID，只有分公司有值';
comment on column OSECD.MCORGINFOGS.orgtreeposition
  is '组织在树中位置 1 根组织 2中间组织 3 末级组织';
comment on column OSECD.MCORGINFOGS.empcount
  is '从业人员数量';
comment on column OSECD.MCORGINFOGS.buscount
  is '运营车辆数';
comment on column OSECD.MCORGINFOGS.routecount
  is '线路数量';
comment on column OSECD.MCORGINFOGS.sitecount
  is '场站数量';
comment on column OSECD.MCORGINFOGS.drivercount
  is '驾驶员数量';
alter table OSECD.MCORGINFOGS
  add constraint PK_ORGINFO primary key (ORGID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCORGINFOGS_WS
prompt =============================
prompt
create table OSECD.MCORGINFOGS_WS
(
  orgid           NVARCHAR2(36) not null,
  orgcode         NVARCHAR2(20),
  orgname         NVARCHAR2(60),
  orggrade        VARCHAR2(2),
  orgtype         VARCHAR2(2),
  parentorgid     VARCHAR2(36),
  regionarea      VARCHAR2(10),
  regionlevel     VARCHAR2(2),
  principal       NVARCHAR2(50),
  linkman         NVARCHAR2(50),
  address         NVARCHAR2(256),
  telephone       NVARCHAR2(50),
  post            NVARCHAR2(6),
  fax             NVARCHAR2(20),
  registerdate    DATE,
  isactive        CHAR(1),
  memos           NVARCHAR2(255),
  created         DATE,
  createdby       VARCHAR2(36),
  updated         DATE,
  updatedby       VARCHAR2(36),
  areabureauid    VARCHAR2(36),
  orgtreeposition VARCHAR2(2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCORGINFOGS_WS
  is '公交企业基础信息表（数据上传）';
comment on column OSECD.MCORGINFOGS_WS.orgid
  is '组织ID';
comment on column OSECD.MCORGINFOGS_WS.orgcode
  is '组织编码';
comment on column OSECD.MCORGINFOGS_WS.orgname
  is '组织名称';
comment on column OSECD.MCORGINFOGS_WS.orggrade
  is '组织级别(总公司、分公司、车队)';
comment on column OSECD.MCORGINFOGS_WS.orgtype
  is '组织类型（区分运营组织还是非运营组织，取字典值）';
comment on column OSECD.MCORGINFOGS_WS.parentorgid
  is '父组织ID';
comment on column OSECD.MCORGINFOGS_WS.regionarea
  is '所属地区编码';
comment on column OSECD.MCORGINFOGS_WS.regionlevel
  is '服务地区类型（中心城区、近郊区、远郊区）';
comment on column OSECD.MCORGINFOGS_WS.principal
  is '企业负责人';
comment on column OSECD.MCORGINFOGS_WS.linkman
  is '联系人';
comment on column OSECD.MCORGINFOGS_WS.address
  is '企业地址';
comment on column OSECD.MCORGINFOGS_WS.telephone
  is '联系电话';
comment on column OSECD.MCORGINFOGS_WS.post
  is '邮编';
comment on column OSECD.MCORGINFOGS_WS.fax
  is '传真';
comment on column OSECD.MCORGINFOGS_WS.registerdate
  is '注册时间';
comment on column OSECD.MCORGINFOGS_WS.isactive
  is '是否有效（1有效，0无效）';
comment on column OSECD.MCORGINFOGS_WS.memos
  is '备注';
comment on column OSECD.MCORGINFOGS_WS.created
  is '创建日期';
comment on column OSECD.MCORGINFOGS_WS.createdby
  is '创建者';
comment on column OSECD.MCORGINFOGS_WS.updated
  is '更新日期';
comment on column OSECD.MCORGINFOGS_WS.updatedby
  is '更新者';
comment on column OSECD.MCORGINFOGS_WS.areabureauid
  is '辖区局ID，只有分公司有值';
comment on column OSECD.MCORGINFOGS_WS.orgtreeposition
  is '组织在树中位置 1 根组织 2中间组织 3 末级组织';
alter table OSECD.MCORGINFOGS_WS
  add constraint PK_ORGINFOWS primary key (ORGID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCORGTYPEINFOGS
prompt ==============================
prompt
create table OSECD.MCORGTYPEINFOGS
(
  recordid    VARCHAR2(36) not null,
  orgid       VARCHAR2(36),
  regionlevel VARCHAR2(2),
  recdate     DATE default sysdate
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCORGTYPEINFOGS
  is '组织所属区域信息表（页面编辑结果）';
comment on column OSECD.MCORGTYPEINFOGS.recordid
  is '记录编号';
comment on column OSECD.MCORGTYPEINFOGS.orgid
  is '组织编号';
comment on column OSECD.MCORGTYPEINFOGS.regionlevel
  is '组织所属区域类型（主城区、近郊区、远郊区等）';
comment on column OSECD.MCORGTYPEINFOGS.recdate
  is '记录时间';
create index OSECD.IX_ORGTYPE on OSECD.MCORGTYPEINFOGS (ORGID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCORGTYPEINFOGS
  add constraint PK_ORGTYPE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCPLATINFOGS
prompt ===========================
prompt
create table OSECD.MCPLATINFOGS
(
  platcode VARCHAR2(2) not null,
  platname VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCPLATINFOGS
  is '数据平台信息表';
comment on column OSECD.MCPLATINFOGS.platcode
  is '平台编码';
comment on column OSECD.MCPLATINFOGS.platname
  is '平台名称';
alter table OSECD.MCPLATINFOGS
  add constraint PK_PLATINFO primary key (PLATCODE)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCPRIVILEGEGS
prompt ============================
prompt
create table OSECD.MCPRIVILEGEGS
(
  privilegeid   VARCHAR2(50) not null,
  privilegename NVARCHAR2(100) not null,
  syscode       VARCHAR2(20),
  sysmodule     NVARCHAR2(64),
  moduledesc    NVARCHAR2(100),
  preoperate    NVARCHAR2(100),
  operatedesc   NVARCHAR2(100),
  funcstr       NVARCHAR2(128),
  parentid      VARCHAR2(50),
  ordernum      NUMBER(8) default 0 not null,
  isactive      CHAR(1) default 1 not null,
  memos         NVARCHAR2(255),
  created       DATE,
  createby      VARCHAR2(50),
  updated       DATE,
  updateby      VARCHAR2(50),
  retain1       VARCHAR2(50),
  retain2       VARCHAR2(50),
  retain3       VARCHAR2(50),
  retain4       VARCHAR2(50),
  retain5       VARCHAR2(50),
  retain6       VARCHAR2(50),
  retain7       VARCHAR2(50),
  retain8       VARCHAR2(50),
  retain9       VARCHAR2(50),
  retain10      VARCHAR2(50),
  funcclassname VARCHAR2(200)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCPRIVILEGEGS
  is '系统功能权限信息表';
comment on column OSECD.MCPRIVILEGEGS.privilegeid
  is '权限主键ID';
comment on column OSECD.MCPRIVILEGEGS.privilegename
  is '权限名称';
comment on column OSECD.MCPRIVILEGEGS.syscode
  is '所属功能模块代码';
comment on column OSECD.MCPRIVILEGEGS.sysmodule
  is '所属功能模块';
comment on column OSECD.MCPRIVILEGEGS.moduledesc
  is '所属功能模块描述';
comment on column OSECD.MCPRIVILEGEGS.preoperate
  is '权限操作描述(不可修改，用以权限识别)';
comment on column OSECD.MCPRIVILEGEGS.operatedesc
  is '操作描述';
comment on column OSECD.MCPRIVILEGEGS.funcstr
  is '关键字符串(如页面等，冗余备用)';
comment on column OSECD.MCPRIVILEGEGS.parentid
  is '父节点权限主键ID';
comment on column OSECD.MCPRIVILEGEGS.ordernum
  is '显示顺序编号';
comment on column OSECD.MCPRIVILEGEGS.isactive
  is '是否有效（1有效，0无效）';
comment on column OSECD.MCPRIVILEGEGS.memos
  is '备注';
comment on column OSECD.MCPRIVILEGEGS.created
  is '创建日期';
comment on column OSECD.MCPRIVILEGEGS.createby
  is '创建者';
comment on column OSECD.MCPRIVILEGEGS.updated
  is '更新日期';
comment on column OSECD.MCPRIVILEGEGS.updateby
  is '更新者';
comment on column OSECD.MCPRIVILEGEGS.retain1
  is '预留字段1';
comment on column OSECD.MCPRIVILEGEGS.retain2
  is '预留字段2';
comment on column OSECD.MCPRIVILEGEGS.retain3
  is '预留字段3';
comment on column OSECD.MCPRIVILEGEGS.retain4
  is '预留字段4';
comment on column OSECD.MCPRIVILEGEGS.retain5
  is '预留字段5';
comment on column OSECD.MCPRIVILEGEGS.retain6
  is '预留字段6';
comment on column OSECD.MCPRIVILEGEGS.retain7
  is '预留字段7';
comment on column OSECD.MCPRIVILEGEGS.retain8
  is '预留字段8';
comment on column OSECD.MCPRIVILEGEGS.retain9
  is '预留字段9';
comment on column OSECD.MCPRIVILEGEGS.retain10
  is '预留字段10';
comment on column OSECD.MCPRIVILEGEGS.funcclassname
  is '菜单链接';
alter table OSECD.MCPRIVILEGEGS
  add constraint PK_PRIVILEGEID primary key (PRIVILEGEID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRBRTSTATIONINFOGS
prompt ==================================
prompt
create table OSECD.MCRBRTSTATIONINFOGS
(
  routeid      VARCHAR2(36),
  stationid    VARCHAR2(36),
  brtstationno VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRBRTSTATIONINFOGS
  is 'BRT站点关系表';
comment on column OSECD.MCRBRTSTATIONINFOGS.routeid
  is '线路编号';
comment on column OSECD.MCRBRTSTATIONINFOGS.stationid
  is '站点编号';
comment on column OSECD.MCRBRTSTATIONINFOGS.brtstationno
  is 'brt站点编号';

prompt
prompt Creating table MCRBUSDVRINFOGS
prompt ==============================
prompt
create table OSECD.MCRBUSDVRINFOGS
(
  rbusdvrid NVARCHAR2(20) not null,
  busid     NVARCHAR2(20) not null,
  dvrselfid NVARCHAR2(20) not null,
  recdate   DATE default sysdate
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRBUSDVRINFOGS
  is '车辆DVR关系表';
alter table OSECD.MCRBUSDVRINFOGS
  add constraint PK_RUSDVR primary key (RBUSDVRID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRBUSROUTEGS
prompt ============================
prompt
create table OSECD.MCRBUSROUTEGS
(
  rbusrid VARCHAR2(36) not null,
  busid   VARCHAR2(36),
  routeid VARCHAR2(20),
  recdate DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRBUSROUTEGS
  is '线路车辆关系表';
comment on column OSECD.MCRBUSROUTEGS.rbusrid
  is '关系ID';
comment on column OSECD.MCRBUSROUTEGS.busid
  is '车辆编号';
comment on column OSECD.MCRBUSROUTEGS.routeid
  is '线路编号';
comment on column OSECD.MCRBUSROUTEGS.recdate
  is '记录日期';
alter table OSECD.MCRBUSROUTEGS
  add constraint PK_RBUSROUTE primary key (RBUSRID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRBUSROUTEGS_WS
prompt ===============================
prompt
create table OSECD.MCRBUSROUTEGS_WS
(
  rbusrid VARCHAR2(36) not null,
  busid   VARCHAR2(36),
  routeid VARCHAR2(20),
  recdate DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRBUSROUTEGS_WS
  is '线路车辆关系表（数据上传）';
comment on column OSECD.MCRBUSROUTEGS_WS.rbusrid
  is '关系ID';
comment on column OSECD.MCRBUSROUTEGS_WS.busid
  is '车辆编号';
comment on column OSECD.MCRBUSROUTEGS_WS.routeid
  is '线路编号';
comment on column OSECD.MCRBUSROUTEGS_WS.recdate
  is '记录日期';
alter table OSECD.MCRBUSROUTEGS_WS
  add constraint PK_RBUSROUTEWS primary key (RBUSRID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRBUSROUTEGS_YJ
prompt ===============================
prompt
create table OSECD.MCRBUSROUTEGS_YJ
(
  rbusrid VARCHAR2(36) not null,
  busid   VARCHAR2(36),
  routeid VARCHAR2(20),
  recdate DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRBUSROUTEGS_YJ
  is '应急线路车辆关系表';
comment on column OSECD.MCRBUSROUTEGS_YJ.rbusrid
  is '应急线路车辆关系主键ID';
comment on column OSECD.MCRBUSROUTEGS_YJ.busid
  is '车辆ID';
comment on column OSECD.MCRBUSROUTEGS_YJ.routeid
  is '线路ID(应急线路)';
comment on column OSECD.MCRBUSROUTEGS_YJ.recdate
  is '记录日期';
alter table OSECD.MCRBUSROUTEGS_YJ
  add constraint PK_YJRBUSROUTE primary key (RBUSRID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRCORRIDORSTATIONINFOGS
prompt =======================================
prompt
create table OSECD.MCRCORRIDORSTATIONINFOGS
(
  recordid       VARCHAR2(36) not null,
  corridorid     VARCHAR2(36),
  startstationno VARCHAR2(8),
  endstationno   VARCHAR2(8),
  startstationid VARCHAR2(36),
  endstationid   VARCHAR2(36),
  orderid        NUMBER,
  recdate        DATE default sysdate
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRCORRIDORSTATIONINFOGS
  is '客运走廊与站点关系表';
comment on column OSECD.MCRCORRIDORSTATIONINFOGS.recordid
  is '记录编号';
comment on column OSECD.MCRCORRIDORSTATIONINFOGS.corridorid
  is '客运走廊编号';
comment on column OSECD.MCRCORRIDORSTATIONINFOGS.startstationno
  is '开始站点NO';
comment on column OSECD.MCRCORRIDORSTATIONINFOGS.endstationno
  is '结束站点NO';
comment on column OSECD.MCRCORRIDORSTATIONINFOGS.startstationid
  is '开始站点ID';
comment on column OSECD.MCRCORRIDORSTATIONINFOGS.endstationid
  is '结束站点ID';
comment on column OSECD.MCRCORRIDORSTATIONINFOGS.orderid
  is '顺序号';
comment on column OSECD.MCRCORRIDORSTATIONINFOGS.recdate
  is '记录时间';
alter table OSECD.MCRCORRIDORSTATIONINFOGS
  add constraint PK_RCORRIDOR primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCREGIONINFOGS_MAP
prompt =================================
prompt
create table OSECD.MCREGIONINFOGS_MAP
(
  recordid           VARCHAR2(36),
  areatypefirsttype  VARCHAR2(2),
  areatypesecondtype VARCHAR2(2),
  shape              SDO_GEOMETRY,
  created            DATE,
  createdby          VARCHAR2(36),
  updated            DATE,
  updatedby          VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCREGIONINFOGS_MAP
  is '地图区域维护数据信息表';
comment on column OSECD.MCREGIONINFOGS_MAP.recordid
  is '记录编号';
comment on column OSECD.MCREGIONINFOGS_MAP.areatypefirsttype
  is '区域类型，取字典数据';
comment on column OSECD.MCREGIONINFOGS_MAP.areatypesecondtype
  is '区域名称，取字典数据';
comment on column OSECD.MCREGIONINFOGS_MAP.shape
  is '区域图形';
comment on column OSECD.MCREGIONINFOGS_MAP.created
  is '创建日期';
comment on column OSECD.MCREGIONINFOGS_MAP.createdby
  is '创建者';
comment on column OSECD.MCREGIONINFOGS_MAP.updated
  is '更新日期';
comment on column OSECD.MCREGIONINFOGS_MAP.updatedby
  is '更新者';
alter table OSECD.MCREGIONINFOGS_MAP
  add constraint UNIQUE_REGION unique (AREATYPEFIRSTTYPE, AREATYPESECONDTYPE)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCREMPROUTEGS
prompt ============================
prompt
create table OSECD.MCREMPROUTEGS
(
  remprid VARCHAR2(36) not null,
  empid   VARCHAR2(36),
  routeid VARCHAR2(20),
  recdate DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCREMPROUTEGS
  is '人员线路关系表';
comment on column OSECD.MCREMPROUTEGS.remprid
  is '关系ID';
comment on column OSECD.MCREMPROUTEGS.empid
  is '人员ID';
comment on column OSECD.MCREMPROUTEGS.routeid
  is '线路ID';
comment on column OSECD.MCREMPROUTEGS.recdate
  is '录入日期';
alter table OSECD.MCREMPROUTEGS
  add constraint PK_REMPROUTE primary key (REMPRID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCREMPROUTEGS_WS
prompt ===============================
prompt
create table OSECD.MCREMPROUTEGS_WS
(
  remprid VARCHAR2(36) not null,
  empid   VARCHAR2(36),
  routeid VARCHAR2(20),
  recdate DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCREMPROUTEGS_WS
  is '人员线路关系表（数据上传）';
comment on column OSECD.MCREMPROUTEGS_WS.remprid
  is '关系ID';
comment on column OSECD.MCREMPROUTEGS_WS.empid
  is '人员ID';
comment on column OSECD.MCREMPROUTEGS_WS.routeid
  is '线路ID';
comment on column OSECD.MCREMPROUTEGS_WS.recdate
  is '录入日期';
alter table OSECD.MCREMPROUTEGS_WS
  add constraint PK_REMPROUTEWS primary key (REMPRID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCREPORTDETAILGD
prompt ===============================
prompt
create table OSECD.MCREPORTDETAILGD
(
  reportdetailid VARCHAR2(36) not null,
  reportid       VARCHAR2(50),
  labelshow      VARCHAR2(36),
  querytype      VARCHAR2(36),
  maxvalue       VARCHAR2(36),
  minvalue       VARCHAR2(36),
  inputtype      VARCHAR2(36),
  formate        VARCHAR2(36),
  visible        VARCHAR2(1),
  required       VARCHAR2(1),
  defaultvalue   VARCHAR2(50),
  defaultvalue2  VARCHAR2(50),
  maxlength      VARCHAR2(10),
  typename       VARCHAR2(36),
  created        DATE,
  createby       VARCHAR2(36),
  updated        DATE,
  updateby       VARCHAR2(36),
  sortorder      NUMBER(2),
  sqlcontent     NVARCHAR2(2000)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCREPORTDETAILGD
  is '自定义报表参数配置';
comment on column OSECD.MCREPORTDETAILGD.reportdetailid
  is '报表参数设置ID';
comment on column OSECD.MCREPORTDETAILGD.reportid
  is '报表ID';
comment on column OSECD.MCREPORTDETAILGD.labelshow
  is '查询条件的显示标签';
comment on column OSECD.MCREPORTDETAILGD.querytype
  is '查询条件的类型 10:数字;11:数字范围;20:浮点;21:浮点范围;30:日期;31:日期范

围;32:月份;33:月份范围;34:年份;35:年份范围;36:时间;37:时间范围;40:组

织;50:字典;60:字符串;70:线路;80:站点;100:下拉框;200:下拉框(数据库);300:时段(下拉框)';
comment on column OSECD.MCREPORTDETAILGD.maxvalue
  is '最大值';
comment on column OSECD.MCREPORTDETAILGD.minvalue
  is '最小值';
comment on column OSECD.MCREPORTDETAILGD.inputtype
  is '输入类型';
comment on column OSECD.MCREPORTDETAILGD.formate
  is '格式';
comment on column OSECD.MCREPORTDETAILGD.visible
  is '当前查询条件是否显示';
comment on column OSECD.MCREPORTDETAILGD.required
  is '当前查询条件是否是必须输入';
comment on column OSECD.MCREPORTDETAILGD.defaultvalue
  is '默认值（一个查询条件或者范围查询的From字段）';
comment on column OSECD.MCREPORTDETAILGD.defaultvalue2
  is '默认值（范围查询的To字段）';
comment on column OSECD.MCREPORTDETAILGD.maxlength
  is '最大长度';
comment on column OSECD.MCREPORTDETAILGD.typename
  is '字典项的下拉框用到的TypeName';
comment on column OSECD.MCREPORTDETAILGD.created
  is '创建日期';
comment on column OSECD.MCREPORTDETAILGD.createby
  is '创建者';
comment on column OSECD.MCREPORTDETAILGD.updated
  is '更新日期';
comment on column OSECD.MCREPORTDETAILGD.updateby
  is '更新者';
comment on column OSECD.MCREPORTDETAILGD.sortorder
  is '排序';
comment on column OSECD.MCREPORTDETAILGD.sqlcontent
  is '自定义下拉框的sql';
alter table OSECD.MCREPORTDETAILGD
  add constraint PK_REPORTDETAILID primary key (REPORTDETAILID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCREPORTMNGGD
prompt ============================
prompt
create table OSECD.MCREPORTMNGGD
(
  reportid   VARCHAR2(36) not null,
  reportname NVARCHAR2(50),
  reporturl  NVARCHAR2(255),
  reportmenu VARCHAR2(50),
  vernum     NUMBER(10) default 0,
  created    DATE,
  createby   VARCHAR2(36),
  updated    DATE,
  updateby   VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCREPORTMNGGD
  is '自定义报表参数配置';
comment on column OSECD.MCREPORTMNGGD.reportid
  is '报表ID，通过该ID生成不同的菜单中的参数';
comment on column OSECD.MCREPORTMNGGD.reportname
  is '报表的Title显示用';
comment on column OSECD.MCREPORTMNGGD.reporturl
  is '报表文件*.frx的路径';
comment on column OSECD.MCREPORTMNGGD.reportmenu
  is '报表第一次生成时对应的菜单';
comment on column OSECD.MCREPORTMNGGD.vernum
  is '行版本号';
comment on column OSECD.MCREPORTMNGGD.created
  is '创建日期';
comment on column OSECD.MCREPORTMNGGD.createby
  is '创建者';
comment on column OSECD.MCREPORTMNGGD.updated
  is '更新日期';
comment on column OSECD.MCREPORTMNGGD.updateby
  is '更新者';
alter table OSECD.MCREPORTMNGGD
  add constraint PK_REPORTID primary key (REPORTID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRFUNCTIONINDICATORGS
prompt =====================================
prompt
create table OSECD.MCRFUNCTIONINDICATORGS
(
  relationid    VARCHAR2(36) not null,
  functioncode  VARCHAR2(36) not null,
  indicatorcode VARCHAR2(36) not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCRFUNCTIONINDICATORGS.relationid
  is '关系主键';
comment on column OSECD.MCRFUNCTIONINDICATORGS.functioncode
  is '菜单ID';
comment on column OSECD.MCRFUNCTIONINDICATORGS.indicatorcode
  is '指标ID';
alter table OSECD.MCRFUNCTIONINDICATORGS
  add constraint PK_RFUNCTIONINDICATOR primary key (RELATIONID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRINDICATORINFOGS
prompt =================================
prompt
create table OSECD.MCRINDICATORINFOGS
(
  relationid      VARCHAR2(36),
  indicatorid     VARCHAR2(36) not null,
  parentid        VARCHAR2(36) not null,
  indicatorweight NUMBER not null,
  orderid         NUMBER not null,
  indicatortype   VARCHAR2(2),
  isactive        VARCHAR2(2),
  ischecked       VARCHAR2(2),
  checked         DATE,
  checkedby       VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRINDICATORINFOGS
  is '指标关系信息表';
comment on column OSECD.MCRINDICATORINFOGS.relationid
  is '关系编号';
comment on column OSECD.MCRINDICATORINFOGS.indicatorid
  is '指标编号';
comment on column OSECD.MCRINDICATORINFOGS.parentid
  is '父级编号，默认为-1';
comment on column OSECD.MCRINDICATORINFOGS.indicatorweight
  is '指标权重（默认为1，同一模块下指标和为1，指标管理页面控制）';
comment on column OSECD.MCRINDICATORINFOGS.orderid
  is '顺序号';
comment on column OSECD.MCRINDICATORINFOGS.indicatortype
  is '指标体系类型，1-行业指标，2-企业指标';
comment on column OSECD.MCRINDICATORINFOGS.isactive
  is '是否有效，0-无效，1-有效';
comment on column OSECD.MCRINDICATORINFOGS.ischecked
  is '是否已检查，0-否，1-是';
comment on column OSECD.MCRINDICATORINFOGS.checked
  is '备用字段，检查时间';
comment on column OSECD.MCRINDICATORINFOGS.checkedby
  is '备用字段，检查人';
alter table OSECD.MCRINDICATORINFOGS
  add constraint PK_RINDICATOR primary key (INDICATORID, PARENTID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROLEINFOGS
prompt ===========================
prompt
create table OSECD.MCROLEINFOGS
(
  rolecode VARCHAR2(36) not null,
  rolename NVARCHAR2(100) not null,
  created  DATE default sysdate not null,
  createby VARCHAR2(36) default 'system' not null,
  updated  DATE,
  updateby VARCHAR2(36),
  isactive CHAR(1) default '1' not null,
  memos    NVARCHAR2(255)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCROLEINFOGS.rolecode
  is '角色ID';
comment on column OSECD.MCROLEINFOGS.rolename
  is '角色名称';
comment on column OSECD.MCROLEINFOGS.created
  is '创建时间';
comment on column OSECD.MCROLEINFOGS.createby
  is '创建人';
comment on column OSECD.MCROLEINFOGS.updated
  is '修改时间';
comment on column OSECD.MCROLEINFOGS.updateby
  is '修改人';
comment on column OSECD.MCROLEINFOGS.isactive
  is '状态（是否有效）';
comment on column OSECD.MCROLEINFOGS.memos
  is '备注';
alter table OSECD.MCROLEINFOGS
  add constraint PK_ROLEINFO primary key (ROLECODE)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTECROSSINFOGS
prompt =================================
prompt
create table OSECD.MCROUTECROSSINFOGS
(
  crossid         VARCHAR2(36) not null,
  crossname       NVARCHAR2(50),
  regionlevel     VARCHAR2(10),
  regionarea      VARCHAR2(10),
  longitude       NUMBER(9,6),
  latitude        NUMBER(9,6),
  isbusfirstcross VARCHAR2(2),
  memos           NVARCHAR2(255),
  isactive        VARCHAR2(2),
  begindate       DATE,
  enddate         DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTECROSSINFOGS
  is '城市路口数据信息表';
comment on column OSECD.MCROUTECROSSINFOGS.crossid
  is '路口编号';
comment on column OSECD.MCROUTECROSSINFOGS.crossname
  is '路口名称';
comment on column OSECD.MCROUTECROSSINFOGS.regionlevel
  is '区域级别';
comment on column OSECD.MCROUTECROSSINFOGS.regionarea
  is '行政区域';
comment on column OSECD.MCROUTECROSSINFOGS.longitude
  is '经度';
comment on column OSECD.MCROUTECROSSINFOGS.latitude
  is '纬度';
comment on column OSECD.MCROUTECROSSINFOGS.isbusfirstcross
  is '是否公交优先路口';
comment on column OSECD.MCROUTECROSSINFOGS.memos
  is '备注说明';
comment on column OSECD.MCROUTECROSSINFOGS.isactive
  is '是否有效';
comment on column OSECD.MCROUTECROSSINFOGS.begindate
  is '启用日期';
comment on column OSECD.MCROUTECROSSINFOGS.enddate
  is '停用日期';
alter table OSECD.MCROUTECROSSINFOGS
  add constraint PK_ROUTECROSS primary key (CROSSID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTEFSTANDLSTSEQTIMEGS
prompt ========================================
prompt
create table OSECD.MCROUTEFSTANDLSTSEQTIMEGS
(
  recordid             VARCHAR2(36) not null,
  routeid              VARCHAR2(20),
  startdate            DATE,
  enddate              DATE,
  startweek            NUMBER(1),
  endweek              NUMBER(1),
  mainstationfsttime   DATE,
  mainstationlsttime   DATE,
  secondstationfsttime DATE,
  secondstationlsttime DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTEFSTANDLSTSEQTIMEGS
  is '线路首末班时间表';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS.recordid
  is '记录ID';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS.routeid
  is '线路编号';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS.startdate
  is '开始日期';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS.enddate
  is '结束日期';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS.startweek
  is '开始周几';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS.endweek
  is '结束周几';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS.mainstationfsttime
  is '主站首班时间';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS.mainstationlsttime
  is '主站末班时间';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS.secondstationfsttime
  is '副站首班时间';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS.secondstationlsttime
  is '副站末班时间';
alter table OSECD.MCROUTEFSTANDLSTSEQTIMEGS
  add constraint PK_ROUTEFSTANDLSTSEQTIME primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTEFSTANDLSTSEQTIMEGS_WS
prompt ===========================================
prompt
create table OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS
(
  recordid             VARCHAR2(36) not null,
  routeid              VARCHAR2(20),
  startdate            DATE,
  enddate              DATE,
  startweek            NUMBER(1),
  endweek              NUMBER(1),
  mainstationfsttime   DATE,
  mainstationlsttime   DATE,
  secondstationfsttime DATE,
  secondstationlsttime DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS
  is '线路首末班时间表（数据上传）';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS.recordid
  is '记录ID';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS.routeid
  is '线路编号';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS.startdate
  is '开始日期';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS.enddate
  is '结束日期';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS.startweek
  is '开始周几';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS.endweek
  is '结束周几';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS.mainstationfsttime
  is '主站首班时间';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS.mainstationlsttime
  is '主站末班时间';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS.secondstationfsttime
  is '副站首班时间';
comment on column OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS.secondstationlsttime
  is '副站末班时间';
alter table OSECD.MCROUTEFSTANDLSTSEQTIMEGS_WS
  add constraint PK_ROUTEFSTANDLSTSEQTIMEWS primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTEINFOGS
prompt ============================
prompt
create table OSECD.MCROUTEINFOGS
(
  routeid                   VARCHAR2(20) not null,
  routename                 NVARCHAR2(20) not null,
  routecode                 NVARCHAR2(20),
  orgid                     VARCHAR2(36),
  routestyle                CHAR(1),
  routetype                 VARCHAR2(2),
  routegrade                CHAR(1),
  principal                 NVARCHAR2(50),
  begindate                 DATE,
  enddate                   DATE,
  isconductor               CHAR(1),
  isapts                    CHAR(1),
  isexistsaccommodationroad CHAR(1),
  dispatchtype              CHAR(1),
  isactive                  CHAR(1),
  memos                     NVARCHAR2(255),
  created                   DATE,
  createdby                 VARCHAR2(36),
  updated                   DATE,
  updatedby                 VARCHAR2(36),
  istwolooproute            VARCHAR2(2),
  shiftcount                NUMBER,
  buscount                  NUMBER,
  highinterval              NUMBER,
  lowinterval               NUMBER,
  platcode                  VARCHAR2(2) default 0,
  registdate                DATE,
  isconnect                 CHAR(1) default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTEINFOGS
  is '线路基础信息表';
comment on column OSECD.MCROUTEINFOGS.routeid
  is '线路编号';
comment on column OSECD.MCROUTEINFOGS.routename
  is '线路名称';
comment on column OSECD.MCROUTEINFOGS.routecode
  is '线路编码';
comment on column OSECD.MCROUTEINFOGS.orgid
  is '所属组织';
comment on column OSECD.MCROUTEINFOGS.routestyle
  is '线路运行方式(取字典值，1-上下行、2-环行)';
comment on column OSECD.MCROUTEINFOGS.routetype
  is '线路类型';
comment on column OSECD.MCROUTEINFOGS.routegrade
  is '线路级别';
comment on column OSECD.MCROUTEINFOGS.principal
  is '负责人';
comment on column OSECD.MCROUTEINFOGS.begindate
  is '开通日期';
comment on column OSECD.MCROUTEINFOGS.enddate
  is '注销日期';
comment on column OSECD.MCROUTEINFOGS.isconductor
  is '是否有售票员';
comment on column OSECD.MCROUTEINFOGS.isapts
  is '是否使用调度系统进行调度';
comment on column OSECD.MCROUTEINFOGS.isexistsaccommodationroad
  is '线路上是否存在公交专用道';
comment on column OSECD.MCROUTEINFOGS.dispatchtype
  is '调度类型（单边调度、双边调度、集合调度）';
comment on column OSECD.MCROUTEINFOGS.isactive
  is '是否有效';
comment on column OSECD.MCROUTEINFOGS.memos
  is '备注';
comment on column OSECD.MCROUTEINFOGS.created
  is '创建日期';
comment on column OSECD.MCROUTEINFOGS.createdby
  is '创建者';
comment on column OSECD.MCROUTEINFOGS.updated
  is '更新日期';
comment on column OSECD.MCROUTEINFOGS.updatedby
  is '更新者';
comment on column OSECD.MCROUTEINFOGS.istwolooproute
  is '是否二圈层进城线路';
comment on column OSECD.MCROUTEINFOGS.shiftcount
  is '日班次数';
comment on column OSECD.MCROUTEINFOGS.buscount
  is '车辆配置数';
comment on column OSECD.MCROUTEINFOGS.highinterval
  is '高峰间隔（分）';
comment on column OSECD.MCROUTEINFOGS.lowinterval
  is '平峰间隔（分）';
comment on column OSECD.MCROUTEINFOGS.platcode
  is '平台编码';
comment on column OSECD.MCROUTEINFOGS.registdate
  is '许可日期';
comment on column OSECD.MCROUTEINFOGS.isconnect
  is '是否接驳线';
alter table OSECD.MCROUTEINFOGS
  add constraint PK_ROUTEINFO primary key (ROUTEID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTEINFOGS_CALC
prompt =================================
prompt
create table OSECD.MCROUTEINFOGS_CALC
(
  routeid   VARCHAR2(36) not null,
  routename NVARCHAR2(20)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTEINFOGS_CALC
  is '参与计算线路列表';
comment on column OSECD.MCROUTEINFOGS_CALC.routeid
  is '线路编号';
comment on column OSECD.MCROUTEINFOGS_CALC.routename
  is '线路名称';

prompt
prompt Creating table MCROUTEINFOGS_GJ
prompt ===============================
prompt
create table OSECD.MCROUTEINFOGS_GJ
(
  routeid                   VARCHAR2(20) not null,
  routename                 NVARCHAR2(20) not null,
  routecode                 NVARCHAR2(20),
  orgid                     VARCHAR2(36),
  routestyle                CHAR(1),
  routetype                 VARCHAR2(2),
  routegrade                VARCHAR2(2),
  principal                 NVARCHAR2(50),
  begindate                 DATE,
  enddate                   DATE,
  isconductor               CHAR(1),
  isapts                    CHAR(1),
  isexistsaccommodationroad CHAR(1),
  dispatchtype              CHAR(1),
  isactive                  CHAR(1),
  memos                     NVARCHAR2(255),
  created                   DATE,
  createdby                 VARCHAR2(36),
  updated                   DATE,
  updatedby                 VARCHAR2(36),
  reflectid                 VARCHAR2(36),
  upszrouteid               VARCHAR2(8),
  upszrouteidtmp            VARCHAR2(10),
  istwolooproute            VARCHAR2(2),
  shiftcount                NUMBER,
  buscount                  NUMBER,
  highinterval              NUMBER,
  lowinterval               NUMBER,
  platcode                  VARCHAR2(2) default '0',
  uploadtime                DATE default SYSDATE,
  isneglect                 CHAR(1) default '0'
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCROUTEINFOGS_GJ.routeid
  is '线路编号';
comment on column OSECD.MCROUTEINFOGS_GJ.routename
  is '线路名称';
comment on column OSECD.MCROUTEINFOGS_GJ.routecode
  is '线路编码';
comment on column OSECD.MCROUTEINFOGS_GJ.orgid
  is '所属组织';
comment on column OSECD.MCROUTEINFOGS_GJ.routestyle
  is '线路运行方式(取字典值，1-上下行、2-环行)';
comment on column OSECD.MCROUTEINFOGS_GJ.routetype
  is '线路类型';
comment on column OSECD.MCROUTEINFOGS_GJ.routegrade
  is '线路级别';
comment on column OSECD.MCROUTEINFOGS_GJ.principal
  is '负责人';
comment on column OSECD.MCROUTEINFOGS_GJ.begindate
  is '开通日期';
comment on column OSECD.MCROUTEINFOGS_GJ.enddate
  is '注销日期';
comment on column OSECD.MCROUTEINFOGS_GJ.isconductor
  is '是否有售票员';
comment on column OSECD.MCROUTEINFOGS_GJ.isapts
  is '是否使用调度系统进行调度';
comment on column OSECD.MCROUTEINFOGS_GJ.isexistsaccommodationroad
  is '线路上是否存在公交专用道';
comment on column OSECD.MCROUTEINFOGS_GJ.dispatchtype
  is '调度类型（单边调度、双边调度、集合调度）';
comment on column OSECD.MCROUTEINFOGS_GJ.isactive
  is '是否有效';
comment on column OSECD.MCROUTEINFOGS_GJ.memos
  is '备注';
comment on column OSECD.MCROUTEINFOGS_GJ.created
  is '创建日期';
comment on column OSECD.MCROUTEINFOGS_GJ.createdby
  is '创建者';
comment on column OSECD.MCROUTEINFOGS_GJ.updated
  is '更新日期';
comment on column OSECD.MCROUTEINFOGS_GJ.updatedby
  is '更新者';
comment on column OSECD.MCROUTEINFOGS_GJ.reflectid
  is '映射ID';
comment on column OSECD.MCROUTEINFOGS_GJ.upszrouteid
  is '上传深标线路ID';
comment on column OSECD.MCROUTEINFOGS_GJ.upszrouteidtmp
  is '上传深标线路ID,临时使用';
comment on column OSECD.MCROUTEINFOGS_GJ.istwolooproute
  is '是否二圈层进城线路';
comment on column OSECD.MCROUTEINFOGS_GJ.shiftcount
  is '日班次数';
comment on column OSECD.MCROUTEINFOGS_GJ.buscount
  is '车辆配置数';
comment on column OSECD.MCROUTEINFOGS_GJ.highinterval
  is '高峰间隔（分）';
comment on column OSECD.MCROUTEINFOGS_GJ.lowinterval
  is '平峰间隔（分）';
comment on column OSECD.MCROUTEINFOGS_GJ.platcode
  is '平台编号';
comment on column OSECD.MCROUTEINFOGS_GJ.uploadtime
  is '上传时间';
comment on column OSECD.MCROUTEINFOGS_GJ.isneglect
  is '是否忽略';

prompt
prompt Creating table MCROUTEINFOGS_MAP
prompt ================================
prompt
create table OSECD.MCROUTEINFOGS_MAP
(
  segmentid            VARCHAR2(36) not null,
  segmentname          NVARCHAR2(30) not null,
  subroutename         VARCHAR2(20),
  rundirection         NVARCHAR2(10),
  sngmile              NUMBER(5,2),
  sngtime              NUMBER(3),
  accommodationlength  NUMBER(5,2),
  fstandlststationname NVARCHAR2(255),
  stationnum           NUMBER(3),
  routename            NVARCHAR2(20),
  orgname              NVARCHAR2(20),
  fstandlsttime        VARCHAR2(100),
  routeid              VARCHAR2(36),
  shape                SDO_GEOMETRY
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTEINFOGS_MAP
  is '线路地图信息表';
comment on column OSECD.MCROUTEINFOGS_MAP.segmentid
  is '单程ID';
comment on column OSECD.MCROUTEINFOGS_MAP.segmentname
  is '线路单程名称';
comment on column OSECD.MCROUTEINFOGS_MAP.subroutename
  is '所属子线路名称';
comment on column OSECD.MCROUTEINFOGS_MAP.rundirection
  is '运行方向';
comment on column OSECD.MCROUTEINFOGS_MAP.sngmile
  is '单程里程(公里)';
comment on column OSECD.MCROUTEINFOGS_MAP.sngtime
  is '单程时间(分钟)';
comment on column OSECD.MCROUTEINFOGS_MAP.accommodationlength
  is '使用专用道长度(公里)';
comment on column OSECD.MCROUTEINFOGS_MAP.fstandlststationname
  is '行驶区间';
comment on column OSECD.MCROUTEINFOGS_MAP.stationnum
  is '站点个数';
comment on column OSECD.MCROUTEINFOGS_MAP.routename
  is '所属线路名称';
comment on column OSECD.MCROUTEINFOGS_MAP.orgname
  is '所属组织名称';
comment on column OSECD.MCROUTEINFOGS_MAP.fstandlsttime
  is '首末班时间';
comment on column OSECD.MCROUTEINFOGS_MAP.routeid
  is '所属线路ID';
comment on column OSECD.MCROUTEINFOGS_MAP.shape
  is '几何图形';

prompt
prompt Creating table MCROUTEINFOGS_MAP_CS
prompt ===================================
prompt
create table OSECD.MCROUTEINFOGS_MAP_CS
(
  segmentid            VARCHAR2(36) not null,
  segmentname          NVARCHAR2(30) not null,
  subroutename         VARCHAR2(20),
  rundirection         NVARCHAR2(10),
  sngmile              NUMBER(5,2),
  sngtime              NUMBER(3),
  accommodationlength  NUMBER(5,2),
  fstandlststationname NVARCHAR2(255),
  stationnum           NUMBER(3),
  routename            NVARCHAR2(20),
  orgname              NVARCHAR2(20),
  fstandlsttime        VARCHAR2(100),
  routeid              VARCHAR2(36),
  shape                SDO_GEOMETRY
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTEINFOGS_MAP_CS
  is '线路地图信息表';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.segmentid
  is '单程ID';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.segmentname
  is '线路单程名称';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.subroutename
  is '所属子线路名称';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.rundirection
  is '运行方向';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.sngmile
  is '单程里程(公里)';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.sngtime
  is '单程时间(分钟)';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.accommodationlength
  is '使用专用道长度(公里)';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.fstandlststationname
  is '行驶区间';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.stationnum
  is '站点个数';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.routename
  is '所属线路名称';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.orgname
  is '所属组织名称';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.fstandlsttime
  is '首末班时间';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.routeid
  is '所属线路ID';
comment on column OSECD.MCROUTEINFOGS_MAP_CS.shape
  is '线';

prompt
prompt Creating table MCROUTEINFOGS_SAMPLE
prompt ===================================
prompt
create table OSECD.MCROUTEINFOGS_SAMPLE
(
  routeid                   VARCHAR2(20) not null,
  routename                 NVARCHAR2(20) not null,
  routecode                 NVARCHAR2(20),
  orgid                     VARCHAR2(36),
  routestyle                CHAR(1),
  routetype                 VARCHAR2(2),
  routegrade                VARCHAR2(2),
  principal                 NVARCHAR2(50),
  begindate                 DATE,
  enddate                   DATE,
  isconductor               CHAR(1),
  isapts                    CHAR(1),
  isexistsaccommodationroad CHAR(1),
  dispatchtype              CHAR(1),
  isactive                  CHAR(1),
  memos                     NVARCHAR2(255),
  created                   DATE,
  createdby                 VARCHAR2(36),
  updated                   DATE,
  updatedby                 VARCHAR2(36),
  reflectid                 VARCHAR2(36),
  upszrouteid               VARCHAR2(10),
  upszrouteidtmp            VARCHAR2(10),
  routesamplerecordid       VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTEINFOGS_SAMPLE
  is '线路基础信息临时表(线路抽样样本)';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.routeid
  is '线路编号';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.routename
  is '线路名称';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.routecode
  is '线路编码';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.orgid
  is '所属组织';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.routestyle
  is '线路运行方式(取字典值，1-上下行、2-环行)';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.routetype
  is '线路类型';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.routegrade
  is '线路级别';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.principal
  is '负责人';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.begindate
  is '开通日期';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.enddate
  is '注销日期';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.isconductor
  is '是否有售票员';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.isapts
  is '是否使用调度系统进行调度';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.isexistsaccommodationroad
  is '线路上是否存在公交专用道';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.dispatchtype
  is '调度类型（单边调度、双边调度、集合调度）';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.isactive
  is '是否有效';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.memos
  is '备注';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.created
  is '创建日期';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.createdby
  is '创建者';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.updated
  is '更新日期';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.updatedby
  is '更新者';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.reflectid
  is '映射ID';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.upszrouteid
  is '上传深标线路ID';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.upszrouteidtmp
  is '上传深标线路ID,临时使用';
comment on column OSECD.MCROUTEINFOGS_SAMPLE.routesamplerecordid
  is '对应运营考核线路抽样记录主键ID';
alter table OSECD.MCROUTEINFOGS_SAMPLE
  add constraint PK_ROUTEINFO_SAMPLE primary key (ROUTEID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTEINFOGS_SGJ
prompt ================================
prompt
create table OSECD.MCROUTEINFOGS_SGJ
(
  routeid         NUMBER(8) not null,
  routename       VARCHAR2(20) not null,
  routetype       VARCHAR2(2) not null,
  isconductor     VARCHAR2(2) not null,
  dispatchway     CHAR(1) not null,
  memos           NVARCHAR2(255),
  oilstdmile      NUMBER(5,2),
  servicestdmile  NUMBER(5,2),
  maintainstdmile NUMBER(5,2),
  inoutstdmile    NUMBER(5,2),
  created         DATE default sysdate,
  createby        VARCHAR2(20),
  updated         DATE,
  updateby        VARCHAR2(20),
  isactive        CHAR(1) default '1' not null,
  routecode       VARCHAR2(20),
  flag            CHAR(1) default '1',
  orgid           VARCHAR2(20),
  offsetpos       NUMBER(4),
  offsetneg       NUMBER(4),
  routeowend      VARCHAR2(10),
  fstadate        DATE,
  startdate       DATE,
  enddate         DATE,
  tickettype      NUMBER(8,2),
  iccard          VARCHAR2(1),
  runs            NUMBER(16,2),
  hotvalue        NUMBER(8,2),
  normalvalue     NUMBER(8,2),
  coolvalue       NUMBER(8,2),
  ctrlroomadd     VARCHAR2(100),
  ctrlroomtel     VARCHAR2(20),
  stationnum      NUMBER(8,2),
  falseroutetype  VARCHAR2(2),
  ticketprice     NUMBER(3,1),
  vernum          NUMBER(8) default 0,
  retain1         VARCHAR2(50),
  retain2         VARCHAR2(50),
  retain3         VARCHAR2(50),
  retain4         VARCHAR2(50),
  retain5         VARCHAR2(50),
  retain6         VARCHAR2(50),
  retain7         VARCHAR2(50),
  retain8         VARCHAR2(50),
  retain9         VARCHAR2(50),
  retain10        VARCHAR2(50),
  airticket       NUMBER(3,1),
  ticket          NUMBER(3,1),
  shuangbannum    NUMBER(4),
  danbannum       NUMBER(4),
  liangtoubannum  NUMBER(4),
  yebannum        NUMBER(4),
  busnumber       NUMBER(4),
  isweefree       CHAR(1),
  isautoflag      CHAR(1),
  crosstime       DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTEINFOGS_SGJ
  is '原始公交线路信息表';
comment on column OSECD.MCROUTEINFOGS_SGJ.routeid
  is '主键ID';
comment on column OSECD.MCROUTEINFOGS_SGJ.routename
  is '线路名称';
comment on column OSECD.MCROUTEINFOGS_SGJ.routetype
  is '线路类型';
comment on column OSECD.MCROUTEINFOGS_SGJ.isconductor
  is '是否有售票员:1,车上有人售票;2,车上无人售票;3,站台售票';
comment on column OSECD.MCROUTEINFOGS_SGJ.dispatchway
  is '调度方式';
comment on column OSECD.MCROUTEINFOGS_SGJ.memos
  is '备注';
comment on column OSECD.MCROUTEINFOGS_SGJ.oilstdmile
  is '线路加油里程';
comment on column OSECD.MCROUTEINFOGS_SGJ.servicestdmile
  is '线路保养里程';
comment on column OSECD.MCROUTEINFOGS_SGJ.maintainstdmile
  is '线路维修里程';
comment on column OSECD.MCROUTEINFOGS_SGJ.inoutstdmile
  is '线路出场进场（出入库）里程';
comment on column OSECD.MCROUTEINFOGS_SGJ.created
  is '创建日期';
comment on column OSECD.MCROUTEINFOGS_SGJ.createby
  is '创建者';
comment on column OSECD.MCROUTEINFOGS_SGJ.updated
  is '更新日期';
comment on column OSECD.MCROUTEINFOGS_SGJ.updateby
  is '更新者';
comment on column OSECD.MCROUTEINFOGS_SGJ.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.MCROUTEINFOGS_SGJ.routecode
  is '线路编码';
comment on column OSECD.MCROUTEINFOGS_SGJ.flag
  is '是否有效（暂时不用）';
comment on column OSECD.MCROUTEINFOGS_SGJ.orgid
  is '组织ID（暂时不用）';
comment on column OSECD.MCROUTEINFOGS_SGJ.offsetpos
  is '准点正值';
comment on column OSECD.MCROUTEINFOGS_SGJ.offsetneg
  is '准点负值';
comment on column OSECD.MCROUTEINFOGS_SGJ.falseroutetype
  is '线路类型是否准环形  1是准环形 0 否 ';
comment on column OSECD.MCROUTEINFOGS_SGJ.ticketprice
  is '标准票价（元）（不开空调时的价格）';
comment on column OSECD.MCROUTEINFOGS_SGJ.vernum
  is '行版本号';
comment on column OSECD.MCROUTEINFOGS_SGJ.retain1
  is '预留字段1';
comment on column OSECD.MCROUTEINFOGS_SGJ.retain2
  is '预留字段2';
comment on column OSECD.MCROUTEINFOGS_SGJ.retain3
  is '预留字段3';
comment on column OSECD.MCROUTEINFOGS_SGJ.retain4
  is '预留字段4';
comment on column OSECD.MCROUTEINFOGS_SGJ.retain5
  is '预留字段5';
comment on column OSECD.MCROUTEINFOGS_SGJ.retain6
  is '预留字段6';
comment on column OSECD.MCROUTEINFOGS_SGJ.retain7
  is '预留字段7';
comment on column OSECD.MCROUTEINFOGS_SGJ.retain8
  is '预留字段8';
comment on column OSECD.MCROUTEINFOGS_SGJ.retain9
  is '预留字段9';
comment on column OSECD.MCROUTEINFOGS_SGJ.retain10
  is '预留字段10';
comment on column OSECD.MCROUTEINFOGS_SGJ.airticket
  is '空调车票价（元）';
comment on column OSECD.MCROUTEINFOGS_SGJ.ticket
  is '票价（元）';
comment on column OSECD.MCROUTEINFOGS_SGJ.shuangbannum
  is '双班';
comment on column OSECD.MCROUTEINFOGS_SGJ.danbannum
  is '单班';
comment on column OSECD.MCROUTEINFOGS_SGJ.liangtoubannum
  is '两头班';
comment on column OSECD.MCROUTEINFOGS_SGJ.yebannum
  is '夜班';

prompt
prompt Creating table MCROUTEINFOGS_WS
prompt ===============================
prompt
create table OSECD.MCROUTEINFOGS_WS
(
  routeid                   VARCHAR2(20) not null,
  routename                 NVARCHAR2(20) not null,
  routecode                 NVARCHAR2(20),
  orgid                     VARCHAR2(36),
  routestyle                CHAR(1),
  routetype                 VARCHAR2(2),
  routegrade                CHAR(1),
  principal                 NVARCHAR2(50),
  begindate                 DATE,
  enddate                   DATE,
  isconductor               CHAR(1),
  isapts                    CHAR(1),
  isexistsaccommodationroad CHAR(1),
  dispatchtype              CHAR(1),
  isactive                  CHAR(1),
  memos                     NVARCHAR2(255),
  created                   DATE,
  createdby                 VARCHAR2(36),
  updated                   DATE,
  updatedby                 VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTEINFOGS_WS
  is '线路基础信息表（数据上传）';
comment on column OSECD.MCROUTEINFOGS_WS.routeid
  is '线路编号';
comment on column OSECD.MCROUTEINFOGS_WS.routename
  is '线路名称';
comment on column OSECD.MCROUTEINFOGS_WS.routecode
  is '线路编码';
comment on column OSECD.MCROUTEINFOGS_WS.orgid
  is '所属组织';
comment on column OSECD.MCROUTEINFOGS_WS.routestyle
  is '线路运行方式(取字典值，1-上下行、2-环行)';
comment on column OSECD.MCROUTEINFOGS_WS.routetype
  is '线路类型';
comment on column OSECD.MCROUTEINFOGS_WS.routegrade
  is '线路级别';
comment on column OSECD.MCROUTEINFOGS_WS.principal
  is '负责人';
comment on column OSECD.MCROUTEINFOGS_WS.begindate
  is '开通日期';
comment on column OSECD.MCROUTEINFOGS_WS.enddate
  is '注销日期';
comment on column OSECD.MCROUTEINFOGS_WS.isconductor
  is '是否有售票员';
comment on column OSECD.MCROUTEINFOGS_WS.isapts
  is '是否使用调度系统进行调度';
comment on column OSECD.MCROUTEINFOGS_WS.isexistsaccommodationroad
  is '线路上是否存在公交专用道';
comment on column OSECD.MCROUTEINFOGS_WS.dispatchtype
  is '调度类型（单边调度、双边调度、集合调度）';
comment on column OSECD.MCROUTEINFOGS_WS.isactive
  is '是否有效';
comment on column OSECD.MCROUTEINFOGS_WS.memos
  is '备注';
comment on column OSECD.MCROUTEINFOGS_WS.created
  is '创建日期';
comment on column OSECD.MCROUTEINFOGS_WS.createdby
  is '创建者';
comment on column OSECD.MCROUTEINFOGS_WS.updated
  is '更新日期';
comment on column OSECD.MCROUTEINFOGS_WS.updatedby
  is '更新者';
alter table OSECD.MCROUTEINFOGS_WS
  add constraint PK_ROUTEINFOWS primary key (ROUTEID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTEINFOGS_YJ
prompt ===============================
prompt
create table OSECD.MCROUTEINFOGS_YJ
(
  routeid                   VARCHAR2(20) not null,
  routename                 NVARCHAR2(50) not null,
  routecode                 NVARCHAR2(50),
  orgid                     VARCHAR2(36),
  routestyle                CHAR(1),
  routetype                 VARCHAR2(2),
  routegrade                VARCHAR2(2),
  principal                 NVARCHAR2(50),
  begindate                 DATE,
  enddate                   DATE,
  isconductor               CHAR(1),
  isapts                    CHAR(1),
  isexistsaccommodationroad CHAR(1),
  dispatchtype              CHAR(1),
  isactive                  CHAR(1),
  memos                     NVARCHAR2(255),
  created                   DATE,
  createdby                 VARCHAR2(36),
  updated                   DATE,
  updatedby                 VARCHAR2(36),
  reflectid                 VARCHAR2(36),
  upszrouteid               VARCHAR2(10),
  upszrouteidtmp            VARCHAR2(10)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTEINFOGS_YJ
  is '应急线路基础信息表';
comment on column OSECD.MCROUTEINFOGS_YJ.routeid
  is '线路编号';
comment on column OSECD.MCROUTEINFOGS_YJ.routename
  is '线路名称';
comment on column OSECD.MCROUTEINFOGS_YJ.routecode
  is '线路编码';
comment on column OSECD.MCROUTEINFOGS_YJ.orgid
  is '所属组织';
comment on column OSECD.MCROUTEINFOGS_YJ.routestyle
  is '线路运行方式(取字典值，1-上下行、2-环行)';
comment on column OSECD.MCROUTEINFOGS_YJ.routetype
  is '线路类型';
comment on column OSECD.MCROUTEINFOGS_YJ.routegrade
  is '线路级别';
comment on column OSECD.MCROUTEINFOGS_YJ.principal
  is '负责人';
comment on column OSECD.MCROUTEINFOGS_YJ.begindate
  is '开通日期';
comment on column OSECD.MCROUTEINFOGS_YJ.enddate
  is '注销日期';
comment on column OSECD.MCROUTEINFOGS_YJ.isconductor
  is '是否有售票员';
comment on column OSECD.MCROUTEINFOGS_YJ.isapts
  is '是否使用调度系统进行调度';
comment on column OSECD.MCROUTEINFOGS_YJ.isexistsaccommodationroad
  is '线路上是否存在公交专用道';
comment on column OSECD.MCROUTEINFOGS_YJ.dispatchtype
  is '调度类型（单边调度、双边调度、集合调度）';
comment on column OSECD.MCROUTEINFOGS_YJ.isactive
  is '是否有效';
comment on column OSECD.MCROUTEINFOGS_YJ.memos
  is '备注';
comment on column OSECD.MCROUTEINFOGS_YJ.created
  is '创建日期';
comment on column OSECD.MCROUTEINFOGS_YJ.createdby
  is '创建者';
comment on column OSECD.MCROUTEINFOGS_YJ.updated
  is '更新日期';
comment on column OSECD.MCROUTEINFOGS_YJ.updatedby
  is '更新者';
comment on column OSECD.MCROUTEINFOGS_YJ.reflectid
  is '映射ID';
comment on column OSECD.MCROUTEINFOGS_YJ.upszrouteid
  is '上传深标线路ID';
comment on column OSECD.MCROUTEINFOGS_YJ.upszrouteidtmp
  is '上传深标线路ID,临时使用';
alter table OSECD.MCROUTEINFOGS_YJ
  add constraint PK_YJROUTEINFO primary key (ROUTEID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTERUNINTERVALSTDGS
prompt ======================================
prompt
create table OSECD.MCROUTERUNINTERVALSTDGS
(
  routerunintervalstdid VARCHAR2(50) not null,
  datatype              CHAR(1),
  routeid               VARCHAR2(50),
  subrouteid            VARCHAR2(50),
  segmentid             VARCHAR2(50),
  stationid             VARCHAR2(50),
  longintervalmin       NUMBER(8,2),
  longintervalmax       NUMBER(8,2),
  shortintervalmin      NUMBER(8,2),
  shortintervalmax      NUMBER(8,2),
  startdate             DATE,
  enddate               DATE,
  isactive              CHAR(1) default 1,
  verifystatus          CHAR(1) default 0,
  verifyby              VARCHAR2(50),
  verifydate            DATE,
  memos                 NVARCHAR2(255),
  created               DATE,
  createby              VARCHAR2(50),
  updated               DATE,
  updateby              VARCHAR2(50),
  lowspeedvaluemax      NUMBER(8,2),
  lowspeedvaluemin      NUMBER(8,2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTERUNINTERVALSTDGS
  is '线路运营不规范间隔标准表';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.routerunintervalstdid
  is '线路运营不规范间隔标准主键ID';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.datatype
  is '标准类别(0通用标准，1具体线路标准)';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.routeid
  is '线路ID';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.subrouteid
  is '子线路ID';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.segmentid
  is '单程ID';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.stationid
  is '站点ID(备用)';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.longintervalmin
  is '过大间隔标准(最小值，单位：分钟)';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.longintervalmax
  is '过大间隔标准(最大值，单位：分钟)';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.shortintervalmin
  is '过短间隔标准(最小值，单位：分钟)';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.shortintervalmax
  is '过短间隔标准(最大值，单位：分钟)';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.startdate
  is '有效开始日期';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.enddate
  is '有效结束日期';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.verifyby
  is '审核人';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.verifydate
  is '审核时间';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.memos
  is '备注';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.created
  is '创建日期';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.createby
  is '创建者';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.updated
  is '更新日期';
comment on column OSECD.MCROUTERUNINTERVALSTDGS.updateby
  is '更新者';
alter table OSECD.MCROUTERUNINTERVALSTDGS
  add constraint PK_ROUTERUNINTERVALSTDID primary key (ROUTERUNINTERVALSTDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTERUNSPEEDSTDGS
prompt ===================================
prompt
create table OSECD.MCROUTERUNSPEEDSTDGS
(
  routerunspeedstdid VARCHAR2(50) not null,
  datatype           CHAR(1),
  routeid            VARCHAR2(50),
  subrouteid         VARCHAR2(50),
  segmentid          VARCHAR2(50),
  speedmin           NUMBER(8,2),
  speedmax           NUMBER(8,2),
  durationmin        NUMBER(8,2),
  durationmax        NUMBER(8,2),
  datespanname       NVARCHAR2(50),
  startdate          DATE,
  enddate            DATE,
  startweek          NUMBER(1),
  endweek            NUMBER(1),
  timephasekey       VARCHAR2(10),
  timephasename      NVARCHAR2(50),
  starttime          NUMBER(8,6),
  endtime            NUMBER(8,6),
  isactive           CHAR(1) default 1,
  verifystatus       CHAR(1) default 0,
  verifyby           VARCHAR2(50),
  verifydate         DATE,
  memos              NVARCHAR2(255),
  created            DATE,
  createby           VARCHAR2(50),
  updated            DATE,
  updateby           VARCHAR2(50),
  laststationid      VARCHAR2(50),
  laststationnum     VARCHAR2(50),
  stationid          VARCHAR2(50),
  stationnum         VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTERUNSPEEDSTDGS
  is '车辆低速运行标准表';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.routerunspeedstdid
  is '线路运营不规范间隔标准主键ID';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.datatype
  is '标准类别(0通用标准，1具体线路标准)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.routeid
  is '线路ID';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.subrouteid
  is '子线路ID';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.segmentid
  is '单程ID';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.speedmin
  is '速度标准(最小值，单位：km/h)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.speedmax
  is '速度标准(最大值，单位：km/h)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.durationmin
  is '持续时长标准(最小值，单位：分钟)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.durationmax
  is '持续时长标准(最大值，单位：分钟)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.datespanname
  is '日期段名称(如五一假期、春节假期等)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.startdate
  is '开始日期';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.enddate
  is '结束日期';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.startweek
  is '开始周几';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.endweek
  is '结束周几';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.timephasekey
  is '时间段(峰段)编号(对应字典中峰段的key)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.timephasename
  is '时间段(峰段)名称(对应字典中峰段的value)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.starttime
  is '开始时间(数字格式，相对于0点的小时值)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.endtime
  is '结束时间(数字格式，相对于0点的小时值)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.verifystatus
  is '审核状态(0未审核，1已审核)';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.verifyby
  is '审核人';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.verifydate
  is '审核时间';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.memos
  is '备注';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.created
  is '创建日期';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.createby
  is '创建者';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.updated
  is '更新日期';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.updateby
  is '更新者';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.laststationid
  is '区域开始站点ID';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.laststationnum
  is '区域开始站点统一编号';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.stationid
  is '区域结束站点ID';
comment on column OSECD.MCROUTERUNSPEEDSTDGS.stationnum
  is '区域结束站点统一编号';
alter table OSECD.MCROUTERUNSPEEDSTDGS
  add constraint PK_ROUTERUNSPEEDSTDID primary key (ROUTERUNSPEEDSTDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTESPEEDLIMIT
prompt ================================
prompt
create table OSECD.MCROUTESPEEDLIMIT
(
  recordid     VARCHAR2(36) not null,
  routeid      VARCHAR2(36),
  startdate    DATE,
  enddate      DATE,
  startstation VARCHAR2(36),
  endstation   VARCHAR2(36),
  starttime    DATE,
  endtime      DATE,
  maxspeed     NUMBER,
  minspeed     NUMBER
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTESPEEDLIMIT
  is '线路限速标准信息表';
comment on column OSECD.MCROUTESPEEDLIMIT.recordid
  is '记录编号';
comment on column OSECD.MCROUTESPEEDLIMIT.routeid
  is '线路编号';
comment on column OSECD.MCROUTESPEEDLIMIT.startdate
  is '生效日期';
comment on column OSECD.MCROUTESPEEDLIMIT.enddate
  is '失效日期';
comment on column OSECD.MCROUTESPEEDLIMIT.startstation
  is '开始站点';
comment on column OSECD.MCROUTESPEEDLIMIT.endstation
  is '结束站点';
comment on column OSECD.MCROUTESPEEDLIMIT.starttime
  is '开始时间';
comment on column OSECD.MCROUTESPEEDLIMIT.endtime
  is '结束时间';
comment on column OSECD.MCROUTESPEEDLIMIT.maxspeed
  is '最大限速';
comment on column OSECD.MCROUTESPEEDLIMIT.minspeed
  is '最小限速';
alter table OSECD.MCROUTESPEEDLIMIT
  add constraint PK_ROUTESPEEDLIMIT primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTETIMEPHASEGS
prompt =================================
prompt
create table OSECD.MCROUTETIMEPHASEGS
(
  recordid            VARCHAR2(36) not null,
  routeid             VARCHAR2(20) not null,
  routename           NVARCHAR2(20),
  timephasekey        VARCHAR2(2) not null,
  timephasename       NVARCHAR2(40) not null,
  begindate           DATE,
  enddate             DATE,
  beginweek           NUMBER(1),
  endweek             NUMBER(1),
  starttime           NUMBER(8,6),
  endtime             NUMBER(8,6),
  planseqs            NUMBER(3),
  timephaseinterval   NUMBER(5),
  timephasecircletime NUMBER(5),
  isactive            CHAR(1) not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTETIMEPHASEGS
  is '各线路各峰段的划分';
comment on column OSECD.MCROUTETIMEPHASEGS.recordid
  is '记录ID';
comment on column OSECD.MCROUTETIMEPHASEGS.routeid
  is '线路编号';
comment on column OSECD.MCROUTETIMEPHASEGS.routename
  is '线路名称';
comment on column OSECD.MCROUTETIMEPHASEGS.timephasekey
  is '峰段编号（对应字典中峰段的key）';
comment on column OSECD.MCROUTETIMEPHASEGS.timephasename
  is '峰段编号（对应字典中峰段的value）';
comment on column OSECD.MCROUTETIMEPHASEGS.begindate
  is '开始应用日期';
comment on column OSECD.MCROUTETIMEPHASEGS.enddate
  is '结束应用日期';
comment on column OSECD.MCROUTETIMEPHASEGS.beginweek
  is '开始周几';
comment on column OSECD.MCROUTETIMEPHASEGS.endweek
  is '结束周几';
comment on column OSECD.MCROUTETIMEPHASEGS.starttime
  is '峰段开始时间（数字格式，相对于0点的小时值）';
comment on column OSECD.MCROUTETIMEPHASEGS.endtime
  is '峰段结束时间（数字格式，相对于0点的小时值）';
comment on column OSECD.MCROUTETIMEPHASEGS.planseqs
  is '计划车次数';
comment on column OSECD.MCROUTETIMEPHASEGS.timephaseinterval
  is '峰段发车间隔（分钟）';
comment on column OSECD.MCROUTETIMEPHASEGS.timephasecircletime
  is '峰段周转时间（分钟）';
comment on column OSECD.MCROUTETIMEPHASEGS.isactive
  is '是否有效';
alter table OSECD.MCROUTETIMEPHASEGS
  add constraint PK_ROUTETIMEPHASE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTETIMEPHASEGS2
prompt ==================================
prompt
create table OSECD.MCROUTETIMEPHASEGS2
(
  recordid      VARCHAR2(36) not null,
  timephasekey  VARCHAR2(2) not null,
  timephasename NVARCHAR2(40) not null,
  starttime     NUMBER(8,6),
  endtime       NUMBER(8,6),
  timeinterval  NUMBER(5,1),
  timephasetype CHAR(1)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTETIMEPHASEGS2
  is '五峰段的划分标准';
comment on column OSECD.MCROUTETIMEPHASEGS2.recordid
  is '记录ID';
comment on column OSECD.MCROUTETIMEPHASEGS2.timephasekey
  is '峰段编号（对应字典中峰段的key）';
comment on column OSECD.MCROUTETIMEPHASEGS2.timephasename
  is '峰段编号（对应字典中峰段的value）';
comment on column OSECD.MCROUTETIMEPHASEGS2.starttime
  is '峰段开始时间（数字格式，相对于0点的小时值）';
comment on column OSECD.MCROUTETIMEPHASEGS2.endtime
  is '峰段结束时间（数字格式，相对于0点的小时值）';
comment on column OSECD.MCROUTETIMEPHASEGS2.timeinterval
  is '峰段发车间隔';
comment on column OSECD.MCROUTETIMEPHASEGS2.timephasetype
  is '峰段类型 2平峰 1高峰';
alter table OSECD.MCROUTETIMEPHASEGS2
  add constraint PK_ROUTETIMEPHASE2 primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTETIMEPHASEGS_WS
prompt ====================================
prompt
create table OSECD.MCROUTETIMEPHASEGS_WS
(
  recordid            VARCHAR2(36) not null,
  routeid             VARCHAR2(20) not null,
  routename           NVARCHAR2(20) not null,
  timephasekey        VARCHAR2(2) not null,
  timephasename       NVARCHAR2(40) not null,
  begindate           DATE,
  enddate             DATE,
  beginweek           NUMBER(1),
  endweek             NUMBER(1),
  starttime           NUMBER(8,6),
  endtime             NUMBER(8,6),
  planseqs            NUMBER(3),
  timephaseinterval   NUMBER(5),
  timephasecircletime NUMBER(5),
  isactive            CHAR(1) not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCROUTETIMEPHASEGS_WS
  is '各线路各峰段的划分（数据上传）';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.recordid
  is '记录ID';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.routeid
  is '线路编号';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.routename
  is '线路名称';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.timephasekey
  is '峰段编号（对应字典中峰段的key）';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.timephasename
  is '峰段编号（对应字典中峰段的value）';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.begindate
  is '开始应用日期';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.enddate
  is '结束应用日期';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.beginweek
  is '开始周几';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.endweek
  is '结束周几';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.starttime
  is '峰段开始时间（数字格式，相对于0点的小时值）';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.endtime
  is '峰段结束时间（数字格式，相对于0点的小时值）';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.planseqs
  is '计划车次数';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.timephaseinterval
  is '峰段发车间隔（分钟）';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.timephasecircletime
  is '峰段周转时间（分钟）';
comment on column OSECD.MCROUTETIMEPHASEGS_WS.isactive
  is '是否有效';
alter table OSECD.MCROUTETIMEPHASEGS_WS
  add constraint PK_ROUTETIMEPHASEWS primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTETYPEINFOGS
prompt ================================
prompt
create table OSECD.MCROUTETYPEINFOGS
(
  recordid       VARCHAR2(36) not null,
  routeid        VARCHAR2(36) not null,
  routetype      VARCHAR2(2),
  recdate        DATE default sysdate,
  routegrade     VARCHAR2(2),
  istwolooproute VARCHAR2(2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCROUTETYPEINFOGS.recordid
  is '记录编号';
comment on column OSECD.MCROUTETYPEINFOGS.routeid
  is '线路编号';
comment on column OSECD.MCROUTETYPEINFOGS.routetype
  is '线路类型';
comment on column OSECD.MCROUTETYPEINFOGS.recdate
  is '添加、更新时间';
comment on column OSECD.MCROUTETYPEINFOGS.routegrade
  is '线路级别1快线2、干线3、支线4、微循环';
comment on column OSECD.MCROUTETYPEINFOGS.istwolooproute
  is '是否二圈层进程线路';
create index OSECD.IX_ROUTETYPE on OSECD.MCROUTETYPEINFOGS (ROUTEID)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCROUTETYPEINFOGS
  add constraint PK_ROUTETYPE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCROUTETYPEINFOGS151206
prompt ======================================
prompt
create table OSECD.MCROUTETYPEINFOGS151206
(
  recordid       VARCHAR2(36) not null,
  routeid        VARCHAR2(36) not null,
  routetype      VARCHAR2(2),
  recdate        DATE,
  routegrade     VARCHAR2(2),
  istwolooproute VARCHAR2(2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRROLEFUNCTIONGS
prompt ================================
prompt
create table OSECD.MCRROLEFUNCTIONGS
(
  relationid   VARCHAR2(36) not null,
  rolecode     VARCHAR2(36) not null,
  functioncode VARCHAR2(36) not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCRROLEFUNCTIONGS.relationid
  is '关系主键';
comment on column OSECD.MCRROLEFUNCTIONGS.rolecode
  is '角色ID';
comment on column OSECD.MCRROLEFUNCTIONGS.functioncode
  is '菜单ID';
alter table OSECD.MCRROLEFUNCTIONGS
  add constraint PK_RROLEFUNCTION primary key (RELATIONID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRROLEPRIVILEGEGS
prompt =================================
prompt
create table OSECD.MCRROLEPRIVILEGEGS
(
  rroleprivilegeid VARCHAR2(50) not null,
  rolecode         VARCHAR2(50) not null,
  privilegeid      VARCHAR2(50) not null,
  syscode          VARCHAR2(20),
  isactive         CHAR(1) default 1 not null,
  memos            NVARCHAR2(255),
  created          DATE,
  createby         VARCHAR2(50),
  updated          DATE,
  updateby         VARCHAR2(50),
  funccode         VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRROLEPRIVILEGEGS
  is '角色权限关系表';
comment on column OSECD.MCRROLEPRIVILEGEGS.rroleprivilegeid
  is '角色权限关系主键ID';
comment on column OSECD.MCRROLEPRIVILEGEGS.rolecode
  is '角色主键ID';
comment on column OSECD.MCRROLEPRIVILEGEGS.privilegeid
  is '权限主键ID';
comment on column OSECD.MCRROLEPRIVILEGEGS.syscode
  is '子系统编码';
comment on column OSECD.MCRROLEPRIVILEGEGS.isactive
  is '是否有效（1有效，0无效）';
comment on column OSECD.MCRROLEPRIVILEGEGS.memos
  is '备注';
comment on column OSECD.MCRROLEPRIVILEGEGS.created
  is '创建日期';
comment on column OSECD.MCRROLEPRIVILEGEGS.createby
  is '创建者';
comment on column OSECD.MCRROLEPRIVILEGEGS.updated
  is '更新日期';
comment on column OSECD.MCRROLEPRIVILEGEGS.updateby
  is '更新者';
comment on column OSECD.MCRROLEPRIVILEGEGS.funccode
  is '菜单编号';
alter table OSECD.MCRROLEPRIVILEGEGS
  add constraint PK_RROLEPRIVILEGEID primary key (RROLEPRIVILEGEID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRROUTESTATIONGS
prompt ================================
prompt
create table OSECD.MCRROUTESTATIONGS
(
  rroutesid    VARCHAR2(36) not null,
  routeid      VARCHAR2(20),
  stationid    VARCHAR2(36),
  dualserialid NUMBER(3)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRROUTESTATIONGS
  is '线路站点关系表';
comment on column OSECD.MCRROUTESTATIONGS.rroutesid
  is '关系表id';
comment on column OSECD.MCRROUTESTATIONGS.routeid
  is '线路id';
comment on column OSECD.MCRROUTESTATIONGS.stationid
  is '站点id';
comment on column OSECD.MCRROUTESTATIONGS.dualserialid
  is '站点双程号';
alter table OSECD.MCRROUTESTATIONGS
  add constraint PK_RROUTESTATION primary key (RROUTESID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRROUTESTATIONGS_WS
prompt ===================================
prompt
create table OSECD.MCRROUTESTATIONGS_WS
(
  rroutesid    VARCHAR2(36) not null,
  routeid      VARCHAR2(20),
  stationid    VARCHAR2(36),
  dualserialid NUMBER(3)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRROUTESTATIONGS_WS
  is '线路站点关系表（数据上传）';
comment on column OSECD.MCRROUTESTATIONGS_WS.rroutesid
  is '关系表id';
comment on column OSECD.MCRROUTESTATIONGS_WS.routeid
  is '线路id';
comment on column OSECD.MCRROUTESTATIONGS_WS.stationid
  is '站点id';
comment on column OSECD.MCRROUTESTATIONGS_WS.dualserialid
  is '站点双程号';
alter table OSECD.MCRROUTESTATIONGS_WS
  add constraint PK_RROUTESTATIONWS primary key (RROUTESID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRROUTESTATIONREFLECT
prompt =====================================
prompt
create table OSECD.MCRROUTESTATIONREFLECT
(
  rsid       VARCHAR2(36),
  subrouteid VARCHAR2(20),
  direct     CHAR(1),
  seqno      VARCHAR2(20),
  stationno  VARCHAR2(20),
  platcode   VARCHAR2(2) default '0'
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRROUTESTATIONREFLECT
  is '线路站点映射表';
comment on column OSECD.MCRROUTESTATIONREFLECT.rsid
  is 'ID';
comment on column OSECD.MCRROUTESTATIONREFLECT.subrouteid
  is '子线路ID';
comment on column OSECD.MCRROUTESTATIONREFLECT.direct
  is '运行方向 1上行 2下行 3环形';
comment on column OSECD.MCRROUTESTATIONREFLECT.seqno
  is '报站号';
comment on column OSECD.MCRROUTESTATIONREFLECT.stationno
  is '站点编号';
comment on column OSECD.MCRROUTESTATIONREFLECT.platcode
  is '平台编码';
create index OSECD.IDX_ROUTESTATIONREFLECT on OSECD.MCRROUTESTATIONREFLECT (SUBROUTEID, DIRECT, SEQNO)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRSEGMENTSTATIONGS
prompt ==================================
prompt
create table OSECD.MCRSEGMENTSTATIONGS
(
  rsegmentsid   VARCHAR2(36) not null,
  routeid       VARCHAR2(20),
  subrouteid    VARCHAR2(20),
  segmentid     VARCHAR2(36),
  stationid     VARCHAR2(36),
  sngserialid   NUMBER(3),
  stationtype   VARCHAR2(2),
  dualserialid  NUMBER(3),
  distance      NUMBER(5) default 0 not null,
  isactive      CHAR(1),
  created       DATE,
  createdby     VARCHAR2(36),
  updated       DATE,
  updatedby     VARCHAR2(36),
  offsettime    NUMBER default 0,
  fstoffsettime NUMBER default 0,
  lstoffsettime NUMBER default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRSEGMENTSTATIONGS
  is '单程与站点关系表';
comment on column OSECD.MCRSEGMENTSTATIONGS.rsegmentsid
  is '单程站点关系ID';
comment on column OSECD.MCRSEGMENTSTATIONGS.routeid
  is '线路编号';
comment on column OSECD.MCRSEGMENTSTATIONGS.subrouteid
  is '子线路编号';
comment on column OSECD.MCRSEGMENTSTATIONGS.segmentid
  is '单程编号';
comment on column OSECD.MCRSEGMENTSTATIONGS.stationid
  is '站点编号';
comment on column OSECD.MCRSEGMENTSTATIONGS.sngserialid
  is '站点在该单向的序号';
comment on column OSECD.MCRSEGMENTSTATIONGS.stationtype
  is '站点类型（首站、末站、返回站、中间站）';
comment on column OSECD.MCRSEGMENTSTATIONGS.dualserialid
  is '站点在双向的序号';
comment on column OSECD.MCRSEGMENTSTATIONGS.distance
  is '站间距（离下一站的距离）';
comment on column OSECD.MCRSEGMENTSTATIONGS.isactive
  is '是否有效';
comment on column OSECD.MCRSEGMENTSTATIONGS.created
  is '创建日期';
comment on column OSECD.MCRSEGMENTSTATIONGS.createdby
  is '创建者';
comment on column OSECD.MCRSEGMENTSTATIONGS.updated
  is '更改日期';
comment on column OSECD.MCRSEGMENTSTATIONGS.updatedby
  is '更改者';
comment on column OSECD.MCRSEGMENTSTATIONGS.offsettime
  is '距首站时间，单位分';
comment on column OSECD.MCRSEGMENTSTATIONGS.fstoffsettime
  is '首班距首站时间，单位分';
comment on column OSECD.MCRSEGMENTSTATIONGS.lstoffsettime
  is '末班距首站时间，单位分';
alter table OSECD.MCRSEGMENTSTATIONGS
  add constraint PK_RSEGMENTSTATION primary key (RSEGMENTSID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRSEGMENTSTATIONGS_CHK
prompt ======================================
prompt
create table OSECD.MCRSEGMENTSTATIONGS_CHK
(
  rsegmentsid  VARCHAR2(36) not null,
  routeid      VARCHAR2(20),
  subrouteid   VARCHAR2(20),
  segmentid    VARCHAR2(36),
  stationid    VARCHAR2(36),
  sngserialid  NUMBER(3),
  stationtype  VARCHAR2(2),
  dualserialid NUMBER(3),
  distance     NUMBER(5) not null,
  isactive     CHAR(1),
  created      DATE,
  createdby    VARCHAR2(36),
  updated      DATE,
  updatedby    VARCHAR2(36),
  offsettime   NUMBER default 0,
  rundirection CHAR(1),
  stationno    VARCHAR2(10)
)
tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.rsegmentsid
  is '单程站点关系ID';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.routeid
  is '线路编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.subrouteid
  is '子线路编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.segmentid
  is '单程编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.stationid
  is '站点编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.sngserialid
  is '站点在该单向的序号';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.stationtype
  is '站点类型（首站、末站、返回站、中间站）';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.dualserialid
  is '站点在双向的序号';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.distance
  is '站间距（离首站的距离）';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.isactive
  is '是否有效';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.created
  is '创建日期';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.createdby
  is '创建者';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.updated
  is '更改日期';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.updatedby
  is '更改者';
comment on column OSECD.MCRSEGMENTSTATIONGS_CHK.offsettime
  is '距首站时间，单位分';

prompt
prompt Creating table MCRSEGMENTSTATIONGS_GJ
prompt =====================================
prompt
create table OSECD.MCRSEGMENTSTATIONGS_GJ
(
  rsegmentsid  VARCHAR2(36) not null,
  routeid      VARCHAR2(20),
  subrouteid   VARCHAR2(20),
  segmentid    VARCHAR2(36),
  stationid    VARCHAR2(36),
  sngserialid  NUMBER(3),
  stationtype  VARCHAR2(2),
  dualserialid NUMBER(3),
  distance     NUMBER(5) not null,
  isactive     CHAR(1),
  created      DATE,
  createdby    VARCHAR2(36),
  updated      DATE,
  updatedby    VARCHAR2(36),
  offsettime   NUMBER,
  platcode     VARCHAR2(2) default '0',
  uploadtime   DATE default SYSDATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.rsegmentsid
  is '单程站点关系ID';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.routeid
  is '线路编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.subrouteid
  is '子线路编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.segmentid
  is '单程编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.stationid
  is '站点编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.sngserialid
  is '站点在该单向的序号';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.stationtype
  is '站点类型（首站、末站、返回站、中间站）';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.dualserialid
  is '站点在双向的序号';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.distance
  is '站间距（离首站的距离）';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.isactive
  is '是否有效';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.created
  is '创建日期';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.createdby
  is '创建者';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.updated
  is '更改日期';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.updatedby
  is '更改者';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.offsettime
  is '距首站时间，单位分';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.platcode
  is '平台编码';
comment on column OSECD.MCRSEGMENTSTATIONGS_GJ.uploadtime
  is '上传时间';
create index OSECD.IDX_SEGMENTSTATIONGJ on OSECD.MCRSEGMENTSTATIONGS_GJ (ROUTEID)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRSEGMENTSTATIONGS_SGJ
prompt ======================================
prompt
create table OSECD.MCRSEGMENTSTATIONGS_SGJ
(
  rsegmentsid     VARCHAR2(20) not null,
  routeid         NUMBER(8),
  subrouteid      NUMBER(8),
  segmentid       NUMBER(8) not null,
  stationid       VARCHAR2(20) not null,
  sngserialid     NUMBER(3) not null,
  stationtypeid   VARCHAR2(2) not null,
  stationtypename VARCHAR2(20) not null,
  dualserialid    NUMBER(3) not null,
  haselecboard    CHAR(1) not null,
  subcommid       NUMBER(2),
  distance        NUMBER(7,3),
  predistance     NUMBER(7,3),
  pretime         NUMBER(3),
  carryrate       VARCHAR2(10),
  recdate         DATE,
  ispredict       CHAR(1),
  stationname     VARCHAR2(40),
  onhourtime      NUMBER,
  minstoptime     NUMBER,
  maxstoptime     NUMBER,
  overspeedstd    NUMBER,
  arriveshow      VARCHAR2(50),
  leaveshow       VARCHAR2(50),
  sboardid        NUMBER(3),
  fstsendtime     DATE,
  lstsendtime     DATE,
  created         DATE default SYSDATE,
  createby        VARCHAR2(20),
  updated         DATE,
  updateby        VARCHAR2(20),
  isactive        CHAR(1) default '1',
  flag            CHAR(1) default '1',
  defaulttime     NUMBER,
  gpsdistance     NUMBER(7,3)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRSEGMENTSTATIONGS_SGJ
  is '单程线路与站点关系表';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.rsegmentsid
  is '序号';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.routeid
  is '线路号';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.subrouteid
  is '子线路号';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.segmentid
  is '单程线路ID';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.stationid
  is '站点';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.sngserialid
  is '站点在该单向的序号';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.stationtypeid
  is '站点类型';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.stationtypename
  is '站点类型名称';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.dualserialid
  is '站点在该双向的序号';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.haselecboard
  is '是否有电子站牌';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.subcommid
  is '站牌中的子编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.distance
  is '站间距：为本站到下站的距离';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.predistance
  is '最近车辆到站距离';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.pretime
  is '最近车辆到站时间';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.carryrate
  is '满载率';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.recdate
  is '记录日期';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.ispredict
  is '是否预测';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.stationname
  is '站点名称';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.onhourtime
  is '主站到本站的理想时间间隔,单位：分钟';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.minstoptime
  is '越站时间标准,单位：秒';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.maxstoptime
  is '滞站时间标准,单位：秒';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.overspeedstd
  is '按路段配置超速标准，单位：米/秒';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.arriveshow
  is '车辆到站，站牌显示内容';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.leaveshow
  is '车辆离站，站牌显示内容';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.sboardid
  is '站牌全程序号，全程循环编码';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.fstsendtime
  is '首班时间';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.lstsendtime
  is '末班时间';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.defaulttime
  is '本站至下一站的标准行驶时间（含停本站时间），单位秒';
comment on column OSECD.MCRSEGMENTSTATIONGS_SGJ.gpsdistance
  is 'GPS修正站间距';

prompt
prompt Creating table MCRSEGMENTSTATIONGS_WS
prompt =====================================
prompt
create table OSECD.MCRSEGMENTSTATIONGS_WS
(
  rsegmentsid  VARCHAR2(36) not null,
  routeid      VARCHAR2(20),
  subrouteid   VARCHAR2(20),
  segmentid    VARCHAR2(36),
  stationid    VARCHAR2(36),
  sngserialid  NUMBER(3),
  stationtype  VARCHAR2(2),
  dualserialid NUMBER(3),
  distance     NUMBER(5) default 0 not null,
  isactive     CHAR(1),
  offsettime   NUMBER,
  uploadtime   DATE,
  uploadflag   CHAR(1) default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRSEGMENTSTATIONGS_WS
  is '单程与站点关系表（数据上传）';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.rsegmentsid
  is '单程站点关系ID';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.routeid
  is '线路编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.subrouteid
  is '子线路编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.segmentid
  is '单程编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.stationid
  is '站点编号';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.sngserialid
  is '站点在该单向的序号';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.stationtype
  is '站点类型（首站、末站、返回站、中间站）';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.dualserialid
  is '站点在双向的序号';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.distance
  is '站间距（离上一站的距离）';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.isactive
  is '是否有效';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.offsettime
  is '距首站时间，单位分';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.uploadtime
  is '上传时间';
comment on column OSECD.MCRSEGMENTSTATIONGS_WS.uploadflag
  is '是否已经同步 1 已经同步';
alter table OSECD.MCRSEGMENTSTATIONGS_WS
  add constraint PK_RSEGMENTSTATIONWS primary key (RSEGMENTSID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRSITEROUTEGS
prompt =============================
prompt
create table OSECD.MCRSITEROUTEGS
(
  rsiterouteid     VARCHAR2(36) not null,
  siteid           VARCHAR2(36) not null,
  routeid          VARCHAR2(20) not null,
  mainoilemile     NUMBER(10,2) default 0,
  suboilemile      NUMBER(10,2) default 0,
  maingaragemile   NUMBER(10,2) default 0,
  subgaragemile    NUMBER(10,2) default 0,
  mainmaintainmile NUMBER(10,2) default 0,
  submaintainmile  NUMBER(10,2) default 0,
  sitetype         CHAR(1) not null,
  siteidstr        VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRSITEROUTEGS
  is '线路场所关系表';
comment on column OSECD.MCRSITEROUTEGS.rsiterouteid
  is '主键';
comment on column OSECD.MCRSITEROUTEGS.siteid
  is '场ID';
comment on column OSECD.MCRSITEROUTEGS.routeid
  is '线路ID，可能是一个场对应多条线路，现在认为是一对一的';
comment on column OSECD.MCRSITEROUTEGS.mainoilemile
  is '主站加油里程';
comment on column OSECD.MCRSITEROUTEGS.suboilemile
  is '副站加油里程';
comment on column OSECD.MCRSITEROUTEGS.maingaragemile
  is '主站出入库里程';
comment on column OSECD.MCRSITEROUTEGS.subgaragemile
  is '副站出入库里程';
comment on column OSECD.MCRSITEROUTEGS.mainmaintainmile
  is '主站维修里程';
comment on column OSECD.MCRSITEROUTEGS.submaintainmile
  is '副站维修里程';
comment on column OSECD.MCRSITEROUTEGS.sitetype
  is '场类型';
comment on column OSECD.MCRSITEROUTEGS.siteidstr
  is '主键字符串';

prompt
prompt Creating table MCRSSOUSERMAPINFOGS
prompt ==================================
prompt
create table OSECD.MCRSSOUSERMAPINFOGS
(
  userid     VARCHAR2(36) not null,
  logname    NVARCHAR2(30) not null,
  username   NVARCHAR2(30),
  password   NVARCHAR2(20),
  systemcode VARCHAR2(2),
  created    DATE,
  createby   VARCHAR2(36),
  updated    DATE,
  updateby   VARCHAR2(36),
  isactive   CHAR(1),
  memos      NVARCHAR2(255)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCRSSOUSERMAPINFOGS.userid
  is '用户编号';
comment on column OSECD.MCRSSOUSERMAPINFOGS.logname
  is '登录名';
comment on column OSECD.MCRSSOUSERMAPINFOGS.username
  is '子系统用户名';
comment on column OSECD.MCRSSOUSERMAPINFOGS.password
  is '子系统密码';
comment on column OSECD.MCRSSOUSERMAPINFOGS.systemcode
  is '子系统系统编码（与子系统保持一致）';
comment on column OSECD.MCRSSOUSERMAPINFOGS.created
  is '创建时间';
comment on column OSECD.MCRSSOUSERMAPINFOGS.createby
  is '创建人';
comment on column OSECD.MCRSSOUSERMAPINFOGS.updated
  is '修改时间';
comment on column OSECD.MCRSSOUSERMAPINFOGS.updateby
  is '修改人';
comment on column OSECD.MCRSSOUSERMAPINFOGS.isactive
  is '状态（是否有效）';
comment on column OSECD.MCRSSOUSERMAPINFOGS.memos
  is '备注';
alter table OSECD.MCRSSOUSERMAPINFOGS
  add constraint PK_SSOUSERMAPINFO primary key (USERID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCRSSOUSERMAPINFOGS
  add constraint UNIQUE_SSOUSERMAPINFO unique (LOGNAME, SYSTEMCODE)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRUSERORGINFOGS
prompt ===============================
prompt
create table OSECD.MCRUSERORGINFOGS
(
  recordid  VARCHAR2(50) not null,
  userid    VARCHAR2(50),
  userorgid VARCHAR2(50),
  orgid     VARCHAR2(50),
  isactive  CHAR(1),
  recdate   DATE,
  created   DATE,
  createby  VARCHAR2(50),
  updated   DATE,
  updateby  VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCRUSERORGINFOGS
  is '用户组织信息表（用于权限控制）';
comment on column OSECD.MCRUSERORGINFOGS.recordid
  is '记录编号';
comment on column OSECD.MCRUSERORGINFOGS.userid
  is '用户编号';
comment on column OSECD.MCRUSERORGINFOGS.userorgid
  is '所在组织';
comment on column OSECD.MCRUSERORGINFOGS.orgid
  is '可控制组织';
comment on column OSECD.MCRUSERORGINFOGS.isactive
  is '是否有效(0无效，1有效)';
comment on column OSECD.MCRUSERORGINFOGS.recdate
  is '记录时间';
comment on column OSECD.MCRUSERORGINFOGS.created
  is '创建日期';
comment on column OSECD.MCRUSERORGINFOGS.createby
  is '创建者';
comment on column OSECD.MCRUSERORGINFOGS.updated
  is '更新日期';
comment on column OSECD.MCRUSERORGINFOGS.updateby
  is '更新者';
alter table OSECD.MCRUSERORGINFOGS
  add constraint PK_RUSERORGINFO_RECORDID primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCRUSERROLEGS
prompt ============================
prompt
create table OSECD.MCRUSERROLEGS
(
  relationid VARCHAR2(36) not null,
  userid     VARCHAR2(36) not null,
  rolecode   VARCHAR2(36) not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCRUSERROLEGS.relationid
  is '关系主键';
comment on column OSECD.MCRUSERROLEGS.userid
  is '用户ID';
comment on column OSECD.MCRUSERROLEGS.rolecode
  is '角色ID';
alter table OSECD.MCRUSERROLEGS
  add constraint PK_USERROLE primary key (RELATIONID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSEGMENTINFOGS
prompt ==============================
prompt
create table OSECD.MCSEGMENTINFOGS
(
  segmentid            VARCHAR2(20) not null,
  segmentname          NVARCHAR2(30) not null,
  subrouteid           VARCHAR2(20) not null,
  routeid              VARCHAR2(20),
  rundirection         CHAR(1),
  fstsendtime          DATE,
  lstsentime           DATE,
  sngmile              NUMBER(5,2),
  sngtime              NUMBER(3),
  accommodationlength  NUMBER(5,2) default 0,
  offsetpos            NUMBER(2) default 0,
  offsetneg            NUMBER(2) default 0,
  fststationid         VARCHAR2(36),
  lststationid         VARCHAR2(36),
  isactive             CHAR(1),
  created              DATE,
  createdby            VARCHAR2(36),
  updated              DATE,
  updatedby            VARCHAR2(36),
  stationnum           NUMBER(3),
  sngspeedmile         NUMBER(5,2),
  shiftontimecheckflag CHAR(1) default 1,
  shiftnum             NUMBER(3,1) default 1
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSEGMENTINFOGS
  is '线路单程信息表';
comment on column OSECD.MCSEGMENTINFOGS.segmentid
  is '单程ID';
comment on column OSECD.MCSEGMENTINFOGS.segmentname
  is '线路单程名称';
comment on column OSECD.MCSEGMENTINFOGS.subrouteid
  is '所属子线路编号';
comment on column OSECD.MCSEGMENTINFOGS.routeid
  is '所属线路编号';
comment on column OSECD.MCSEGMENTINFOGS.rundirection
  is '运行方向（上行、下行、环行）';
comment on column OSECD.MCSEGMENTINFOGS.fstsendtime
  is '首班车时间';
comment on column OSECD.MCSEGMENTINFOGS.lstsentime
  is '末班车时间';
comment on column OSECD.MCSEGMENTINFOGS.sngmile
  is '单程里程(公里)';
comment on column OSECD.MCSEGMENTINFOGS.sngtime
  is '单程时间（分钟）';
comment on column OSECD.MCSEGMENTINFOGS.accommodationlength
  is '使用专用道长度(公里)';
comment on column OSECD.MCSEGMENTINFOGS.offsetpos
  is '准点正值（分）';
comment on column OSECD.MCSEGMENTINFOGS.offsetneg
  is '准点负值（分）';
comment on column OSECD.MCSEGMENTINFOGS.fststationid
  is '起始站点编号';
comment on column OSECD.MCSEGMENTINFOGS.lststationid
  is '终点站编号';
comment on column OSECD.MCSEGMENTINFOGS.isactive
  is '是否有效';
comment on column OSECD.MCSEGMENTINFOGS.created
  is '创建日期';
comment on column OSECD.MCSEGMENTINFOGS.createdby
  is '创建者';
comment on column OSECD.MCSEGMENTINFOGS.updated
  is '更新日期';
comment on column OSECD.MCSEGMENTINFOGS.updatedby
  is '更新者';
comment on column OSECD.MCSEGMENTINFOGS.stationnum
  is '站点个数';
comment on column OSECD.MCSEGMENTINFOGS.sngspeedmile
  is '单程里程，计算速度使用';
comment on column OSECD.MCSEGMENTINFOGS.shiftontimecheckflag
  is '是否首末班准点考核';
comment on column OSECD.MCSEGMENTINFOGS.shiftnum
  is '班次系数，默认1';
alter table OSECD.MCSEGMENTINFOGS
  add constraint PK_SEGMENTINFO primary key (SEGMENTID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSEGMENTINFOGS_GJ
prompt =================================
prompt
create table OSECD.MCSEGMENTINFOGS_GJ
(
  segmentid           VARCHAR2(20) not null,
  segmentname         NVARCHAR2(30) not null,
  subrouteid          VARCHAR2(20) not null,
  routeid             VARCHAR2(20),
  rundirection        CHAR(1),
  fstsendtime         DATE,
  lstsentime          DATE,
  sngmile             NUMBER(5,2),
  sngtime             NUMBER(3),
  accommodationlength NUMBER(5,2),
  offsetpos           NUMBER(2),
  offsetneg           NUMBER(2),
  fststationid        VARCHAR2(36),
  lststationid        VARCHAR2(36),
  isactive            CHAR(1),
  created             DATE,
  createdby           VARCHAR2(36),
  updated             DATE,
  updatedby           VARCHAR2(36),
  stationnum          NUMBER(3),
  sngspeedmile        NUMBER(5,2),
  platcode            VARCHAR2(2) default '0',
  uploadtime          DATE default SYSDATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCSEGMENTINFOGS_GJ.segmentid
  is '单程ID';
comment on column OSECD.MCSEGMENTINFOGS_GJ.segmentname
  is '线路单程名称';
comment on column OSECD.MCSEGMENTINFOGS_GJ.subrouteid
  is '所属子线路编号';
comment on column OSECD.MCSEGMENTINFOGS_GJ.routeid
  is '所属线路编号';
comment on column OSECD.MCSEGMENTINFOGS_GJ.rundirection
  is '运行方向（上行、下行、环行）';
comment on column OSECD.MCSEGMENTINFOGS_GJ.fstsendtime
  is '首班车时间';
comment on column OSECD.MCSEGMENTINFOGS_GJ.lstsentime
  is '末班车时间';
comment on column OSECD.MCSEGMENTINFOGS_GJ.sngmile
  is '单程里程(公里)';
comment on column OSECD.MCSEGMENTINFOGS_GJ.sngtime
  is '单程时间（分钟）';
comment on column OSECD.MCSEGMENTINFOGS_GJ.accommodationlength
  is '使用专用道长度(公里)';
comment on column OSECD.MCSEGMENTINFOGS_GJ.offsetpos
  is '准点正值（分）';
comment on column OSECD.MCSEGMENTINFOGS_GJ.offsetneg
  is '准点负值（分）';
comment on column OSECD.MCSEGMENTINFOGS_GJ.fststationid
  is '起始站点编号';
comment on column OSECD.MCSEGMENTINFOGS_GJ.lststationid
  is '终点站编号';
comment on column OSECD.MCSEGMENTINFOGS_GJ.isactive
  is '是否有效';
comment on column OSECD.MCSEGMENTINFOGS_GJ.created
  is '创建日期';
comment on column OSECD.MCSEGMENTINFOGS_GJ.createdby
  is '创建者';
comment on column OSECD.MCSEGMENTINFOGS_GJ.updated
  is '更新日期';
comment on column OSECD.MCSEGMENTINFOGS_GJ.updatedby
  is '更新者';
comment on column OSECD.MCSEGMENTINFOGS_GJ.stationnum
  is '站点个数';
comment on column OSECD.MCSEGMENTINFOGS_GJ.sngspeedmile
  is '单程里程，计算速度使用';
comment on column OSECD.MCSEGMENTINFOGS_GJ.platcode
  is '平台编码';
comment on column OSECD.MCSEGMENTINFOGS_GJ.uploadtime
  is '上传时间';

prompt
prompt Creating table MCSEGMENTINFOGS_SGJ
prompt ==================================
prompt
create table OSECD.MCSEGMENTINFOGS_SGJ
(
  segmentid     NUMBER(8) not null,
  routeid       NUMBER(8) not null,
  subrouteid    NUMBER(8) not null,
  segmentname   VARCHAR2(30) not null,
  rundirection  CHAR(1) not null,
  fstsendtime   DATE,
  lstsendtime   DATE,
  sngmile       NUMBER(5,2) not null,
  sngtime       NUMBER(5,2) not null,
  offsetpos     NUMBER(2) not null,
  offsetneg     NUMBER(2) not null,
  fststationid  VARCHAR2(20) not null,
  lststationid  VARCHAR2(20) not null,
  memos         NVARCHAR2(255),
  subroutename  VARCHAR2(30),
  created       DATE default sysdate,
  createby      VARCHAR2(20),
  updated       DATE,
  updateby      VARCHAR2(20),
  isactive      CHAR(1) default '1' not null,
  issecondday   CHAR(1) default '0',
  flag          CHAR(1) default '1',
  ctrlroomadd   VARCHAR2(100),
  ctrlroomtel   VARCHAR2(20),
  stationnum    NUMBER(8,2),
  defaultseqnum NUMBER(3,2) default 1,
  retain1       VARCHAR2(50),
  retain2       VARCHAR2(50),
  retain3       VARCHAR2(50),
  retain4       VARCHAR2(50),
  retain5       VARCHAR2(50),
  retain6       VARCHAR2(50),
  retain7       VARCHAR2(50),
  retain8       VARCHAR2(50),
  retain9       VARCHAR2(50),
  retain10      VARCHAR2(50),
  vernum        NUMBER(8) default 0,
  gpsmile       NUMBER(8,2),
  offsetgpsmile NUMBER(8,2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSEGMENTINFOGS_SGJ
  is '单程线路信息表';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.segmentid
  is '序号';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.routeid
  is '线路ID';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.subrouteid
  is '子线路ID';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.segmentname
  is '单程线路名称';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.rundirection
  is '运行方向';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.fstsendtime
  is '首班车发车时间';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.lstsendtime
  is '末班车发车时间';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.sngmile
  is '单程里程';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.sngtime
  is '单程时间';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.offsetpos
  is '准点正值';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.offsetneg
  is '准点负值';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.fststationid
  is '起始站';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.lststationid
  is '终点站';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.memos
  is '备注';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.subroutename
  is '子线名称';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.created
  is '创建日期';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.createby
  is '创建者';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.updated
  is '更新日期';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.updateby
  is '更新者';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.issecondday
  is '末班车发车时间是否是第二天 0不是 1是';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.defaultseqnum
  is '默认车次数';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.retain1
  is '预留字段1';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.retain2
  is '预留字段2';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.retain3
  is '预留字段3';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.retain4
  is '预留字段4';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.retain5
  is '预留字段5';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.retain6
  is '预留字段6';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.retain7
  is '预留字段7';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.retain8
  is '预留字段8';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.retain9
  is '预留字段9';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.retain10
  is '预留字段10';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.vernum
  is '行版本号';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.gpsmile
  is '单程GPS里程（米）';
comment on column OSECD.MCSEGMENTINFOGS_SGJ.offsetgpsmile
  is '单程GPS里程偏移量（米）';

prompt
prompt Creating table MCSEGMENTINFOGS_WS
prompt =================================
prompt
create table OSECD.MCSEGMENTINFOGS_WS
(
  segmentid           VARCHAR2(20) not null,
  segmentname         NVARCHAR2(30) not null,
  subrouteid          VARCHAR2(20) not null,
  routeid             VARCHAR2(20),
  rundirection        CHAR(1),
  fstsendtime         DATE,
  lstsentime          DATE,
  sngmile             NUMBER(5,2),
  sngtime             NUMBER(3),
  accommodationlength NUMBER(5,2) default 0,
  offsetpos           NUMBER(2),
  offsetneg           NUMBER(2),
  fststationid        VARCHAR2(36),
  lststationid        VARCHAR2(36),
  isactive            CHAR(1)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSEGMENTINFOGS_WS
  is '线路单程信息表（数据上传）';
comment on column OSECD.MCSEGMENTINFOGS_WS.segmentid
  is '单程ID';
comment on column OSECD.MCSEGMENTINFOGS_WS.segmentname
  is '线路单程名称';
comment on column OSECD.MCSEGMENTINFOGS_WS.subrouteid
  is '所属子线路编号';
comment on column OSECD.MCSEGMENTINFOGS_WS.routeid
  is '所属线路编号';
comment on column OSECD.MCSEGMENTINFOGS_WS.rundirection
  is '运行方向（上行、下行、环行）';
comment on column OSECD.MCSEGMENTINFOGS_WS.fstsendtime
  is '首班车时间';
comment on column OSECD.MCSEGMENTINFOGS_WS.lstsentime
  is '末班车时间';
comment on column OSECD.MCSEGMENTINFOGS_WS.sngmile
  is '单程里程(公里)';
comment on column OSECD.MCSEGMENTINFOGS_WS.sngtime
  is '单程时间（分钟）';
comment on column OSECD.MCSEGMENTINFOGS_WS.accommodationlength
  is '使用专用道长度(公里)';
comment on column OSECD.MCSEGMENTINFOGS_WS.offsetpos
  is '准点正值（分）';
comment on column OSECD.MCSEGMENTINFOGS_WS.offsetneg
  is '准点负值（分）';
comment on column OSECD.MCSEGMENTINFOGS_WS.fststationid
  is '起始站点编号';
comment on column OSECD.MCSEGMENTINFOGS_WS.lststationid
  is '终点站编号';
comment on column OSECD.MCSEGMENTINFOGS_WS.isactive
  is '是否有效';
alter table OSECD.MCSEGMENTINFOGS_WS
  add constraint PK_SEGMENTINFOWS primary key (SEGMENTID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSITEINFOGS
prompt ===========================
prompt
create table OSECD.MCSITEINFOGS
(
  id             VARCHAR2(36) not null,
  siteid         NVARCHAR2(10) not null,
  sitename       NVARCHAR2(36),
  aliasname      NVARCHAR2(36),
  sitetype       VARCHAR2(2),
  sitelevel      VARCHAR2(2),
  regionlevel    VARCHAR2(2),
  isuseroad      CHAR(1),
  longitude      NUMBER(11,8),
  latitude       NUMBER(11,8),
  regionarea     VARCHAR2(2),
  orgid          VARCHAR2(36) not null,
  hasvadio       CHAR(1),
  siteposition   NVARCHAR2(255),
  siteuserdfor   NVARCHAR2(255),
  sitecapibility NUMBER(5),
  actualbuscount NUMBER(5),
  acreage        NUMBER(8,2),
  sitefrom       CHAR(1),
  isactive       CHAR(1),
  usedate        DATE,
  stopdate       DATE,
  created        DATE,
  createdby      VARCHAR2(36),
  updated        DATE,
  updatedby      VARCHAR2(36),
  platcode       VARCHAR2(2),
  property       VARCHAR2(255)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSITEINFOGS
  is '场站基础信息表';
comment on column OSECD.MCSITEINFOGS.id
  is 'ID';
comment on column OSECD.MCSITEINFOGS.siteid
  is '场站编号';
comment on column OSECD.MCSITEINFOGS.sitename
  is '场站名称';
comment on column OSECD.MCSITEINFOGS.aliasname
  is '场站别名';
comment on column OSECD.MCSITEINFOGS.sitetype
  is '场站类型（停车场、加油站、维修厂、站台）';
comment on column OSECD.MCSITEINFOGS.sitelevel
  is '场站级别，对应字典表数据';
comment on column OSECD.MCSITEINFOGS.regionlevel
  is '地区类型';
comment on column OSECD.MCSITEINFOGS.isuseroad
  is '是否占用道路';
comment on column OSECD.MCSITEINFOGS.longitude
  is '经度';
comment on column OSECD.MCSITEINFOGS.latitude
  is '纬度';
comment on column OSECD.MCSITEINFOGS.regionarea
  is '所属地区编号';
comment on column OSECD.MCSITEINFOGS.orgid
  is '所属组织ID';
comment on column OSECD.MCSITEINFOGS.hasvadio
  is '是佛有视频监控';
comment on column OSECD.MCSITEINFOGS.siteposition
  is '场站位置';
comment on column OSECD.MCSITEINFOGS.siteuserdfor
  is '主要用途';
comment on column OSECD.MCSITEINFOGS.sitecapibility
  is '车场容量（辆）';
comment on column OSECD.MCSITEINFOGS.actualbuscount
  is '实际停车数（辆）';
comment on column OSECD.MCSITEINFOGS.acreage
  is '占用面积（平方米）';
comment on column OSECD.MCSITEINFOGS.sitefrom
  is '场所来源（取字典表定义）';
comment on column OSECD.MCSITEINFOGS.isactive
  is '是否有效';
comment on column OSECD.MCSITEINFOGS.usedate
  is '启用日期';
comment on column OSECD.MCSITEINFOGS.stopdate
  is '停用日期';
comment on column OSECD.MCSITEINFOGS.created
  is '创建日期';
comment on column OSECD.MCSITEINFOGS.createdby
  is '创建者';
comment on column OSECD.MCSITEINFOGS.updated
  is '更新日期';
comment on column OSECD.MCSITEINFOGS.updatedby
  is '更新者';
comment on column OSECD.MCSITEINFOGS.platcode
  is '平台编码';
comment on column OSECD.MCSITEINFOGS.property
  is '产权主体';
create index OSECD.FK_SITEID on OSECD.MCSITEINFOGS (SITEID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCSITEINFOGS
  add constraint PK_SITEINFO primary key (ID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSITEINFOGS_ENTRYRATE
prompt =====================================
prompt
create table OSECD.MCSITEINFOGS_ENTRYRATE
(
  siteid         NVARCHAR2(10) not null,
  sitename       NVARCHAR2(36),
  maxlongitude   NUMBER(11,8),
  minlongitude   NUMBER(11,8),
  maxlatitude    NUMBER(11,8),
  minlatitude    NUMBER(11,8),
  startdate      DATE default sysdate,
  enddate        DATE,
  sitetype       VARCHAR2(2),
  sitecapibility NUMBER
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSITEINFOGS_ENTRYRATE
  is '车辆进场率辅助场站信息表';
comment on column OSECD.MCSITEINFOGS_ENTRYRATE.siteid
  is '场站编号';
comment on column OSECD.MCSITEINFOGS_ENTRYRATE.sitename
  is '场站名称';
comment on column OSECD.MCSITEINFOGS_ENTRYRATE.maxlongitude
  is '最大经度';
comment on column OSECD.MCSITEINFOGS_ENTRYRATE.minlongitude
  is '最小经度';
comment on column OSECD.MCSITEINFOGS_ENTRYRATE.maxlatitude
  is '最大纬度';
comment on column OSECD.MCSITEINFOGS_ENTRYRATE.minlatitude
  is '最小纬度';
comment on column OSECD.MCSITEINFOGS_ENTRYRATE.startdate
  is '生效日期';
comment on column OSECD.MCSITEINFOGS_ENTRYRATE.enddate
  is '失效日期';
comment on column OSECD.MCSITEINFOGS_ENTRYRATE.sitetype
  is '场站类型';
comment on column OSECD.MCSITEINFOGS_ENTRYRATE.sitecapibility
  is '场站容量';
create index OSECD.IX_SITEENTRY on OSECD.MCSITEINFOGS_ENTRYRATE (SITENAME, STARTDATE, ENDDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCSITEINFOGS_ENTRYRATE
  add constraint PK_SITEENTRY primary key (SITEID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSITEINFOGS_GJ
prompt ==============================
prompt
create table OSECD.MCSITEINFOGS_GJ
(
  id             VARCHAR2(36) not null,
  siteid         NVARCHAR2(10) not null,
  sitename       NVARCHAR2(36),
  aliasname      NVARCHAR2(36),
  sitetype       VARCHAR2(2),
  sitelevel      VARCHAR2(2),
  regionlevel    VARCHAR2(2),
  isuseroad      CHAR(1),
  longitude      NUMBER(11,8),
  latitude       NUMBER(11,8),
  regionarea     VARCHAR2(2),
  orgid          VARCHAR2(36),
  hasvadio       CHAR(1),
  siteposition   NVARCHAR2(255),
  siteuserdfor   NVARCHAR2(255),
  sitecapibility NUMBER(5),
  actualbuscount NUMBER(5),
  acreage        NUMBER(8,2),
  sitefrom       CHAR(1),
  isactive       CHAR(1),
  usedate        DATE,
  stopdate       DATE,
  created        DATE,
  createdby      VARCHAR2(36),
  updated        DATE,
  updatedby      VARCHAR2(36),
  uploadtime     DATE default SYSDATE,
  platcode       VARCHAR2(2) default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCSITEINFOGS_GJ.id
  is 'ID';
comment on column OSECD.MCSITEINFOGS_GJ.siteid
  is '场站编号';
comment on column OSECD.MCSITEINFOGS_GJ.sitename
  is '场站名称';
comment on column OSECD.MCSITEINFOGS_GJ.aliasname
  is '场站别名';
comment on column OSECD.MCSITEINFOGS_GJ.sitetype
  is '场站类型（停车场、加油站、维修厂、站台）';
comment on column OSECD.MCSITEINFOGS_GJ.sitelevel
  is '场站级别，对应字典表数据';
comment on column OSECD.MCSITEINFOGS_GJ.regionlevel
  is '地区类型';
comment on column OSECD.MCSITEINFOGS_GJ.isuseroad
  is '是否占用道路';
comment on column OSECD.MCSITEINFOGS_GJ.longitude
  is '经度';
comment on column OSECD.MCSITEINFOGS_GJ.latitude
  is '纬度';
comment on column OSECD.MCSITEINFOGS_GJ.regionarea
  is '所属地区编号';
comment on column OSECD.MCSITEINFOGS_GJ.orgid
  is '所属组织ID';
comment on column OSECD.MCSITEINFOGS_GJ.hasvadio
  is '是佛有视频监控';
comment on column OSECD.MCSITEINFOGS_GJ.siteposition
  is '场站位置';
comment on column OSECD.MCSITEINFOGS_GJ.siteuserdfor
  is '主要用途';
comment on column OSECD.MCSITEINFOGS_GJ.sitecapibility
  is '车场容量（辆）';
comment on column OSECD.MCSITEINFOGS_GJ.actualbuscount
  is '实际停车数（辆）';
comment on column OSECD.MCSITEINFOGS_GJ.acreage
  is '占用面积（平方米）';
comment on column OSECD.MCSITEINFOGS_GJ.sitefrom
  is '场所来源（取字典表定义）';
comment on column OSECD.MCSITEINFOGS_GJ.isactive
  is '是否有效';
comment on column OSECD.MCSITEINFOGS_GJ.usedate
  is '启用日期';
comment on column OSECD.MCSITEINFOGS_GJ.stopdate
  is '停用日期';
comment on column OSECD.MCSITEINFOGS_GJ.created
  is '创建日期';
comment on column OSECD.MCSITEINFOGS_GJ.createdby
  is '创建者';
comment on column OSECD.MCSITEINFOGS_GJ.updated
  is '更新日期';
comment on column OSECD.MCSITEINFOGS_GJ.updatedby
  is '更新者';
comment on column OSECD.MCSITEINFOGS_GJ.uploadtime
  is '上传时间';
comment on column OSECD.MCSITEINFOGS_GJ.platcode
  is '平台编码';

prompt
prompt Creating table MCSITEINFOGS_MAP
prompt ===============================
prompt
create table OSECD.MCSITEINFOGS_MAP
(
  siteid         NVARCHAR2(10) not null,
  sitename       NVARCHAR2(36),
  aliasname      NVARCHAR2(36),
  shape          SDO_GEOMETRY,
  sitetype       VARCHAR2(2),
  sitelevel      VARCHAR2(2),
  regionlevel    VARCHAR2(2),
  isuseroad      CHAR(1),
  longitude      NUMBER(11,8),
  latitude       NUMBER(11,8),
  regionarea     VARCHAR2(2),
  orgid          VARCHAR2(36),
  hasvadio       CHAR(1),
  siteposition   NVARCHAR2(255),
  siteuserdfor   NVARCHAR2(255),
  sitecapibility NUMBER(5),
  actualbuscount NUMBER(5),
  acreage        NUMBER(8,2),
  sitefrom       CHAR(1),
  usedate        DATE,
  stopdate       DATE,
  created        DATE,
  createdby      VARCHAR2(36),
  updated        DATE,
  updatedby      VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSITEINFOGS_MAP
  is '场站基础信息表';
comment on column OSECD.MCSITEINFOGS_MAP.siteid
  is '场站编号';
comment on column OSECD.MCSITEINFOGS_MAP.sitename
  is '场站名称';
comment on column OSECD.MCSITEINFOGS_MAP.aliasname
  is '场站别名';
comment on column OSECD.MCSITEINFOGS_MAP.shape
  is '区域';
comment on column OSECD.MCSITEINFOGS_MAP.sitetype
  is '场站类型（停车场、加油站、维修厂、站台）';
comment on column OSECD.MCSITEINFOGS_MAP.sitelevel
  is '场站级别，对应字典表数据';
comment on column OSECD.MCSITEINFOGS_MAP.regionlevel
  is '地区类型';
comment on column OSECD.MCSITEINFOGS_MAP.isuseroad
  is '是否占用道路';
comment on column OSECD.MCSITEINFOGS_MAP.longitude
  is '经度';
comment on column OSECD.MCSITEINFOGS_MAP.latitude
  is '纬度';
comment on column OSECD.MCSITEINFOGS_MAP.regionarea
  is '所属地区编号';
comment on column OSECD.MCSITEINFOGS_MAP.orgid
  is '所属组织ID';
comment on column OSECD.MCSITEINFOGS_MAP.hasvadio
  is '是佛有视频监控';
comment on column OSECD.MCSITEINFOGS_MAP.siteposition
  is '场站位置';
comment on column OSECD.MCSITEINFOGS_MAP.siteuserdfor
  is '主要用途';
comment on column OSECD.MCSITEINFOGS_MAP.sitecapibility
  is '车场容量（辆）';
comment on column OSECD.MCSITEINFOGS_MAP.actualbuscount
  is '实际停车数（辆）';
comment on column OSECD.MCSITEINFOGS_MAP.acreage
  is '占用面积（平方米）';
comment on column OSECD.MCSITEINFOGS_MAP.sitefrom
  is '场所来源（取字典表定义）';
comment on column OSECD.MCSITEINFOGS_MAP.usedate
  is '启用日期';
comment on column OSECD.MCSITEINFOGS_MAP.stopdate
  is '停用日期';
comment on column OSECD.MCSITEINFOGS_MAP.created
  is '创建日期';
comment on column OSECD.MCSITEINFOGS_MAP.createdby
  is '创建者';
comment on column OSECD.MCSITEINFOGS_MAP.updated
  is '更新日期';
comment on column OSECD.MCSITEINFOGS_MAP.updatedby
  is '更新者';
alter table OSECD.MCSITEINFOGS_MAP
  add constraint FK_SITEID_MAP primary key (SITEID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSITEINFOGS_SGJ
prompt ===============================
prompt
create table OSECD.MCSITEINFOGS_SGJ
(
  id             VARCHAR2(20) not null,
  sitename       VARCHAR2(20) not null,
  aliasname      VARCHAR2(20),
  sitetype       VARCHAR2(2) not null,
  siteid         NUMBER(11) not null,
  commid         VARCHAR2(20),
  productid      NUMBER(8),
  outsite        NUMBER(5,2),
  insite         NUMBER(5,2),
  longitude      NUMBER(11,8),
  latitude       NUMBER(11,8),
  altitude       NUMBER(8,2),
  runangle       NUMBER(3) default 0,
  searchcode     VARCHAR2(20),
  symbolicpl1    VARCHAR2(30),
  symbolicpl2    VARCHAR2(30),
  symbolicpl3    VARCHAR2(30),
  memos          NVARCHAR2(255),
  created        DATE default sysdate,
  createby       VARCHAR2(20),
  updated        DATE,
  updateby       VARCHAR2(20),
  isactive       CHAR(1) default '1' not null,
  flag           CHAR(1) default '1' not null,
  tempstation    VARCHAR2(1),
  routeowend     VARCHAR2(10),
  longitude2     NUMBER(11,8),
  latitude2      NUMBER(11,8),
  vernum         NUMBER(8) default 0,
  retain1        VARCHAR2(50),
  retain2        VARCHAR2(50),
  retain3        VARCHAR2(50),
  retain4        VARCHAR2(50),
  retain5        VARCHAR2(50),
  retain6        VARCHAR2(50),
  retain7        VARCHAR2(50),
  retain8        VARCHAR2(50),
  retain9        VARCHAR2(50),
  retain10       VARCHAR2(50),
  roundlongitude NUMBER(11,8),
  roundlatitude  NUMBER(11,8),
  roundradius    NUMBER(8,2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSITEINFOGS_SGJ
  is '非营运场所信息表';
comment on column OSECD.MCSITEINFOGS_SGJ.id
  is '数据库ID';
comment on column OSECD.MCSITEINFOGS_SGJ.sitename
  is '场所名';
comment on column OSECD.MCSITEINFOGS_SGJ.aliasname
  is '别名';
comment on column OSECD.MCSITEINFOGS_SGJ.sitetype
  is '场所类型：停车场、加油站、维修厂、站台等，由字典表管理';
comment on column OSECD.MCSITEINFOGS_SGJ.siteid
  is '场所ID';
comment on column OSECD.MCSITEINFOGS_SGJ.commid
  is 'Sim卡号';
comment on column OSECD.MCSITEINFOGS_SGJ.productid
  is '产品号';
comment on column OSECD.MCSITEINFOGS_SGJ.outsite
  is '出场距离';
comment on column OSECD.MCSITEINFOGS_SGJ.insite
  is '入场距离';
comment on column OSECD.MCSITEINFOGS_SGJ.longitude
  is '经度';
comment on column OSECD.MCSITEINFOGS_SGJ.latitude
  is '纬度';
comment on column OSECD.MCSITEINFOGS_SGJ.altitude
  is '海拔高度';
comment on column OSECD.MCSITEINFOGS_SGJ.runangle
  is '运行方向角';
comment on column OSECD.MCSITEINFOGS_SGJ.searchcode
  is '检索码';
comment on column OSECD.MCSITEINFOGS_SGJ.symbolicpl1
  is '标志性建筑1';
comment on column OSECD.MCSITEINFOGS_SGJ.symbolicpl2
  is '标志性建筑2';
comment on column OSECD.MCSITEINFOGS_SGJ.symbolicpl3
  is '标志性建筑3';
comment on column OSECD.MCSITEINFOGS_SGJ.memos
  is '备注';
comment on column OSECD.MCSITEINFOGS_SGJ.created
  is '创建时间';
comment on column OSECD.MCSITEINFOGS_SGJ.createby
  is '创建者';
comment on column OSECD.MCSITEINFOGS_SGJ.updated
  is '更新时间';
comment on column OSECD.MCSITEINFOGS_SGJ.updateby
  is '更新者';
comment on column OSECD.MCSITEINFOGS_SGJ.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.MCSITEINFOGS_SGJ.flag
  is '是否 有效';
comment on column OSECD.MCSITEINFOGS_SGJ.longitude2
  is '经度2';
comment on column OSECD.MCSITEINFOGS_SGJ.latitude2
  is '纬度2';
comment on column OSECD.MCSITEINFOGS_SGJ.vernum
  is '行版本号';
comment on column OSECD.MCSITEINFOGS_SGJ.retain1
  is '预留字段1';
comment on column OSECD.MCSITEINFOGS_SGJ.retain2
  is '预留字段2';
comment on column OSECD.MCSITEINFOGS_SGJ.retain3
  is '预留字段3';
comment on column OSECD.MCSITEINFOGS_SGJ.retain4
  is '预留字段4';
comment on column OSECD.MCSITEINFOGS_SGJ.retain5
  is '预留字段5';
comment on column OSECD.MCSITEINFOGS_SGJ.retain6
  is '预留字段6';
comment on column OSECD.MCSITEINFOGS_SGJ.retain7
  is '预留字段7';
comment on column OSECD.MCSITEINFOGS_SGJ.retain8
  is '预留字段8';
comment on column OSECD.MCSITEINFOGS_SGJ.retain9
  is '预留字段9';
comment on column OSECD.MCSITEINFOGS_SGJ.retain10
  is '预留字段10';
comment on column OSECD.MCSITEINFOGS_SGJ.roundlongitude
  is '正方形中心经度';
comment on column OSECD.MCSITEINFOGS_SGJ.roundlatitude
  is '正方形中心维度';
comment on column OSECD.MCSITEINFOGS_SGJ.roundradius
  is '正方形边长';

prompt
prompt Creating table MCSITEINFOGS_WS
prompt ==============================
prompt
create table OSECD.MCSITEINFOGS_WS
(
  id             VARCHAR2(36) not null,
  siteid         NVARCHAR2(10) not null,
  sitename       NVARCHAR2(36),
  aliasname      NVARCHAR2(36),
  sitetype       VARCHAR2(2),
  sitelevel      VARCHAR2(2),
  regionlevel    VARCHAR2(2),
  isuseroad      CHAR(1),
  longitude      NUMBER(11,8),
  latitude       NUMBER(11,8),
  regionarea     VARCHAR2(2),
  orgid          VARCHAR2(36) not null,
  hasvadio       CHAR(1),
  siteposition   NVARCHAR2(255),
  siteuserdfor   NVARCHAR2(255),
  sitecapibility NUMBER(5),
  actualbuscount NUMBER(5),
  acreage        NUMBER(8,2),
  sitefrom       CHAR(1),
  isactive       CHAR(1),
  usedate        DATE,
  stopdate       DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSITEINFOGS_WS
  is '场站基础信息表（数据上传）';
comment on column OSECD.MCSITEINFOGS_WS.id
  is 'ID';
comment on column OSECD.MCSITEINFOGS_WS.siteid
  is '场站编号';
comment on column OSECD.MCSITEINFOGS_WS.sitename
  is '场站名称';
comment on column OSECD.MCSITEINFOGS_WS.aliasname
  is '场站别名';
comment on column OSECD.MCSITEINFOGS_WS.sitetype
  is '场站类型（停车场、加油站、维修厂、站台）';
comment on column OSECD.MCSITEINFOGS_WS.sitelevel
  is '场站级别，对应字典表数据';
comment on column OSECD.MCSITEINFOGS_WS.regionlevel
  is '地区类型';
comment on column OSECD.MCSITEINFOGS_WS.isuseroad
  is '是否占用道路';
comment on column OSECD.MCSITEINFOGS_WS.longitude
  is '经度';
comment on column OSECD.MCSITEINFOGS_WS.latitude
  is '纬度';
comment on column OSECD.MCSITEINFOGS_WS.regionarea
  is '所属地区编号';
comment on column OSECD.MCSITEINFOGS_WS.orgid
  is '所属组织ID';
comment on column OSECD.MCSITEINFOGS_WS.hasvadio
  is '是佛有视频监控';
comment on column OSECD.MCSITEINFOGS_WS.siteposition
  is '场站位置';
comment on column OSECD.MCSITEINFOGS_WS.siteuserdfor
  is '主要用途';
comment on column OSECD.MCSITEINFOGS_WS.sitecapibility
  is '车场容量（辆）';
comment on column OSECD.MCSITEINFOGS_WS.actualbuscount
  is '实际停车数（辆）';
comment on column OSECD.MCSITEINFOGS_WS.acreage
  is '占用面积（平方米）';
comment on column OSECD.MCSITEINFOGS_WS.sitefrom
  is '场所来源（取字典表定义）';
comment on column OSECD.MCSITEINFOGS_WS.isactive
  is '是否有效';
comment on column OSECD.MCSITEINFOGS_WS.usedate
  is '启用日期';
comment on column OSECD.MCSITEINFOGS_WS.stopdate
  is '停用日期';
alter table OSECD.MCSITEINFOGS_WS
  add constraint PK_SITEINFOWS primary key (ID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSITETYPEINFOGS
prompt ===============================
prompt
create table OSECD.MCSITETYPEINFOGS
(
  recordid    VARCHAR2(36) not null,
  siteid      NVARCHAR2(10),
  regionlevel VARCHAR2(2),
  recdate     DATE default sysdate
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSITETYPEINFOGS
  is '场站类型信息表（页面编辑结果）';
comment on column OSECD.MCSITETYPEINFOGS.recordid
  is '记录编号';
comment on column OSECD.MCSITETYPEINFOGS.siteid
  is '场站编号';
comment on column OSECD.MCSITETYPEINFOGS.regionlevel
  is '场站所属区域类型（主城区、近郊区、远郊区等）';
comment on column OSECD.MCSITETYPEINFOGS.recdate
  is '记录时间';
create index OSECD.IX_SITETYPE on OSECD.MCSITETYPEINFOGS (SITEID)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCSITETYPEINFOGS
  add constraint PK_SITETYPE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSOFTWARE
prompt =========================
prompt
create table OSECD.MCSOFTWARE
(
  id          VARCHAR2(36) not null,
  softno      VARCHAR2(36),
  softname    VARCHAR2(50),
  softtype    VARCHAR2(2),
  description VARCHAR2(100),
  quantity    NUMBER,
  isactive    CHAR(1),
  remark      VARCHAR2(500),
  usedate     DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSOFTWARE
  is '机房软件';
comment on column OSECD.MCSOFTWARE.id
  is 'ID';
comment on column OSECD.MCSOFTWARE.softno
  is '软件编号';
comment on column OSECD.MCSOFTWARE.softname
  is '软件名称';
comment on column OSECD.MCSOFTWARE.softtype
  is '软件类型（1：操作系统；2：网络安全；3：中间软件；4：应用软件；5：其他软件）';
comment on column OSECD.MCSOFTWARE.description
  is '用途描述';
comment on column OSECD.MCSOFTWARE.quantity
  is '数量';
comment on column OSECD.MCSOFTWARE.isactive
  is '有效标志，0=无效，1=有效';
comment on column OSECD.MCSOFTWARE.remark
  is '备注';
comment on column OSECD.MCSOFTWARE.usedate
  is '启用日期';
alter table OSECD.MCSOFTWARE
  add constraint PK_MCSOFTWARE primary key (ID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSPEEDTIMEPHASEGS
prompt =================================
prompt
create table OSECD.MCSPEEDTIMEPHASEGS
(
  recordid       VARCHAR2(36),
  timephasetype  VARCHAR2(2),
  timephasevalue NVARCHAR2(50),
  starttime      NUMBER(8,6),
  endtime        NUMBER(8,6)
)
tablespace USERS
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSPEEDTIMEPHASEGS
  is '峰段速度结存峰段配置表';
comment on column OSECD.MCSPEEDTIMEPHASEGS.recordid
  is '记录编号';
comment on column OSECD.MCSPEEDTIMEPHASEGS.timephasetype
  is '峰段类型';
comment on column OSECD.MCSPEEDTIMEPHASEGS.timephasevalue
  is '峰段名称';
comment on column OSECD.MCSPEEDTIMEPHASEGS.starttime
  is '开始时间（相对于0点的天数）';
comment on column OSECD.MCSPEEDTIMEPHASEGS.endtime
  is '结束时间（相对于0点的天数）';

prompt
prompt Creating table MCSSOSUBSYSTEMINFOGS
prompt ===================================
prompt
create table OSECD.MCSSOSUBSYSTEMINFOGS
(
  systemid   VARCHAR2(36) not null,
  systemcode VARCHAR2(2) not null,
  fullname   NVARCHAR2(100),
  alias      NVARCHAR2(50),
  imageurl   NVARCHAR2(100),
  indexurl   VARCHAR2(255),
  logouturl  VARCHAR2(255),
  created    DATE,
  createby   VARCHAR2(36),
  updated    DATE,
  updateby   VARCHAR2(36),
  isactive   CHAR(1),
  memos      NVARCHAR2(255),
  netflag    CHAR(1)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.systemid
  is '系统编号';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.systemcode
  is '系统编码';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.fullname
  is '子系统全称';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.alias
  is '子系统简称';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.imageurl
  is '图片地址';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.indexurl
  is '登录地址';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.logouturl
  is '登出地址';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.created
  is '创建时间';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.createby
  is '创建人';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.updated
  is '修改时间';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.updateby
  is '修改人';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.isactive
  is '状态（是否有效）';
comment on column OSECD.MCSSOSUBSYSTEMINFOGS.memos
  is '备注';
alter table OSECD.MCSSOSUBSYSTEMINFOGS
  add constraint PK_SSOSUBSYSTEMINFO primary key (SYSTEMID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSTATIONINFOGS
prompt ==============================
prompt
create table OSECD.MCSTATIONINFOGS
(
  stationid            VARCHAR2(36) not null,
  stationno            NVARCHAR2(8),
  stationname          NVARCHAR2(20),
  aliasname            NVARCHAR2(50),
  longitude            NUMBER(11,8),
  latitude             NUMBER(11,8),
  stationposition      NVARCHAR2(255),
  regionlevel          VARCHAR2(10),
  regionarea           VARCHAR2(10),
  haseleboard          CHAR(1),
  haswaitingboisk      CHAR(1),
  ishangestation       CHAR(1),
  isfleetstation       CHAR(1),
  fleetstationbuscount NUMBER(3),
  ismainfleetstation   CHAR(1),
  stationlength        NUMBER(6,1),
  isactive             CHAR(1),
  memos                NVARCHAR2(255),
  created              DATE,
  createdby            VARCHAR2(36),
  updated              DATE,
  updatedby            VARCHAR2(36),
  stationtype          VARCHAR2(2) default '0',
  waitingboiskcount    NUMBER default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSTATIONINFOGS
  is '站点信息';
comment on column OSECD.MCSTATIONINFOGS.stationid
  is '站点ID';
comment on column OSECD.MCSTATIONINFOGS.stationno
  is '站点编号';
comment on column OSECD.MCSTATIONINFOGS.stationname
  is '站点名';
comment on column OSECD.MCSTATIONINFOGS.aliasname
  is '别名';
comment on column OSECD.MCSTATIONINFOGS.longitude
  is '经度';
comment on column OSECD.MCSTATIONINFOGS.latitude
  is '纬度';
comment on column OSECD.MCSTATIONINFOGS.stationposition
  is '站点位置';
comment on column OSECD.MCSTATIONINFOGS.regionlevel
  is '所属区域（取字典表定义，主城区，近郊区等）';
comment on column OSECD.MCSTATIONINFOGS.regionarea
  is '所属城市区域（取字典定义，各城市行政区等等）';
comment on column OSECD.MCSTATIONINFOGS.haseleboard
  is '是否有电子站牌';
comment on column OSECD.MCSTATIONINFOGS.haswaitingboisk
  is '是否有候车亭';
comment on column OSECD.MCSTATIONINFOGS.ishangestation
  is '是否是枢纽站';
comment on column OSECD.MCSTATIONINFOGS.isfleetstation
  is '是否是港湾式停靠站';
comment on column OSECD.MCSTATIONINFOGS.fleetstationbuscount
  is '港湾式停靠站的停车数（辆）';
comment on column OSECD.MCSTATIONINFOGS.ismainfleetstation
  is '是否是主要公交走廊式停靠站';
comment on column OSECD.MCSTATIONINFOGS.stationlength
  is '站台长度（米）';
comment on column OSECD.MCSTATIONINFOGS.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.MCSTATIONINFOGS.memos
  is '备注';
comment on column OSECD.MCSTATIONINFOGS.created
  is '创建时间';
comment on column OSECD.MCSTATIONINFOGS.createdby
  is '创建者';
comment on column OSECD.MCSTATIONINFOGS.updated
  is '更新时间';
comment on column OSECD.MCSTATIONINFOGS.updatedby
  is '更新者';
comment on column OSECD.MCSTATIONINFOGS.stationtype
  is '站点类型';
comment on column OSECD.MCSTATIONINFOGS.waitingboiskcount
  is '候车厅数量';
create unique index OSECD.STATIONNO on OSECD.MCSTATIONINFOGS (STATIONNO)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCSTATIONINFOGS
  add constraint PK_STATIONINFO primary key (STATIONID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSTATIONINFOGS_GJ
prompt =================================
prompt
create table OSECD.MCSTATIONINFOGS_GJ
(
  stationid            VARCHAR2(36) not null,
  stationno            NVARCHAR2(8),
  stationname          NVARCHAR2(20),
  aliasname            NVARCHAR2(50),
  longitude            NUMBER(11,8),
  latitude             NUMBER(11,8),
  stationposition      NVARCHAR2(255),
  regionlevel          VARCHAR2(10),
  regionarea           VARCHAR2(10),
  haseleboard          CHAR(1),
  haswaitingboisk      CHAR(1),
  ishangestation       CHAR(1),
  isfleetstation       CHAR(1),
  fleetstationbuscount NUMBER(3),
  ismainfleetstation   CHAR(1),
  stationlength        NUMBER(6,2),
  isactive             CHAR(1),
  memos                NVARCHAR2(255),
  created              DATE,
  createdby            VARCHAR2(36),
  updated              DATE,
  updatedby            VARCHAR2(36),
  upszstationid        VARCHAR2(8),
  upszstationidtmp     VARCHAR2(8),
  stationtype          VARCHAR2(2),
  waitingboiskcount    NUMBER,
  platcode             VARCHAR2(2),
  uploadtime           DATE default SYSDATE,
  isneglect            CHAR(1) default '0'
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCSTATIONINFOGS_GJ.stationid
  is '站点ID';
comment on column OSECD.MCSTATIONINFOGS_GJ.stationno
  is '站点编号';
comment on column OSECD.MCSTATIONINFOGS_GJ.stationname
  is '站点名';
comment on column OSECD.MCSTATIONINFOGS_GJ.aliasname
  is '别名';
comment on column OSECD.MCSTATIONINFOGS_GJ.longitude
  is '经度';
comment on column OSECD.MCSTATIONINFOGS_GJ.latitude
  is '纬度';
comment on column OSECD.MCSTATIONINFOGS_GJ.stationposition
  is '站点位置';
comment on column OSECD.MCSTATIONINFOGS_GJ.regionlevel
  is '所属区域（取字典表定义，主城区，近郊区等）';
comment on column OSECD.MCSTATIONINFOGS_GJ.regionarea
  is '所属城市区域（取字典定义，各城市行政区等等）';
comment on column OSECD.MCSTATIONINFOGS_GJ.haseleboard
  is '是否有电子站牌';
comment on column OSECD.MCSTATIONINFOGS_GJ.haswaitingboisk
  is '是否有候车亭';
comment on column OSECD.MCSTATIONINFOGS_GJ.ishangestation
  is '是否是枢纽站';
comment on column OSECD.MCSTATIONINFOGS_GJ.isfleetstation
  is '是否是港湾式停靠站';
comment on column OSECD.MCSTATIONINFOGS_GJ.fleetstationbuscount
  is '港湾式停靠站的停车数（辆）';
comment on column OSECD.MCSTATIONINFOGS_GJ.ismainfleetstation
  is '是否是主要公交走廊式停靠站';
comment on column OSECD.MCSTATIONINFOGS_GJ.stationlength
  is '站台长度（米）';
comment on column OSECD.MCSTATIONINFOGS_GJ.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.MCSTATIONINFOGS_GJ.memos
  is '备注';
comment on column OSECD.MCSTATIONINFOGS_GJ.created
  is '创建时间';
comment on column OSECD.MCSTATIONINFOGS_GJ.createdby
  is '创建者';
comment on column OSECD.MCSTATIONINFOGS_GJ.updated
  is '更新时间';
comment on column OSECD.MCSTATIONINFOGS_GJ.updatedby
  is '更新者';
comment on column OSECD.MCSTATIONINFOGS_GJ.upszstationid
  is '上传深标站点ID';
comment on column OSECD.MCSTATIONINFOGS_GJ.upszstationidtmp
  is '上传深标站点ID，临时使用,当映射不成功时使用此ID';
comment on column OSECD.MCSTATIONINFOGS_GJ.stationtype
  is '站点类型';
comment on column OSECD.MCSTATIONINFOGS_GJ.waitingboiskcount
  is '候车厅数量';
comment on column OSECD.MCSTATIONINFOGS_GJ.platcode
  is '平台编码';
comment on column OSECD.MCSTATIONINFOGS_GJ.uploadtime
  is '上传时间';
comment on column OSECD.MCSTATIONINFOGS_GJ.isneglect
  is '是否忽略';

prompt
prompt Creating table MCSTATIONINFOGS_MAP
prompt ==================================
prompt
create table OSECD.MCSTATIONINFOGS_MAP
(
  stationno            NVARCHAR2(8) not null,
  stationname          NVARCHAR2(20),
  aliasname            NVARCHAR2(20),
  longitude            NUMBER(11,8) not null,
  latitude             NUMBER(11,8) not null,
  stationposition      NVARCHAR2(255),
  regionlevel          NVARCHAR2(20),
  regionarea           NVARCHAR2(20),
  haseleboard          NVARCHAR2(20),
  haswaitingboisk      NVARCHAR2(20),
  ishangestation       NVARCHAR2(20),
  isfleetstation       NVARCHAR2(20),
  fleetstationbuscount NUMBER(3),
  ismainfleetstation   NVARCHAR2(30),
  stationlength        NUMBER(5,2),
  routeinfo            NVARCHAR2(500)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSTATIONINFOGS_MAP
  is '地图站点信息表';
comment on column OSECD.MCSTATIONINFOGS_MAP.stationno
  is '站点编号';
comment on column OSECD.MCSTATIONINFOGS_MAP.stationname
  is '站点名称';
comment on column OSECD.MCSTATIONINFOGS_MAP.aliasname
  is '站点别名';
comment on column OSECD.MCSTATIONINFOGS_MAP.longitude
  is '经度';
comment on column OSECD.MCSTATIONINFOGS_MAP.latitude
  is '纬度';
comment on column OSECD.MCSTATIONINFOGS_MAP.stationposition
  is '站点位置';
comment on column OSECD.MCSTATIONINFOGS_MAP.regionlevel
  is '所属区域';
comment on column OSECD.MCSTATIONINFOGS_MAP.regionarea
  is '所属城市区域';
comment on column OSECD.MCSTATIONINFOGS_MAP.haseleboard
  is '是否有电子站牌';
comment on column OSECD.MCSTATIONINFOGS_MAP.haswaitingboisk
  is '是否有候车亭';
comment on column OSECD.MCSTATIONINFOGS_MAP.ishangestation
  is '是否是枢纽站';
comment on column OSECD.MCSTATIONINFOGS_MAP.isfleetstation
  is '是否是港湾式停靠站';
comment on column OSECD.MCSTATIONINFOGS_MAP.fleetstationbuscount
  is '港湾式停靠站的停车数(辆)';
comment on column OSECD.MCSTATIONINFOGS_MAP.ismainfleetstation
  is '是否是主要公交走廊式停靠站';
comment on column OSECD.MCSTATIONINFOGS_MAP.stationlength
  is '站台长度(米)';
comment on column OSECD.MCSTATIONINFOGS_MAP.routeinfo
  is '途经线路';

prompt
prompt Creating table MCSTATIONINFOGS_SGJ
prompt ==================================
prompt
create table OSECD.MCSTATIONINFOGS_SGJ
(
  stationid       VARCHAR2(20) not null,
  stationno       VARCHAR2(8),
  stationname     VARCHAR2(50) not null,
  lcdname         VARCHAR2(50) not null,
  stationtype     VARCHAR2(2),
  stationtypename VARCHAR2(20),
  outstation      NUMBER(6,2) not null,
  instation       NUMBER(6,2) not null,
  altitude        NUMBER(8,2),
  roadname        VARCHAR2(50),
  searchcode      VARCHAR2(20),
  symbolicpl1     VARCHAR2(30),
  symbolicpl2     VARCHAR2(30),
  symbolicpl3     VARCHAR2(30),
  longitude       NUMBER(11,8) not null,
  latitude        NUMBER(11,8) not null,
  commid          VARCHAR2(20),
  productid       NUMBER(8),
  aliasname       VARCHAR2(50),
  runangle        NUMBER(3) default 0,
  flag            CHAR(1) default '1' not null,
  memos           NVARCHAR2(255),
  created         DATE default SYSDATE,
  createby        VARCHAR2(20),
  updated         DATE,
  updateby        VARCHAR2(20),
  isactive        CHAR(1) default '1',
  statboardshape  VARCHAR2(2),
  statbuildprop   VARCHAR2(2),
  statprop        VARCHAR2(2),
  platformshape   VARCHAR2(2),
  statpic         BLOB,
  tempstation     VARCHAR2(1),
  retain1         VARCHAR2(50),
  retain2         VARCHAR2(50),
  retain3         VARCHAR2(50),
  retain4         VARCHAR2(50),
  retain5         VARCHAR2(50),
  retain6         VARCHAR2(50),
  retain7         VARCHAR2(50),
  retain8         VARCHAR2(50),
  retain9         VARCHAR2(50),
  retain10        VARCHAR2(50),
  vernum          NUMBER(8) default 0,
  website         VARCHAR2(100)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSTATIONINFOGS_SGJ
  is '站点信息';
comment on column OSECD.MCSTATIONINFOGS_SGJ.stationid
  is '站点ID';
comment on column OSECD.MCSTATIONINFOGS_SGJ.stationno
  is '站点编号';
comment on column OSECD.MCSTATIONINFOGS_SGJ.stationname
  is '站点名';
comment on column OSECD.MCSTATIONINFOGS_SGJ.lcdname
  is 'LCD显示名称';
comment on column OSECD.MCSTATIONINFOGS_SGJ.stationtype
  is '站点类型';
comment on column OSECD.MCSTATIONINFOGS_SGJ.stationtypename
  is '站点类型名称';
comment on column OSECD.MCSTATIONINFOGS_SGJ.outstation
  is '出站距离';
comment on column OSECD.MCSTATIONINFOGS_SGJ.instation
  is '入站距离';
comment on column OSECD.MCSTATIONINFOGS_SGJ.altitude
  is '海拔高度';
comment on column OSECD.MCSTATIONINFOGS_SGJ.roadname
  is '道路名';
comment on column OSECD.MCSTATIONINFOGS_SGJ.searchcode
  is '检索码';
comment on column OSECD.MCSTATIONINFOGS_SGJ.symbolicpl1
  is '标志性建筑1';
comment on column OSECD.MCSTATIONINFOGS_SGJ.symbolicpl2
  is '标志性建筑2';
comment on column OSECD.MCSTATIONINFOGS_SGJ.symbolicpl3
  is '标志性建筑3';
comment on column OSECD.MCSTATIONINFOGS_SGJ.longitude
  is '经度';
comment on column OSECD.MCSTATIONINFOGS_SGJ.latitude
  is '纬度';
comment on column OSECD.MCSTATIONINFOGS_SGJ.commid
  is 'Sim卡号';
comment on column OSECD.MCSTATIONINFOGS_SGJ.productid
  is '产品号';
comment on column OSECD.MCSTATIONINFOGS_SGJ.aliasname
  is '别名';
comment on column OSECD.MCSTATIONINFOGS_SGJ.runangle
  is '运行方向角';
comment on column OSECD.MCSTATIONINFOGS_SGJ.flag
  is '是否有效 1,有效;0,无效';
comment on column OSECD.MCSTATIONINFOGS_SGJ.memos
  is '备注';
comment on column OSECD.MCSTATIONINFOGS_SGJ.created
  is '创建时间';
comment on column OSECD.MCSTATIONINFOGS_SGJ.createby
  is '创建者';
comment on column OSECD.MCSTATIONINFOGS_SGJ.updated
  is '更新时间';
comment on column OSECD.MCSTATIONINFOGS_SGJ.updateby
  is '更新者';
comment on column OSECD.MCSTATIONINFOGS_SGJ.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.MCSTATIONINFOGS_SGJ.statboardshape
  is '站牌样式';
comment on column OSECD.MCSTATIONINFOGS_SGJ.statbuildprop
  is '修建性质';
comment on column OSECD.MCSTATIONINFOGS_SGJ.statprop
  is '站点性质';
comment on column OSECD.MCSTATIONINFOGS_SGJ.platformshape
  is '站台形式';
comment on column OSECD.MCSTATIONINFOGS_SGJ.statpic
  is '站台图片';
comment on column OSECD.MCSTATIONINFOGS_SGJ.retain1
  is '预留字段1';
comment on column OSECD.MCSTATIONINFOGS_SGJ.retain2
  is '预留字段2';
comment on column OSECD.MCSTATIONINFOGS_SGJ.retain3
  is '预留字段3';
comment on column OSECD.MCSTATIONINFOGS_SGJ.retain4
  is '预留字段4';
comment on column OSECD.MCSTATIONINFOGS_SGJ.retain5
  is '预留字段5';
comment on column OSECD.MCSTATIONINFOGS_SGJ.retain6
  is '预留字段6';
comment on column OSECD.MCSTATIONINFOGS_SGJ.retain7
  is '预留字段7';
comment on column OSECD.MCSTATIONINFOGS_SGJ.retain8
  is '预留字段8';
comment on column OSECD.MCSTATIONINFOGS_SGJ.retain9
  is '预留字段9';
comment on column OSECD.MCSTATIONINFOGS_SGJ.retain10
  is '预留字段10';
comment on column OSECD.MCSTATIONINFOGS_SGJ.vernum
  is '行版本号';
comment on column OSECD.MCSTATIONINFOGS_SGJ.website
  is '冠名网站';

prompt
prompt Creating table MCSTATIONINFOGS_WS
prompt =================================
prompt
create table OSECD.MCSTATIONINFOGS_WS
(
  stationid            VARCHAR2(36) not null,
  stationno            NVARCHAR2(8),
  stationname          NVARCHAR2(20),
  aliasname            NVARCHAR2(20),
  longitude            NUMBER(11,8),
  latitude             NUMBER(11,8),
  stationposition      NVARCHAR2(255),
  regionlevel          VARCHAR2(2),
  regionarea           VARCHAR2(2),
  haseleboard          CHAR(1),
  haswaitingboisk      CHAR(1),
  ishangestation       CHAR(1),
  isfleetstation       CHAR(1),
  fleetstationbuscount NUMBER(3),
  ismainfleetstation   CHAR(1),
  stationlength        NUMBER,
  isactive             CHAR(1),
  memos                NVARCHAR2(255)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSTATIONINFOGS_WS
  is '站点信息（数据上传）';
comment on column OSECD.MCSTATIONINFOGS_WS.stationid
  is '站点ID';
comment on column OSECD.MCSTATIONINFOGS_WS.stationno
  is '站点编号';
comment on column OSECD.MCSTATIONINFOGS_WS.stationname
  is '站点名';
comment on column OSECD.MCSTATIONINFOGS_WS.aliasname
  is '别名';
comment on column OSECD.MCSTATIONINFOGS_WS.longitude
  is '经度';
comment on column OSECD.MCSTATIONINFOGS_WS.latitude
  is '纬度';
comment on column OSECD.MCSTATIONINFOGS_WS.stationposition
  is '站点位置';
comment on column OSECD.MCSTATIONINFOGS_WS.regionlevel
  is '所属区域（取字典表定义，主城区，近郊区等）';
comment on column OSECD.MCSTATIONINFOGS_WS.regionarea
  is '所属城市区域（取字典定义，各城市行政区等等）';
comment on column OSECD.MCSTATIONINFOGS_WS.haseleboard
  is '是否有电子站牌';
comment on column OSECD.MCSTATIONINFOGS_WS.haswaitingboisk
  is '是否有候车亭';
comment on column OSECD.MCSTATIONINFOGS_WS.ishangestation
  is '是否是枢纽站';
comment on column OSECD.MCSTATIONINFOGS_WS.isfleetstation
  is '是否是港湾式停靠站';
comment on column OSECD.MCSTATIONINFOGS_WS.fleetstationbuscount
  is '港湾式停靠站的停车数（辆）';
comment on column OSECD.MCSTATIONINFOGS_WS.ismainfleetstation
  is '是否是主要公交走廊式停靠站';
comment on column OSECD.MCSTATIONINFOGS_WS.stationlength
  is '站台长度（米）';
comment on column OSECD.MCSTATIONINFOGS_WS.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.MCSTATIONINFOGS_WS.memos
  is '备注';
alter table OSECD.MCSTATIONINFOGS_WS
  add constraint PK_STATIONINFOWS primary key (STATIONID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSTATIONTYPEINFOGS
prompt ==================================
prompt
create table OSECD.MCSTATIONTYPEINFOGS
(
  recordid    VARCHAR2(36) not null,
  stationno   NVARCHAR2(20),
  regionlevel VARCHAR2(10),
  recdate     DATE default sysdate
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSTATIONTYPEINFOGS
  is '站点类型信息表（页面编辑结果）';
comment on column OSECD.MCSTATIONTYPEINFOGS.recordid
  is '记录编号';
comment on column OSECD.MCSTATIONTYPEINFOGS.stationno
  is '站点唯一编号';
comment on column OSECD.MCSTATIONTYPEINFOGS.regionlevel
  is '站点所属区域类型（主城区、近郊区、远郊区等）';
comment on column OSECD.MCSTATIONTYPEINFOGS.recdate
  is '记录时间';
create index OSECD.ICX_STATIONTYPE on OSECD.MCSTATIONTYPEINFOGS (STATIONNO)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.MCSTATIONTYPEINFOGS
  add constraint PK_STATIONTYPE primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSUBROUTEINFOGS
prompt ===============================
prompt
create table OSECD.MCSUBROUTEINFOGS
(
  subrouteid   VARCHAR2(20) not null,
  subroutename NVARCHAR2(30) not null,
  routeid      VARCHAR2(20) not null,
  ismainsub    CHAR(1),
  begindate    DATE,
  enddate      DATE,
  isactive     CHAR(1),
  memos        NVARCHAR2(255),
  created      DATE,
  createdby    VARCHAR2(36),
  updated      DATE,
  updatedby    VARCHAR2(36),
  platcode     VARCHAR2(2) default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSUBROUTEINFOGS
  is '子线基础信息表';
comment on column OSECD.MCSUBROUTEINFOGS.subrouteid
  is '子线路编号';
comment on column OSECD.MCSUBROUTEINFOGS.subroutename
  is '子线路名称';
comment on column OSECD.MCSUBROUTEINFOGS.routeid
  is '线路编号';
comment on column OSECD.MCSUBROUTEINFOGS.ismainsub
  is '是否主子线';
comment on column OSECD.MCSUBROUTEINFOGS.begindate
  is '开始日期';
comment on column OSECD.MCSUBROUTEINFOGS.enddate
  is '结束日期';
comment on column OSECD.MCSUBROUTEINFOGS.isactive
  is '是否有效';
comment on column OSECD.MCSUBROUTEINFOGS.memos
  is '备注';
comment on column OSECD.MCSUBROUTEINFOGS.created
  is '创建日期';
comment on column OSECD.MCSUBROUTEINFOGS.createdby
  is '创建者';
comment on column OSECD.MCSUBROUTEINFOGS.updated
  is '更新日期';
comment on column OSECD.MCSUBROUTEINFOGS.updatedby
  is '更新者';
comment on column OSECD.MCSUBROUTEINFOGS.platcode
  is '平台编码';
alter table OSECD.MCSUBROUTEINFOGS
  add constraint PK_SUBROUTEINFO primary key (SUBROUTEID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCSUBROUTEINFOGS_GJ
prompt ==================================
prompt
create table OSECD.MCSUBROUTEINFOGS_GJ
(
  subrouteid        VARCHAR2(20) not null,
  subroutename      NVARCHAR2(30) not null,
  routeid           VARCHAR2(20) not null,
  ismainsub         CHAR(1),
  begindate         DATE,
  enddate           DATE,
  isactive          CHAR(1),
  memos             NVARCHAR2(255),
  created           DATE,
  createdby         VARCHAR2(36),
  updated           DATE,
  updatedby         VARCHAR2(36),
  upszsubrouteid    VARCHAR2(8),
  upszsubrouteidtmp VARCHAR2(8),
  platcode          VARCHAR2(2),
  uploadtime        DATE default SYSDATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCSUBROUTEINFOGS_GJ.subrouteid
  is '子线路编号';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.subroutename
  is '子线路名称';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.routeid
  is '线路编号';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.ismainsub
  is '是否主子线';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.begindate
  is '开始日期';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.enddate
  is '结束日期';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.isactive
  is '是否有效';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.memos
  is '备注';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.created
  is '创建日期';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.createdby
  is '创建者';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.updated
  is '更新日期';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.updatedby
  is '更新者';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.upszsubrouteid
  is '深标上传子线ID';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.upszsubrouteidtmp
  is '深标上传子线ID，临时使用';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.platcode
  is '平台编码';
comment on column OSECD.MCSUBROUTEINFOGS_GJ.uploadtime
  is '上传时间';

prompt
prompt Creating table MCSUBROUTEINFOGS_SGJ
prompt ===================================
prompt
create table OSECD.MCSUBROUTEINFOGS_SGJ
(
  subrouteid     NUMBER(8) not null,
  routeid        NUMBER(8) not null,
  subroutename   VARCHAR2(30) not null,
  mediaroutename VARCHAR2(30),
  memos          NVARCHAR2(255),
  routenetlength NUMBER(6,2) default 0,
  ismainsub      CHAR(1) default '0',
  showflag       CHAR(1) default '0',
  updated        DATE,
  updateby       VARCHAR2(20),
  created        DATE default SYSDATE,
  createby       VARCHAR2(20),
  isactive       CHAR(1) default '1' not null,
  flag           CHAR(1) default '1',
  startdate      DATE,
  enddate        DATE,
  vernum         NUMBER(8) default 0,
  retain1        VARCHAR2(50),
  retain2        VARCHAR2(50),
  retain3        VARCHAR2(50),
  retain4        VARCHAR2(50),
  retain5        VARCHAR2(50),
  retain6        VARCHAR2(50),
  retain7        VARCHAR2(50),
  retain8        VARCHAR2(50),
  retain9        VARCHAR2(50),
  retain10       VARCHAR2(50),
  runmode        CHAR(1) default '1'
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSUBROUTEINFOGS_SGJ
  is '子线路信息表';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.subrouteid
  is '序号';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.routeid
  is '线路ID';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.subroutename
  is '子线路名称';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.mediaroutename
  is '媒体线路名称';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.memos
  is '备注';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.routenetlength
  is '线路网线贡献长度';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.ismainsub
  is '是否主子线路';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.showflag
  is '是否显示';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.updated
  is '更新日期';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.updateby
  is '更新者';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.created
  is '创建日期';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.createby
  is '创建者';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.startdate
  is '运行启用时间';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.enddate
  is '运行结束时间';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.vernum
  is '行版本号';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.retain1
  is '预留字段1';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.retain2
  is '预留字段2';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.retain3
  is '预留字段3';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.retain4
  is '预留字段4';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.retain5
  is '预留字段5';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.retain6
  is '预留字段6';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.retain7
  is '预留字段7';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.retain8
  is '预留字段8';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.retain9
  is '预留字段9';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.retain10
  is '预留字段10';
comment on column OSECD.MCSUBROUTEINFOGS_SGJ.runmode
  is '子线运行方式 字典表中RUNMODE 字典项';

prompt
prompt Creating table MCSUBROUTEINFOGS_WS
prompt ==================================
prompt
create table OSECD.MCSUBROUTEINFOGS_WS
(
  subrouteid   VARCHAR2(20) not null,
  subroutename NVARCHAR2(30) not null,
  routeid      VARCHAR2(20) not null,
  ismainsub    CHAR(1),
  begindate    DATE,
  enddate      DATE,
  isactive     CHAR(1),
  memos        NVARCHAR2(255)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCSUBROUTEINFOGS_WS
  is '子线基础信息表（数据上传）';
comment on column OSECD.MCSUBROUTEINFOGS_WS.subrouteid
  is '子线路编号';
comment on column OSECD.MCSUBROUTEINFOGS_WS.subroutename
  is '子线路名称';
comment on column OSECD.MCSUBROUTEINFOGS_WS.routeid
  is '线路编号';
comment on column OSECD.MCSUBROUTEINFOGS_WS.ismainsub
  is '是否主子线';
comment on column OSECD.MCSUBROUTEINFOGS_WS.begindate
  is '开始日期';
comment on column OSECD.MCSUBROUTEINFOGS_WS.enddate
  is '结束日期';
comment on column OSECD.MCSUBROUTEINFOGS_WS.isactive
  is '是否有效';
comment on column OSECD.MCSUBROUTEINFOGS_WS.memos
  is '备注';
alter table OSECD.MCSUBROUTEINFOGS_WS
  add constraint PK_SUBROUTEINFOWS primary key (SUBROUTEID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCTIMEPHASEBUSINFOGS
prompt ===================================
prompt
create table OSECD.MCTIMEPHASEBUSINFOGS
(
  recordid  VARCHAR2(36) not null,
  busid     VARCHAR2(36),
  cardid    VARCHAR2(20),
  begindate DATE,
  enddate   DATE,
  created   DATE,
  createdby VARCHAR2(36),
  updated   DATE,
  updatedby VARCHAR2(36),
  orgid     VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCTIMEPHASEBUSINFOGS
  is '高峰运营车辆信息';
comment on column OSECD.MCTIMEPHASEBUSINFOGS.recordid
  is '记录编号';
comment on column OSECD.MCTIMEPHASEBUSINFOGS.busid
  is '车辆编号';
comment on column OSECD.MCTIMEPHASEBUSINFOGS.cardid
  is '车牌号';
comment on column OSECD.MCTIMEPHASEBUSINFOGS.begindate
  is '开始日期';
comment on column OSECD.MCTIMEPHASEBUSINFOGS.enddate
  is '结束日期';
comment on column OSECD.MCTIMEPHASEBUSINFOGS.created
  is '创建时间';
comment on column OSECD.MCTIMEPHASEBUSINFOGS.createdby
  is '创建人';
comment on column OSECD.MCTIMEPHASEBUSINFOGS.updated
  is '更新时间';
comment on column OSECD.MCTIMEPHASEBUSINFOGS.updatedby
  is '更新人';
comment on column OSECD.MCTIMEPHASEBUSINFOGS.orgid
  is '组织编号';
alter table OSECD.MCTIMEPHASEBUSINFOGS
  add constraint PK_TIMEPHASEBUS primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCTIMEPHASEBUSINFOGS_TEMP
prompt ========================================
prompt
create table OSECD.MCTIMEPHASEBUSINFOGS_TEMP
(
  fileid    VARCHAR2(36),
  recordid  VARCHAR2(36) not null,
  busid     VARCHAR2(36),
  cardid    VARCHAR2(20),
  begindate DATE,
  enddate   DATE,
  created   DATE,
  createdby VARCHAR2(36),
  updated   DATE,
  updatedby VARCHAR2(36),
  orgid     VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCTIMEPHASEBUSINFOGS_TEMP
  is '高峰运营车辆信息（上穿数据中间表）';
comment on column OSECD.MCTIMEPHASEBUSINFOGS_TEMP.fileid
  is '上传文件编号';
comment on column OSECD.MCTIMEPHASEBUSINFOGS_TEMP.recordid
  is '记录编号';
comment on column OSECD.MCTIMEPHASEBUSINFOGS_TEMP.busid
  is '车辆编号';
comment on column OSECD.MCTIMEPHASEBUSINFOGS_TEMP.cardid
  is '车牌号';
comment on column OSECD.MCTIMEPHASEBUSINFOGS_TEMP.begindate
  is '开始日期';
comment on column OSECD.MCTIMEPHASEBUSINFOGS_TEMP.enddate
  is '结束日期';
comment on column OSECD.MCTIMEPHASEBUSINFOGS_TEMP.created
  is '创建时间';
comment on column OSECD.MCTIMEPHASEBUSINFOGS_TEMP.createdby
  is '创建人';
comment on column OSECD.MCTIMEPHASEBUSINFOGS_TEMP.updated
  is '更新时间';
comment on column OSECD.MCTIMEPHASEBUSINFOGS_TEMP.updatedby
  is '更新人';
comment on column OSECD.MCTIMEPHASEBUSINFOGS_TEMP.orgid
  is '组织编号';

prompt
prompt Creating table MCUNBUILDAREAINFOGS_MAP
prompt ======================================
prompt
create table OSECD.MCUNBUILDAREAINFOGS_MAP
(
  areaid       VARCHAR2(36) not null,
  areaname     NVARCHAR2(50),
  shape        SDO_GEOMETRY,
  areaposition NVARCHAR2(255),
  created      DATE,
  createdby    VARCHAR2(36),
  updated      DATE,
  updatedby    VARCHAR2(36),
  acreage      NUMBER(8,2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MCUNBUILDAREAINFOGS_MAP
  is '非建成区数据表';
comment on column OSECD.MCUNBUILDAREAINFOGS_MAP.areaid
  is '非建成区编号';
comment on column OSECD.MCUNBUILDAREAINFOGS_MAP.areaname
  is '非建成区名称';
comment on column OSECD.MCUNBUILDAREAINFOGS_MAP.shape
  is '区域';
comment on column OSECD.MCUNBUILDAREAINFOGS_MAP.areaposition
  is '区域位置';
comment on column OSECD.MCUNBUILDAREAINFOGS_MAP.created
  is '创建日期';
comment on column OSECD.MCUNBUILDAREAINFOGS_MAP.createdby
  is '创建者';
comment on column OSECD.MCUNBUILDAREAINFOGS_MAP.updated
  is '更新日期';
comment on column OSECD.MCUNBUILDAREAINFOGS_MAP.updatedby
  is '更新者';
comment on column OSECD.MCUNBUILDAREAINFOGS_MAP.acreage
  is '占用面积（平方米）';
alter table OSECD.MCUNBUILDAREAINFOGS_MAP
  add constraint PK_AREA primary key (AREAID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MCUSERINFOGS
prompt ===========================
prompt
create table OSECD.MCUSERINFOGS
(
  userid     VARCHAR2(36) not null,
  logname    NVARCHAR2(30) not null,
  realname   NVARCHAR2(30),
  password   NVARCHAR2(20) not null,
  workcode   NVARCHAR2(30),
  department NVARCHAR2(50),
  created    DATE not null,
  createby   VARCHAR2(36) not null,
  updated    DATE,
  updateby   VARCHAR2(36),
  isactive   CHAR(1) default '1' not null,
  memos      NVARCHAR2(255)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.MCUSERINFOGS.userid
  is '用户编号';
comment on column OSECD.MCUSERINFOGS.logname
  is '登录名';
comment on column OSECD.MCUSERINFOGS.realname
  is '用户真实姓名';
comment on column OSECD.MCUSERINFOGS.password
  is '密码';
comment on column OSECD.MCUSERINFOGS.workcode
  is '工号';
comment on column OSECD.MCUSERINFOGS.department
  is '部门';
comment on column OSECD.MCUSERINFOGS.created
  is '创建时间';
comment on column OSECD.MCUSERINFOGS.createby
  is '创建人';
comment on column OSECD.MCUSERINFOGS.updated
  is '修改时间';
comment on column OSECD.MCUSERINFOGS.updateby
  is '修改人';
comment on column OSECD.MCUSERINFOGS.isactive
  is '状态（是否有效）';
comment on column OSECD.MCUSERINFOGS.memos
  is '备注';
alter table OSECD.MCUSERINFOGS
  add constraint PK_USERINFO primary key (USERID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table MINUTES_DAY
prompt ==========================
prompt
create table OSECD.MINUTES_DAY
(
  minute DATE not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.MINUTES_DAY
  is '结存用表 请勿删除';

prompt
prompt Creating table OD_BUSARRLFT
prompt ===========================
prompt
create table OSECD.OD_BUSARRLFT
(
  routeid     NUMBER(8) not null,
  subrouteid  NUMBER(8),
  productid   NUMBER(10) not null,
  busno       VARCHAR2(16),
  stationno   VARCHAR2(10),
  actdatetime DATE not null
)
tablespace TBS_OSECD_IC
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.OD_BUSARRLFT on OSECD.OD_BUSARRLFT (ACTDATETIME)
  tablespace TBS_OSECD_IC
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OD_MONTHCONSUME
prompt ==============================
prompt
create table OSECD.OD_MONTHCONSUME
(
  lineno      VARCHAR2(20) not null,
  busno       VARCHAR2(20) not null,
  cardno      VARCHAR2(20) not null,
  consumetype NUMBER not null,
  consumedate DATE not null
)
tablespace TBS_OSECD_IC
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.OD_MONTHCONSUME on OSECD.OD_MONTHCONSUME (CONSUMEDATE)
  tablespace TBS_OSECD_IC
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OSEBUSARRLFTLD
prompt =============================
prompt
create table OSECD.OSEBUSARRLFTLD
(
  busrdid       VARCHAR2(36) not null,
  datatype      VARCHAR2(3) not null,
  routeid       VARCHAR2(36) not null,
  routename     NVARCHAR2(20),
  subrouteid    VARCHAR2(36),
  subroutename  NVARCHAR2(20),
  segmentid     VARCHAR2(36),
  segmentname   NVARCHAR2(20),
  busid         VARCHAR2(36),
  buscardno     NVARCHAR2(20),
  productid     NUMBER(10),
  driverid      VARCHAR2(36),
  stationseqnum NUMBER(3),
  stationid     VARCHAR2(36),
  stationno     NVARCHAR2(20),
  stationtype   VARCHAR2(2),
  stationname   NVARCHAR2(50),
  isarrlft      VARCHAR2(2),
  rundirection  VARCHAR2(2),
  actdatetime   DATE not null,
  recdatetime   DATE default SYSDATE,
  writeid       NUMBER(8),
  isappend      VARCHAR2(2),
  bussid        VARCHAR2(3),
  longitude     NUMBER(9,6),
  latitude      NUMBER(9,6),
  altitude      NUMBER(9,6),
  gpsspeed      NUMBER(6,2),
  sensorspeed   NUMBER(6,2),
  rotationangle NUMBER(6,2),
  ismanulopt    VARCHAR2(2),
  onpnum        NUMBER(4),
  offpnum       NUMBER(4),
  leftpnum      NUMBER(4),
  tptdata       NUMBER(4,2),
  doorstate     VARCHAR2(2),
  peccancytype  VARCHAR2(20),
  peccancytime  DATE,
  standardvalue NUMBER,
  peccancyvalue NUMBER,
  gpsmile       NUMBER,
  checked       VARCHAR2(2),
  assedate      DATE,
  assessor      VARCHAR2(36),
  busrrid       VARCHAR2(36),
  reservechar1  VARCHAR2(50),
  reservechar2  VARCHAR2(50),
  reservechar3  VARCHAR2(50),
  reservechar4  VARCHAR2(50),
  reservechar5  VARCHAR2(50),
  reservechar6  VARCHAR2(50),
  reservechar7  VARCHAR2(50),
  reservechar8  VARCHAR2(50),
  reservechar9  VARCHAR2(50),
  reservechar10 VARCHAR2(50),
  busselfid     VARCHAR2(20),
  equiptno      VARCHAR2(100),
  sendcode      VARCHAR2(10),
  upbusid       VARCHAR2(50),
  uprouteid     VARCHAR2(50),
  upsubrouteid  VARCHAR2(50),
  upstationid   VARCHAR2(50)
)
partition by range (ACTDATETIME)
(
  partition P_20150501 values less than (TO_DATE(' 2015-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150502 values less than (TO_DATE(' 2015-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150503 values less than (TO_DATE(' 2015-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150504 values less than (TO_DATE(' 2015-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150505 values less than (TO_DATE(' 2015-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150506 values less than (TO_DATE(' 2015-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150507 values less than (TO_DATE(' 2015-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150508 values less than (TO_DATE(' 2015-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150509 values less than (TO_DATE(' 2015-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150510 values less than (TO_DATE(' 2015-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150511 values less than (TO_DATE(' 2015-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150512 values less than (TO_DATE(' 2015-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150513 values less than (TO_DATE(' 2015-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150514 values less than (TO_DATE(' 2015-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150515 values less than (TO_DATE(' 2015-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150516 values less than (TO_DATE(' 2015-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150517 values less than (TO_DATE(' 2015-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150518 values less than (TO_DATE(' 2015-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150519 values less than (TO_DATE(' 2015-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150520 values less than (TO_DATE(' 2015-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150521 values less than (TO_DATE(' 2015-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150522 values less than (TO_DATE(' 2015-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150523 values less than (TO_DATE(' 2015-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150524 values less than (TO_DATE(' 2015-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150525 values less than (TO_DATE(' 2015-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150526 values less than (TO_DATE(' 2015-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150527 values less than (TO_DATE(' 2015-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150528 values less than (TO_DATE(' 2015-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150529 values less than (TO_DATE(' 2015-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150530 values less than (TO_DATE(' 2015-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150531 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150601 values less than (TO_DATE(' 2015-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150602 values less than (TO_DATE(' 2015-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150603 values less than (TO_DATE(' 2015-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150604 values less than (TO_DATE(' 2015-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150605 values less than (TO_DATE(' 2015-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150606 values less than (TO_DATE(' 2015-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150607 values less than (TO_DATE(' 2015-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150608 values less than (TO_DATE(' 2015-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150609 values less than (TO_DATE(' 2015-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150610 values less than (TO_DATE(' 2015-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150611 values less than (TO_DATE(' 2015-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150612 values less than (TO_DATE(' 2015-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150613 values less than (TO_DATE(' 2015-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150614 values less than (TO_DATE(' 2015-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150615 values less than (TO_DATE(' 2015-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150616 values less than (TO_DATE(' 2015-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150617 values less than (TO_DATE(' 2015-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150618 values less than (TO_DATE(' 2015-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150619 values less than (TO_DATE(' 2015-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150620 values less than (TO_DATE(' 2015-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150621 values less than (TO_DATE(' 2015-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150622 values less than (TO_DATE(' 2015-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150623 values less than (TO_DATE(' 2015-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150624 values less than (TO_DATE(' 2015-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150625 values less than (TO_DATE(' 2015-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150626 values less than (TO_DATE(' 2015-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150627 values less than (TO_DATE(' 2015-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150628 values less than (TO_DATE(' 2015-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150629 values less than (TO_DATE(' 2015-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150630 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150701 values less than (TO_DATE(' 2015-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150702 values less than (TO_DATE(' 2015-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150703 values less than (TO_DATE(' 2015-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150704 values less than (TO_DATE(' 2015-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150705 values less than (TO_DATE(' 2015-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150706 values less than (TO_DATE(' 2015-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150707 values less than (TO_DATE(' 2015-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150708 values less than (TO_DATE(' 2015-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150709 values less than (TO_DATE(' 2015-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150710 values less than (TO_DATE(' 2015-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150711 values less than (TO_DATE(' 2015-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150712 values less than (TO_DATE(' 2015-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150713 values less than (TO_DATE(' 2015-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150714 values less than (TO_DATE(' 2015-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150715 values less than (TO_DATE(' 2015-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150716 values less than (TO_DATE(' 2015-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150717 values less than (TO_DATE(' 2015-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150718 values less than (TO_DATE(' 2015-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150719 values less than (TO_DATE(' 2015-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150720 values less than (TO_DATE(' 2015-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150721 values less than (TO_DATE(' 2015-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150722 values less than (TO_DATE(' 2015-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150723 values less than (TO_DATE(' 2015-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150724 values less than (TO_DATE(' 2015-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150725 values less than (TO_DATE(' 2015-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150726 values less than (TO_DATE(' 2015-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150727 values less than (TO_DATE(' 2015-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150728 values less than (TO_DATE(' 2015-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150729 values less than (TO_DATE(' 2015-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150730 values less than (TO_DATE(' 2015-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150731 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.OSEBUSARRLFTLD
  is '车辆到离站数据信息表（行业监管系统表）';
comment on column OSECD.OSEBUSARRLFTLD.busrdid
  is '记录编号';
comment on column OSECD.OSEBUSARRLFTLD.datatype
  is '数据类型，预留字段，默认为4-到离站';
comment on column OSECD.OSEBUSARRLFTLD.routeid
  is '线路编号';
comment on column OSECD.OSEBUSARRLFTLD.routename
  is '线路名称';
comment on column OSECD.OSEBUSARRLFTLD.subrouteid
  is '子线编号';
comment on column OSECD.OSEBUSARRLFTLD.subroutename
  is '子线名称';
comment on column OSECD.OSEBUSARRLFTLD.segmentid
  is '单程编号';
comment on column OSECD.OSEBUSARRLFTLD.segmentname
  is '单程名称';
comment on column OSECD.OSEBUSARRLFTLD.busid
  is '车辆编号';
comment on column OSECD.OSEBUSARRLFTLD.buscardno
  is '车牌号';
comment on column OSECD.OSEBUSARRLFTLD.productid
  is '产品号';
comment on column OSECD.OSEBUSARRLFTLD.driverid
  is '驾驶员编号';
comment on column OSECD.OSEBUSARRLFTLD.stationseqnum
  is '站点双程顺序号';
comment on column OSECD.OSEBUSARRLFTLD.stationid
  is '站点编号';
comment on column OSECD.OSEBUSARRLFTLD.stationno
  is '站点唯一编号';
comment on column OSECD.OSEBUSARRLFTLD.stationtype
  is '站点类型';
comment on column OSECD.OSEBUSARRLFTLD.stationname
  is '站点名称';
comment on column OSECD.OSEBUSARRLFTLD.isarrlft
  is '到离站 1,到;2,离';
comment on column OSECD.OSEBUSARRLFTLD.rundirection
  is '运行方向';
comment on column OSECD.OSEBUSARRLFTLD.actdatetime
  is '业务时间';
comment on column OSECD.OSEBUSARRLFTLD.recdatetime
  is '记录时间';
comment on column OSECD.OSEBUSARRLFTLD.writeid
  is '存储服务号';
comment on column OSECD.OSEBUSARRLFTLD.isappend
  is '是否补录 0,直接上传;1,GPRS补发;3,场站DSRC补发;5,站台上报到离站;8,第二链路实时上传;9,第二链路补发上传';
comment on column OSECD.OSEBUSARRLFTLD.bussid
  is '运营类型';
comment on column OSECD.OSEBUSARRLFTLD.longitude
  is '经度';
comment on column OSECD.OSEBUSARRLFTLD.latitude
  is '纬度';
comment on column OSECD.OSEBUSARRLFTLD.altitude
  is '海拔';
comment on column OSECD.OSEBUSARRLFTLD.gpsspeed
  is 'GPS速度';
comment on column OSECD.OSEBUSARRLFTLD.sensorspeed
  is '传感器速度';
comment on column OSECD.OSEBUSARRLFTLD.rotationangle
  is '方向角';
comment on column OSECD.OSEBUSARRLFTLD.ismanulopt
  is '自动报站标志 A,自动;M,手动;';
comment on column OSECD.OSEBUSARRLFTLD.onpnum
  is '上客数';
comment on column OSECD.OSEBUSARRLFTLD.offpnum
  is '下客数';
comment on column OSECD.OSEBUSARRLFTLD.leftpnum
  is '载客数';
comment on column OSECD.OSEBUSARRLFTLD.tptdata
  is '车内温度';
comment on column OSECD.OSEBUSARRLFTLD.doorstate
  is '开关门状态';
comment on column OSECD.OSEBUSARRLFTLD.peccancytype
  is '违规类型';
comment on column OSECD.OSEBUSARRLFTLD.peccancytime
  is '违规时间';
comment on column OSECD.OSEBUSARRLFTLD.standardvalue
  is '违规标准 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.OSEBUSARRLFTLD.peccancyvalue
  is '违规值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.OSEBUSARRLFTLD.gpsmile
  is 'GPS里程';
comment on column OSECD.OSEBUSARRLFTLD.checked
  is '是否免核';
comment on column OSECD.OSEBUSARRLFTLD.assedate
  is '免核日期';
comment on column OSECD.OSEBUSARRLFTLD.assessor
  is '免核人';
comment on column OSECD.OSEBUSARRLFTLD.busrrid
  is '车次序号';
comment on column OSECD.OSEBUSARRLFTLD.reservechar1
  is '字符型预留字段1';
comment on column OSECD.OSEBUSARRLFTLD.reservechar2
  is '字符型预留字段2';
comment on column OSECD.OSEBUSARRLFTLD.reservechar3
  is '字符型预留字段3';
comment on column OSECD.OSEBUSARRLFTLD.reservechar4
  is '字符型预留字段4';
comment on column OSECD.OSEBUSARRLFTLD.reservechar5
  is '字符型预留字段5';
comment on column OSECD.OSEBUSARRLFTLD.reservechar6
  is '字符型预留字段6';
comment on column OSECD.OSEBUSARRLFTLD.reservechar7
  is '字符型预留字段7';
comment on column OSECD.OSEBUSARRLFTLD.reservechar8
  is '字符型预留字段8';
comment on column OSECD.OSEBUSARRLFTLD.reservechar9
  is '字符型预留字段9';
comment on column OSECD.OSEBUSARRLFTLD.reservechar10
  is '字符型预留字段10';
comment on column OSECD.OSEBUSARRLFTLD.busselfid
  is '车辆自编号';
comment on column OSECD.OSEBUSARRLFTLD.equiptno
  is '车载设备号';
comment on column OSECD.OSEBUSARRLFTLD.sendcode
  is '平台号';
comment on column OSECD.OSEBUSARRLFTLD.upbusid
  is '上传车辆ID';
comment on column OSECD.OSEBUSARRLFTLD.uprouteid
  is '上传线路ID';
comment on column OSECD.OSEBUSARRLFTLD.upsubrouteid
  is '上传子线ID';
comment on column OSECD.OSEBUSARRLFTLD.upstationid
  is '上传站点ID';
create index OSECD.IX_ARRLFT on OSECD.OSEBUSARRLFTLD (ACTDATETIME, ROUTEID, BUSID)
  local;

prompt
prompt Creating table OSEBUSARRLFTLD_PKG
prompt =================================
prompt
create table OSECD.OSEBUSARRLFTLD_PKG
(
  busrdid       VARCHAR2(36) not null,
  datatype      VARCHAR2(3) not null,
  routeid       VARCHAR2(36) not null,
  routename     NVARCHAR2(20),
  subrouteid    VARCHAR2(36),
  subroutename  NVARCHAR2(20),
  segmentid     VARCHAR2(36),
  segmentname   NVARCHAR2(20),
  busid         VARCHAR2(36) not null,
  buscardno     NVARCHAR2(20),
  productid     NUMBER(10),
  driverid      VARCHAR2(36),
  stationseqnum NUMBER(3),
  stationid     VARCHAR2(36),
  stationno     NVARCHAR2(20),
  stationtype   VARCHAR2(2),
  stationname   NVARCHAR2(50),
  isarrlft      VARCHAR2(2),
  rundirection  VARCHAR2(2),
  actdatetime   DATE not null,
  recdatetime   DATE default SYSDATE,
  writeid       NUMBER(8),
  isappend      VARCHAR2(2),
  bussid        VARCHAR2(3),
  longitude     NUMBER(9,6),
  latitude      NUMBER(9,6),
  altitude      NUMBER(9,6),
  gpsspeed      NUMBER(6,2),
  sensorspeed   NUMBER(6,2),
  rotationangle NUMBER(6,2),
  ismanulopt    VARCHAR2(2),
  onpnum        NUMBER(4),
  offpnum       NUMBER(4),
  leftpnum      NUMBER(4),
  tptdata       NUMBER(4,2),
  doorstate     VARCHAR2(2),
  peccancytype  VARCHAR2(20),
  peccancytime  DATE,
  standardvalue NUMBER,
  peccancyvalue NUMBER,
  gpsmile       NUMBER,
  checked       VARCHAR2(2),
  assedate      DATE,
  assessor      VARCHAR2(36),
  busrrid       VARCHAR2(36),
  reservechar1  VARCHAR2(50),
  reservechar2  VARCHAR2(50),
  reservechar3  VARCHAR2(50),
  reservechar4  VARCHAR2(50),
  reservechar5  VARCHAR2(50),
  reservechar6  VARCHAR2(50),
  reservechar7  VARCHAR2(50),
  reservechar8  VARCHAR2(50),
  reservechar9  VARCHAR2(50),
  reservechar10 VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.OSEBUSARRLFTLD_PKG
  is '车辆到离站数据信息表（行业监管系统表）';
comment on column OSECD.OSEBUSARRLFTLD_PKG.busrdid
  is '记录编号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.datatype
  is '数据类型，预留字段，默认为4-到离站';
comment on column OSECD.OSEBUSARRLFTLD_PKG.routeid
  is '线路编号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.routename
  is '线路名称';
comment on column OSECD.OSEBUSARRLFTLD_PKG.subrouteid
  is '子线编号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.subroutename
  is '子线名称';
comment on column OSECD.OSEBUSARRLFTLD_PKG.segmentid
  is '单程编号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.segmentname
  is '单程名称';
comment on column OSECD.OSEBUSARRLFTLD_PKG.busid
  is '车辆编号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.buscardno
  is '车牌号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.productid
  is '车载机编号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.driverid
  is '驾驶员编号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.stationseqnum
  is '站点双程顺序号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.stationid
  is '站点编号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.stationno
  is '站点唯一编号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.stationtype
  is '站点类型';
comment on column OSECD.OSEBUSARRLFTLD_PKG.stationname
  is '站点名称';
comment on column OSECD.OSEBUSARRLFTLD_PKG.isarrlft
  is '到离站 1,到;2,离';
comment on column OSECD.OSEBUSARRLFTLD_PKG.rundirection
  is '运行方向';
comment on column OSECD.OSEBUSARRLFTLD_PKG.actdatetime
  is '业务时间';
comment on column OSECD.OSEBUSARRLFTLD_PKG.recdatetime
  is '记录时间';
comment on column OSECD.OSEBUSARRLFTLD_PKG.writeid
  is '存储服务号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.isappend
  is '是否补录 0,直接上传;1,GPRS补发;3,场站DSRC补发;5,站台上报到离站;8,第二链路实时上传;9,第二链路补发上传';
comment on column OSECD.OSEBUSARRLFTLD_PKG.bussid
  is '运营类型';
comment on column OSECD.OSEBUSARRLFTLD_PKG.longitude
  is '经度';
comment on column OSECD.OSEBUSARRLFTLD_PKG.latitude
  is '纬度';
comment on column OSECD.OSEBUSARRLFTLD_PKG.altitude
  is '海拔';
comment on column OSECD.OSEBUSARRLFTLD_PKG.gpsspeed
  is 'GPS速度';
comment on column OSECD.OSEBUSARRLFTLD_PKG.sensorspeed
  is '传感器速度';
comment on column OSECD.OSEBUSARRLFTLD_PKG.rotationangle
  is '方向角';
comment on column OSECD.OSEBUSARRLFTLD_PKG.ismanulopt
  is '自动报站标志 A,自动;M,手动;';
comment on column OSECD.OSEBUSARRLFTLD_PKG.onpnum
  is '上客数';
comment on column OSECD.OSEBUSARRLFTLD_PKG.offpnum
  is '下客数';
comment on column OSECD.OSEBUSARRLFTLD_PKG.leftpnum
  is '载客数';
comment on column OSECD.OSEBUSARRLFTLD_PKG.tptdata
  is '车内温度';
comment on column OSECD.OSEBUSARRLFTLD_PKG.doorstate
  is '开关门状态';
comment on column OSECD.OSEBUSARRLFTLD_PKG.peccancytype
  is '违规类型';
comment on column OSECD.OSEBUSARRLFTLD_PKG.peccancytime
  is '违规时间';
comment on column OSECD.OSEBUSARRLFTLD_PKG.standardvalue
  is '违规标准 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.OSEBUSARRLFTLD_PKG.peccancyvalue
  is '违规值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.OSEBUSARRLFTLD_PKG.gpsmile
  is 'GPS里程';
comment on column OSECD.OSEBUSARRLFTLD_PKG.checked
  is '是否免核';
comment on column OSECD.OSEBUSARRLFTLD_PKG.assedate
  is '免核日期';
comment on column OSECD.OSEBUSARRLFTLD_PKG.assessor
  is '免核人';
comment on column OSECD.OSEBUSARRLFTLD_PKG.busrrid
  is '车次序号';
comment on column OSECD.OSEBUSARRLFTLD_PKG.reservechar1
  is '字符型预留字段1';
comment on column OSECD.OSEBUSARRLFTLD_PKG.reservechar2
  is '字符型预留字段2';
comment on column OSECD.OSEBUSARRLFTLD_PKG.reservechar3
  is '字符型预留字段3';
comment on column OSECD.OSEBUSARRLFTLD_PKG.reservechar4
  is '字符型预留字段4';
comment on column OSECD.OSEBUSARRLFTLD_PKG.reservechar5
  is '字符型预留字段5';
comment on column OSECD.OSEBUSARRLFTLD_PKG.reservechar6
  is '字符型预留字段6';
comment on column OSECD.OSEBUSARRLFTLD_PKG.reservechar7
  is '字符型预留字段7';
comment on column OSECD.OSEBUSARRLFTLD_PKG.reservechar8
  is '字符型预留字段8';
comment on column OSECD.OSEBUSARRLFTLD_PKG.reservechar9
  is '字符型预留字段9';
comment on column OSECD.OSEBUSARRLFTLD_PKG.reservechar10
  is '字符型预留字段10';
create index OSECD.IX_ARRLFTPKG on OSECD.OSEBUSARRLFTLD_PKG (ACTDATETIME, ROUTEID, BUSID, STATIONID)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OSEBUSRUNDATA
prompt ============================
prompt
create table OSECD.OSEBUSRUNDATA
(
  busrdid       NUMBER(20) not null,
  datatype      VARCHAR2(3) not null,
  routeid       VARCHAR2(10) not null,
  routename     VARCHAR2(100),
  subrouteid    VARCHAR2(8),
  segmentid     VARCHAR2(20),
  segmentname   VARCHAR2(60),
  rundirect     CHAR(1),
  productid     VARCHAR2(10) not null,
  busid         VARCHAR2(36),
  buscardno     VARCHAR2(10),
  stationseqnum NUMBER(3),
  stationno     VARCHAR2(10),
  stationid     VARCHAR2(36),
  isarrlft      CHAR(1),
  actdatetime   DATE not null,
  recdatetime   DATE default sysdate not null,
  writeid       NUMBER(8),
  isappend      CHAR(1),
  bussid        VARCHAR2(3),
  longitude     NUMBER(9,6),
  latitude      NUMBER(9,6),
  altitude      NUMBER(9,6),
  gpsspeed      NUMBER(6,2),
  sensorspeed   NUMBER(6,2),
  rotationangle NUMBER(6,2),
  stationtype   VARCHAR2(2),
  ismanulopt    CHAR(1),
  packcode      NUMBER(3),
  smcode        NUMBER(4),
  onpnum        NUMBER(4),
  offpnum       NUMBER(4),
  leftpnum      NUMBER(4),
  tptdata       NUMBER(4,2),
  doorstate     VARCHAR2(3),
  peccancytype  VARCHAR2(20),
  peccancytime  DATE,
  standardvalue NUMBER,
  peccancyvalue NUMBER,
  gpsmile       NUMBER(13,2),
  reservechar1  VARCHAR2(50),
  reservechar2  VARCHAR2(50),
  reservechar3  VARCHAR2(50),
  reservechar4  VARCHAR2(50),
  reservechar5  VARCHAR2(50),
  reservechar6  VARCHAR2(50),
  reservechar7  VARCHAR2(50),
  reservechar8  VARCHAR2(50),
  reservechar9  VARCHAR2(50),
  reservechar10 VARCHAR2(50),
  issvrappend   CHAR(1) default '0',
  svrappendtime DATE,
  stationname   VARCHAR2(100),
  equiptno      VARCHAR2(100),
  sendcode      VARCHAR2(10),
  upbusid       VARCHAR2(50),
  uprouteid     VARCHAR2(50),
  upsubrouteid  VARCHAR2(50),
  busselfid     VARCHAR2(20)
)
partition by range (ACTDATETIME)
(
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.OSEBUSRUNDATA
  is '车辆实时GPS数据';
comment on column OSECD.OSEBUSRUNDATA.busrdid
  is '唯一号';
comment on column OSECD.OSEBUSRUNDATA.datatype
  is '数据类型 3,GPS;4,到离站;55,违规;47,DSRC检到离场;71,GPS到离场;53,开关门;';
comment on column OSECD.OSEBUSRUNDATA.routeid
  is '线路号';
comment on column OSECD.OSEBUSRUNDATA.routename
  is '线路名称';
comment on column OSECD.OSEBUSRUNDATA.subrouteid
  is '子线号';
comment on column OSECD.OSEBUSRUNDATA.segmentid
  is '单程ID';
comment on column OSECD.OSEBUSRUNDATA.segmentname
  is '线路单程名称';
comment on column OSECD.OSEBUSRUNDATA.rundirect
  is '运行方向 1上行 2下行 3环形 ';
comment on column OSECD.OSEBUSRUNDATA.productid
  is '产品号';
comment on column OSECD.OSEBUSRUNDATA.busid
  is 'BUSID';
comment on column OSECD.OSEBUSRUNDATA.buscardno
  is '车牌号';
comment on column OSECD.OSEBUSRUNDATA.stationseqnum
  is '顺序号';
comment on column OSECD.OSEBUSRUNDATA.stationno
  is '站点编号';
comment on column OSECD.OSEBUSRUNDATA.stationid
  is '站点ID';
comment on column OSECD.OSEBUSRUNDATA.isarrlft
  is '到离站 1,到;2,离';
comment on column OSECD.OSEBUSRUNDATA.actdatetime
  is '业务时间';
comment on column OSECD.OSEBUSRUNDATA.recdatetime
  is '记录时间';
comment on column OSECD.OSEBUSRUNDATA.writeid
  is '存储服务号';
comment on column OSECD.OSEBUSRUNDATA.isappend
  is '是否补录 0,直接上传;1,GPRS补发;3,场站DSRC补发;5,站台上报到离站;';
comment on column OSECD.OSEBUSRUNDATA.bussid
  is '运营类型';
comment on column OSECD.OSEBUSRUNDATA.longitude
  is '经度';
comment on column OSECD.OSEBUSRUNDATA.latitude
  is '纬度';
comment on column OSECD.OSEBUSRUNDATA.altitude
  is '海拔';
comment on column OSECD.OSEBUSRUNDATA.gpsspeed
  is 'GPS速度';
comment on column OSECD.OSEBUSRUNDATA.sensorspeed
  is '传感器速度';
comment on column OSECD.OSEBUSRUNDATA.rotationangle
  is '方向角';
comment on column OSECD.OSEBUSRUNDATA.stationtype
  is '站点类型';
comment on column OSECD.OSEBUSRUNDATA.ismanulopt
  is '自动报站标志 A,自动;M,手动;';
comment on column OSECD.OSEBUSRUNDATA.packcode
  is '包流水号';
comment on column OSECD.OSEBUSRUNDATA.smcode
  is '短语代码';
comment on column OSECD.OSEBUSRUNDATA.onpnum
  is '上客数';
comment on column OSECD.OSEBUSRUNDATA.offpnum
  is '下客数';
comment on column OSECD.OSEBUSRUNDATA.leftpnum
  is '载客数';
comment on column OSECD.OSEBUSRUNDATA.tptdata
  is '车内温度';
comment on column OSECD.OSEBUSRUNDATA.doorstate
  is '开关门状态';
comment on column OSECD.OSEBUSRUNDATA.peccancytype
  is '违规类型';
comment on column OSECD.OSEBUSRUNDATA.peccancytime
  is '违规时间';
comment on column OSECD.OSEBUSRUNDATA.standardvalue
  is '违规标准 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.OSEBUSRUNDATA.peccancyvalue
  is '违规值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.OSEBUSRUNDATA.gpsmile
  is 'GPS里程';
comment on column OSECD.OSEBUSRUNDATA.reservechar1
  is '字符型预留字段1 - 传感器里程 单位千米; 服务检测违规数据的数据库ID';
comment on column OSECD.OSEBUSRUNDATA.reservechar2
  is '字符型预留字段2 - 剩余油量 单位升';
comment on column OSECD.OSEBUSRUNDATA.reservechar3
  is '字符型预留字段3';
comment on column OSECD.OSEBUSRUNDATA.reservechar4
  is '字符型预留字段4';
comment on column OSECD.OSEBUSRUNDATA.reservechar5
  is '字符型预留字段5';
comment on column OSECD.OSEBUSRUNDATA.reservechar6
  is '字符型预留字段6';
comment on column OSECD.OSEBUSRUNDATA.reservechar7
  is '字符型预留字段7';
comment on column OSECD.OSEBUSRUNDATA.reservechar8
  is '字符型预留字段8';
comment on column OSECD.OSEBUSRUNDATA.reservechar9
  is '字符型预留字段9';
comment on column OSECD.OSEBUSRUNDATA.reservechar10
  is '字符型预留字段10';
comment on column OSECD.OSEBUSRUNDATA.issvrappend
  is '存储服务自动补交标志 - 数据入库失败后,存储服务保存到文件然后再补交 0,非补交(直接入库);1,补交;';
comment on column OSECD.OSEBUSRUNDATA.svrappendtime
  is '存储服务自动补交时间';
comment on column OSECD.OSEBUSRUNDATA.stationname
  is '站点名称(场站名称)';
comment on column OSECD.OSEBUSRUNDATA.equiptno
  is '车载设备号';
comment on column OSECD.OSEBUSRUNDATA.sendcode
  is '平台号';
comment on column OSECD.OSEBUSRUNDATA.upbusid
  is '上传车辆ID';
comment on column OSECD.OSEBUSRUNDATA.uprouteid
  is '上传线路ID';
comment on column OSECD.OSEBUSRUNDATA.upsubrouteid
  is '上传子线ID';
comment on column OSECD.OSEBUSRUNDATA.busselfid
  is '车辆自编号';
create index OSECD.IDX_OSEBUSRUNDATA on OSECD.OSEBUSRUNDATA (ROUTEID, BUSID, BUSCARDNO, ACTDATETIME)
  local;

prompt
prompt Creating table OSEICCONSUME
prompt ===========================
prompt
create table OSECD.OSEICCONSUME
(
  recordid        VARCHAR2(36) not null,
  iccardid        VARCHAR2(36),
  consumedate     DATE,
  consumetype     VARCHAR2(2),
  consumenum      NUMBER,
  actualnum       NUMBER,
  routeid         VARCHAR2(36),
  routename       NVARCHAR2(20),
  busid           VARCHAR2(36),
  buscardno       NVARCHAR2(20),
  stationid       VARCHAR2(36),
  stationname     NVARCHAR2(60),
  downstationid   VARCHAR2(36),
  downstationname NVARCHAR2(60)
)
partition by range (CONSUMEDATE)
(
  partition P_20150501 values less than (TO_DATE(' 2015-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150502 values less than (TO_DATE(' 2015-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150503 values less than (TO_DATE(' 2015-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150504 values less than (TO_DATE(' 2015-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150505 values less than (TO_DATE(' 2015-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150506 values less than (TO_DATE(' 2015-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150507 values less than (TO_DATE(' 2015-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150508 values less than (TO_DATE(' 2015-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150509 values less than (TO_DATE(' 2015-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150510 values less than (TO_DATE(' 2015-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150511 values less than (TO_DATE(' 2015-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150512 values less than (TO_DATE(' 2015-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150513 values less than (TO_DATE(' 2015-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150514 values less than (TO_DATE(' 2015-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150515 values less than (TO_DATE(' 2015-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150516 values less than (TO_DATE(' 2015-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150517 values less than (TO_DATE(' 2015-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150518 values less than (TO_DATE(' 2015-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150519 values less than (TO_DATE(' 2015-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150520 values less than (TO_DATE(' 2015-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150521 values less than (TO_DATE(' 2015-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150522 values less than (TO_DATE(' 2015-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150523 values less than (TO_DATE(' 2015-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150524 values less than (TO_DATE(' 2015-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150525 values less than (TO_DATE(' 2015-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150526 values less than (TO_DATE(' 2015-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150527 values less than (TO_DATE(' 2015-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150528 values less than (TO_DATE(' 2015-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150529 values less than (TO_DATE(' 2015-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150530 values less than (TO_DATE(' 2015-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150531 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150601 values less than (TO_DATE(' 2015-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150602 values less than (TO_DATE(' 2015-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150603 values less than (TO_DATE(' 2015-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150604 values less than (TO_DATE(' 2015-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150605 values less than (TO_DATE(' 2015-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150606 values less than (TO_DATE(' 2015-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150607 values less than (TO_DATE(' 2015-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150608 values less than (TO_DATE(' 2015-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150609 values less than (TO_DATE(' 2015-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150610 values less than (TO_DATE(' 2015-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150611 values less than (TO_DATE(' 2015-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150612 values less than (TO_DATE(' 2015-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150613 values less than (TO_DATE(' 2015-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150614 values less than (TO_DATE(' 2015-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150615 values less than (TO_DATE(' 2015-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150616 values less than (TO_DATE(' 2015-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150617 values less than (TO_DATE(' 2015-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150618 values less than (TO_DATE(' 2015-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150619 values less than (TO_DATE(' 2015-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150620 values less than (TO_DATE(' 2015-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150621 values less than (TO_DATE(' 2015-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150622 values less than (TO_DATE(' 2015-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150623 values less than (TO_DATE(' 2015-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150624 values less than (TO_DATE(' 2015-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150625 values less than (TO_DATE(' 2015-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150626 values less than (TO_DATE(' 2015-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150627 values less than (TO_DATE(' 2015-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150628 values less than (TO_DATE(' 2015-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150629 values less than (TO_DATE(' 2015-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150630 values less than (TO_DATE(' 2015-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150701 values less than (TO_DATE(' 2015-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150702 values less than (TO_DATE(' 2015-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150703 values less than (TO_DATE(' 2015-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150704 values less than (TO_DATE(' 2015-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150705 values less than (TO_DATE(' 2015-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150706 values less than (TO_DATE(' 2015-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150707 values less than (TO_DATE(' 2015-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150708 values less than (TO_DATE(' 2015-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150709 values less than (TO_DATE(' 2015-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150710 values less than (TO_DATE(' 2015-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150711 values less than (TO_DATE(' 2015-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150712 values less than (TO_DATE(' 2015-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150713 values less than (TO_DATE(' 2015-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150714 values less than (TO_DATE(' 2015-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150715 values less than (TO_DATE(' 2015-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150716 values less than (TO_DATE(' 2015-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150717 values less than (TO_DATE(' 2015-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150718 values less than (TO_DATE(' 2015-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150719 values less than (TO_DATE(' 2015-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150720 values less than (TO_DATE(' 2015-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150721 values less than (TO_DATE(' 2015-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150722 values less than (TO_DATE(' 2015-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150723 values less than (TO_DATE(' 2015-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150724 values less than (TO_DATE(' 2015-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150725 values less than (TO_DATE(' 2015-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150726 values less than (TO_DATE(' 2015-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150727 values less than (TO_DATE(' 2015-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150728 values less than (TO_DATE(' 2015-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150729 values less than (TO_DATE(' 2015-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150730 values less than (TO_DATE(' 2015-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150731 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150801 values less than (TO_DATE(' 2015-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150802 values less than (TO_DATE(' 2015-08-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150803 values less than (TO_DATE(' 2015-08-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150804 values less than (TO_DATE(' 2015-08-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150805 values less than (TO_DATE(' 2015-08-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150806 values less than (TO_DATE(' 2015-08-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150807 values less than (TO_DATE(' 2015-08-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150808 values less than (TO_DATE(' 2015-08-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150809 values less than (TO_DATE(' 2015-08-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150810 values less than (TO_DATE(' 2015-08-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150811 values less than (TO_DATE(' 2015-08-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150812 values less than (TO_DATE(' 2015-08-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150813 values less than (TO_DATE(' 2015-08-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150814 values less than (TO_DATE(' 2015-08-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150815 values less than (TO_DATE(' 2015-08-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150816 values less than (TO_DATE(' 2015-08-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150817 values less than (TO_DATE(' 2015-08-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150818 values less than (TO_DATE(' 2015-08-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150819 values less than (TO_DATE(' 2015-08-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150820 values less than (TO_DATE(' 2015-08-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150821 values less than (TO_DATE(' 2015-08-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150822 values less than (TO_DATE(' 2015-08-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150823 values less than (TO_DATE(' 2015-08-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150824 values less than (TO_DATE(' 2015-08-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150825 values less than (TO_DATE(' 2015-08-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150826 values less than (TO_DATE(' 2015-08-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150827 values less than (TO_DATE(' 2015-08-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150828 values less than (TO_DATE(' 2015-08-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150829 values less than (TO_DATE(' 2015-08-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150830 values less than (TO_DATE(' 2015-08-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150831 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150901 values less than (TO_DATE(' 2015-09-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150902 values less than (TO_DATE(' 2015-09-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150903 values less than (TO_DATE(' 2015-09-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150904 values less than (TO_DATE(' 2015-09-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150905 values less than (TO_DATE(' 2015-09-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150906 values less than (TO_DATE(' 2015-09-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150907 values less than (TO_DATE(' 2015-09-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150908 values less than (TO_DATE(' 2015-09-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150909 values less than (TO_DATE(' 2015-09-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150910 values less than (TO_DATE(' 2015-09-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150911 values less than (TO_DATE(' 2015-09-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150912 values less than (TO_DATE(' 2015-09-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150913 values less than (TO_DATE(' 2015-09-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150914 values less than (TO_DATE(' 2015-09-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150915 values less than (TO_DATE(' 2015-09-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150916 values less than (TO_DATE(' 2015-09-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150917 values less than (TO_DATE(' 2015-09-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150918 values less than (TO_DATE(' 2015-09-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150919 values less than (TO_DATE(' 2015-09-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150920 values less than (TO_DATE(' 2015-09-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150921 values less than (TO_DATE(' 2015-09-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150922 values less than (TO_DATE(' 2015-09-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150923 values less than (TO_DATE(' 2015-09-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150924 values less than (TO_DATE(' 2015-09-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150925 values less than (TO_DATE(' 2015-09-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150926 values less than (TO_DATE(' 2015-09-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150927 values less than (TO_DATE(' 2015-09-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150928 values less than (TO_DATE(' 2015-09-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150929 values less than (TO_DATE(' 2015-09-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150930 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151001 values less than (TO_DATE(' 2015-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151002 values less than (TO_DATE(' 2015-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151003 values less than (TO_DATE(' 2015-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151004 values less than (TO_DATE(' 2015-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151005 values less than (TO_DATE(' 2015-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151006 values less than (TO_DATE(' 2015-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151007 values less than (TO_DATE(' 2015-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151008 values less than (TO_DATE(' 2015-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151009 values less than (TO_DATE(' 2015-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151010 values less than (TO_DATE(' 2015-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151011 values less than (TO_DATE(' 2015-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151012 values less than (TO_DATE(' 2015-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151013 values less than (TO_DATE(' 2015-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151014 values less than (TO_DATE(' 2015-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151015 values less than (TO_DATE(' 2015-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151016 values less than (TO_DATE(' 2015-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151017 values less than (TO_DATE(' 2015-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151018 values less than (TO_DATE(' 2015-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151019 values less than (TO_DATE(' 2015-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151020 values less than (TO_DATE(' 2015-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151021 values less than (TO_DATE(' 2015-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151022 values less than (TO_DATE(' 2015-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151023 values less than (TO_DATE(' 2015-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151024 values less than (TO_DATE(' 2015-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151025 values less than (TO_DATE(' 2015-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151026 values less than (TO_DATE(' 2015-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151027 values less than (TO_DATE(' 2015-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151028 values less than (TO_DATE(' 2015-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151029 values less than (TO_DATE(' 2015-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151030 values less than (TO_DATE(' 2015-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151031 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151101 values less than (TO_DATE(' 2015-11-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151102 values less than (TO_DATE(' 2015-11-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151103 values less than (TO_DATE(' 2015-11-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151104 values less than (TO_DATE(' 2015-11-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151105 values less than (TO_DATE(' 2015-11-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151106 values less than (TO_DATE(' 2015-11-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151107 values less than (TO_DATE(' 2015-11-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151108 values less than (TO_DATE(' 2015-11-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151109 values less than (TO_DATE(' 2015-11-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151110 values less than (TO_DATE(' 2015-11-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151111 values less than (TO_DATE(' 2015-11-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151112 values less than (TO_DATE(' 2015-11-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151113 values less than (TO_DATE(' 2015-11-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151114 values less than (TO_DATE(' 2015-11-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151115 values less than (TO_DATE(' 2015-11-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151116 values less than (TO_DATE(' 2015-11-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151117 values less than (TO_DATE(' 2015-11-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151118 values less than (TO_DATE(' 2015-11-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151119 values less than (TO_DATE(' 2015-11-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151120 values less than (TO_DATE(' 2015-11-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151121 values less than (TO_DATE(' 2015-11-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151122 values less than (TO_DATE(' 2015-11-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151123 values less than (TO_DATE(' 2015-11-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151124 values less than (TO_DATE(' 2015-11-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151125 values less than (TO_DATE(' 2015-11-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151126 values less than (TO_DATE(' 2015-11-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151127 values less than (TO_DATE(' 2015-11-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151128 values less than (TO_DATE(' 2015-11-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151129 values less than (TO_DATE(' 2015-11-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151130 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151201 values less than (TO_DATE(' 2015-12-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151202 values less than (TO_DATE(' 2015-12-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151203 values less than (TO_DATE(' 2015-12-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151204 values less than (TO_DATE(' 2015-12-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151205 values less than (TO_DATE(' 2015-12-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151206 values less than (TO_DATE(' 2015-12-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151207 values less than (TO_DATE(' 2015-12-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151208 values less than (TO_DATE(' 2015-12-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151209 values less than (TO_DATE(' 2015-12-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151210 values less than (TO_DATE(' 2015-12-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151211 values less than (TO_DATE(' 2015-12-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151212 values less than (TO_DATE(' 2015-12-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151213 values less than (TO_DATE(' 2015-12-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151214 values less than (TO_DATE(' 2015-12-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151215 values less than (TO_DATE(' 2015-12-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151216 values less than (TO_DATE(' 2015-12-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151217 values less than (TO_DATE(' 2015-12-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151218 values less than (TO_DATE(' 2015-12-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151219 values less than (TO_DATE(' 2015-12-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151220 values less than (TO_DATE(' 2015-12-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151221 values less than (TO_DATE(' 2015-12-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151222 values less than (TO_DATE(' 2015-12-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151223 values less than (TO_DATE(' 2015-12-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151224 values less than (TO_DATE(' 2015-12-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151225 values less than (TO_DATE(' 2015-12-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151226 values less than (TO_DATE(' 2015-12-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151227 values less than (TO_DATE(' 2015-12-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151228 values less than (TO_DATE(' 2015-12-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151229 values less than (TO_DATE(' 2015-12-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151230 values less than (TO_DATE(' 2015-12-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151231 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160101 values less than (TO_DATE(' 2016-01-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160102 values less than (TO_DATE(' 2016-01-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160103 values less than (TO_DATE(' 2016-01-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160104 values less than (TO_DATE(' 2016-01-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160105 values less than (TO_DATE(' 2016-01-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160106 values less than (TO_DATE(' 2016-01-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160107 values less than (TO_DATE(' 2016-01-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160108 values less than (TO_DATE(' 2016-01-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160109 values less than (TO_DATE(' 2016-01-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160110 values less than (TO_DATE(' 2016-01-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160111 values less than (TO_DATE(' 2016-01-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160112 values less than (TO_DATE(' 2016-01-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160113 values less than (TO_DATE(' 2016-01-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160114 values less than (TO_DATE(' 2016-01-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160115 values less than (TO_DATE(' 2016-01-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160116 values less than (TO_DATE(' 2016-01-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160117 values less than (TO_DATE(' 2016-01-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160118 values less than (TO_DATE(' 2016-01-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160119 values less than (TO_DATE(' 2016-01-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160120 values less than (TO_DATE(' 2016-01-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160121 values less than (TO_DATE(' 2016-01-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160122 values less than (TO_DATE(' 2016-01-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160123 values less than (TO_DATE(' 2016-01-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160124 values less than (TO_DATE(' 2016-01-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160125 values less than (TO_DATE(' 2016-01-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160126 values less than (TO_DATE(' 2016-01-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160127 values less than (TO_DATE(' 2016-01-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160128 values less than (TO_DATE(' 2016-01-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160129 values less than (TO_DATE(' 2016-01-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160130 values less than (TO_DATE(' 2016-01-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160131 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160201 values less than (TO_DATE(' 2016-02-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160202 values less than (TO_DATE(' 2016-02-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160203 values less than (TO_DATE(' 2016-02-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160204 values less than (TO_DATE(' 2016-02-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160205 values less than (TO_DATE(' 2016-02-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160206 values less than (TO_DATE(' 2016-02-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160207 values less than (TO_DATE(' 2016-02-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160208 values less than (TO_DATE(' 2016-02-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160209 values less than (TO_DATE(' 2016-02-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160210 values less than (TO_DATE(' 2016-02-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160211 values less than (TO_DATE(' 2016-02-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160212 values less than (TO_DATE(' 2016-02-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160213 values less than (TO_DATE(' 2016-02-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160214 values less than (TO_DATE(' 2016-02-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160215 values less than (TO_DATE(' 2016-02-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160216 values less than (TO_DATE(' 2016-02-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160217 values less than (TO_DATE(' 2016-02-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160218 values less than (TO_DATE(' 2016-02-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160219 values less than (TO_DATE(' 2016-02-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160220 values less than (TO_DATE(' 2016-02-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160221 values less than (TO_DATE(' 2016-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160222 values less than (TO_DATE(' 2016-02-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160223 values less than (TO_DATE(' 2016-02-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160224 values less than (TO_DATE(' 2016-02-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160225 values less than (TO_DATE(' 2016-02-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160226 values less than (TO_DATE(' 2016-02-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160227 values less than (TO_DATE(' 2016-02-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160228 values less than (TO_DATE(' 2016-02-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160229 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160301 values less than (TO_DATE(' 2016-03-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160302 values less than (TO_DATE(' 2016-03-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160303 values less than (TO_DATE(' 2016-03-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160304 values less than (TO_DATE(' 2016-03-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160305 values less than (TO_DATE(' 2016-03-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160306 values less than (TO_DATE(' 2016-03-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160307 values less than (TO_DATE(' 2016-03-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160308 values less than (TO_DATE(' 2016-03-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160309 values less than (TO_DATE(' 2016-03-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160310 values less than (TO_DATE(' 2016-03-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160311 values less than (TO_DATE(' 2016-03-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160312 values less than (TO_DATE(' 2016-03-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160313 values less than (TO_DATE(' 2016-03-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160314 values less than (TO_DATE(' 2016-03-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160315 values less than (TO_DATE(' 2016-03-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160316 values less than (TO_DATE(' 2016-03-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160317 values less than (TO_DATE(' 2016-03-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160318 values less than (TO_DATE(' 2016-03-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160319 values less than (TO_DATE(' 2016-03-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160320 values less than (TO_DATE(' 2016-03-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160321 values less than (TO_DATE(' 2016-03-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160322 values less than (TO_DATE(' 2016-03-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160323 values less than (TO_DATE(' 2016-03-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160324 values less than (TO_DATE(' 2016-03-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160325 values less than (TO_DATE(' 2016-03-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160326 values less than (TO_DATE(' 2016-03-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160327 values less than (TO_DATE(' 2016-03-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160328 values less than (TO_DATE(' 2016-03-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160329 values less than (TO_DATE(' 2016-03-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160330 values less than (TO_DATE(' 2016-03-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160331 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160401 values less than (TO_DATE(' 2016-04-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160402 values less than (TO_DATE(' 2016-04-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160403 values less than (TO_DATE(' 2016-04-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160404 values less than (TO_DATE(' 2016-04-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160405 values less than (TO_DATE(' 2016-04-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160406 values less than (TO_DATE(' 2016-04-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160407 values less than (TO_DATE(' 2016-04-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160408 values less than (TO_DATE(' 2016-04-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160409 values less than (TO_DATE(' 2016-04-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160410 values less than (TO_DATE(' 2016-04-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160411 values less than (TO_DATE(' 2016-04-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160412 values less than (TO_DATE(' 2016-04-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160413 values less than (TO_DATE(' 2016-04-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160414 values less than (TO_DATE(' 2016-04-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160415 values less than (TO_DATE(' 2016-04-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160416 values less than (TO_DATE(' 2016-04-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160417 values less than (TO_DATE(' 2016-04-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160418 values less than (TO_DATE(' 2016-04-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160419 values less than (TO_DATE(' 2016-04-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160420 values less than (TO_DATE(' 2016-04-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160421 values less than (TO_DATE(' 2016-04-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160422 values less than (TO_DATE(' 2016-04-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160423 values less than (TO_DATE(' 2016-04-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160424 values less than (TO_DATE(' 2016-04-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160425 values less than (TO_DATE(' 2016-04-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160426 values less than (TO_DATE(' 2016-04-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160427 values less than (TO_DATE(' 2016-04-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160428 values less than (TO_DATE(' 2016-04-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160429 values less than (TO_DATE(' 2016-04-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160430 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160501 values less than (TO_DATE(' 2016-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160502 values less than (TO_DATE(' 2016-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160503 values less than (TO_DATE(' 2016-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160504 values less than (TO_DATE(' 2016-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160505 values less than (TO_DATE(' 2016-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160506 values less than (TO_DATE(' 2016-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160507 values less than (TO_DATE(' 2016-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160508 values less than (TO_DATE(' 2016-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160509 values less than (TO_DATE(' 2016-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160510 values less than (TO_DATE(' 2016-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160511 values less than (TO_DATE(' 2016-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160512 values less than (TO_DATE(' 2016-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160513 values less than (TO_DATE(' 2016-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160514 values less than (TO_DATE(' 2016-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160515 values less than (TO_DATE(' 2016-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160516 values less than (TO_DATE(' 2016-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160517 values less than (TO_DATE(' 2016-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160518 values less than (TO_DATE(' 2016-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160519 values less than (TO_DATE(' 2016-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160520 values less than (TO_DATE(' 2016-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160521 values less than (TO_DATE(' 2016-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160522 values less than (TO_DATE(' 2016-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160523 values less than (TO_DATE(' 2016-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160524 values less than (TO_DATE(' 2016-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160525 values less than (TO_DATE(' 2016-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160526 values less than (TO_DATE(' 2016-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160527 values less than (TO_DATE(' 2016-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160528 values less than (TO_DATE(' 2016-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160529 values less than (TO_DATE(' 2016-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160530 values less than (TO_DATE(' 2016-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160531 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160601 values less than (TO_DATE(' 2016-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160602 values less than (TO_DATE(' 2016-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160603 values less than (TO_DATE(' 2016-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160604 values less than (TO_DATE(' 2016-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160605 values less than (TO_DATE(' 2016-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160606 values less than (TO_DATE(' 2016-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160607 values less than (TO_DATE(' 2016-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160608 values less than (TO_DATE(' 2016-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160609 values less than (TO_DATE(' 2016-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160610 values less than (TO_DATE(' 2016-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160611 values less than (TO_DATE(' 2016-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160612 values less than (TO_DATE(' 2016-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160613 values less than (TO_DATE(' 2016-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160614 values less than (TO_DATE(' 2016-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160615 values less than (TO_DATE(' 2016-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160616 values less than (TO_DATE(' 2016-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160617 values less than (TO_DATE(' 2016-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160618 values less than (TO_DATE(' 2016-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160619 values less than (TO_DATE(' 2016-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160620 values less than (TO_DATE(' 2016-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160621 values less than (TO_DATE(' 2016-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160622 values less than (TO_DATE(' 2016-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160623 values less than (TO_DATE(' 2016-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160624 values less than (TO_DATE(' 2016-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160625 values less than (TO_DATE(' 2016-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160626 values less than (TO_DATE(' 2016-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160627 values less than (TO_DATE(' 2016-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160628 values less than (TO_DATE(' 2016-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160629 values less than (TO_DATE(' 2016-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160630 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160701 values less than (TO_DATE(' 2016-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160702 values less than (TO_DATE(' 2016-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160703 values less than (TO_DATE(' 2016-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160704 values less than (TO_DATE(' 2016-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160705 values less than (TO_DATE(' 2016-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160706 values less than (TO_DATE(' 2016-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160707 values less than (TO_DATE(' 2016-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160708 values less than (TO_DATE(' 2016-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160709 values less than (TO_DATE(' 2016-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160710 values less than (TO_DATE(' 2016-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160711 values less than (TO_DATE(' 2016-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160712 values less than (TO_DATE(' 2016-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160713 values less than (TO_DATE(' 2016-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160714 values less than (TO_DATE(' 2016-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160715 values less than (TO_DATE(' 2016-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160716 values less than (TO_DATE(' 2016-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160717 values less than (TO_DATE(' 2016-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160718 values less than (TO_DATE(' 2016-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160719 values less than (TO_DATE(' 2016-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160720 values less than (TO_DATE(' 2016-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160721 values less than (TO_DATE(' 2016-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160722 values less than (TO_DATE(' 2016-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160723 values less than (TO_DATE(' 2016-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160724 values less than (TO_DATE(' 2016-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160725 values less than (TO_DATE(' 2016-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160726 values less than (TO_DATE(' 2016-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160727 values less than (TO_DATE(' 2016-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160728 values less than (TO_DATE(' 2016-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160729 values less than (TO_DATE(' 2016-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160730 values less than (TO_DATE(' 2016-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160731 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161001 values less than (TO_DATE(' 2016-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161002 values less than (TO_DATE(' 2016-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161003 values less than (TO_DATE(' 2016-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161004 values less than (TO_DATE(' 2016-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161005 values less than (TO_DATE(' 2016-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161006 values less than (TO_DATE(' 2016-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161007 values less than (TO_DATE(' 2016-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161008 values less than (TO_DATE(' 2016-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161009 values less than (TO_DATE(' 2016-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161010 values less than (TO_DATE(' 2016-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161011 values less than (TO_DATE(' 2016-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161012 values less than (TO_DATE(' 2016-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161013 values less than (TO_DATE(' 2016-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161014 values less than (TO_DATE(' 2016-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161015 values less than (TO_DATE(' 2016-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161016 values less than (TO_DATE(' 2016-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161017 values less than (TO_DATE(' 2016-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161018 values less than (TO_DATE(' 2016-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161019 values less than (TO_DATE(' 2016-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161020 values less than (TO_DATE(' 2016-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161021 values less than (TO_DATE(' 2016-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161022 values less than (TO_DATE(' 2016-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161023 values less than (TO_DATE(' 2016-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161024 values less than (TO_DATE(' 2016-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161025 values less than (TO_DATE(' 2016-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161026 values less than (TO_DATE(' 2016-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161027 values less than (TO_DATE(' 2016-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161028 values less than (TO_DATE(' 2016-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161029 values less than (TO_DATE(' 2016-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161030 values less than (TO_DATE(' 2016-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161031 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.OSEICCONSUME
  is 'IC卡刷卡消费记录信息表（行业监管系统表）';
comment on column OSECD.OSEICCONSUME.recordid
  is '记录唯一编号';
comment on column OSECD.OSEICCONSUME.iccardid
  is 'IC卡编号';
comment on column OSECD.OSEICCONSUME.consumedate
  is '消费时间';
comment on column OSECD.OSEICCONSUME.consumetype
  is '消费类型（卡类型）';
comment on column OSECD.OSEICCONSUME.consumenum
  is '消费金额';
comment on column OSECD.OSEICCONSUME.actualnum
  is '实扣金额';
comment on column OSECD.OSEICCONSUME.routeid
  is '线路编号';
comment on column OSECD.OSEICCONSUME.routename
  is '线路名称';
comment on column OSECD.OSEICCONSUME.busid
  is '车辆编号';
comment on column OSECD.OSEICCONSUME.buscardno
  is '车牌号';
comment on column OSECD.OSEICCONSUME.stationid
  is '站点编号（上车站）';
comment on column OSECD.OSEICCONSUME.stationname
  is '站点名称（上车站）';
comment on column OSECD.OSEICCONSUME.downstationid
  is '站点编号（下车站）';
comment on column OSECD.OSEICCONSUME.downstationname
  is '站点名称（下车站）';
create index OSECD.IX_OSEIC on OSECD.OSEICCONSUME (CONSUMEDATE)
  local;
alter table OSECD.OSEICCONSUME
  add constraint PK_OSEIC primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OSEICCONSUMETMP
prompt ==============================
prompt
create table OSECD.OSEICCONSUMETMP
(
  recordid        VARCHAR2(36) not null,
  iccardid        VARCHAR2(36),
  consumedate     DATE,
  consumetype     VARCHAR2(2),
  consumenum      NUMBER,
  actualnum       NUMBER,
  routeid         VARCHAR2(36),
  routename       NVARCHAR2(20),
  busid           VARCHAR2(36),
  buscardid       NVARCHAR2(20),
  stationid       VARCHAR2(36),
  stationname     NVARCHAR2(60),
  downstationid   VARCHAR2(36),
  downstationname NVARCHAR2(60),
  downconsumedate DATE
)
partition by range (CONSUMEDATE)
(
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.OSEICCONSUMETMP
  is 'IC卡刷卡消费记录信息表（行业监管系统表）';
comment on column OSECD.OSEICCONSUMETMP.recordid
  is '记录唯一编号';
comment on column OSECD.OSEICCONSUMETMP.iccardid
  is 'IC卡编号';
comment on column OSECD.OSEICCONSUMETMP.consumedate
  is '消费时间';
comment on column OSECD.OSEICCONSUMETMP.consumetype
  is '消费类型（卡类型）';
comment on column OSECD.OSEICCONSUMETMP.consumenum
  is '消费金额';
comment on column OSECD.OSEICCONSUMETMP.actualnum
  is '实扣金额';
comment on column OSECD.OSEICCONSUMETMP.routeid
  is '线路编号';
comment on column OSECD.OSEICCONSUMETMP.routename
  is '线路名称';
comment on column OSECD.OSEICCONSUMETMP.busid
  is '车辆编号';
comment on column OSECD.OSEICCONSUMETMP.buscardid
  is '车牌号';
comment on column OSECD.OSEICCONSUMETMP.stationid
  is '站点编号（上车站）';
comment on column OSECD.OSEICCONSUMETMP.stationname
  is '站点名称（上车站）';
comment on column OSECD.OSEICCONSUMETMP.downstationid
  is '站点编号（下车站）';
comment on column OSECD.OSEICCONSUMETMP.downstationname
  is '站点名称（下车站）';
comment on column OSECD.OSEICCONSUMETMP.downconsumedate
  is '下车时间';
create index OSECD.IX_OSEIC1 on OSECD.OSEICCONSUMETMP (CONSUMEDATE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.OSEICCONSUMETMP
  add constraint PK_OSEIC1 primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OSEPECCANCYLD
prompt ============================
prompt
create table OSECD.OSEPECCANCYLD
(
  busrdid           VARCHAR2(36) not null,
  datatype          VARCHAR2(3) default 55 not null,
  routeid           VARCHAR2(36) not null,
  subrouteid        VARCHAR2(36),
  actdatetime       DATE not null,
  recdatetime       DATE default SYSDATE not null,
  longitude         NUMBER(9,6),
  latitude          NUMBER(9,6),
  gpsspeed          NUMBER(6,2),
  peccancytype      VARCHAR2(20),
  peccancybegintime DATE,
  standardvalue     NUMBER,
  peccancyvalue     NUMBER,
  busid             VARCHAR2(36),
  buscardno         VARCHAR2(10),
  areaid            VARCHAR2(36),
  peccancyendtime   DATE,
  areaname          NVARCHAR2(100),
  rundirection      VARCHAR2(3),
  standardvaluemax  NUMBER,
  peccancyinfo      VARCHAR2(500),
  peccancyname      VARCHAR2(100),
  stationid         VARCHAR2(20),
  stationname       VARCHAR2(100),
  routename         VARCHAR2(50),
  actualrouteid     VARCHAR2(36)
)
partition by range (ACTDATETIME)
(
  partition P_201501 values less than (TO_DATE(' 2015-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201502 values less than (TO_DATE(' 2015-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201503 values less than (TO_DATE(' 2015-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201504 values less than (TO_DATE(' 2015-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201505 values less than (TO_DATE(' 2015-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201510 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201511 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201512 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201601 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201603 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201604 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201605 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201606 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201607 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201608 values less than (TO_DATE(' 2016-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_201610 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_ARRLFT
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.OSEPECCANCYLD
  is '车辆违规表（根据GPS计算）';
comment on column OSECD.OSEPECCANCYLD.busrdid
  is 'ID';
comment on column OSECD.OSEPECCANCYLD.datatype
  is '数据类型,默认55';
comment on column OSECD.OSEPECCANCYLD.routeid
  is '线路ID';
comment on column OSECD.OSEPECCANCYLD.subrouteid
  is '子线路ID';
comment on column OSECD.OSEPECCANCYLD.actdatetime
  is '业务时间';
comment on column OSECD.OSEPECCANCYLD.recdatetime
  is '记录时间';
comment on column OSECD.OSEPECCANCYLD.longitude
  is '经度';
comment on column OSECD.OSEPECCANCYLD.latitude
  is '纬度';
comment on column OSECD.OSEPECCANCYLD.gpsspeed
  is '速度';
comment on column OSECD.OSEPECCANCYLD.peccancytype
  is '违规类型';
comment on column OSECD.OSEPECCANCYLD.peccancybegintime
  is '违规开始时间';
comment on column OSECD.OSEPECCANCYLD.standardvalue
  is '违规标准值(最小值)';
comment on column OSECD.OSEPECCANCYLD.peccancyvalue
  is '违规值';
comment on column OSECD.OSEPECCANCYLD.busid
  is '车辆编号';
comment on column OSECD.OSEPECCANCYLD.buscardno
  is '车牌号';
comment on column OSECD.OSEPECCANCYLD.areaid
  is '违规区域编号';
comment on column OSECD.OSEPECCANCYLD.peccancyendtime
  is '违规结束时间';
comment on column OSECD.OSEPECCANCYLD.areaname
  is '违规区域名称';
comment on column OSECD.OSEPECCANCYLD.rundirection
  is '运行方向';
comment on column OSECD.OSEPECCANCYLD.standardvaluemax
  is '违规标准值(最大值)';
comment on column OSECD.OSEPECCANCYLD.peccancyinfo
  is '违规说明';
comment on column OSECD.OSEPECCANCYLD.peccancyname
  is '违规类型名称';
comment on column OSECD.OSEPECCANCYLD.stationid
  is '站点ID';
comment on column OSECD.OSEPECCANCYLD.stationname
  is '站点名称';
comment on column OSECD.OSEPECCANCYLD.routename
  is '线路名称';
comment on column OSECD.OSEPECCANCYLD.actualrouteid
  is '实际运行线路（越线时使用）';
create index OSECD.IX_OSEPECCANCY on OSECD.OSEPECCANCYLD (ACTDATETIME, ROUTEID, PECCANCYTYPE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OSEROUTERELATESTATION
prompt ====================================
prompt
create table OSECD.OSEROUTERELATESTATION
(
  recid           NUMBER,
  routeid         VARCHAR2(32),
  stationid       VARCHAR2(20),
  relatestationid VARCHAR2(20)
)
tablespace TBS_OSECD_JZ
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.OSEROUTERELATESTATION
  is '线路中关联站点';
comment on column OSECD.OSEROUTERELATESTATION.recid
  is 'ID';
comment on column OSECD.OSEROUTERELATESTATION.routeid
  is '线路ID';
comment on column OSECD.OSEROUTERELATESTATION.stationid
  is '站点ID';
comment on column OSECD.OSEROUTERELATESTATION.relatestationid
  is '关联站点ID';
create unique index OSECD.IDX_RELATESTATION on OSECD.OSEROUTERELATESTATION (ROUTEID, STATIONID)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table OSE_BUSRUNDATALD
prompt ===============================
prompt
create table OSECD.OSE_BUSRUNDATALD
(
  busrdid       VARCHAR2(36) not null,
  datatype      VARCHAR2(3) not null,
  routeid       VARCHAR2(36) not null,
  routename     NVARCHAR2(20),
  subrouteid    VARCHAR2(36),
  subroutename  NVARCHAR2(20),
  segmentid     VARCHAR2(36),
  segmentname   NVARCHAR2(20),
  busid         VARCHAR2(36) not null,
  buscardno     NVARCHAR2(20),
  productid     NUMBER(10),
  driverid      VARCHAR2(36),
  stationseqnum NUMBER(3),
  stationid     VARCHAR2(36),
  stationno     NVARCHAR2(20),
  stationtype   VARCHAR2(2),
  stationname   NVARCHAR2(50),
  isarrlft      VARCHAR2(2),
  rundirection  VARCHAR2(2),
  actdatetime   DATE not null,
  recdatetime   DATE default SYSDATE,
  writeid       NUMBER(8),
  isappend      VARCHAR2(2),
  bussid        VARCHAR2(3),
  longitude     NUMBER(9,6),
  latitude      NUMBER(9,6),
  altitude      NUMBER(9,6),
  gpsspeed      NUMBER(6,2),
  sensorspeed   NUMBER(6,2),
  rotationangle NUMBER(6,2),
  ismanulopt    VARCHAR2(2),
  onpnum        NUMBER(4),
  offpnum       NUMBER(4),
  leftpnum      NUMBER(4),
  tptdata       NUMBER(4,2),
  doorstate     VARCHAR2(2),
  peccancytype  VARCHAR2(20),
  peccancytime  DATE,
  standardvalue NUMBER,
  peccancyvalue NUMBER,
  gpsmile       NUMBER,
  checked       VARCHAR2(2),
  assedate      DATE,
  assessor      VARCHAR2(36),
  busrrid       VARCHAR2(36),
  reservechar1  VARCHAR2(50),
  reservechar2  VARCHAR2(50),
  reservechar3  VARCHAR2(50),
  reservechar4  VARCHAR2(50),
  reservechar5  VARCHAR2(50),
  reservechar6  VARCHAR2(50),
  reservechar7  VARCHAR2(50),
  reservechar8  VARCHAR2(50),
  reservechar9  VARCHAR2(50),
  reservechar10 VARCHAR2(50)
)
partition by range (ACTDATETIME)
(
  partition P_20150501 values less than (TO_DATE(' 2015-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150502 values less than (TO_DATE(' 2015-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_BSVC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.OSE_BUSRUNDATALD
  is '车辆GPS数据信息表（行业监管系统表）';
comment on column OSECD.OSE_BUSRUNDATALD.busrdid
  is '记录编号';
comment on column OSECD.OSE_BUSRUNDATALD.datatype
  is '数据类型，3,GPS;4,到离站;55,违规;47,DSRC检到离场;71,GPS到离场;53,开关门';
comment on column OSECD.OSE_BUSRUNDATALD.routeid
  is '线路编号';
comment on column OSECD.OSE_BUSRUNDATALD.routename
  is '线路名称';
comment on column OSECD.OSE_BUSRUNDATALD.subrouteid
  is '子线编号';
comment on column OSECD.OSE_BUSRUNDATALD.subroutename
  is '子线名称';
comment on column OSECD.OSE_BUSRUNDATALD.segmentid
  is '单程编号';
comment on column OSECD.OSE_BUSRUNDATALD.segmentname
  is '单程名称';
comment on column OSECD.OSE_BUSRUNDATALD.busid
  is '车辆编号';
comment on column OSECD.OSE_BUSRUNDATALD.buscardno
  is '车牌号';
comment on column OSECD.OSE_BUSRUNDATALD.productid
  is '车载机编号';
comment on column OSECD.OSE_BUSRUNDATALD.driverid
  is '驾驶员编号';
comment on column OSECD.OSE_BUSRUNDATALD.stationseqnum
  is '站点双程顺序号';
comment on column OSECD.OSE_BUSRUNDATALD.stationid
  is '站点编号';
comment on column OSECD.OSE_BUSRUNDATALD.stationno
  is '站点唯一编号';
comment on column OSECD.OSE_BUSRUNDATALD.stationtype
  is '站点类型';
comment on column OSECD.OSE_BUSRUNDATALD.stationname
  is '站点名称';
comment on column OSECD.OSE_BUSRUNDATALD.isarrlft
  is '到离站 1,到;2,离';
comment on column OSECD.OSE_BUSRUNDATALD.rundirection
  is '运行方向';
comment on column OSECD.OSE_BUSRUNDATALD.actdatetime
  is '业务时间';
comment on column OSECD.OSE_BUSRUNDATALD.recdatetime
  is '记录时间';
comment on column OSECD.OSE_BUSRUNDATALD.writeid
  is '存储服务号';
comment on column OSECD.OSE_BUSRUNDATALD.isappend
  is '是否补录 0,直接上传;1,GPRS补发;3,场站DSRC补发;5,站台上报到离站;8,第二链路实时上传;9,第二链路补发上传';
comment on column OSECD.OSE_BUSRUNDATALD.bussid
  is '运营类型';
comment on column OSECD.OSE_BUSRUNDATALD.longitude
  is '经度';
comment on column OSECD.OSE_BUSRUNDATALD.latitude
  is '纬度';
comment on column OSECD.OSE_BUSRUNDATALD.altitude
  is '海拔';
comment on column OSECD.OSE_BUSRUNDATALD.gpsspeed
  is 'GPS速度';
comment on column OSECD.OSE_BUSRUNDATALD.sensorspeed
  is '传感器速度';
comment on column OSECD.OSE_BUSRUNDATALD.rotationangle
  is '方向角';
comment on column OSECD.OSE_BUSRUNDATALD.ismanulopt
  is '自动报站标志 A,自动;M,手动;';
comment on column OSECD.OSE_BUSRUNDATALD.onpnum
  is '上客数';
comment on column OSECD.OSE_BUSRUNDATALD.offpnum
  is '下客数';
comment on column OSECD.OSE_BUSRUNDATALD.leftpnum
  is '载客数';
comment on column OSECD.OSE_BUSRUNDATALD.tptdata
  is '车内温度';
comment on column OSECD.OSE_BUSRUNDATALD.doorstate
  is '开关门状态';
comment on column OSECD.OSE_BUSRUNDATALD.peccancytype
  is '违规类型';
comment on column OSECD.OSE_BUSRUNDATALD.peccancytime
  is '违规时间';
comment on column OSECD.OSE_BUSRUNDATALD.standardvalue
  is '违规标准 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.OSE_BUSRUNDATALD.peccancyvalue
  is '违规值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.OSE_BUSRUNDATALD.gpsmile
  is 'GPS里程';
comment on column OSECD.OSE_BUSRUNDATALD.checked
  is '是否免核';
comment on column OSECD.OSE_BUSRUNDATALD.assedate
  is '免核日期';
comment on column OSECD.OSE_BUSRUNDATALD.assessor
  is '免核人';
comment on column OSECD.OSE_BUSRUNDATALD.busrrid
  is '车次序号';
comment on column OSECD.OSE_BUSRUNDATALD.reservechar1
  is '字符型预留字段1';
comment on column OSECD.OSE_BUSRUNDATALD.reservechar2
  is '字符型预留字段2';
comment on column OSECD.OSE_BUSRUNDATALD.reservechar3
  is '字符型预留字段3';
comment on column OSECD.OSE_BUSRUNDATALD.reservechar4
  is '字符型预留字段4';
comment on column OSECD.OSE_BUSRUNDATALD.reservechar5
  is '字符型预留字段5';
comment on column OSECD.OSE_BUSRUNDATALD.reservechar6
  is '字符型预留字段6';
comment on column OSECD.OSE_BUSRUNDATALD.reservechar7
  is '字符型预留字段7';
comment on column OSECD.OSE_BUSRUNDATALD.reservechar8
  is '字符型预留字段8';
comment on column OSECD.OSE_BUSRUNDATALD.reservechar9
  is '字符型预留字段9';
comment on column OSECD.OSE_BUSRUNDATALD.reservechar10
  is '字符型预留字段10';
create index OSECD.IX_RUNDATA on OSECD.OSE_BUSRUNDATALD (ACTDATETIME, DATATYPE, ROUTEID, BUSID)
  local;

prompt
prompt Creating table PKG_GETSEQUENCE_LOGS
prompt ===================================
prompt
create table OSECD.PKG_GETSEQUENCE_LOGS
(
  logid       NUMBER not null,
  module      VARCHAR2(20) not null,
  submodule   VARCHAR2(20),
  loglevel    NUMBER(1) not null,
  context     VARCHAR2(200) not null,
  actdatetime DATE not null,
  recdatetime DATE default sysdate not null,
  logtype     NUMBER(2) default 0 not null,
  routeid     NUMBER(8),
  actendtime  DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.PKG_GETSEQUENCE_LOGS.logid
  is '主键';
comment on column OSECD.PKG_GETSEQUENCE_LOGS.module
  is '模块名   包名';
comment on column OSECD.PKG_GETSEQUENCE_LOGS.submodule
  is '子模块名 函数名';
comment on column OSECD.PKG_GETSEQUENCE_LOGS.loglevel
  is '日志等级 1-DEBUG；2-INFO；3-ERROR';
comment on column OSECD.PKG_GETSEQUENCE_LOGS.context
  is '日志内容';
comment on column OSECD.PKG_GETSEQUENCE_LOGS.actdatetime
  is '发生时间';
comment on column OSECD.PKG_GETSEQUENCE_LOGS.recdatetime
  is '记录时间';
comment on column OSECD.PKG_GETSEQUENCE_LOGS.logtype
  is '日志类型 0-一般信息；1-统计信息';
comment on column OSECD.PKG_GETSEQUENCE_LOGS.routeid
  is '线路ID';
comment on column OSECD.PKG_GETSEQUENCE_LOGS.actendtime
  is '结束时间';

prompt
prompt Creating table ROUTEMIL1
prompt ========================
prompt
create table OSECD.ROUTEMIL1
(
  row_num  NUMBER,
  route_id VARCHAR2(30),
  stop_id  VARCHAR2(30),
  gpsid    VARCHAR2(30),
  milepost NUMBER
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ROUTE_ICNUM_5152
prompt ===============================
prompt
create table OSECD.ROUTE_ICNUM_5152
(
  routeid   VARCHAR2(36),
  routename NVARCHAR2(20),
  starttime NUMBER,
  endtime   NUMBER,
  icnum     NUMBER,
  jzdate    DATE
)
tablespace TBS_OSECD_IC
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SEC_ROUTELIST
prompt ============================
prompt
create table OSECD.SEC_ROUTELIST
(
  routeid   VARCHAR2(36) not null,
  routename NVARCHAR2(20)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SEC_ROUTELIST
  is '二环路线路';
comment on column OSECD.SEC_ROUTELIST.routeid
  is '线路编号';
comment on column OSECD.SEC_ROUTELIST.routename
  is '线路名称';

prompt
prompt Creating table SEC_STATIONLIST
prompt ==============================
prompt
create table OSECD.SEC_STATIONLIST
(
  stationno   NVARCHAR2(8) not null,
  stationname NVARCHAR2(20),
  stationid   VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SEC_STATIONLIST
  is '二环路站点列表';
comment on column OSECD.SEC_STATIONLIST.stationno
  is '站点唯一编号';
comment on column OSECD.SEC_STATIONLIST.stationname
  is '站点名称';
comment on column OSECD.SEC_STATIONLIST.stationid
  is '站点编号';

prompt
prompt Creating table SERVERSTATUS
prompt ===========================
prompt
create table OSECD.SERVERSTATUS
(
  serverstatusid     NUMBER(16) not null,
  servertype         VARCHAR2(3) not null,
  serverid           NUMBER(10) not null,
  serverip           VARCHAR2(80),
  lastupdate         DATE not null,
  servercpuusage     VARCHAR2(3),
  servicecpuusage    VARCHAR2(3),
  servermemtotal     NUMBER(6),
  servermemusage     NUMBER(6),
  servicememusage    NUMBER(6),
  serverhostname     VARCHAR2(100),
  serverprocesscount NUMBER(6)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.SERVERSTATUS.serverstatusid
  is '主键';
comment on column OSECD.SERVERSTATUS.servertype
  is '服务类型: 10,服务;16,存储服务;17,升级服务;18,乘客信息服务(电子站牌、中心发车屏服务);19,数据转发服务; 20,异常检测服务';
comment on column OSECD.SERVERSTATUS.serverid
  is '服务ID';
comment on column OSECD.SERVERSTATUS.serverip
  is '服务器的IP地址，多个以","分割';
comment on column OSECD.SERVERSTATUS.lastupdate
  is '服务状态更新时间';
comment on column OSECD.SERVERSTATUS.servercpuusage
  is '服务器整体CPU使用率:  1-100';
comment on column OSECD.SERVERSTATUS.servicecpuusage
  is '服务程序CPU使用率:  1-100';
comment on column OSECD.SERVERSTATUS.servermemtotal
  is '服务器内存总量: 单位 MB';
comment on column OSECD.SERVERSTATUS.servermemusage
  is '服务器内存使用量: 单位 MB';
comment on column OSECD.SERVERSTATUS.servicememusage
  is '服务程序内存占用: 单位 MB';
comment on column OSECD.SERVERSTATUS.serverhostname
  is '服务器的主机名';
create index OSECD.INDEX_SERVERSTATUS on OSECD.SERVERSTATUS (LASTUPDATE, SERVERID, SERVERTYPE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SIMBSVCBUSRUNDATALD5
prompt ===================================
prompt
create table OSECD.SIMBSVCBUSRUNDATALD5
(
  busrdid       NUMBER(16) not null,
  datatype      VARCHAR2(3) not null,
  routeid       NUMBER(8) not null,
  subrouteid    NUMBER(8),
  productid     NUMBER(10) not null,
  stationseqnum NUMBER(3),
  stationnum    VARCHAR2(10),
  isarrlft      CHAR(1),
  actdatetime   DATE not null,
  recdatetime   DATE default sysdate not null,
  writeid       NUMBER(8) not null,
  isappend      CHAR(1),
  bussid        VARCHAR2(3),
  longitude     NUMBER(9,6),
  latitude      NUMBER(9,6),
  altitude      NUMBER(9,6),
  gpsspeed      NUMBER(6,2),
  sensorspeed   NUMBER(6,2),
  rotationangle NUMBER(6,2),
  stationtype   VARCHAR2(2),
  ismanulopt    CHAR(1),
  packcode      NUMBER(3),
  smcode        NUMBER(4),
  onpnum        NUMBER(4),
  offpnum       NUMBER(4),
  leftpnum      NUMBER(4),
  tptdata       NUMBER(4,2),
  doorstate     VARCHAR2(3),
  peccancytype  VARCHAR2(20),
  peccancytime  DATE,
  standardvalue NUMBER,
  peccancyvalue NUMBER,
  gpsmile       NUMBER(13,2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.SIMBSVCBUSRUNDATALD5.busrdid
  is '唯一号';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.datatype
  is '数据类型 3,GPS;4,到离站;55,违规;47,DSRC检到离场;71,GPS到离场;53,开关门;';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.routeid
  is '线路号';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.subrouteid
  is '子线号';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.productid
  is '车载机编号';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.stationseqnum
  is '顺序号';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.stationnum
  is '站点统一编号';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.isarrlft
  is '到离站 1,到;2,离';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.actdatetime
  is '业务时间';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.recdatetime
  is '记录时间';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.writeid
  is '存储服务号';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.isappend
  is '是否补录 0,直接上传;1,GPRS补发;3,场站DSRC补发;5,站台上报到离站;';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.bussid
  is '运营类型';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.longitude
  is '经度';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.latitude
  is '纬度';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.altitude
  is '海拔';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.gpsspeed
  is 'GPS速度';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.sensorspeed
  is '传感器速度';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.rotationangle
  is '方向角';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.stationtype
  is '站点类型';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.ismanulopt
  is '自动报站标志 A,自动;M,手动;';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.packcode
  is '包流水号';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.smcode
  is '短语代码';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.onpnum
  is '上客数';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.offpnum
  is '下客数';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.leftpnum
  is '载客数';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.tptdata
  is '车内温度';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.doorstate
  is '开关门状态';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.peccancytype
  is '违规类型';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.peccancytime
  is '违规时间';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.standardvalue
  is '违规标准 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.peccancyvalue
  is '违规值 超速(米/秒);准点(分钟);滞越站(秒);温度(C)';
comment on column OSECD.SIMBSVCBUSRUNDATALD5.gpsmile
  is 'GPS里程';

prompt
prompt Creating table SPEEDTEST
prompt ========================
prompt
create table OSECD.SPEEDTEST
(
  id             VARCHAR2(36),
  segmentid      VARCHAR2(36),
  startstationid VARCHAR2(36),
  startstationno VARCHAR2(36),
  endstationid   VARCHAR2(36),
  endstationno   VARCHAR2(36),
  shape          VARCHAR2(2000),
  speed          NUMBER
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table STATIONCONSUMETEMP
prompt =================================
prompt
create table OSECD.STATIONCONSUMETEMP
(
  stationno NVARCHAR2(8),
  jzdate    DATE,
  iccardnum NUMBER,
  arrtime   DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYSCONFIG
prompt ========================
prompt
create table OSECD.SYSCONFIG
(
  configid    VARCHAR2(36) not null,
  configtype  NVARCHAR2(100) not null,
  configvalue NVARCHAR2(200),
  userid      VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYSCONFIG
  is '配置参数表';
comment on column OSECD.SYSCONFIG.configid
  is '系统配置项编号';
comment on column OSECD.SYSCONFIG.configtype
  is '系统配置项类别';
comment on column OSECD.SYSCONFIG.configvalue
  is '系统配置项值';
comment on column OSECD.SYSCONFIG.userid
  is '用户编号';
alter table OSECD.SYSCONFIG
  add constraint PK_CONFIGID primary key (CONFIGID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.SYSCONFIG
  add constraint UN_YSCONFIG unique (CONFIGTYPE, USERID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYS_BUSLOGIN
prompt ===========================
prompt
create table OSECD.SYS_BUSLOGIN
(
  logid              VARCHAR2(36),
  busno              VARCHAR2(20),
  logintime          DATE,
  logouttime         DATE,
  inhours            NUMBER(10,4),
  packagecount       NUMBER,
  gpscount           NUMBER,
  gpserrorcount      NUMBER,
  arrlftstationcount NUMBER,
  arrlftsitecount    NUMBER,
  violationcount     NUMBER,
  avggpsperiod       NUMBER(10,2),
  gpsoverpriodcount  NUMBER,
  recdate            DATE default SYSDATE,
  isonline           VARCHAR2(2),
  routecode          VARCHAR2(20)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_BUSLOGIN
  is '终端登录日志';
comment on column OSECD.SYS_BUSLOGIN.logid
  is 'ID';
comment on column OSECD.SYS_BUSLOGIN.busno
  is '车辆';
comment on column OSECD.SYS_BUSLOGIN.logintime
  is '上线时间';
comment on column OSECD.SYS_BUSLOGIN.logouttime
  is '离线时间';
comment on column OSECD.SYS_BUSLOGIN.inhours
  is '在线时长（h）';
comment on column OSECD.SYS_BUSLOGIN.packagecount
  is '发送数据包数';
comment on column OSECD.SYS_BUSLOGIN.gpscount
  is 'GPS数量';
comment on column OSECD.SYS_BUSLOGIN.gpserrorcount
  is '错误GPS数量';
comment on column OSECD.SYS_BUSLOGIN.arrlftstationcount
  is '到离站数量';
comment on column OSECD.SYS_BUSLOGIN.arrlftsitecount
  is '到离场数量';
comment on column OSECD.SYS_BUSLOGIN.violationcount
  is '违规数量';
comment on column OSECD.SYS_BUSLOGIN.avggpsperiod
  is 'GPS平均间隔（s）';
comment on column OSECD.SYS_BUSLOGIN.gpsoverpriodcount
  is 'GPS大间隔次数';
comment on column OSECD.SYS_BUSLOGIN.recdate
  is '记录时间';
comment on column OSECD.SYS_BUSLOGIN.isonline
  is '是否在线 Y/N';
comment on column OSECD.SYS_BUSLOGIN.routecode
  is '上传线路编码';
create index OSECD.IX_SYS_BUSLOGINDATE on OSECD.SYS_BUSLOGIN (RECDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYS_BUSLOGIN_HISTORY
prompt ===================================
prompt
create table OSECD.SYS_BUSLOGIN_HISTORY
(
  logid              VARCHAR2(36),
  busno              VARCHAR2(20),
  logintime          DATE,
  logouttime         DATE,
  inhours            NUMBER(10,4),
  packagecount       NUMBER,
  gpscount           NUMBER,
  gpserrorcount      NUMBER,
  arrlftstationcount NUMBER,
  arrlftsitecount    NUMBER,
  violationcount     NUMBER,
  avggpsperiod       NUMBER(10,2),
  gpsoverpriodcount  NUMBER,
  recdate            DATE default SYSDATE,
  isonline           VARCHAR2(2),
  routecode          VARCHAR2(20)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_BUSLOGIN_HISTORY
  is '终端登录日志';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.logid
  is 'ID';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.busno
  is '车辆';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.logintime
  is '上线时间';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.logouttime
  is '离线时间';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.inhours
  is '在线时长（h）';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.packagecount
  is '发送数据包数';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.gpscount
  is 'GPS数量';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.gpserrorcount
  is '错误GPS数量';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.arrlftstationcount
  is '到离站数量';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.arrlftsitecount
  is '到离场数量';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.violationcount
  is '违规数量';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.avggpsperiod
  is 'GPS平均间隔（s）';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.gpsoverpriodcount
  is 'GPS大间隔次数';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.recdate
  is '记录时间';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.isonline
  is '是否在线 Y/N';
comment on column OSECD.SYS_BUSLOGIN_HISTORY.routecode
  is '上传线路编码';
create index OSECD.IX_SYS_BUSLOGIN_HISTORYDATE on OSECD.SYS_BUSLOGIN_HISTORY (RECDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYS_CALCULATECONFIG
prompt ==================================
prompt
create table OSECD.SYS_CALCULATECONFIG
(
  configid   VARCHAR2(36) not null,
  configname VARCHAR2(50),
  startdate  DATE,
  enddate    DATE,
  minnum     NUMBER,
  maxnum     NUMBER,
  isactive   VARCHAR2(2),
  recdate    DATE default SYSDATE,
  iscrossday VARCHAR2(2) default 0,
  memos      NVARCHAR2(500)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_CALCULATECONFIG
  is '计算配置信息表';
comment on column OSECD.SYS_CALCULATECONFIG.configid
  is '配置编号';
comment on column OSECD.SYS_CALCULATECONFIG.configname
  is '配置名称';
comment on column OSECD.SYS_CALCULATECONFIG.startdate
  is '开始日期';
comment on column OSECD.SYS_CALCULATECONFIG.enddate
  is '结束日期';
comment on column OSECD.SYS_CALCULATECONFIG.minnum
  is '配置最小值(作为开始时间时，为相对于0点的分钟数)';
comment on column OSECD.SYS_CALCULATECONFIG.maxnum
  is '配置最大值(作为结束时间时，为相对于0点的分钟数)';
comment on column OSECD.SYS_CALCULATECONFIG.isactive
  is '是否有效';
comment on column OSECD.SYS_CALCULATECONFIG.recdate
  is '记录时间';
comment on column OSECD.SYS_CALCULATECONFIG.iscrossday
  is '是否跨日；0-不跨日，1-跨日';
comment on column OSECD.SYS_CALCULATECONFIG.memos
  is '备注';
alter table OSECD.SYS_CALCULATECONFIG
  add constraint PK_CACULATECONFIG primary key (CONFIGID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYS_DATACOMMUNICATIONLOG
prompt =======================================
prompt
create table OSECD.SYS_DATACOMMUNICATIONLOG
(
  id           VARCHAR2(36),
  dataname     NVARCHAR2(50),
  sign         NVARCHAR2(50),
  signvalue    NVARCHAR2(50),
  datacount    NUMBER,
  starttime    DATE,
  endtime      DATE,
  statement    NVARCHAR2(50),
  errormessage NVARCHAR2(255),
  recdate      DATE default sysdate,
  sumdatacount NUMBER,
  logtype      CHAR(1)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_DATACOMMUNICATIONLOG
  is '数据传输日志';
comment on column OSECD.SYS_DATACOMMUNICATIONLOG.dataname
  is '数据名称';
comment on column OSECD.SYS_DATACOMMUNICATIONLOG.sign
  is '传输标志';
comment on column OSECD.SYS_DATACOMMUNICATIONLOG.signvalue
  is '标志值';
comment on column OSECD.SYS_DATACOMMUNICATIONLOG.datacount
  is '数据记录数';
comment on column OSECD.SYS_DATACOMMUNICATIONLOG.starttime
  is '开始时间';
comment on column OSECD.SYS_DATACOMMUNICATIONLOG.endtime
  is '结束时间';
comment on column OSECD.SYS_DATACOMMUNICATIONLOG.statement
  is '传输状态';
comment on column OSECD.SYS_DATACOMMUNICATIONLOG.errormessage
  is '错误信息';
comment on column OSECD.SYS_DATACOMMUNICATIONLOG.recdate
  is '创建时间';

prompt
prompt Creating table SYS_EXPORT_SCHEMA_01
prompt ===================================
prompt
create table OSECD.SYS_EXPORT_SCHEMA_01
(
  process_order          NUMBER,
  duplicate              NUMBER,
  dump_fileid            NUMBER,
  dump_position          NUMBER,
  dump_length            NUMBER,
  dump_allocation        NUMBER,
  completed_rows         NUMBER,
  error_count            NUMBER,
  elapsed_time           NUMBER,
  object_type_path       VARCHAR2(200),
  object_path_seqno      NUMBER,
  object_type            VARCHAR2(30),
  in_progress            CHAR(1),
  object_name            VARCHAR2(500),
  object_long_name       VARCHAR2(4000),
  object_schema          VARCHAR2(30),
  original_object_schema VARCHAR2(30),
  partition_name         VARCHAR2(30),
  subpartition_name      VARCHAR2(30),
  flags                  NUMBER,
  property               NUMBER,
  completion_time        DATE,
  object_tablespace      VARCHAR2(30),
  size_estimate          NUMBER,
  object_row             NUMBER,
  processing_state       CHAR(1),
  processing_status      CHAR(1),
  base_process_order     NUMBER,
  base_object_type       VARCHAR2(30),
  base_object_name       VARCHAR2(30),
  base_object_schema     VARCHAR2(30),
  ancestor_process_order NUMBER,
  domain_process_order   NUMBER,
  parallelization        NUMBER,
  unload_method          NUMBER,
  granules               NUMBER,
  scn                    NUMBER,
  grantor                VARCHAR2(30),
  xml_clob               CLOB,
  name                   VARCHAR2(30),
  value_t                VARCHAR2(4000),
  value_n                NUMBER,
  is_default             NUMBER,
  file_type              NUMBER,
  user_directory         VARCHAR2(4000),
  user_file_name         VARCHAR2(4000),
  file_name              VARCHAR2(4000),
  extend_size            NUMBER,
  file_max_size          NUMBER,
  process_name           VARCHAR2(30),
  last_update            DATE,
  work_item              VARCHAR2(30),
  object_number          NUMBER,
  completed_bytes        NUMBER,
  total_bytes            NUMBER,
  metadata_io            NUMBER,
  data_io                NUMBER,
  cumulative_time        NUMBER,
  packet_number          NUMBER,
  old_value              VARCHAR2(4000),
  seed                   NUMBER,
  last_file              NUMBER,
  user_name              VARCHAR2(30),
  operation              VARCHAR2(30),
  job_mode               VARCHAR2(30),
  control_queue          VARCHAR2(30),
  status_queue           VARCHAR2(30),
  remote_link            VARCHAR2(4000),
  version                NUMBER,
  db_version             VARCHAR2(30),
  timezone               VARCHAR2(64),
  state                  VARCHAR2(30),
  phase                  NUMBER,
  guid                   RAW(16),
  start_time             DATE,
  block_size             NUMBER,
  metadata_buffer_size   NUMBER,
  data_buffer_size       NUMBER,
  degree                 NUMBER,
  platform               VARCHAR2(101),
  abort_step             NUMBER,
  instance               VARCHAR2(60)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 10
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_EXPORT_SCHEMA_01
  is 'Data Pump Master Table EXPORT                         SCHEMA                        ';

prompt
prompt Creating table SYS_GPSIMPORTLOG
prompt ===============================
prompt
create table OSECD.SYS_GPSIMPORTLOG
(
  id           VARCHAR2(36) not null,
  description  NVARCHAR2(255),
  successflag  VARCHAR2(1) not null,
  starttime    NUMBER not null,
  endtime      NUMBER not null,
  actdate      DATE not null,
  recdate      DATE default sysdate,
  sqlnum       NUMBER,
  reservechar1 VARCHAR2(50),
  reservechar2 VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_GPSIMPORTLOG
  is 'GPS数据导入日志';
comment on column OSECD.SYS_GPSIMPORTLOG.id
  is '记录编号';
comment on column OSECD.SYS_GPSIMPORTLOG.description
  is '描述';
comment on column OSECD.SYS_GPSIMPORTLOG.successflag
  is '成功标志:1-成功,0-失败';
comment on column OSECD.SYS_GPSIMPORTLOG.starttime
  is '开始时间';
comment on column OSECD.SYS_GPSIMPORTLOG.endtime
  is '结束时间';
comment on column OSECD.SYS_GPSIMPORTLOG.actdate
  is '运营日期';
comment on column OSECD.SYS_GPSIMPORTLOG.recdate
  is '记录时间';
comment on column OSECD.SYS_GPSIMPORTLOG.sqlnum
  is '数据条数';
comment on column OSECD.SYS_GPSIMPORTLOG.reservechar1
  is '预留字段1';
comment on column OSECD.SYS_GPSIMPORTLOG.reservechar2
  is '预留字段2';
create index OSECD.IX_GPSLOG on OSECD.SYS_GPSIMPORTLOG (ACTDATE, SUCCESSFLAG)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.SYS_GPSIMPORTLOG
  add constraint PK_GPSLOG primary key (ID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYS_INDICATORWARNING
prompt ===================================
prompt
create table OSECD.SYS_INDICATORWARNING
(
  recordid               VARCHAR2(36) not null,
  indicatorid            VARCHAR2(36),
  indicatorname          VARCHAR2(50),
  indicatorunit          VARCHAR2(20),
  indicatorstandardvalue NUMBER,
  indicatoraddress       VARCHAR2(100),
  indicatortype          CHAR(1)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.SYS_INDICATORWARNING.recordid
  is '记录编号';
comment on column OSECD.SYS_INDICATORWARNING.indicatorid
  is '指标ID';
comment on column OSECD.SYS_INDICATORWARNING.indicatorname
  is '指标名称';
comment on column OSECD.SYS_INDICATORWARNING.indicatorunit
  is '指标单位';
comment on column OSECD.SYS_INDICATORWARNING.indicatorstandardvalue
  is '指标标准值';
comment on column OSECD.SYS_INDICATORWARNING.indicatoraddress
  is '跳转地址';
comment on column OSECD.SYS_INDICATORWARNING.indicatortype
  is '指标类型，1-指标值大趋向，2-指标值小趋向';
alter table OSECD.SYS_INDICATORWARNING
  add constraint PK_PRIMARY primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.SYS_INDICATORWARNING
  add constraint PK_UNIQUEINDICATOR unique (INDICATORID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYS_JZLOG
prompt ========================
prompt
create table OSECD.SYS_JZLOG
(
  id            VARCHAR2(36),
  procedurename NVARCHAR2(100),
  funcdesc      NVARCHAR2(100),
  successflag   CHAR(1),
  recdate       DATE default sysdate,
  memos         NVARCHAR2(256),
  execdate      DATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.SYS_JZLOG.id
  is 'ID';
comment on column OSECD.SYS_JZLOG.procedurename
  is '存储过程名称';
comment on column OSECD.SYS_JZLOG.funcdesc
  is '功能描述';
comment on column OSECD.SYS_JZLOG.successflag
  is '1-成功，0-失败';
comment on column OSECD.SYS_JZLOG.recdate
  is '记录时间';
comment on column OSECD.SYS_JZLOG.memos
  is '备注';
comment on column OSECD.SYS_JZLOG.execdate
  is '操作日期';
create index OSECD.IDX_JZLOG on OSECD.SYS_JZLOG (RECDATE, SUCCESSFLAG)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYS_LOG
prompt ======================
prompt
create table OSECD.SYS_LOG
(
  id           VARCHAR2(36) not null,
  loglevel     NUMBER default 1,
  customlog    NVARCHAR2(256),
  log          NVARCHAR2(1024),
  sourcefrom   VARCHAR2(2),
  classname    NVARCHAR2(100),
  functionname NVARCHAR2(100),
  userid       NVARCHAR2(36),
  username     NVARCHAR2(30),
  computername NVARCHAR2(100),
  ipaddr       NVARCHAR2(100),
  recdate      DATE default sysdate
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_LOG
  is '系统日志信息';
comment on column OSECD.SYS_LOG.id
  is 'ID';
comment on column OSECD.SYS_LOG.loglevel
  is '日志类型 1成功，2失败';
comment on column OSECD.SYS_LOG.customlog
  is '自定义信息';
comment on column OSECD.SYS_LOG.log
  is '日志信息';
comment on column OSECD.SYS_LOG.sourcefrom
  is '日志来源';
comment on column OSECD.SYS_LOG.classname
  is '类名';
comment on column OSECD.SYS_LOG.functionname
  is '函数名';
comment on column OSECD.SYS_LOG.userid
  is '用户ID';
comment on column OSECD.SYS_LOG.username
  is '用户名';
comment on column OSECD.SYS_LOG.computername
  is '员工名称或计算机名称';
comment on column OSECD.SYS_LOG.ipaddr
  is 'IP地址';
comment on column OSECD.SYS_LOG.recdate
  is '记录日期';
create index OSECD.IDX_SYSLOG on OSECD.SYS_LOG (RECDATE, LOGLEVEL, SOURCEFROM, IPADDR)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYS_LOWSPEEDSTD
prompt ==============================
prompt
create table OSECD.SYS_LOWSPEEDSTD
(
  recordid           VARCHAR2(36) not null,
  begindate          DATE,
  enddate            DATE,
  isholiday          VARCHAR2(2),
  holidayname        VARCHAR2(100),
  timephasekey       VARCHAR2(2),
  timephasename      VARCHAR2(50),
  timephasestarttime DATE,
  timephaseendtime   DATE,
  iskeyarea          VARCHAR2(2),
  keyareaname        VARCHAR2(100),
  longitudemin       NUMBER(9,6),
  latitudemin        NUMBER(9,6),
  longitudemax       NUMBER(9,6),
  latitudemax        NUMBER(9,6),
  lowspeedstd        NUMBER,
  created            DATE,
  createdby          VARCHAR2(36),
  updated            DATE,
  updatedby          VARCHAR2(36),
  isactive           VARCHAR2(2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_LOWSPEEDSTD
  is '长时间低速违规标准设置';
comment on column OSECD.SYS_LOWSPEEDSTD.recordid
  is '记录编号';
comment on column OSECD.SYS_LOWSPEEDSTD.begindate
  is '开始日期';
comment on column OSECD.SYS_LOWSPEEDSTD.enddate
  is '结束日期';
comment on column OSECD.SYS_LOWSPEEDSTD.isholiday
  is '是否节假日';
comment on column OSECD.SYS_LOWSPEEDSTD.holidayname
  is '节假日名称';
comment on column OSECD.SYS_LOWSPEEDSTD.timephasekey
  is '峰段值';
comment on column OSECD.SYS_LOWSPEEDSTD.timephasename
  is '峰段名称';
comment on column OSECD.SYS_LOWSPEEDSTD.timephasestarttime
  is '峰段开始时间';
comment on column OSECD.SYS_LOWSPEEDSTD.timephaseendtime
  is '峰段结束时间';
comment on column OSECD.SYS_LOWSPEEDSTD.iskeyarea
  is '是否重点区域';
comment on column OSECD.SYS_LOWSPEEDSTD.keyareaname
  is '重点区域名称';
comment on column OSECD.SYS_LOWSPEEDSTD.longitudemin
  is '重点区域经度1';
comment on column OSECD.SYS_LOWSPEEDSTD.latitudemin
  is '重点区域纬度1';
comment on column OSECD.SYS_LOWSPEEDSTD.longitudemax
  is '重点区域经度2';
comment on column OSECD.SYS_LOWSPEEDSTD.latitudemax
  is '重点区域纬度2';
comment on column OSECD.SYS_LOWSPEEDSTD.lowspeedstd
  is '低速标准';
comment on column OSECD.SYS_LOWSPEEDSTD.created
  is '创建时间';
comment on column OSECD.SYS_LOWSPEEDSTD.createdby
  is '创建人';
comment on column OSECD.SYS_LOWSPEEDSTD.updated
  is '更新时间';
comment on column OSECD.SYS_LOWSPEEDSTD.updatedby
  is '更新人';
comment on column OSECD.SYS_LOWSPEEDSTD.isactive
  is '是否有效';
create index OSECD.IX_LOWSPEEDSTD on OSECD.SYS_LOWSPEEDSTD (BEGINDATE, ENDDATE)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.SYS_LOWSPEEDSTD
  add constraint PK_LOWSPEEDSTD primary key (RECORDID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYS_MONITORDBINFO
prompt ================================
prompt
create table OSECD.SYS_MONITORDBINFO
(
  id         VARCHAR2(50) not null,
  updatetime DATE not null
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_MONITORDBINFO
  is '用于系统保活监控用的表';
comment on column OSECD.SYS_MONITORDBINFO.id
  is '更新者的IP';
comment on column OSECD.SYS_MONITORDBINFO.updatetime
  is '最后更新时间';

prompt
prompt Creating table SYS_PARAMETER
prompt ============================
prompt
create table OSECD.SYS_PARAMETER
(
  sp_id               NUMBER not null,
  sp_holdertype       NUMBER,
  sp_holderuserid     VARCHAR2(50),
  sp_parametertype    VARCHAR2(200),
  sp_parameterkey     VARCHAR2(200),
  sp_parametercontent BLOB,
  sp_createtime       DATE,
  sp_createdesc       VARCHAR2(50),
  sp_updatetime       DATE,
  sp_updatedesc       VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.SYS_PARAMETER.sp_id
  is '标识';
comment on column OSECD.SYS_PARAMETER.sp_holdertype
  is '所属类型(1系统2用户)';
comment on column OSECD.SYS_PARAMETER.sp_holderuserid
  is '所有者用户ID    ';
comment on column OSECD.SYS_PARAMETER.sp_parametertype
  is '参数类型';
comment on column OSECD.SYS_PARAMETER.sp_parameterkey
  is '参数获取Key';
comment on column OSECD.SYS_PARAMETER.sp_createtime
  is '创建时间';
comment on column OSECD.SYS_PARAMETER.sp_createdesc
  is '创建描述';
comment on column OSECD.SYS_PARAMETER.sp_updatetime
  is '更新时间';
comment on column OSECD.SYS_PARAMETER.sp_updatedesc
  is '更新描述';
alter table OSECD.SYS_PARAMETER
  add constraint SYS_PARAMETER_PK primary key (SP_ID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYS_QUARTER
prompt ==========================
prompt
create table OSECD.SYS_QUARTER
(
  month   NVARCHAR2(2),
  quarter NVARCHAR2(2)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_QUARTER
  is '季度月份对照表';
comment on column OSECD.SYS_QUARTER.month
  is '月份';
comment on column OSECD.SYS_QUARTER.quarter
  is '季度';

prompt
prompt Creating table SYS_SERVICEPARAM
prompt ===============================
prompt
create table OSECD.SYS_SERVICEPARAM
(
  servicename    VARCHAR2(20) not null,
  paramname      VARCHAR2(32) not null,
  paramvaluetype VARCHAR2(3) not null,
  datevalue      DATE default DATE'2015-01-01',
  strvalue       VARCHAR2(50) default '0',
  stepvalue      NUMBER(8) default 0,
  memo           VARCHAR2(500),
  numvalue       NUMBER default 0
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_SERVICEPARAM
  is '服务参数';
comment on column OSECD.SYS_SERVICEPARAM.servicename
  is '服务名称';
comment on column OSECD.SYS_SERVICEPARAM.paramname
  is '参数名称';
comment on column OSECD.SYS_SERVICEPARAM.paramvaluetype
  is '参数类型 D日期 S字符 N数字';
comment on column OSECD.SYS_SERVICEPARAM.datevalue
  is '日期值';
comment on column OSECD.SYS_SERVICEPARAM.strvalue
  is '字符值';
comment on column OSECD.SYS_SERVICEPARAM.stepvalue
  is '步长，单位秒';
comment on column OSECD.SYS_SERVICEPARAM.memo
  is '参数说明';
comment on column OSECD.SYS_SERVICEPARAM.numvalue
  is '数字值';
create unique index OSECD.IDX_SERVICEPARAM on OSECD.SYS_SERVICEPARAM (SERVICENAME, PARAMNAME)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SYS_WEBSERVICELOG
prompt ================================
prompt
create table OSECD.SYS_WEBSERVICELOG
(
  recid    VARCHAR2(36),
  platcode VARCHAR2(2),
  opetype  CHAR(1),
  datatype VARCHAR2(20),
  acttime  DATE default SYSDATE,
  opememos VARCHAR2(500),
  result   CHAR(1)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SYS_WEBSERVICELOG
  is 'WebService服务日志';
comment on column OSECD.SYS_WEBSERVICELOG.recid
  is 'ID';
comment on column OSECD.SYS_WEBSERVICELOG.platcode
  is '平台编码';
comment on column OSECD.SYS_WEBSERVICELOG.opetype
  is 'U上传，D下载';
comment on column OSECD.SYS_WEBSERVICELOG.datatype
  is '数据内容 ';
comment on column OSECD.SYS_WEBSERVICELOG.acttime
  is '业务时间';
comment on column OSECD.SYS_WEBSERVICELOG.opememos
  is '操作说明';
comment on column OSECD.SYS_WEBSERVICELOG.result
  is '操作结果，0失败，1成功';

prompt
prompt Creating table SZ_BUSNUMMONTH
prompt =============================
prompt
create table OSECD.SZ_BUSNUMMONTH
(
  recordid VARCHAR2(36) not null,
  orgid    VARCHAR2(36),
  orgname  VARCHAR2(60),
  busnum   NUMBER,
  jzdate   DATE,
  recdate  DATE default sysdate
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SZ_BUSNUMMONTH
  is '车辆数人工记录表';
comment on column OSECD.SZ_BUSNUMMONTH.recordid
  is '记录编号';
comment on column OSECD.SZ_BUSNUMMONTH.orgid
  is '组织编号';
comment on column OSECD.SZ_BUSNUMMONTH.orgname
  is '组织名称';
comment on column OSECD.SZ_BUSNUMMONTH.busnum
  is '车辆数量';
comment on column OSECD.SZ_BUSNUMMONTH.jzdate
  is '结存日期';
comment on column OSECD.SZ_BUSNUMMONTH.recdate
  is '记录时间';
alter table OSECD.SZ_BUSNUMMONTH
  add constraint PK_BUSNUMMONTH primary key (RECORDID)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.SZ_BUSNUMMONTH
  add constraint IX_BUSNUMMONTH unique (ORGID, JZDATE)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table SZ_BUSOPERATOR
prompt =============================
prompt
create table OSECD.SZ_BUSOPERATOR
(
  recordid     VARCHAR2(36),
  carid        VARCHAR2(20),
  operatorid   VARCHAR2(36),
  operatorname VARCHAR2(100)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.SZ_BUSOPERATOR
  is '车载机运营商信息表';
comment on column OSECD.SZ_BUSOPERATOR.recordid
  is '记录编号';
comment on column OSECD.SZ_BUSOPERATOR.carid
  is '车牌号';
comment on column OSECD.SZ_BUSOPERATOR.operatorid
  is '运营商编号';
comment on column OSECD.SZ_BUSOPERATOR.operatorname
  is '运营商名称';

prompt
prompt Creating table TABLE151206
prompt ==========================
prompt
create table OSECD.TABLE151206
(
  xh   VARCHAR2(30),
  yyqy NVARCHAR2(40),
  xlbh VARCHAR2(30),
  xllb VARCHAR2(30),
  xljb VARCHAR2(30),
  jcxl VARCHAR2(30)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TB_MONTHCONSUME
prompt ==============================
prompt
create table OSECD.TB_MONTHCONSUME
(
  countserial   VARCHAR2(6),
  consumeserial NUMBER,
  consumecount  NUMBER,
  cardno        VARCHAR2(20) not null,
  consume       NUMBER,
  remaintimes   NUMBER,
  balance       NUMBER,
  consumedate   DATE not null,
  consumetype   NUMBER not null,
  verifycode    VARCHAR2(8),
  drivercardno  VARCHAR2(12),
  lineno        VARCHAR2(20),
  busno         VARCHAR2(36) not null,
  psam          VARCHAR2(12),
  flag          NUMBER,
  discount      VARCHAR2(4),
  busitype      VARCHAR2(20),
  cardtype      VARCHAR2(20),
  cardcatalog   VARCHAR2(20),
  citycardcode  VARCHAR2(20),
  consumenum    NUMBER,
  actualnum     NUMBER
)
partition by range (CONSUMEDATE)
(
  partition P_20150701 values less than (TO_DATE(' 2015-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150702 values less than (TO_DATE(' 2015-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150703 values less than (TO_DATE(' 2015-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150704 values less than (TO_DATE(' 2015-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150705 values less than (TO_DATE(' 2015-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150706 values less than (TO_DATE(' 2015-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150707 values less than (TO_DATE(' 2015-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150708 values less than (TO_DATE(' 2015-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150709 values less than (TO_DATE(' 2015-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150710 values less than (TO_DATE(' 2015-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150711 values less than (TO_DATE(' 2015-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150712 values less than (TO_DATE(' 2015-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150713 values less than (TO_DATE(' 2015-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150714 values less than (TO_DATE(' 2015-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150715 values less than (TO_DATE(' 2015-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150716 values less than (TO_DATE(' 2015-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150717 values less than (TO_DATE(' 2015-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150718 values less than (TO_DATE(' 2015-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150719 values less than (TO_DATE(' 2015-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150720 values less than (TO_DATE(' 2015-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150721 values less than (TO_DATE(' 2015-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150722 values less than (TO_DATE(' 2015-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150723 values less than (TO_DATE(' 2015-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150724 values less than (TO_DATE(' 2015-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150725 values less than (TO_DATE(' 2015-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150726 values less than (TO_DATE(' 2015-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150727 values less than (TO_DATE(' 2015-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150728 values less than (TO_DATE(' 2015-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150729 values less than (TO_DATE(' 2015-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150730 values less than (TO_DATE(' 2015-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150731 values less than (TO_DATE(' 2015-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150801 values less than (TO_DATE(' 2015-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150802 values less than (TO_DATE(' 2015-08-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150803 values less than (TO_DATE(' 2015-08-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150804 values less than (TO_DATE(' 2015-08-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150805 values less than (TO_DATE(' 2015-08-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150806 values less than (TO_DATE(' 2015-08-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150807 values less than (TO_DATE(' 2015-08-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150808 values less than (TO_DATE(' 2015-08-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150809 values less than (TO_DATE(' 2015-08-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150810 values less than (TO_DATE(' 2015-08-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150811 values less than (TO_DATE(' 2015-08-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150812 values less than (TO_DATE(' 2015-08-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150813 values less than (TO_DATE(' 2015-08-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150814 values less than (TO_DATE(' 2015-08-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150815 values less than (TO_DATE(' 2015-08-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150816 values less than (TO_DATE(' 2015-08-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150817 values less than (TO_DATE(' 2015-08-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150818 values less than (TO_DATE(' 2015-08-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150819 values less than (TO_DATE(' 2015-08-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150820 values less than (TO_DATE(' 2015-08-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150821 values less than (TO_DATE(' 2015-08-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150822 values less than (TO_DATE(' 2015-08-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150823 values less than (TO_DATE(' 2015-08-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150824 values less than (TO_DATE(' 2015-08-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150825 values less than (TO_DATE(' 2015-08-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150826 values less than (TO_DATE(' 2015-08-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150827 values less than (TO_DATE(' 2015-08-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150828 values less than (TO_DATE(' 2015-08-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150829 values less than (TO_DATE(' 2015-08-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150830 values less than (TO_DATE(' 2015-08-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150831 values less than (TO_DATE(' 2015-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150901 values less than (TO_DATE(' 2015-09-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150902 values less than (TO_DATE(' 2015-09-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150903 values less than (TO_DATE(' 2015-09-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150904 values less than (TO_DATE(' 2015-09-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150905 values less than (TO_DATE(' 2015-09-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150906 values less than (TO_DATE(' 2015-09-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150907 values less than (TO_DATE(' 2015-09-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150908 values less than (TO_DATE(' 2015-09-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150909 values less than (TO_DATE(' 2015-09-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150910 values less than (TO_DATE(' 2015-09-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150911 values less than (TO_DATE(' 2015-09-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150912 values less than (TO_DATE(' 2015-09-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150913 values less than (TO_DATE(' 2015-09-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150914 values less than (TO_DATE(' 2015-09-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150915 values less than (TO_DATE(' 2015-09-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150916 values less than (TO_DATE(' 2015-09-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150917 values less than (TO_DATE(' 2015-09-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150918 values less than (TO_DATE(' 2015-09-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150919 values less than (TO_DATE(' 2015-09-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150920 values less than (TO_DATE(' 2015-09-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150921 values less than (TO_DATE(' 2015-09-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150922 values less than (TO_DATE(' 2015-09-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150923 values less than (TO_DATE(' 2015-09-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150924 values less than (TO_DATE(' 2015-09-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150925 values less than (TO_DATE(' 2015-09-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150926 values less than (TO_DATE(' 2015-09-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150927 values less than (TO_DATE(' 2015-09-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150928 values less than (TO_DATE(' 2015-09-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150929 values less than (TO_DATE(' 2015-09-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20150930 values less than (TO_DATE(' 2015-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151001 values less than (TO_DATE(' 2015-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151002 values less than (TO_DATE(' 2015-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151003 values less than (TO_DATE(' 2015-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151004 values less than (TO_DATE(' 2015-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151005 values less than (TO_DATE(' 2015-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151006 values less than (TO_DATE(' 2015-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151007 values less than (TO_DATE(' 2015-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151008 values less than (TO_DATE(' 2015-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151009 values less than (TO_DATE(' 2015-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151010 values less than (TO_DATE(' 2015-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151011 values less than (TO_DATE(' 2015-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151012 values less than (TO_DATE(' 2015-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151013 values less than (TO_DATE(' 2015-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151014 values less than (TO_DATE(' 2015-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151015 values less than (TO_DATE(' 2015-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151016 values less than (TO_DATE(' 2015-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151017 values less than (TO_DATE(' 2015-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151018 values less than (TO_DATE(' 2015-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151019 values less than (TO_DATE(' 2015-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151020 values less than (TO_DATE(' 2015-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151021 values less than (TO_DATE(' 2015-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151022 values less than (TO_DATE(' 2015-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151023 values less than (TO_DATE(' 2015-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151024 values less than (TO_DATE(' 2015-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151025 values less than (TO_DATE(' 2015-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151026 values less than (TO_DATE(' 2015-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151027 values less than (TO_DATE(' 2015-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151028 values less than (TO_DATE(' 2015-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151029 values less than (TO_DATE(' 2015-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151030 values less than (TO_DATE(' 2015-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151031 values less than (TO_DATE(' 2015-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151101 values less than (TO_DATE(' 2015-11-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151102 values less than (TO_DATE(' 2015-11-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151103 values less than (TO_DATE(' 2015-11-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151104 values less than (TO_DATE(' 2015-11-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151105 values less than (TO_DATE(' 2015-11-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151106 values less than (TO_DATE(' 2015-11-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151107 values less than (TO_DATE(' 2015-11-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151108 values less than (TO_DATE(' 2015-11-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151109 values less than (TO_DATE(' 2015-11-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151110 values less than (TO_DATE(' 2015-11-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151111 values less than (TO_DATE(' 2015-11-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151112 values less than (TO_DATE(' 2015-11-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151113 values less than (TO_DATE(' 2015-11-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151114 values less than (TO_DATE(' 2015-11-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151115 values less than (TO_DATE(' 2015-11-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151116 values less than (TO_DATE(' 2015-11-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151117 values less than (TO_DATE(' 2015-11-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151118 values less than (TO_DATE(' 2015-11-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151119 values less than (TO_DATE(' 2015-11-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151120 values less than (TO_DATE(' 2015-11-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151121 values less than (TO_DATE(' 2015-11-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151122 values less than (TO_DATE(' 2015-11-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151123 values less than (TO_DATE(' 2015-11-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151124 values less than (TO_DATE(' 2015-11-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151125 values less than (TO_DATE(' 2015-11-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151126 values less than (TO_DATE(' 2015-11-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151127 values less than (TO_DATE(' 2015-11-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151128 values less than (TO_DATE(' 2015-11-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151129 values less than (TO_DATE(' 2015-11-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151130 values less than (TO_DATE(' 2015-12-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151201 values less than (TO_DATE(' 2015-12-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151202 values less than (TO_DATE(' 2015-12-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151203 values less than (TO_DATE(' 2015-12-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151204 values less than (TO_DATE(' 2015-12-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151205 values less than (TO_DATE(' 2015-12-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151206 values less than (TO_DATE(' 2015-12-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151207 values less than (TO_DATE(' 2015-12-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151208 values less than (TO_DATE(' 2015-12-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151209 values less than (TO_DATE(' 2015-12-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151210 values less than (TO_DATE(' 2015-12-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151211 values less than (TO_DATE(' 2015-12-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151212 values less than (TO_DATE(' 2015-12-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151213 values less than (TO_DATE(' 2015-12-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151214 values less than (TO_DATE(' 2015-12-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151215 values less than (TO_DATE(' 2015-12-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151216 values less than (TO_DATE(' 2015-12-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151217 values less than (TO_DATE(' 2015-12-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151218 values less than (TO_DATE(' 2015-12-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151219 values less than (TO_DATE(' 2015-12-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151220 values less than (TO_DATE(' 2015-12-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151221 values less than (TO_DATE(' 2015-12-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151222 values less than (TO_DATE(' 2015-12-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151223 values less than (TO_DATE(' 2015-12-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151224 values less than (TO_DATE(' 2015-12-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151225 values less than (TO_DATE(' 2015-12-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151226 values less than (TO_DATE(' 2015-12-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151227 values less than (TO_DATE(' 2015-12-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151228 values less than (TO_DATE(' 2015-12-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151229 values less than (TO_DATE(' 2015-12-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151230 values less than (TO_DATE(' 2015-12-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20151231 values less than (TO_DATE(' 2016-01-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160101 values less than (TO_DATE(' 2016-01-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160102 values less than (TO_DATE(' 2016-01-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160103 values less than (TO_DATE(' 2016-01-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160104 values less than (TO_DATE(' 2016-01-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160105 values less than (TO_DATE(' 2016-01-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160106 values less than (TO_DATE(' 2016-01-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160107 values less than (TO_DATE(' 2016-01-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160108 values less than (TO_DATE(' 2016-01-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160109 values less than (TO_DATE(' 2016-01-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160110 values less than (TO_DATE(' 2016-01-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160111 values less than (TO_DATE(' 2016-01-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160112 values less than (TO_DATE(' 2016-01-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160113 values less than (TO_DATE(' 2016-01-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160114 values less than (TO_DATE(' 2016-01-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160115 values less than (TO_DATE(' 2016-01-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160116 values less than (TO_DATE(' 2016-01-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160117 values less than (TO_DATE(' 2016-01-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160118 values less than (TO_DATE(' 2016-01-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160119 values less than (TO_DATE(' 2016-01-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160120 values less than (TO_DATE(' 2016-01-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160121 values less than (TO_DATE(' 2016-01-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160122 values less than (TO_DATE(' 2016-01-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160123 values less than (TO_DATE(' 2016-01-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160124 values less than (TO_DATE(' 2016-01-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160125 values less than (TO_DATE(' 2016-01-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160126 values less than (TO_DATE(' 2016-01-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160127 values less than (TO_DATE(' 2016-01-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160128 values less than (TO_DATE(' 2016-01-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160129 values less than (TO_DATE(' 2016-01-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160130 values less than (TO_DATE(' 2016-01-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160131 values less than (TO_DATE(' 2016-02-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160201 values less than (TO_DATE(' 2016-02-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160202 values less than (TO_DATE(' 2016-02-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160203 values less than (TO_DATE(' 2016-02-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160204 values less than (TO_DATE(' 2016-02-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160205 values less than (TO_DATE(' 2016-02-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160206 values less than (TO_DATE(' 2016-02-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160207 values less than (TO_DATE(' 2016-02-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160208 values less than (TO_DATE(' 2016-02-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160209 values less than (TO_DATE(' 2016-02-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160210 values less than (TO_DATE(' 2016-02-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160211 values less than (TO_DATE(' 2016-02-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160212 values less than (TO_DATE(' 2016-02-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160213 values less than (TO_DATE(' 2016-02-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160214 values less than (TO_DATE(' 2016-02-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160215 values less than (TO_DATE(' 2016-02-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160216 values less than (TO_DATE(' 2016-02-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160217 values less than (TO_DATE(' 2016-02-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160218 values less than (TO_DATE(' 2016-02-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160219 values less than (TO_DATE(' 2016-02-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160220 values less than (TO_DATE(' 2016-02-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160221 values less than (TO_DATE(' 2016-02-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160222 values less than (TO_DATE(' 2016-02-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160223 values less than (TO_DATE(' 2016-02-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160224 values less than (TO_DATE(' 2016-02-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160225 values less than (TO_DATE(' 2016-02-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160226 values less than (TO_DATE(' 2016-02-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160227 values less than (TO_DATE(' 2016-02-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160228 values less than (TO_DATE(' 2016-02-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160229 values less than (TO_DATE(' 2016-03-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160301 values less than (TO_DATE(' 2016-03-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160302 values less than (TO_DATE(' 2016-03-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160303 values less than (TO_DATE(' 2016-03-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160304 values less than (TO_DATE(' 2016-03-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160305 values less than (TO_DATE(' 2016-03-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160306 values less than (TO_DATE(' 2016-03-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160307 values less than (TO_DATE(' 2016-03-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160308 values less than (TO_DATE(' 2016-03-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160309 values less than (TO_DATE(' 2016-03-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160310 values less than (TO_DATE(' 2016-03-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160311 values less than (TO_DATE(' 2016-03-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160312 values less than (TO_DATE(' 2016-03-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160313 values less than (TO_DATE(' 2016-03-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160314 values less than (TO_DATE(' 2016-03-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160315 values less than (TO_DATE(' 2016-03-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160316 values less than (TO_DATE(' 2016-03-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160317 values less than (TO_DATE(' 2016-03-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160318 values less than (TO_DATE(' 2016-03-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160319 values less than (TO_DATE(' 2016-03-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160320 values less than (TO_DATE(' 2016-03-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160321 values less than (TO_DATE(' 2016-03-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160322 values less than (TO_DATE(' 2016-03-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160323 values less than (TO_DATE(' 2016-03-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160324 values less than (TO_DATE(' 2016-03-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160325 values less than (TO_DATE(' 2016-03-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160326 values less than (TO_DATE(' 2016-03-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160327 values less than (TO_DATE(' 2016-03-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160328 values less than (TO_DATE(' 2016-03-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160329 values less than (TO_DATE(' 2016-03-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160330 values less than (TO_DATE(' 2016-03-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160331 values less than (TO_DATE(' 2016-04-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160401 values less than (TO_DATE(' 2016-04-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160402 values less than (TO_DATE(' 2016-04-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160403 values less than (TO_DATE(' 2016-04-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160404 values less than (TO_DATE(' 2016-04-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160405 values less than (TO_DATE(' 2016-04-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160406 values less than (TO_DATE(' 2016-04-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160407 values less than (TO_DATE(' 2016-04-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160408 values less than (TO_DATE(' 2016-04-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160409 values less than (TO_DATE(' 2016-04-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160410 values less than (TO_DATE(' 2016-04-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160411 values less than (TO_DATE(' 2016-04-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160412 values less than (TO_DATE(' 2016-04-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160413 values less than (TO_DATE(' 2016-04-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160414 values less than (TO_DATE(' 2016-04-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160415 values less than (TO_DATE(' 2016-04-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160416 values less than (TO_DATE(' 2016-04-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160417 values less than (TO_DATE(' 2016-04-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160418 values less than (TO_DATE(' 2016-04-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160419 values less than (TO_DATE(' 2016-04-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160420 values less than (TO_DATE(' 2016-04-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160421 values less than (TO_DATE(' 2016-04-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160422 values less than (TO_DATE(' 2016-04-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160423 values less than (TO_DATE(' 2016-04-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160424 values less than (TO_DATE(' 2016-04-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160425 values less than (TO_DATE(' 2016-04-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160426 values less than (TO_DATE(' 2016-04-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160427 values less than (TO_DATE(' 2016-04-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160428 values less than (TO_DATE(' 2016-04-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160429 values less than (TO_DATE(' 2016-04-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160430 values less than (TO_DATE(' 2016-05-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160501 values less than (TO_DATE(' 2016-05-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160502 values less than (TO_DATE(' 2016-05-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160503 values less than (TO_DATE(' 2016-05-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160504 values less than (TO_DATE(' 2016-05-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160505 values less than (TO_DATE(' 2016-05-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160506 values less than (TO_DATE(' 2016-05-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160507 values less than (TO_DATE(' 2016-05-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160508 values less than (TO_DATE(' 2016-05-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160509 values less than (TO_DATE(' 2016-05-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160510 values less than (TO_DATE(' 2016-05-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160511 values less than (TO_DATE(' 2016-05-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160512 values less than (TO_DATE(' 2016-05-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160513 values less than (TO_DATE(' 2016-05-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160514 values less than (TO_DATE(' 2016-05-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160515 values less than (TO_DATE(' 2016-05-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160516 values less than (TO_DATE(' 2016-05-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160517 values less than (TO_DATE(' 2016-05-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160518 values less than (TO_DATE(' 2016-05-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160519 values less than (TO_DATE(' 2016-05-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160520 values less than (TO_DATE(' 2016-05-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160521 values less than (TO_DATE(' 2016-05-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160522 values less than (TO_DATE(' 2016-05-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160523 values less than (TO_DATE(' 2016-05-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160524 values less than (TO_DATE(' 2016-05-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160525 values less than (TO_DATE(' 2016-05-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160526 values less than (TO_DATE(' 2016-05-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160527 values less than (TO_DATE(' 2016-05-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160528 values less than (TO_DATE(' 2016-05-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160529 values less than (TO_DATE(' 2016-05-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160530 values less than (TO_DATE(' 2016-05-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160531 values less than (TO_DATE(' 2016-06-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160601 values less than (TO_DATE(' 2016-06-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160602 values less than (TO_DATE(' 2016-06-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160603 values less than (TO_DATE(' 2016-06-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160604 values less than (TO_DATE(' 2016-06-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160605 values less than (TO_DATE(' 2016-06-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160606 values less than (TO_DATE(' 2016-06-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160607 values less than (TO_DATE(' 2016-06-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160608 values less than (TO_DATE(' 2016-06-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160609 values less than (TO_DATE(' 2016-06-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160610 values less than (TO_DATE(' 2016-06-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160611 values less than (TO_DATE(' 2016-06-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160612 values less than (TO_DATE(' 2016-06-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160613 values less than (TO_DATE(' 2016-06-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160614 values less than (TO_DATE(' 2016-06-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160615 values less than (TO_DATE(' 2016-06-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160616 values less than (TO_DATE(' 2016-06-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160617 values less than (TO_DATE(' 2016-06-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160618 values less than (TO_DATE(' 2016-06-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160619 values less than (TO_DATE(' 2016-06-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160620 values less than (TO_DATE(' 2016-06-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160621 values less than (TO_DATE(' 2016-06-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160622 values less than (TO_DATE(' 2016-06-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160623 values less than (TO_DATE(' 2016-06-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160624 values less than (TO_DATE(' 2016-06-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160625 values less than (TO_DATE(' 2016-06-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160626 values less than (TO_DATE(' 2016-06-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160627 values less than (TO_DATE(' 2016-06-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160628 values less than (TO_DATE(' 2016-06-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160629 values less than (TO_DATE(' 2016-06-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160630 values less than (TO_DATE(' 2016-07-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160701 values less than (TO_DATE(' 2016-07-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160702 values less than (TO_DATE(' 2016-07-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160703 values less than (TO_DATE(' 2016-07-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160704 values less than (TO_DATE(' 2016-07-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160705 values less than (TO_DATE(' 2016-07-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160706 values less than (TO_DATE(' 2016-07-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160707 values less than (TO_DATE(' 2016-07-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160708 values less than (TO_DATE(' 2016-07-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160709 values less than (TO_DATE(' 2016-07-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160710 values less than (TO_DATE(' 2016-07-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160711 values less than (TO_DATE(' 2016-07-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160712 values less than (TO_DATE(' 2016-07-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160713 values less than (TO_DATE(' 2016-07-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160714 values less than (TO_DATE(' 2016-07-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160715 values less than (TO_DATE(' 2016-07-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160716 values less than (TO_DATE(' 2016-07-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160717 values less than (TO_DATE(' 2016-07-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160718 values less than (TO_DATE(' 2016-07-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160719 values less than (TO_DATE(' 2016-07-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160720 values less than (TO_DATE(' 2016-07-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160721 values less than (TO_DATE(' 2016-07-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160722 values less than (TO_DATE(' 2016-07-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160723 values less than (TO_DATE(' 2016-07-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160724 values less than (TO_DATE(' 2016-07-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160725 values less than (TO_DATE(' 2016-07-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160726 values less than (TO_DATE(' 2016-07-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160727 values less than (TO_DATE(' 2016-07-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160728 values less than (TO_DATE(' 2016-07-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160729 values less than (TO_DATE(' 2016-07-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160730 values less than (TO_DATE(' 2016-07-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160731 values less than (TO_DATE(' 2016-08-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160801 values less than (TO_DATE(' 2016-08-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160802 values less than (TO_DATE(' 2016-08-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160803 values less than (TO_DATE(' 2016-08-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160804 values less than (TO_DATE(' 2016-08-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160805 values less than (TO_DATE(' 2016-08-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160806 values less than (TO_DATE(' 2016-08-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160807 values less than (TO_DATE(' 2016-08-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160808 values less than (TO_DATE(' 2016-08-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160809 values less than (TO_DATE(' 2016-08-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160810 values less than (TO_DATE(' 2016-08-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160811 values less than (TO_DATE(' 2016-08-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160812 values less than (TO_DATE(' 2016-08-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160813 values less than (TO_DATE(' 2016-08-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160814 values less than (TO_DATE(' 2016-08-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160815 values less than (TO_DATE(' 2016-08-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160816 values less than (TO_DATE(' 2016-08-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160817 values less than (TO_DATE(' 2016-08-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160818 values less than (TO_DATE(' 2016-08-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160819 values less than (TO_DATE(' 2016-08-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160820 values less than (TO_DATE(' 2016-08-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160821 values less than (TO_DATE(' 2016-08-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160822 values less than (TO_DATE(' 2016-08-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160823 values less than (TO_DATE(' 2016-08-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160824 values less than (TO_DATE(' 2016-08-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160825 values less than (TO_DATE(' 2016-08-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160826 values less than (TO_DATE(' 2016-08-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160827 values less than (TO_DATE(' 2016-08-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160828 values less than (TO_DATE(' 2016-08-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160829 values less than (TO_DATE(' 2016-08-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160830 values less than (TO_DATE(' 2016-08-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160831 values less than (TO_DATE(' 2016-09-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160901 values less than (TO_DATE(' 2016-09-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160902 values less than (TO_DATE(' 2016-09-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160903 values less than (TO_DATE(' 2016-09-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160904 values less than (TO_DATE(' 2016-09-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160905 values less than (TO_DATE(' 2016-09-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160906 values less than (TO_DATE(' 2016-09-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160907 values less than (TO_DATE(' 2016-09-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160908 values less than (TO_DATE(' 2016-09-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160909 values less than (TO_DATE(' 2016-09-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160910 values less than (TO_DATE(' 2016-09-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160911 values less than (TO_DATE(' 2016-09-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160912 values less than (TO_DATE(' 2016-09-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160913 values less than (TO_DATE(' 2016-09-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160914 values less than (TO_DATE(' 2016-09-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160915 values less than (TO_DATE(' 2016-09-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160916 values less than (TO_DATE(' 2016-09-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160917 values less than (TO_DATE(' 2016-09-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160918 values less than (TO_DATE(' 2016-09-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160919 values less than (TO_DATE(' 2016-09-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160920 values less than (TO_DATE(' 2016-09-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160921 values less than (TO_DATE(' 2016-09-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160922 values less than (TO_DATE(' 2016-09-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160923 values less than (TO_DATE(' 2016-09-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160924 values less than (TO_DATE(' 2016-09-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160925 values less than (TO_DATE(' 2016-09-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160926 values less than (TO_DATE(' 2016-09-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160927 values less than (TO_DATE(' 2016-09-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160928 values less than (TO_DATE(' 2016-09-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160929 values less than (TO_DATE(' 2016-09-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20160930 values less than (TO_DATE(' 2016-10-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161001 values less than (TO_DATE(' 2016-10-02 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161002 values less than (TO_DATE(' 2016-10-03 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161003 values less than (TO_DATE(' 2016-10-04 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161004 values less than (TO_DATE(' 2016-10-05 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161005 values less than (TO_DATE(' 2016-10-06 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161006 values less than (TO_DATE(' 2016-10-07 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161007 values less than (TO_DATE(' 2016-10-08 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161008 values less than (TO_DATE(' 2016-10-09 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161009 values less than (TO_DATE(' 2016-10-10 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161010 values less than (TO_DATE(' 2016-10-11 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161011 values less than (TO_DATE(' 2016-10-12 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161012 values less than (TO_DATE(' 2016-10-13 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161013 values less than (TO_DATE(' 2016-10-14 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161014 values less than (TO_DATE(' 2016-10-15 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161015 values less than (TO_DATE(' 2016-10-16 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161016 values less than (TO_DATE(' 2016-10-17 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161017 values less than (TO_DATE(' 2016-10-18 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161018 values less than (TO_DATE(' 2016-10-19 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161019 values less than (TO_DATE(' 2016-10-20 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161020 values less than (TO_DATE(' 2016-10-21 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161021 values less than (TO_DATE(' 2016-10-22 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161022 values less than (TO_DATE(' 2016-10-23 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161023 values less than (TO_DATE(' 2016-10-24 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161024 values less than (TO_DATE(' 2016-10-25 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161025 values less than (TO_DATE(' 2016-10-26 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161026 values less than (TO_DATE(' 2016-10-27 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161027 values less than (TO_DATE(' 2016-10-28 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161028 values less than (TO_DATE(' 2016-10-29 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161029 values less than (TO_DATE(' 2016-10-30 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161030 values less than (TO_DATE(' 2016-10-31 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_20161031 values less than (TO_DATE(' 2016-11-01 00:00:00', 'SYYYY-MM-DD HH24:MI:SS', 'NLS_CALENDAR=GREGORIAN'))
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    ),
  partition P_MAX values less than (MAXVALUE)
    tablespace TBS_OSECD_IC
    pctfree 10
    initrans 1
    maxtrans 255
    storage
    (
      initial 64K
      minextents 1
      maxextents unlimited
    )
);
comment on table OSECD.TB_MONTHCONSUME
  is 'IC卡消费记录';
comment on column OSECD.TB_MONTHCONSUME.cardno
  is '卡号';
comment on column OSECD.TB_MONTHCONSUME.consume
  is '消费次数';
comment on column OSECD.TB_MONTHCONSUME.remaintimes
  is '剩余次数';
comment on column OSECD.TB_MONTHCONSUME.balance
  is '剩余金额';
comment on column OSECD.TB_MONTHCONSUME.consumedate
  is '消费时间';
comment on column OSECD.TB_MONTHCONSUME.consumetype
  is '消费类型';
comment on column OSECD.TB_MONTHCONSUME.lineno
  is '线路名称';
comment on column OSECD.TB_MONTHCONSUME.busno
  is '车辆自编号';
comment on column OSECD.TB_MONTHCONSUME.flag
  is '1为新卡机数据入库标志';
comment on column OSECD.TB_MONTHCONSUME.discount
  is '打折比例';
comment on column OSECD.TB_MONTHCONSUME.busitype
  is '行业类型';
comment on column OSECD.TB_MONTHCONSUME.cardtype
  is '卡类型';
comment on column OSECD.TB_MONTHCONSUME.cardcatalog
  is '卡种类 02=交通部卡，01=CPU卡，00=M1卡';
comment on column OSECD.TB_MONTHCONSUME.citycardcode
  is '发卡机构 ';
comment on column OSECD.TB_MONTHCONSUME.consumenum
  is '消费金额';
comment on column OSECD.TB_MONTHCONSUME.actualnum
  is '实扣金额';
create index OSECD.IDX_ICCONSUME on OSECD.TB_MONTHCONSUME (CONSUMEDATE)
  local;

prompt
prompt Creating table TB_MONTHCONSUMETMP
prompt =================================
prompt
create table OSECD.TB_MONTHCONSUMETMP
(
  countserial   VARCHAR2(6),
  consumeserial NUMBER,
  consumecount  NUMBER,
  cardno        VARCHAR2(20),
  consume       NUMBER,
  remaintimes   NUMBER,
  balance       NUMBER,
  consumedate   DATE,
  consumetype   NUMBER,
  verifycode    VARCHAR2(8),
  drivercardno  VARCHAR2(12),
  lineno        VARCHAR2(20),
  busno         VARCHAR2(10),
  psam          VARCHAR2(12)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.TB_MONTHCONSUMETMP
  is 'IC卡消费记录临时表，用于计算客流数据';
comment on column OSECD.TB_MONTHCONSUMETMP.cardno
  is '卡号';
comment on column OSECD.TB_MONTHCONSUMETMP.consume
  is '消费次数';
comment on column OSECD.TB_MONTHCONSUMETMP.remaintimes
  is '剩余次数';
comment on column OSECD.TB_MONTHCONSUMETMP.balance
  is '剩余金额';
comment on column OSECD.TB_MONTHCONSUMETMP.consumedate
  is '消费时间';
comment on column OSECD.TB_MONTHCONSUMETMP.consumetype
  is '消费类型';
comment on column OSECD.TB_MONTHCONSUMETMP.lineno
  is '线路号';
comment on column OSECD.TB_MONTHCONSUMETMP.busno
  is '车号';
create index OSECD.IDX_ICCONSUMETMP on OSECD.TB_MONTHCONSUMETMP (CONSUMEDATE, CONSUMETYPE, LINENO, BUSNO)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IDX_ICCONSUMETMP1 on OSECD.TB_MONTHCONSUMETMP (CONSUMEDATE, BUSNO)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
create index OSECD.IDX_ICCONSUMETMP2 on OSECD.TB_MONTHCONSUMETMP (CONSUMEDATE)
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TEST_JIAOWEI_DTHC
prompt ================================
prompt
create table OSECD.TEST_JIAOWEI_DTHC
(
  routeid    VARCHAR2(20),
  subrouteid VARCHAR2(20),
  segmentid  VARCHAR2(36),
  stationid  VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TRANSFORM_ICCARD
prompt ===============================
prompt
create table OSECD.TRANSFORM_ICCARD
(
  id            VARCHAR2(20),
  cardtype_src  NUMBER not null,
  cardname_src  VARCHAR2(100),
  cardtype_des  NUMBER,
  cardname_des  VARCHAR2(100),
  card_price    NUMBER(5,2),
  card_discount NUMBER(5,3),
  memo          VARCHAR2(100)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.TRANSFORM_ICCARD.cardtype_src
  is 'IC卡类型编码';
comment on column OSECD.TRANSFORM_ICCARD.cardname_src
  is 'IC卡类型名称';
comment on column OSECD.TRANSFORM_ICCARD.cardtype_des
  is '系统统计的IC卡类型编码';
comment on column OSECD.TRANSFORM_ICCARD.cardname_des
  is '系统统计的IC卡类型名称';
comment on column OSECD.TRANSFORM_ICCARD.card_price
  is '单价';
comment on column OSECD.TRANSFORM_ICCARD.card_discount
  is '折扣';
comment on column OSECD.TRANSFORM_ICCARD.memo
  is '备注';
alter table OSECD.TRANSFORM_ICCARD
  add constraint IDX_TRANSFORM_ICCARD primary key (CARDTYPE_SRC)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TYPEENTRY
prompt ========================
prompt
create table OSECD.TYPEENTRY
(
  typeentryid VARCHAR2(36) not null,
  typename    VARCHAR2(50) not null,
  itemkey     VARCHAR2(50) not null,
  itemvalue   NUMBER not null,
  isdefault   CHAR(1) default '0',
  sequence    NUMBER,
  isactive    CHAR(1) default '1' not null,
  created     DATE,
  createby    VARCHAR2(36),
  updated     DATE,
  updateby    VARCHAR2(36),
  memos       VARCHAR2(255),
  leveltype   CHAR(1),
  vernum      NUMBER(8) default 0,
  parentid    VARCHAR2(36)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.TYPEENTRY
  is '字典参数表';
comment on column OSECD.TYPEENTRY.typeentryid
  is 'ID';
comment on column OSECD.TYPEENTRY.typename
  is '字典名称';
comment on column OSECD.TYPEENTRY.itemkey
  is '字典项';
comment on column OSECD.TYPEENTRY.itemvalue
  is '字典项值';
comment on column OSECD.TYPEENTRY.isdefault
  is '是否默认';
comment on column OSECD.TYPEENTRY.sequence
  is '序列号';
comment on column OSECD.TYPEENTRY.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.TYPEENTRY.leveltype
  is '字典级别 1,用户;0,系统';
comment on column OSECD.TYPEENTRY.vernum
  is '行版本号';
comment on column OSECD.TYPEENTRY.parentid
  is '当前字典项的父节点，关联字段（TYPEENTRYID）';
create index OSECD.IDX_TYPEENTRY on OSECD.TYPEENTRY (TYPENAME)
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.TYPEENTRY
  add constraint PK_TYPEENTRY primary key (TYPEENTRYID)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.TYPEENTRY
  add constraint UK_TYPEENTRY unique (TYPENAME, ITEMVALUE)
  using index 
  tablespace TBS_OSECD_INDX
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table TYPEENTRY_GJ
prompt ===========================
prompt
create table OSECD.TYPEENTRY_GJ
(
  typeentryid VARCHAR2(36) not null,
  typename    VARCHAR2(50) not null,
  itemkey     VARCHAR2(50) not null,
  itemvalue   NUMBER not null,
  isdefault   CHAR(1),
  sequence    NUMBER,
  isactive    CHAR(1) not null,
  created     DATE,
  createby    VARCHAR2(36),
  updated     DATE,
  updateby    VARCHAR2(36),
  memos       VARCHAR2(255),
  leveltype   CHAR(1),
  vernum      NUMBER(8),
  parentid    VARCHAR2(36),
  platcode    VARCHAR2(2) default '0',
  uploadtime  DATE default SYSDATE
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on column OSECD.TYPEENTRY_GJ.typeentryid
  is 'ID';
comment on column OSECD.TYPEENTRY_GJ.typename
  is '字典名称';
comment on column OSECD.TYPEENTRY_GJ.itemkey
  is '字典项';
comment on column OSECD.TYPEENTRY_GJ.itemvalue
  is '字典项值';
comment on column OSECD.TYPEENTRY_GJ.isdefault
  is '是否默认';
comment on column OSECD.TYPEENTRY_GJ.sequence
  is '序列号';
comment on column OSECD.TYPEENTRY_GJ.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.TYPEENTRY_GJ.leveltype
  is '字典级别 1,用户;0,系统';
comment on column OSECD.TYPEENTRY_GJ.vernum
  is '行版本号';
comment on column OSECD.TYPEENTRY_GJ.parentid
  is '当前字典项的父节点，关联字段（TYPEENTRYID）';
comment on column OSECD.TYPEENTRY_GJ.platcode
  is '平台编码';
comment on column OSECD.TYPEENTRY_GJ.uploadtime
  is '上传时间';

prompt
prompt Creating table TYPEENTRY_SGJ
prompt ============================
prompt
create table OSECD.TYPEENTRY_SGJ
(
  typeentry_sgjid VARCHAR2(20) not null,
  typename        VARCHAR2(20) not null,
  itemkey         VARCHAR2(50),
  itemvalue       NUMBER,
  isdefault       CHAR(1),
  sequence        NUMBER,
  isactive        CHAR(1) default '1' not null,
  created         DATE,
  createby        VARCHAR2(20),
  updated         DATE,
  updateby        VARCHAR2(20),
  memos           VARCHAR2(255),
  parent          VARCHAR2(20),
  leveltype       CHAR(1),
  vernum          NUMBER(8) default 0,
  typenameshow    NVARCHAR2(50),
  itemstrvalue    VARCHAR2(50)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.TYPEENTRY_SGJ
  is '字典参数表';
comment on column OSECD.TYPEENTRY_SGJ.typeentry_sgjid
  is 'ID';
comment on column OSECD.TYPEENTRY_SGJ.typename
  is '字典名称';
comment on column OSECD.TYPEENTRY_SGJ.itemkey
  is '字典项';
comment on column OSECD.TYPEENTRY_SGJ.itemvalue
  is '字典项值';
comment on column OSECD.TYPEENTRY_SGJ.isdefault
  is '是否默认';
comment on column OSECD.TYPEENTRY_SGJ.sequence
  is '序列号';
comment on column OSECD.TYPEENTRY_SGJ.isactive
  is '是否有效 1,有效;0,无效';
comment on column OSECD.TYPEENTRY_SGJ.parent
  is '当前字典项的父节点，关联字段（TYPEENTRY_sgjID）';
comment on column OSECD.TYPEENTRY_SGJ.leveltype
  is '字典级别 1,用户;0,系统';
comment on column OSECD.TYPEENTRY_SGJ.vernum
  is '行版本号';
comment on column OSECD.TYPEENTRY_SGJ.typenameshow
  is '字典名称';
comment on column OSECD.TYPEENTRY_SGJ.itemstrvalue
  is '字典项字符串值';

prompt
prompt Creating table USERSERVICES
prompt ===========================
prompt
create table OSECD.USERSERVICES
(
  name        VARCHAR2(40) not null,
  password    VARCHAR2(20),
  description VARCHAR2(100),
  type        CHAR(10)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
alter table OSECD.USERSERVICES
  add primary key (NAME)
  using index 
  tablespace TBS_OSECD
  pctfree 10
  initrans 2
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table VERSION
prompt ======================
prompt
create table OSECD.VERSION
(
  version  VARCHAR2(10) not null,
  cdate    DATE not null,
  memo     NVARCHAR2(200) not null,
  pversion VARCHAR2(10),
  filename NVARCHAR2(100)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.VERSION
  is '数据库脚本升级日志';
comment on column OSECD.VERSION.version
  is '数据库版本号';
comment on column OSECD.VERSION.cdate
  is '创建日期';
comment on column OSECD.VERSION.memo
  is '备注';
comment on column OSECD.VERSION.pversion
  is '程序版本号';
comment on column OSECD.VERSION.filename
  is '升级脚本文件';

prompt
prompt Creating table XT_VLINE
prompt =======================
prompt
create table OSECD.XT_VLINE
(
  id                           NUMBER,
  name                         VARCHAR2(100),
  isup                         NUMBER,
  headbuscorpname              VARCHAR2(100),
  buscorpname                  VARCHAR2(100),
  fleetname                    VARCHAR2(100),
  transportationdepartmentname VARCHAR2(100),
  linetype                     NUMBER,
  linetype2                    NUMBER,
  linemanagementtype           VARCHAR2(100),
  minvehiclescount             NUMBER,
  maxvehiclescount             NUMBER,
  fittedoutvehiclescount       NUMBER,
  ticketsystemtype             NUMBER,
  tickettype                   NUMBER,
  unitprice                    NUMBER(10,2),
  bottomprice                  NUMBER(10,2),
  topprice                     NUMBER(10,2),
  firststationname             VARCHAR2(100),
  laststationname              VARCHAR2(100),
  stopnames                    VARCHAR2(2000),
  roadnames                    VARCHAR2(2000),
  stopscount                   NUMBER,
  mileage                      NUMBER(10,2),
  servicestart                 VARCHAR2(100),
  serviceend                   VARCHAR2(100),
  isscheduledservice           NUMBER,
  scheduledservicedescription  VARCHAR2(2000),
  shapepolyline                CLOB
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table XT_VROUTESTOP
prompt ============================
prompt
create table OSECD.XT_VROUTESTOP
(
  lineid       NUMBER,
  name         VARCHAR2(100),
  isup         NUMBER,
  stopsequence NUMBER,
  stopid       NUMBER,
  mileage      NUMBER(10,2),
  codenumber   VARCHAR2(100)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 16K
    minextents 1
    maxextents unlimited
  );

prompt
prompt Creating table ZDXLGXB
prompt ======================
prompt
create table OSECD.ZDXLGXB
(
  routeid      VARCHAR2(20),
  stationid    VARCHAR2(36),
  dualserialid NUMBER(3),
  stationno    NVARCHAR2(8),
  stationname  NVARCHAR2(20)
)
tablespace TBS_OSECD
  pctfree 10
  initrans 1
  maxtrans 255
  storage
  (
    initial 64K
    minextents 1
    maxextents unlimited
  );
comment on table OSECD.ZDXLGXB
  is '站点线路关系表';

prompt
prompt Creating sequence MDRS_45792E$
prompt ==============================
prompt
create sequence OSECD.MDRS_45792E$
minvalue 1
maxvalue 999999999999999999999999999
start with 101
increment by 1
cache 100
order;

prompt
prompt Creating sequence MDRS_457936$
prompt ==============================
prompt
create sequence OSECD.MDRS_457936$
minvalue 1
maxvalue 999999999999999999999999999
start with 101
increment by 1
cache 100
order;

prompt
prompt Creating sequence MDRS_457E14$
prompt ==============================
prompt
create sequence OSECD.MDRS_457E14$
minvalue 1
maxvalue 999999999999999999999999999
start with 101
increment by 1
cache 100
order;

prompt
prompt Creating sequence QUEST_PPCM_SEQUENCE_1
prompt =======================================
prompt
create sequence OSECD.QUEST_PPCM_SEQUENCE_1
minvalue 1
maxvalue 999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence QUEST_PPCM_SEQUENCE_100
prompt =========================================
prompt
create sequence OSECD.QUEST_PPCM_SEQUENCE_100
minvalue 1
maxvalue 999999999999999999999999999
start with 1
increment by 100
nocache;

prompt
prompt Creating sequence QUEST_PPCM_SNAPSHOT_ID_S
prompt ==========================================
prompt
create sequence OSECD.QUEST_PPCM_SNAPSHOT_ID_S
minvalue 1
maxvalue 999999999999999999999999999
start with 3385
increment by 1
cache 20
order;

prompt
prompt Creating sequence QUEST_SOO_AT_SEQUENCE
prompt =======================================
prompt
create sequence OSECD.QUEST_SOO_AT_SEQUENCE
minvalue 1
maxvalue 999999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQLXG
prompt ========================
prompt
create sequence OSECD.SEQLXG
minvalue 1
maxvalue 99999999
start with 3
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQUE
prompt =======================
prompt
create sequence OSECD.SEQUE
minvalue 1
maxvalue 99999999999999999999
start with 1
increment by 1
cache 1000
cycle;

prompt
prompt Creating sequence SEQ_ASSESSTASKFUNCTION
prompt ========================================
prompt
create sequence OSECD.SEQ_ASSESSTASKFUNCTION
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_COSTACCVEHICLEARCHIVE
prompt ===========================================
prompt
create sequence OSECD.SEQ_COSTACCVEHICLEARCHIVE
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_EMERGENCYCONTACTS
prompt =======================================
prompt
create sequence OSECD.SEQ_EMERGENCYCONTACTS
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_EMERGENCYEVENT
prompt ====================================
prompt
create sequence OSECD.SEQ_EMERGENCYEVENT
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_EMERGENCYPLAN
prompt ===================================
prompt
create sequence OSECD.SEQ_EMERGENCYPLAN
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_EMERGENCYSCHEDULE
prompt =======================================
prompt
create sequence OSECD.SEQ_EMERGENCYSCHEDULE
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_EMERGENCYTYPE
prompt ===================================
prompt
create sequence OSECD.SEQ_EMERGENCYTYPE
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_FUELPRICE
prompt ===============================
prompt
create sequence OSECD.SEQ_FUELPRICE
minvalue 1
maxvalue 99999999999999999999
start with 1
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_ORGRUNDATACOMMIT
prompt ======================================
prompt
create sequence OSECD.SEQ_ORGRUNDATACOMMIT
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_ORGRUNINDICATORPLAN
prompt =========================================
prompt
create sequence OSECD.SEQ_ORGRUNINDICATORPLAN
minvalue 1
maxvalue 9999999999999999999
start with 121
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_OSEID
prompt ===========================
prompt
create sequence OSECD.SEQ_OSEID
minvalue 1
maxvalue 999999999999999999
start with 67845754
increment by 1
cache 20
cycle;

prompt
prompt Creating sequence SEQ_PROD
prompt ==========================
prompt
create sequence OSECD.SEQ_PROD
minvalue 1
maxvalue 99999999
start with 1
increment by 1
cache 2
cycle;

prompt
prompt Creating sequence SEQ_ROUTERUNDATACOMMIT
prompt ========================================
prompt
create sequence OSECD.SEQ_ROUTERUNDATACOMMIT
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_ROUTESAMPLEEXCEPT
prompt =======================================
prompt
create sequence OSECD.SEQ_ROUTESAMPLEEXCEPT
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_ROUTESAMPLERESULT
prompt =======================================
prompt
create sequence OSECD.SEQ_ROUTESAMPLERESULT
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_ROUTESEQMONTHSTD
prompt ======================================
prompt
create sequence OSECD.SEQ_ROUTESEQMONTHSTD
minvalue 1
maxvalue 9999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_ROUTESEQPLAN
prompt ==================================
prompt
create sequence OSECD.SEQ_ROUTESEQPLAN
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_ROUTESHIFTARRANGECHECK
prompt ============================================
prompt
create sequence OSECD.SEQ_ROUTESHIFTARRANGECHECK
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_RROLEPRIVILEGE
prompt ====================================
prompt
create sequence OSECD.SEQ_RROLEPRIVILEGE
minvalue 1
maxvalue 9999999999999999999999999
start with 21
increment by 1
cache 20;

prompt
prompt Creating sequence SEQ_TEMPROUTERUNDATACOMMIT
prompt ============================================
prompt
create sequence OSECD.SEQ_TEMPROUTERUNDATACOMMIT
minvalue 1
maxvalue 9999999999999999999999999
start with 1
increment by 1
cache 20;

prompt
prompt Creating sequence S_BSVCBUSARRLFTLD5
prompt ====================================
prompt
create sequence OSECD.S_BSVCBUSARRLFTLD5
minvalue 1
maxvalue 999999999999999999999999999
start with 48513361946
increment by 1
cache 5000;

prompt
prompt Creating sequence S_BSVCBUSCANALARMDATA
prompt =======================================
prompt
create sequence OSECD.S_BSVCBUSCANALARMDATA
minvalue 1
maxvalue 999999999999999999999999999
start with 1
increment by 1
cache 1000;

prompt
prompt Creating sequence S_BSVCBUSCANDATA
prompt ==================================
prompt
create sequence OSECD.S_BSVCBUSCANDATA
minvalue 1
maxvalue 999999999999999999999999999
start with 1
increment by 1
cache 1000;

prompt
prompt Creating sequence S_BSVCBUSCANDETECTDATA
prompt ========================================
prompt
create sequence OSECD.S_BSVCBUSCANDETECTDATA
minvalue 1
maxvalue 999999999999999999999999999
start with 1
increment by 1
cache 1000;

prompt
prompt Creating sequence S_BSVCBUSEMPDUTYLD5
prompt =====================================
prompt
create sequence OSECD.S_BSVCBUSEMPDUTYLD5
minvalue 1
maxvalue 99999999999999999999
start with 8474
increment by 1
cache 1000;

prompt
prompt Creating sequence S_BSVCBUSRUNDATALD5
prompt =====================================
prompt
create sequence OSECD.S_BSVCBUSRUNDATALD5
minvalue 1
maxvalue 999999999999999999999999999
start with 44213899300
increment by 1
cache 1000;

prompt
prompt Creating sequence S_BSVCBUSRUNSTATE_SZ
prompt ======================================
prompt
create sequence OSECD.S_BSVCBUSRUNSTATE_SZ
minvalue 1
maxvalue 999999999999999999999999999
start with 1
increment by 1
cache 1000;

prompt
prompt Creating sequence S_BSVCDEVMALRPTLD5
prompt ====================================
prompt
create sequence OSECD.S_BSVCDEVMALRPTLD5
minvalue 1
maxvalue 99999999999999999999
start with 187899
increment by 1
cache 1000;

prompt
prompt Creating sequence S_BUSRUNSTORAGE
prompt =================================
prompt
create sequence OSECD.S_BUSRUNSTORAGE
minvalue 1
maxvalue 99999999999999999999
start with 122408999
increment by 1
cache 1000
cycle;

prompt
prompt Creating sequence S_BUSSTORAGE
prompt ==============================
prompt
create sequence OSECD.S_BUSSTORAGE
minvalue 1
maxvalue 99999999999999999999
start with 54592580
increment by 1
cache 1000
cycle;

prompt
prompt Creating sequence S_DATACOMMUNICATIONLOG
prompt ========================================
prompt
create sequence OSECD.S_DATACOMMUNICATIONLOG
minvalue 1
maxvalue 99999999999999999999
start with 1
increment by 1
cache 1000
cycle;

prompt
prompt Creating sequence S_DEVEVENT5
prompt =============================
prompt
create sequence OSECD.S_DEVEVENT5
minvalue 1
maxvalue 99999999999999999999
start with 18317360
increment by 1
cache 1000;

prompt
prompt Creating sequence S_EMPSTORAGE
prompt ==============================
prompt
create sequence OSECD.S_EMPSTORAGE
minvalue 1
maxvalue 99999999999999999999
start with 9525193
increment by 1
cache 1000
cycle;

prompt
prompt Creating sequence S_INDICATOR
prompt =============================
prompt
create sequence OSECD.S_INDICATOR
minvalue 1
maxvalue 99999999999999999999999999
start with 1620135
increment by 1
cache 1000;

prompt
prompt Creating sequence S_LOG
prompt =======================
prompt
create sequence OSECD.S_LOG
minvalue 1
maxvalue 99999999999999999999
start with 35296622
increment by 1
cache 1000
cycle;

prompt
prompt Creating sequence S_PKG_GETSEQUENCE_LOG
prompt =======================================
prompt
create sequence OSECD.S_PKG_GETSEQUENCE_LOG
minvalue 1
maxvalue 99999999999999999999
start with 1
increment by 1
cache 1000
cycle;

prompt
prompt Creating sequence S_ROUTENETSTORAGE
prompt ===================================
prompt
create sequence OSECD.S_ROUTENETSTORAGE
minvalue 1
maxvalue 99999999999999999999
start with 3726336
increment by 1
cache 1000
cycle;

prompt
prompt Creating sequence S_ROUTESTORAGE
prompt ================================
prompt
create sequence OSECD.S_ROUTESTORAGE
minvalue 1
maxvalue 99999999999999999999
start with 2216980129
increment by 1
cache 1000
cycle;

prompt
prompt Creating sequence S_SERVERSTATUS
prompt ================================
prompt
create sequence OSECD.S_SERVERSTATUS
minvalue 1
maxvalue 9999999999999999
start with 1043
increment by 1
cache 1000;

prompt
prompt Creating sequence S_SITESTORAGE
prompt ===============================
prompt
create sequence OSECD.S_SITESTORAGE
minvalue 1
maxvalue 99999999999999999999
start with 803555010
increment by 1
cache 1000
cycle;

prompt
prompt Creating view CASHINCOMEDAYSTORAGEVW
prompt ====================================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.CASHINCOMEDAYSTORAGEVW AS
SELECT route.routetype,
       route.routegrade,
       mcorg2.orgname          AS subcompanyname,
       mcorg2.orgtype,
       mcorg3.orgname          AS companyname,
       rday."COMPANYID",
       rday."SUBCOMPANYID",
       rday."RECORDID",
       rday."ORGID",
       rday."ORGNAME",
       rday."ROUTEID",
       rday."ROUTENAME",
       rday."BUSID",
       rday."BUSCARDID",
       rday."STATIONID",
       rday."SOURCEFROM",
       rday."SOURCEFROMNAME",
       rday."TICKETSORT",
       rday."TICKETSORTNAME",
       rday."ICCARDTYPE",
       rday."ICCARDNAME",
       rday."TOTALINCOME",
       rday."PASSENGERFLOW",
       rday."DATASAVELEVEL",
       rday."STORAGEORGTYPE",
       rday."RECDATE",
       rday."FAVORABLE_INCOME",
       rday."FAVORABLE_FLOW",
       rday."JZDATE"
  FROM (SELECT org1.parentorgid AS companyid, t1.*
          FROM (SELECT org.parentorgid AS subcompanyid, sto.*
                  FROM JZ_CASHINCOME sto, mcorginfogs org
                 WHERE sto.orgid = org.orgid) t1,
               mcorginfogs org1
         WHERE t1.subcompanyid = org1.orgid) rday,
       mcrouteinfogs route,
       mcorginfogs mcorg2,
       mcorginfogs mcorg3
 WHERE rday.routeid = route.routeid
   AND mcorg2.orgid = rday.subcompanyid
   AND mcorg3.orgid = rday.companyid;

prompt
prompt Creating view CONSUMECARDTYPEVW
prompt ===============================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.CONSUMECARDTYPEVW AS
SELECT route.routetype,
       route.routegrade,
       mcorg2.orgname            AS subcompanyname,
       mcorg2.orgtype,
       mcorg3.orgname            AS companyname,
       rday."COMPANYID",
       rday."SUBCOMPANYID",
       rday."RECORDID",
       rday."ORGID",
       rday."ORGNAME",
       rday."ROUTEID",
       rday."ROUTENAME",
       rday."TIMEPHASETYPE",
       rday."TIMEPHASEVALUE",
       rday."TIMEPHASESTARTTIME",
       rday."TIMEPHASEENDTIME",
       rday."CARDTYPE",
       rday."CARDNAME",
       rday."CARDTYPECOUNT",
       rday."DATASAVELEVEL",
       rday."RECDATE",
       rday."JZDATE"
  FROM (SELECT org1.parentorgid AS companyid, t1.*
          FROM (SELECT org.parentorgid AS subcompanyid, sto.*
                  FROM jz_consumecardtype2 sto, mcorginfogs org
                 WHERE sto.orgid = org.orgid) t1,
               mcorginfogs org1
         WHERE t1.subcompanyid = org1.orgid) rday,
       mcrouteinfogs route,
       mcorginfogs mcorg2,
       mcorginfogs mcorg3
 WHERE rday.routeid = route.routeid
   AND mcorg2.orgid = rday.subcompanyid
   AND mcorg3.orgid = rday.companyid;

prompt
prompt Creating view CONSUMECARDTYPEVW2
prompt ================================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.CONSUMECARDTYPEVW2 AS
SELECT route.routetype,
       route.routegrade,
       mcorg2.orgname            AS subcompanyname,
       mcorg2.orgtype,
       mcorg3.orgname            AS companyname,
       rday."COMPANYID",
       rday."SUBCOMPANYID",
       rday."RECORDID",
       rday."ORGID",
       rday."ORGNAME",
       rday."ROUTEID",
       rday."ROUTENAME",
       rday."TIMEPHASETYPE",
       rday."TIMEPHASEVALUE",
       rday."TIMEPHASESTARTTIME",
       rday."TIMEPHASEENDTIME",
       rday."CARDTYPE",
       rday."CARDNAME",
       rday."CARDTYPECOUNT",
       rday."DATASAVELEVEL",
       rday."RECDATE",
       rday."JZDATE"
  FROM (SELECT org1.parentorgid AS companyid, t1.*
          FROM (SELECT org.parentorgid AS subcompanyid, sto.*
                  FROM jz_consumecardtype sto, mcorginfogs org
                 WHERE sto.orgid = org.orgid) t1,
               mcorginfogs org1
         WHERE t1.subcompanyid = org1.orgid) rday,
       mcrouteinfogs route,
       mcorginfogs mcorg2,
       mcorginfogs mcorg3
 WHERE rday.routeid = route.routeid
   AND mcorg2.orgid = rday.subcompanyid
   AND mcorg3.orgid = rday.companyid;

prompt
prompt Creating view MCORGINFOVW
prompt =========================
prompt
create or replace force view osecd.mcorginfovw as
select ORGID,
       ORGCODE,
       ORGNAME,
       ORGGRADE,
       ORGTYPE,
       PARENTORGID,
       REGIONAREA,
       REGIONLEVEL,
       PRINCIPAL,
       LINKMAN,
       ADDRESS,
       TELEPHONE,
       POST,
       FAX,
       REGISTERDATE,
       ISACTIVE,
       MEMOS,
       UPDATED,
       UPDATEDBY,
       CREATED,
       CREATEDBY
  from mcorginfogs
 where orgtype = 1
   and isactive = 1;

prompt
prompt Creating view MCROUTEINFOVW
prompt ===========================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.MCROUTEINFOVW AS
SELECT "ROUTEID",
       "ROUTENAME",
       "ROUTECODE",
       "ORGID",
       "ROUTESTYLE",
       "ROUTETYPE",
       "ROUTEGRADE",
       "PRINCIPAL",
       "BEGINDATE",
       "ENDDATE",
       "ISCONDUCTOR",
       "ISAPTS",
       "ISEXISTSACCOMMODATIONROAD",
       "DISPATCHTYPE",
       "ISACTIVE",
       "MEMOS",
       "CREATED",
       "CREATEDBY",
       "UPDATED",
       "UPDATEDBY" --271
  FROM MCROUTEINFOGS R
 WHERE R.ROUTEID IN (SELECT ROUTEID
                       FROM MCSUBROUTEINFOGS S
                      WHERE SYSDATE BETWEEN S.BEGINDATE AND S.ENDDATE
                        AND S.ISACTIVE = '1')
   AND R.ROUTEID IN (SELECT ROUTEID
                       FROM MCROUTEINFOGS RR
                      WHERE SYSDATE BETWEEN RR.BEGINDATE AND RR.ENDDATE
                        AND RR.ISACTIVE = '1')
   AND R.ORGID <> '55090611115542250000'
   AND R.ORGID IN (SELECT ORGID FROM MCORGINFOVW T WHERE T.ORGID != '2361')
;

prompt
prompt Creating view MCBUSINFOVW
prompt =========================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.MCBUSINFOVW AS
SELECT "BUSID",
       "ORGID",
       "CARDID",
       "BUSSELFID",
       "BUYDATE",
       "USEDATE",
       "USEDFOR",
       "USELESSCYC",
       "REALUSELESSDATE",
       "USELESSMILES",
       "USELESSFLAG",
       "STDCOEFFICIENT",
       "HASICCARDEQMT",
       "BUSINVIDEOCOUNT",
       "BUSOUTVIDEOCOUNT",
       "HASINBUSLED",
       "HASHEADBUSLED",
       "HASCONDITION",
       "ISLOWFLOOR",
       "BUSGRADE",
       "FUELTYPE",
       "MILECOEFFICIENT",
       "SEATCOUNT",
       "STANDCOUNT",
       "BUSMACHINEID",
       "PRODUCTID",
       "ISACTIVE",
       "MEMOS",
       "CREATED",
       "CREATEDBY",
       "UPDATED",
       "UPDATEDBY" --7653 --7648
  FROM MCBUSINFOGS B
 WHERE B.BUSID IN
       (SELECT DISTINCT BUSID
          FROM MCRBUSROUTEGS R
         WHERE R.ROUTEID IN (SELECT ROUTEID FROM MCROUTEINFOVW S))
   AND B.ISACTIVE = '1'
;

prompt
prompt Creating view MCSTATIONINFOVW
prompt =============================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.MCSTATIONINFOVW AS
SELECT "STATIONID","STATIONNO","STATIONNAME","ALIASNAME","LONGITUDE","LATITUDE","STATIONPOSITION","REGIONLEVEL","REGIONAREA","HASELEBOARD","HASWAITINGBOISK","ISHANGESTATION","ISFLEETSTATION","FLEETSTATIONBUSCOUNT","ISMAINFLEETSTATION","STATIONLENGTH","ISACTIVE","MEMOS","CREATED","CREATEDBY","UPDATED","UPDATEDBY" --4278
  FROM MCSTATIONINFOGS S
 WHERE S.STATIONID IN
       (SELECT DISTINCT STATIONID
          FROM MCRSEGMENTSTATIONGS R
         WHERE R.SUBROUTEID IN
               (SELECT SUBROUTEID
                  FROM MCSUBROUTEINFOGS S
                 WHERE SYSDATE BETWEEN S.BEGINDATE AND S.ENDDATE
                   AND S.ISACTIVE = '1')
           AND R.ROUTEID IN
               (SELECT ROUTEID
                  FROM MCROUTEINFOGS RR
                 WHERE SYSDATE BETWEEN RR.BEGINDATE AND RR.ENDDATE
                   AND RR.ISACTIVE = '1'))
;

prompt
prompt Creating view ORGROUTEVW
prompt ========================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.ORGROUTEVW AS
SELECT org.orgid, org.orgcode, org.orgname, org.orgtype, org.parentorgid
  FROM mcorginfogs org
 WHERE org.isactive = '1'
   AND org.orgtype IN ('1', '2', '3')
UNION
SELECT to_char(route.routeid),
       route.routecode,
       route.routename,
       '100',
       route.orgid
  FROM mcrouteinfogs route
 WHERE route.orgid IS NOT NULL
   AND route.isactive = '1';

prompt
prompt Creating view QUEST_SOO_AT_EXECUTION_PLAN_V
prompt ===========================================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.QUEST_SOO_AT_EXECUTION_PLAN_V AS
SELECT trace_file_id, ep.sql_id, ep.parse_id, ep.ID, ep.cnt, ep.pid,
          ep.pos, ep.obj, ep.cr, ep.pr, ep.pw, ep.time_us,
          o.operation_string op
     FROM quest_soo_at_execution_plan ep JOIN quest_soo_at_operations o
          USING (trace_file_id, operation_id);

prompt
prompt Creating view QUEST_SOO_AT_SQL_WAITS_V
prompt ======================================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.QUEST_SOO_AT_SQL_WAITS_V AS
SELECT *
  FROM quest_soo_at_sql_waits
  JOIN quest_soo_at_wait_names USING (event_id);

prompt
prompt Creating view ROUTEBASICDATAPHASESTORAGEVW
prompt ==========================================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.ROUTEBASICDATAPHASESTORAGEVW AS
SELECT route.routetype,
       route.routegrade,
       mcorg1.orgname,
       mcorg2.orgname                 AS subcompanyname,
       mcorg2.orgtype,
       mcorg3.orgname                 AS companyname,
       rday."COMPANYID",
       rday."SUBCOMPANYID",
       rday."ORGID",
       rday."ROUTEID",
       rday."ROUTENAME",
       rday."RECORDID",
       rday."BUSCOUNT",
       rday."STANDARDBUSCOUNT",
       rday."SEATCOUNT",
       rday."PSGCOUNT",
       rday."EMPLOYEECOUNT",
       rday."STATIONCOUNT",
       rday."ROUTELENGTH",
       rday."AVERAGESTATIONDISTANCE",
       rday."MAXSTATIONDISTANCE",
       rday."MINSTATIONDISTANCE",
       rday."ACCOMMODATIONLENGTH",
       rday."ISAPTS",
       rday."ROUTENONBEELINECFST",
       rday."ROUTESIDENONPOISECFST",
       rday."ROUTEDIRECTNONPOISECFST",
       rday."ROUTETIMEPOISECFST",
       rday."DATASAVELEVEL",
       rday."CIRCULATETIME",
       rday."FSTSTATIONID",
       rday."LSTSTATIONID",
       rday."SUBROUTEID",
       rday."SUBROUTENAME",
       rday."RECDATE",
       rday."JZDATE"
  FROM (SELECT org1.parentorgid AS companyid, t1.*
          FROM (SELECT org.parentorgid AS subcompanyid, sto.*
                  FROM jz_routebasicdataphasestorage sto, mcorginfogs org
                 WHERE sto.orgid = org.orgid) t1,
               mcorginfogs org1
         WHERE t1.subcompanyid = org1.orgid) rday,
       mcrouteinfogs route,
       mcorginfogs mcorg1,
       mcorginfogs mcorg2,
       mcorginfogs mcorg3
 WHERE rday.routeid = route.routeid
   AND mcorg1.orgid = rday.orgid
   AND mcorg2.orgid = rday.subcompanyid
   AND mcorg3.orgid = rday.companyid;

prompt
prompt Creating view ROUTEDAYSTORAGEVW
prompt ===============================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.ROUTEDAYSTORAGEVW AS
SELECT route.routetype,
       route.routegrade,
       mcorg1.orgname,
       mcorg2.orgname              AS subcompanyname,
       mcorg2.orgtype,
       mcorg3.orgname              AS companyname,
       rday."COMPANYID",
       rday."SUBCOMPANYID",
       rday."RECORDID",
       rday."ROUTEID",
       rday."ROUTENAME",
       rday."LOADPSGCAPABILITY",
       rday."PLANSEQMILE",
       rday."GPSMILES",
       rday."RUNMILES",
       rday."UNRUNMILES",
       rday."DEVOTIONBUSCOUNT",
       rday."DEVOTIONEMPCOUNT",
       rday."FSTONTIMECOUNT",
       rday."LSTONTIMECOUNT",
       rday."ONTIMESEQCOUNT",
       rday."BIGSTATIONONTIMERATE",
       rday."PLANSEQCOUNT",
       rday."ACTUALSEQCOUNT",
       rday."BUSSENDINTERVALSTD",
       rday."BUSDISTANCERATE",
       rday."STATIONKEEPBACKRATE",
       rday."OVERSPEEDCOUNT",
       rday."UNRULESTOPCOUNT",
       rday."MDLOPENDOORCOUNT",
       rday."RUNCIRCLETIME",
       rday."ROUTERUNTIME",
       rday."ROUTESTOPTIME",
       rday."DATASAVELEVEL",
       rday."ORGID",
       rday."PLANBUSCOUNT",
       rday."PLANEMPCOUNT",
       rday."FSTLSTSEQCOUNT",
       rday."RECDATE",
       rday."JZDATE",
       rday."DRIVERDRIVETIME",
       rday."DRIVERONWORKTIME"
  FROM (SELECT org1.parentorgid AS companyid, t1.*
          FROM (SELECT org.parentorgid AS subcompanyid, sto.*
                  FROM jz_routedaystorage sto, mcorginfogs org
                 WHERE sto.orgid = org.orgid  and sto.datasavelevel=3 and sto.storageorgtype=4) t1,
               mcorginfogs org1
         WHERE t1.subcompanyid = org1.orgid) rday,
       mcrouteinfogs route,
       mcorginfogs mcorg1,
       mcorginfogs mcorg2,
       mcorginfogs mcorg3
 WHERE rday.routeid = route.routeid
   AND mcorg1.orgid = rday.orgid
   AND mcorg2.orgid = rday.subcompanyid
   AND mcorg3.orgid = rday.companyid;

prompt
prompt Creating view TIMEPHASEDATASTORAGEVW
prompt ====================================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.TIMEPHASEDATASTORAGEVW AS
SELECT route.routetype,
       route.routegrade,
       mcorg1.orgname,
       mcorg2.orgname               AS subcompanyname,
       mcorg3.orgname               AS companyname,
       rtime."COMPANYID",
       rtime."SUBCOMPANYID",
       rtime."RECORDID",
       rtime."ORGID",
       rtime."ROUTEID",
       rtime."ROUTENAME",
       rtime."JZDATE",
       rtime."TIMEPHASETYPE",
       rtime."TIMEPHASEVALUE",
       rtime."TIMEPHASESTARTTIME",
       rtime."TIMEPHASEENDTIME",
       rtime."TIMEPHASEINTERVAL",
       rtime."TIMEPHASECIRCLETIME",
       rtime."STDSEQS",
       rtime."LOADPSGCAPABILITY",
       rtime."PLANSEQMILE",
       rtime."GPSMILES",
       rtime."RUNMILES",
       rtime."UNRUNMILES",
       rtime."DEVOTIONBUSCOUNT",
       rtime."DEVOTIONEMPCOUNT",
       rtime."PLANBUSCOUNT",
       rtime."PLANEMPCOUNT",
       rtime."PSGCOUNT",
       rtime."PLANSEQCOUNT",
       rtime."ACTUALSEQCOUNT",
       rtime."ACTUALINTERVAL",
       rtime."ACTUALCIRCLETIME",
       rtime."BUSSENDINTERVALSTD",
       rtime."BUSDISTANCERATE",
       rtime."STATIONKEEPBACKRATE",
       rtime."OVERSPEEDCOUNT",
       rtime."UNRULESTOPCOUNT",
       rtime."MDLOPENDOORCOUNT",
       rtime."RUNCIRCLETIME",
       rtime."ROUTERUNTIME",
       rtime."ROUTESTOPTIME",
       rtime."BUSSENDSPEED",
       rtime."BUSRUNSPEED",
       rtime."ONTIMESEQCOUNT",
       rtime."BIGSTATIONONTIMERATE",
       rtime."DATASAVELEVEL",
       rtime."RECDATE",
       rtime."SUMBUSCOUNT",
       rtime."ROUTECODE"
  FROM (SELECT org1.parentorgid AS companyid, t1.*
          FROM (SELECT org.parentorgid AS subcompanyid, sto.*
                  FROM jz_timephasedatastorage2 sto, mcorginfogs org
                 WHERE sto.orgid = org.orgid and sto.datasavelevel=3 and sto.storageorgtype=4) t1,
               mcorginfogs org1
         WHERE t1.subcompanyid = org1.orgid) rtime,
       mcrouteinfogs route,
       mcorginfogs mcorg1,
       mcorginfogs mcorg2,
       mcorginfogs mcorg3
 WHERE rtime.routeid = route.routeid
   AND mcorg1.orgid = rtime.orgid
   AND mcorg2.orgid = rtime.subcompanyid
   AND mcorg3.orgid = rtime.companyid;

prompt
prompt Creating view TIMEPHASESTORAGEVW
prompt ================================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.TIMEPHASESTORAGEVW AS
SELECT route.routetype,
       route.routegrade,
       mcorg1.orgname,
       mcorg2.orgname             AS subcompanyname,
       mcorg2.orgtype,
       mcorg3.orgname             AS companyname,
       rday."COMPANYID",
       rday."SUBCOMPANYID",
       rday."RECORDID",
       rday."ROUTEID",
       rday."ROUTENAME",
       rday."TIMEPHASETYPE",
       rday."TIMEPHASEVALUE",
       rday."TIMEPHASESTARTTIME",
       rday."TIMEPHASEENDTIME",
       rday."LOADPSGCAPABILITY",
       rday."PLANSEQMILE",
       rday."GPSMILES",
       rday."RUNMILES",
       rday."UNRUNMILES",
       rday."DEVOTIONBUSCOUNT",
       rday."DEVOTIONEMPCOUNT",
       rday."PSGCOUNT",
       rday."PLANSEQCOUNT",
       rday."ACTUALSEQCOUNT",
       rday."BUSSENDINTERVALSTD",
       rday."BUSDISTANCERATE",
       rday."STATIONKEEPBACKRATE",
       rday."OVERSPEEDCOUNT",
       rday."UNRULESTOPCOUNT",
       rday."MDLOPENDOORCOUNT",
       rday."RUNCIRCLETIME",
       rday."ROUTERUNTIME",
       rday."ROUTESTOPTIME",
       rday."BUSSENDSPEED",
       rday."BUSRUNSPEED",
       rday."DATASAVELEVEL",
       rday."ORGID",
       rday."PLANBUSCOUNT",
       rday."PLANEMPCOUNT",
       rday."TIMEPHASEINTERVAL",
       rday."TIMEPHASECIRCLETIME",
       rday."STDSEQS",
       rday."ACTUALINTERVAL",
       rday."ACTUALCIRCLETIME",
       rday."RECDATE",
       rday."JZDATE",
       rday."SUMBUSCOUNT"
  FROM (SELECT org1.parentorgid AS companyid, t1.*
          FROM (SELECT org.parentorgid AS subcompanyid, sto.*
                  FROM jz_timephasedatastorage sto, mcorginfogs org
                 WHERE sto.orgid = org.orgid) t1,
               mcorginfogs org1
         WHERE t1.subcompanyid = org1.orgid) rday,
       mcrouteinfogs route,
       mcorginfogs mcorg1,
       mcorginfogs mcorg2,
       mcorginfogs mcorg3
 WHERE rday.routeid = route.routeid
   AND mcorg1.orgid = rday.orgid
   AND mcorg2.orgid = rday.subcompanyid
   AND mcorg3.orgid = rday.companyid;

prompt
prompt Creating view TIMEPHASESTORAGEVW2
prompt =================================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.TIMEPHASESTORAGEVW2 AS
SELECT route.routetype,
       route.routegrade,
       mcorg1.orgname,
       mcorg2.orgname             AS subcompanyname,
       mcorg2.orgtype,
       mcorg3.orgname             AS companyname,
       rday."COMPANYID",
       rday."SUBCOMPANYID",
       rday."RECORDID",
       rday."ROUTEID",
       rday."ROUTENAME",
       rday."TIMEPHASETYPE",
       rday."TIMEPHASEVALUE",
       rday."TIMEPHASESTARTTIME",
       rday."TIMEPHASEENDTIME",
       rday."LOADPSGCAPABILITY",
       rday."PLANSEQMILE",
       rday."GPSMILES",
       rday."RUNMILES",
       rday."UNRUNMILES",
       rday."DEVOTIONBUSCOUNT",
       rday."DEVOTIONEMPCOUNT",
       rday."PSGCOUNT",
       rday."PLANSEQCOUNT",
       rday."ACTUALSEQCOUNT",
       rday."BUSSENDINTERVALSTD",
       rday."BUSDISTANCERATE",
       rday."STATIONKEEPBACKRATE",
       rday."OVERSPEEDCOUNT",
       rday."UNRULESTOPCOUNT",
       rday."MDLOPENDOORCOUNT",
       rday."RUNCIRCLETIME",
       rday."ROUTERUNTIME",
       rday."ROUTESTOPTIME",
       rday."BUSSENDSPEED",
       rday."BUSRUNSPEED",
       rday."DATASAVELEVEL",
       rday."ORGID",
       rday."PLANBUSCOUNT",
       rday."PLANEMPCOUNT",
       rday."TIMEPHASEINTERVAL",
       rday."TIMEPHASECIRCLETIME",
       rday."STDSEQS",
       rday."ACTUALINTERVAL",
       rday."ACTUALCIRCLETIME",
       rday."RECDATE",
       rday."JZDATE",
       rday."SUMBUSCOUNT"
  FROM (SELECT org1.parentorgid AS companyid, t1.*
          FROM (SELECT org.parentorgid AS subcompanyid, sto.*
                  FROM jz_timephasedatastorage2 sto, mcorginfogs org
                 WHERE sto.orgid = org.orgid) t1,
               mcorginfogs org1
         WHERE t1.subcompanyid = org1.orgid) rday,
       mcrouteinfogs route,
       mcorginfogs mcorg1,
       mcorginfogs mcorg2,
       mcorginfogs mcorg3
 WHERE rday.routeid = route.routeid
   AND mcorg1.orgid = rday.orgid
   AND mcorg2.orgid = rday.subcompanyid
   AND mcorg3.orgid = rday.companyid;

prompt
prompt Creating view V_CACHEBUSINFO
prompt ============================
prompt
create or replace force view osecd.v_cachebusinfo as
select suporg.orgid as suporgid,
       suporg.orgname as suporgname,
       suporg.telephone AS phones,
       org.orgid,
       org.orgname,
       org.orgcode,
       R.routename,
       (select trg.itemkey
          from typeentry trg
         where trg.typename = 'ROUTEGRADE'
           and R.routegrade = trg.itemvalue) as routegrade,
       B.productid,
       B.cardid,
       B.BUSID,
       B.BUSSELFID,
       (select thc.itemkey
          from typeentry thc
         where thc.typename = 'HASCONDITION'
           and B.hascondition = thc.itemvalue) as hascondition,
       (select tot.itemkey
          from typeentry tot
         where tot.typename = 'OILTYPE'
           and B.fueltype = tot.itemvalue) as fueltype,
       B.MEMOS as busgrade,
       B.seatcount,
       B.standcount
  from mcbusinfogs   B,
       mcrbusroutegs BR,
       mcrouteinfogs R,
       mcorginfogs   org,
       mcorginfogs   suporg
 where B.busid = BR.busid
   and BR.routeid = R.routeid
   and R.orgid = org.orgid
   and org.parentorgid = suporg.orgid;

prompt
prompt Creating view V_SEGMENTINFO
prompt ===========================
prompt
create or replace force view osecd.v_segmentinfo as
select seg.segmentid,
       seg.segmentname,
       r.routename,
       R.ROUTECODE,
       (select ty1.itemkey
          from typeentry ty1
         where ty1.typename = 'RUNDIRECTION'
           and seg.rundirection = ty1.itemvalue) as rundirection,
       seg.fstsendtime,seg.lstsentime,
       seg.sngmile,seg.sngtime,
        (select s1.stationname from mcstationinfogs s1 where s1.stationid = seg.fststationid) as fststationname,
        (select s2.stationname from mcstationinfogs s2 where s2.stationid = seg.lststationid) as lststationname,
        seg.stationnum
  from mcsegmentinfogs seg, mcrouteinfogs r
 where seg.routeid = r.routeid;

prompt
prompt Creating view V_TYPEENTRYTREE
prompt =============================
prompt
CREATE OR REPLACE FORCE VIEW OSECD.V_TYPEENTRYTREE AS
SELECT T2.TYPEENTRYID AS PTYPEID,T2.TYPENAME AS PTYPENAME,T2.ITEMKEY AS PITEMKEY,T2.ITEMVALUE AS PITEMVALUE,
T1.TYPEENTRYID AS TYPEENTRYID,T1.TYPENAME AS TYPENAME,T1.ITEMKEY AS ITEMKEY,T1.ITEMVALUE AS ITEMVALUE
 FROM TYPEENTRY T1,TYPEENTRY T2
WHERE T1.PARENTID = T2.TYPEENTRYID;

prompt
prompt Creating package PKG_DBA_MANAGE
prompt ===============================
prompt
create or replace package osecd.PKG_DBA_MANAGE is
  /*************************************************************************
  使用说明：
  1、自动创建分区
     数据库初始化时自动创建JOB，每月1日创建下月分区。
      A、调用存储过程：pkg_dba_manage.P_PARTITION_ADD
      B、参数配置在数据表:DBA_PART_TABLE
  2、手动创建分区
      A、调用存储过程pkg_dba_manage.P_PARTITION_ADD，自动创建当月的表分区，
         参数信息记录在表DBA_PART_TABLE中
      B、调用存储过程pkg_dba_manage.P_PARTITION_ADD(v_date)，自动创建指定月份的表分区，
         参数信息记录在表DBA_PART_TABLE中.
         例如pkg_dba_manage.P_PARTITION_ADD(date‘2012-01-04’)，则自动创建2012年1月的所有分区
      --------------------------------------------------------------------------------------------
      C、调用存储MANUAL_ADD_PARTITION，指定月份、表名、表空间名称、表分区类型（0-日分区，1-月分区）参数。

  3、自动删除分区*****
     数据库初始化不创建自动删除分区的JOB，一般由手工删除。
     因为自动删除会删除指定g_del_months个月份前的所有分区表，
     A、调用存储过程：pkg_dba_manage.P_PARTITION_DEL
     B、参数配置在数据表:DBA_PART_TABLE
  4、手动删除分区
      A、调用存储过程pkg_dba_manage.P_PARTITION_DEL，自动删除当月的表分区，
         参数信息记录在表DBA_PART_TABLE中,删除所有分区表的当月分区 （不建议使用）
      B、调用存储过程pkg_dba_manage.P_PARTITION_DEL(v_date)，自动创建指定月份的表分区，
         参数信息记录在表DBA_PART_TABLE中,删除所有分区表的指定月分区 （不建议使用）
         例如pkg_dba_manage.P_PARTITION_DEL(date‘2012-01-04’)，则自动创建2012年1月的所有分区
       -------------------------------------------------------------------------------------
      C、调用存储MANUAL_DELL_PARTITION，指定月份、表名、表分区类型（0-日分区，1-月分区）参数。

  *************************************************************************/
  --------------------------------------------------------------------------
  -- 需调整常量，注意路径必须用/
  --------------------------------------------------------------------------
  -- 分区文件路径
  --AIX LINUX 为 +DATA
  --windows   为   G:\ORACLE\APTSJY\
  g_file_path VARCHAR2(64) := '+DATA/';
  -- g_file_path VARCHAR2(64) := '+DATA';  -- FOR ASM

  -- 用户名
  --g_user_name VARCHAR2(64) := 'osecd';
  -- 口令
  --g_password VARCHAR2(64) := 'cd';

  -- 保留几个月数据
  g_del_months NUMBER := 12;
 ---------------------------------------------------------------------------
  g_true  char(1) := '1';
  g_false char(1) := '0';

  --------------------------------------------------------------------------
  TYPE log_info IS RECORD(
    submodule   VARCHAR2(20), -- 包名
    log_level   NUMBER(1), -- 日志等级 1-DEBUG；2-INFO；3-ERROR
    log_context VARCHAR2(200), -- 日志内容
    actdatetime DATE,
    actendtime  DATE,
    log_type    NUMBER(2), -- 日志类型
    route_id    NUMBER(8));

  -- 添加分区
  PROCEDURE P_PARTITION_ADD;
  PROCEDURE P_PARTITION_ADD2(v_ret out VARCHAR2);
  -- 手工添加分区
  PROCEDURE P_PARTITION_ADD(v_date IN DATE);

  -- 删除分区
  PROCEDURE P_PARTITION_DEL;
  -- 手工删除分区
  PROCEDURE P_PARTITION_DEL(v_date IN DATE);

  PROCEDURE P_INIT;
  FUNCTION exist_partition(v_tablename varchar2, v_partname varchar2)
    RETURN boolean;
  PROCEDURE ADD_PARTITION(v_date date, v_ret out varchar2);
  PROCEDURE DEL_PARTITION(v_date date, v_ret out varchar2);


  PROCEDURE MANUAL_ADD_PARTITION(v_date           date,
                                 v_tablename      varchar2,
                                 v_tablespacename varchar2,
                                 v_partition_type varchar2);
  PROCEDURE MANUAL_DEL_PARTITION(v_date           date,
                                 v_tablename      varchar2,
                                 v_partition_type varchar2);
  PROCEDURE DEL_PARTITION(v_begindate date, v_enddate date) ;

END;
/

prompt
prompt Creating package PKG_DEAL_PART_TAB
prompt ==================================
prompt
create or replace package osecd.PKG_DEAL_PART_TAB Authid Current_User as
  /*
    create by hujihuo at 2010-11-10
    功能： 实现普通表到分区表自动改造工作
    参数含义：
      p_tab in varchar2,                 -----------------需要进行分区的普通表的表名
      p_deal_flag in number default 0,   -----------------0为不执行，只将脚本记录进part_tab_log的sql_text字段中，1为不仅记录，而且执行！
      p_parallel in number default 4,    -----------------分区操作中的并行度，默认为4
      p_part_colum in varchar2,          -----------------需要分区的列，本程序主要针对最常见的时间范围类型分区，按月份分区
      p_part_nums in number default 24,  -----------------默认情况下为最近一个月到后续24个月，可以自行选择
      p_tablespace IN VARCHAR2           -----------------分区表的表空间

    处理逻辑分为如下几个程序：
      P_RENAME (p_tab); ---将原表先RENAME为YYYYMMDD的后缀名的表
      p_ctas (p_tab ,p_deal_flag, p_part_colum,p_parallel ,p_tablespace ); ---CTAS建立除部分分区的分区表
      p_split_part(p_tab ,p_deal_flag,p_part_nums ,p_tablespace); ---将分区表分区完整
      p_deal_comments(p_tab,p_deal_flag);  --增加分区表的注释
      p_deal_default (p_tab,p_deal_flag);  --增加分区表的默认值判断
      p_deal_check   (p_tab,p_deal_flag);  --增加分区表的CHECK判断
      P_DROP_CONS_IDX(P_TAB||YYYYMMDD,p_deal_flag); ---将RENAME后的表的索引和约束删除，以方便新表建索引和约束不会冲突

  -------------------------------------------------------------------------------------------------------------------------------
    注意：
      1. PART_TAB_LOG是用来记录操作日志的
      create table PART_TAB_LOG
       (
        TAB_NAME    VARCHAR2(200),
        DEAL_MODEL   VARCHAR2(200),
        SQL_TEXT     VARCHAR2(4000),
        DEAL_TIME    DATE,
        remark       VARCHAR2(4000),
        exec_order1   number,
        exec_order2  number
       )

       2.在不执行脚本，只获取脚本时，脚本可以用如下方式获取，并手工执行
       select sql_text||';' from part_tab_log t where tab_name='ts_real_datatrance' order by exec_order1,exec_order2

   ------------------------------------------------------------------------------------------------------------------------------
     执行方法：
       set serveroutput on size 1000
       exec pkg_deal_part_tab.p_main(p_tab => 'ts_real_datatrance', p_deal_flag => 1, p_parallel => 4, p_part_colum => 'trans_date',p_part_nums=> 24,p_tablespace => 'TBS_BOSSWG');

     或者可以如下让p_deal_flag => 0，只将执行脚本记录进part_tab_log表中，而并不真正执行
       set serveroutput on size 1000
       exec pkg_deal_part_tab.p_main(p_tab => 'ts_real_datatrance', p_deal_flag => 0, p_parallel => 4, p_part_colum => 'trans_date',p_part_nums=> 24,p_tablespace => 'TBS_BOSSWG');
  ----------------------------------------------------------------------------------------------------------------------------------
  */
  g_partition_startdate DATE:=DATE'2012-01-01';
  g_partition_enddate DATE:=DATE'2015-12-31';

  --重命名表
  procedure P_RENAME(v_tablename in varchar2);
  --创建分区表
  procedure P_CREATEAS(v_tablename      in varchar2,
                       v_tablespacename IN VARCHAR2,
                       v_part_column    in varchar2,
                       v_struct_only    in number,
                       v_deal_flag      in number,
                       v_parallel       in number default 4);
  --切分指定分区数
  procedure P_SPLIT_PART(v_tablename      in varchar2,
                         v_tablespacename IN VARCHAR2,
                         v_deal_flag      in number,
                         v_part_nums      in number default 2,
                         v_part_type      in number default 0);
  --处理表注释
  procedure P_DEAL_TAB_COMMENTS(v_tablename in varchar2,
                                v_deal_flag in number);
  --处理列注释
  procedure P_DEAL_COL_COMMENTS(v_tablename in varchar2,
                                v_deal_flag in number);
  --处理缺省值
  procedure P_DEAL_DEFALUT_AND_NULLABLE(v_tablename in varchar2,
                                        v_deal_flag in number);
  --处理表CHECK判断
  procedure P_DEAL_CHECK(v_tablename in varchar2, v_deal_flag in number);
  --处理表主键
  procedure P_DEAL_PK(v_tablename      in varchar2,
                      v_deal_flag      in number,
                      v_idx_tablespace IN VARCHAR2);
  --处理表约束
  procedure P_DEAL_CONSTRAINT(v_tablename in varchar2,
                              v_deal_flag in number);
  --处理表索引
  procedure P_DEAL_IDX(v_tablename      in varchar2,
                       v_deal_flag      in number,
                       v_idx_tablespace IN VARCHAR2);
  procedure P_MAIN(v_tablename      in varchar2,
                   v_tab_tablespace IN VARCHAR2,
                   v_idx_tablespace IN VARCHAR2,
                   v_part_column    in varchar2,
                   v_part_type      in number default 0,
                   v_part_nums      in number default 2,
                   v_parallel       in number default 4,
                   v_deal_flag      in number default 0,
                   v_struct_only    in number default 0);

end;
/

prompt
prompt Creating package PKG_JAVAWSTEST
prompt ===============================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_JAVAWSTEST IS

  TYPE MYTABLE IS REF CURSOR;

  procedure PROC_JAVAWSTEST(v_busid      VARCHAR2,
                                             V_DATE  DATE,
                                             MYTAB   OUT  MYTABLE);


  END PKG_JAVAWSTEST;
/

prompt
prompt Creating package PKG_JAVAWSTEST2
prompt ================================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_JAVAWSTEST2 IS
  TYPE MYTABLE IS REF CURSOR;
  procedure PROC_JAVAWSTEST(v_busid      VARCHAR2,
                                             MYTAB   OUT  MYTABLE);

  END PKG_JAVAWSTEST2;
/

prompt
prompt Creating package PKG_OSE_BASICDATA
prompt ==================================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_BASICDATA IS
  --------------------------------------------------------------------------
  --huhuimin
  --2014年02月24日
  --基础数据结存
  --------------------------------------------------------------------------
  --定义结存几天之前基础数据，默认为0天之前，即结存当日
  G_BASICDATA CONSTANT NUMBER := 0;
  --------------------------------------------------------------------------
  --基础数据结存(JOB调用接口) 
  PROCEDURE TREATE_BASICDATA;
  --基础数据结存(调用接口) 
  PROCEDURE TREATE_BASEDATASTORAGE(V_BEGINDATE DATE, V_ENDDATE DATE);
  --结存组织树
  PROCEDURE TREATE_ORGTREEPHASESTORAGE(V_DATE DATE);
  --结存下级组织
  PROCEDURE TREATE_CHILDORGTREE(V_PORGID    VARCHAR2,
                                V_PORGGRADE VARCHAR2,
                                V_DATE      DATE);
  --专用道数据结存
  PROCEDURE TREATE_ACCOMMODATIONSTORAGE(V_DATE DATE);
  --车辆数据结存
  PROCEDURE TREATE_BUSPHASESTORAGE(V_DATE DATE);
  --人员数据结存
  PROCEDURE TREATE_EMPLOYEEPHASESTORAGE(V_DATE DATE);
  --站点数据结存
  PROCEDURE TREATE_STATIONPHASESTORAGE(V_DATE DATE);
  --场站数据结存
  PROCEDURE TREATE_SITEPHASESTORAGE(V_DATE DATE);
  --线路数据结存
  PROCEDURE TREATE_ROUTEBASICDATASTORAGE(V_DATE DATE);
  --线路类型数据结存
  PROCEDURE TREATE_ROUTETYPEPHASESTORAGE(V_DATE DATE);
  --线路地图数据更新
  PROCEDURE TREATE_ROUTEINFO_MAP(V_DATE DATE);
  --站点地图数据更新
  PROCEDURE TREATE_STATIONINFO_MAP(V_DATE DATE);
  --------------------------------------------------------------------------
END PKG_OSE_BASICDATA;
/

prompt
prompt Creating package PKG_OSE_BUSARRSTATION
prompt ======================================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_BUSARRSTATION IS
  --线路车辆运营开始时间(04:00为4/24、04:30为4.5/24)
  G_START_TIME CONSTANT NUMBER := 0 / 24;
  PROCEDURE TREATE_BUSARRSTATION;
  PROCEDURE P_IMPORT_BUSARRLFTDATA(V_DATE DATE);
  PROCEDURE TREATE_BUSARRSTATION(V_DATE DATE);
END PKG_OSE_BUSARRSTATION;
/

prompt
prompt Creating package PKG_OSE_BUSENTRYSITE
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_BUSENTRYSITE IS
  PROCEDURE TREATE_BUSENTRYSITE(V_DATE DATE);
  PROCEDURE TREATE_RENAME;
  PROCEDURE TREATE_REPLACESITE(V_DATE DATE);
  PROCEDURE TREATE_ENTRYSITE(V_DATE DATE);
END PKG_OSE_BUSENTRYSITE;
/

prompt
prompt Creating package PKG_OSE_CALCDATA
prompt =================================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_CALCDATA IS

  -- Author  : HUJIHUO
  -- Created : 2011-12-14 11:37:42
  -- Purpose : 实时数据计算服务

  --计算一段时间内该站点间的运行平均速度
  TYPE MYTABLE IS REF CURSOR;

  PROCEDURE CalcRoadSpeed(v_routeid       VARCHAR2, --线路（计算线网速度为空）
                          v_fromstationid VARCHAR2, --开始站点
                          v_tostationid   VARCHAR2, --结束站点
                          v_from_date     VARCHAR2, --开始日期
                          v_to_date       VARCHAR2, --结束日期
                          v_from_time     VARCHAR2, --开始时间
                          v_to_time       VARCHAR2, --结束时间
                          v_flag          VARCHAR2, --标志 0-线路 1-线网
                          v_distince      OUT NUMBER, -- 平均距离
                          v_time          OUT NUMBER, --平均行驶时间
                          v_msg           OUT VARCHAR2 --返回信息
                          );
  PROCEDURE GetRouteRunTime(v_routeid VARCHAR2, MYTAB OUT MYTABLE);
  PROCEDURE GetSpecialRoad(v_flag VARCHAR2,MYTAB OUT MYTABLE);

END PKG_OSE_CALCDATA;
/

prompt
prompt Creating package PKG_OSE_COMMON
prompt ===============================
prompt
create or replace package osecd.PKG_OSE_COMMON is

  -- 行业监管结存变量定义

  -- 结存时线路级别
  G_ROUTE_LEVEL CONSTANT VARCHAR2(2) := '4';
  -- 线路类型
  --上下行
  G_ROUTE_RUNTYPE_UPDOWN CONSTANT VARCHAR2(1) := '1';
  --环形
  G_ROUTE_RUNTYPE_CIRCLE CONSTANT VARCHAR2(1) := '2';

  --站点类型
  --返回站
  G_STATION_TYPE_RETURN CONSTANT VARCHAR2(2) :='12';

  --线路车辆运营开始时间，相对于零点的天数(04:00为4/24、04:30为4.5/24)
  G_START_TIME CONSTANT NUMBER := 2 / 24;
  --班次数计算标准：1-按趟次数计算;2-按公交班次数计算
  G_SHIFTCALC_STD CONSTANT CHAR(1) := '2';
  --发车间隔误差时间范围
  G_SENDBUS_INTERVAL CONSTANT NUMBER := 1;
  --驾驶员最大休息时间（超过2小时不作为工作时间）
  G_DRIVER_TIME CONSTANT NUMBER := 2;

  --车次表、排队表导入时间差（2天前）
  G_SEQ_DELTA CONSTANT NUMBER := 2;
  --IC卡数据导入时间差（7天前）
  G_IC_DELTA   CONSTANT NUMBER := 7;

  -- 字典类型
  TYPE type_entry IS RECORD(
    typename        VARCHAR2(50),
    itemkey      VARCHAR2(50),
    itemvalue      Number);
  --组织类型
  TYPE OrgGradeType_list IS TABLE OF type_entry INDEX BY VARCHAR2(2);
  g_OrgGradeTypeList OrgGradeType_list;

  PROCEDURE Clear_Log;
  PROCEDURE ExecuteSQL(v_sql VARCHAR2);
  PROCEDURE LoadTypeEntry;
  PROCEDURE WRITE_EXCEPTION(PROCEDURENAME VARCHAR2, func_desc VARCHAR2, v_date DATE, ERRORCODE NUMBER, ERRORTEXT VARCHAR2);
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2, func_desc VARCHAR2, v_date DATE, loginfo VARCHAR2);

end PKG_OSE_COMMON;
/

prompt
prompt Creating package PKG_OSE_FUELSUBSIDYDATA
prompt ========================================
prompt
create or replace package osecd.PKG_OSE_FUELSUBSIDYDATA is

  -- Author  : WANGYI
  -- Created : 2014-05-20 17:22:36
  -- Purpose : 燃油补贴相关结存
    TYPE MYTABLE IS REF CURSOR;

  PROCEDURE GetOperationVehicle(v_Date DATE);

  PROCEDURE Make_FuelSubsidy(v_date DATE);

  PROCEDURE Get_FuelSubsidy(v_year    date,
                                                                   v_quarter  VARCHAR2,
                                                                   MYTAB     OUT MYTABLE);


end PKG_OSE_FUELSUBSIDYDATA;
/

prompt
prompt Creating package PKG_OSE_GETDATA
prompt ================================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_GetData IS

  -- Author  : yuankai
  -- Created : 2011-12-14 22:40:36
  -- Purpose : 行业监管相关存储过程、函数

  -- Public type declarations
  TYPE MYTABLE IS REF CURSOR;

  --测试例子
  PROCEDURE ConsumeCard_GETTABLE(orgids    VARCHAR2,
                                 orggrade  VARCHAR2,
                                 forggrade VARCHAR2,
                                 startdate VARCHAR2,
                                 enddate   VARCHAR2,
                                 MYTAB     OUT MYTABLE);
  PROCEDURE ConsumeCard_Analyse_GETTABLE(orgids    VARCHAR2,
                                         orggrade  VARCHAR2,
                                         forggrade VARCHAR2,
                                         ymonth    VARCHAR2,
                                         MYTAB     OUT MYTABLE);
  PROCEDURE ConsumeCard_Change_GETTABLE(orgids    VARCHAR2,
                                        orggrade  VARCHAR2,
                                        forggrade VARCHAR2,
                                        startdate VARCHAR2,
                                        enddate   VARCHAR2,
                                        MYTAB     OUT MYTABLE);
  PROCEDURE DailyMileage_GETTABLE(orgids    VARCHAR2,
                                  orggrade  VARCHAR2,
                                  startdate VARCHAR2,
                                  enddate   VARCHAR2,
                                  MYTAB     OUT MYTABLE);
  PROCEDURE DailyMileage_Change_GETTABLE(orgids    VARCHAR2,
                                         orggrade  VARCHAR2,
                                         startdate VARCHAR2,
                                         enddate   VARCHAR2,
                                         MYTAB     OUT MYTABLE);
  PROCEDURE DailyMileage_Analyse_GETTABLE(orgids   VARCHAR2,
                                          orggrade VARCHAR2,
                                          ymonth   VARCHAR2,
                                          MYTAB    OUT MYTABLE);
  PROCEDURE Privilege_GETTABLE(orgids    VARCHAR2,
                               orggrade  VARCHAR2,
                               startdate VARCHAR2,
                               enddate   VARCHAR2,
                               MYTAB     OUT MYTABLE);
  PROCEDURE Privilege_Change_GETTABLE(orgids    VARCHAR2,
                                      orggrade  VARCHAR2,
                                      startdate VARCHAR2,
                                      enddate   VARCHAR2,
                                      MYTAB     OUT MYTABLE);
  PROCEDURE Privilege_Analyse_GETTABLE(orgids   VARCHAR2,
                                       orggrade VARCHAR2,
                                       ymonth   VARCHAR2,
                                       MYTAB    OUT MYTABLE);
  PROCEDURE DriverWorkingHours_GETTABLE(orgids    VARCHAR2,
                                        orggrade  VARCHAR2,
                                        startdate VARCHAR2,
                                        enddate   VARCHAR2,
                                        MYTAB     OUT MYTABLE);
  PROCEDURE WorkingHours_Change_GETTABLE(orgids    VARCHAR2,
                                         orggrade  VARCHAR2,
                                         startdate VARCHAR2,
                                         enddate   VARCHAR2,
                                         MYTAB     OUT MYTABLE);
  PROCEDURE WorkingHours_Analyse_GETTABLE(orgids   VARCHAR2,
                                          orggrade VARCHAR2,
                                          ymonth   VARCHAR2,
                                          MYTAB    OUT MYTABLE);
  PROCEDURE ICIncome_GETTABLE(orgids    VARCHAR2,
                              orggrade  VARCHAR2,
                              forggrade VARCHAR2,
                              startdate VARCHAR2,
                              enddate   VARCHAR2,
                              MYTAB     OUT MYTABLE);
  PROCEDURE CashIncome_GETTABLE(orgids    VARCHAR2,
                                orggrade  VARCHAR2,
                                forggrade VARCHAR2,
                                startdate VARCHAR2,
                                enddate   VARCHAR2,
                                MYTAB     OUT MYTABLE);

  PROCEDURE OtherIncome_GETTABLE(orgids    VARCHAR2,
                                 orggrade  VARCHAR2,
                                 forggrade VARCHAR2,
                                 startdate VARCHAR2,
                                 enddate   VARCHAR2,
                                 MYTAB     OUT MYTABLE);

  PROCEDURE KMileIncome_GETTABLE(orgids    VARCHAR2,
                                 orggrade  VARCHAR2,
                                 forggrade VARCHAR2,
                                 startdate VARCHAR2,
                                 enddate   VARCHAR2,
                                 MYTAB     OUT MYTABLE);
  PROCEDURE Income_Change_GETTABLE(orgids    VARCHAR2,
                                   orggrade  VARCHAR2,
                                   forggrade VARCHAR2,
                                   startdate VARCHAR2,
                                   enddate   VARCHAR2,
                                   MYTAB     OUT MYTABLE);
  PROCEDURE Income_Analyse_GETTABLE(orgids    VARCHAR2,
                                    orggrade  VARCHAR2,
                                    forggrade VARCHAR2,
                                    ymonth    VARCHAR2,
                                    MYTAB     OUT MYTABLE);
  PROCEDURE StaffCondition_GETTABLE(orgids    VARCHAR2,
                                    orggrade  VARCHAR2,
                                    forggrade VARCHAR2,
                                    ymonth    VARCHAR2,
                                    MYTAB     OUT MYTABLE);
  PROCEDURE Staff_Analyse_GETTABLE(orgids    VARCHAR2,
                                   orggrade  VARCHAR2,
                                   forggrade VARCHAR2,
                                   ymonth    VARCHAR2,
                                   MYTAB     OUT MYTABLE);
/*  PROCEDURE Staff_Change_GETTABLE(orgids    VARCHAR2,
                                  orggrade  VARCHAR2,
                                  forggrade VARCHAR2,
                                  startdate VARCHAR2,
                                  enddate   VARCHAR2,
                                  MYTAB     OUT MYTABLE);*/
/*  PROCEDURE ConsumeCardCount_GETTABLE(orgids    VARCHAR2,
                                      orggrade  VARCHAR2,
                                      startdate VARCHAR2,
                                      enddate   VARCHAR2,
                                      MYTAB     OUT MYTABLE);*/
/*  PROCEDURE Card_Change_GETTABLE(orgids    VARCHAR2,
                                 orggrade  VARCHAR2,
                                 startdate VARCHAR2,
                                 enddate   VARCHAR2,
                                 MYTAB     OUT MYTABLE);*/
/*  PROCEDURE Operation_GETTABLE(orgids         VARCHAR2,
                               StatisticsType VARCHAR2,
                               orggrade       VARCHAR2,
                               startdate      VARCHAR2,
                               enddate        VARCHAR2,
                               MYTAB          OUT MYTABLE);*/

/*  PROCEDURE Operation_Change_GETTABLE(orgids         VARCHAR2,
                                      StatisticsType VARCHAR2,
                                      orggrade       VARCHAR2,
                                      startdate      VARCHAR2,
                                      enddate        VARCHAR2,
                                      MYTAB          OUT MYTABLE);*/

/*  PROCEDURE StandardBus_GETTABLE(yearstart VARCHAR2,
                                 yearend   VARCHAR2,
                                 MYTAB     OUT MYTABLE);*/

/*  PROCEDURE VehicleUtilization_GETTABLE(orgids    VARCHAR2,
                                        startdate VARCHAR2,
                                        enddate   VARCHAR2,
                                        orggrade  VARCHAR2,
                                        MYTAB     OUT MYTABLE);*/

/*  PROCEDURE Utilization_Change_GETTABLE(orgids    VARCHAR2,
                                        startdate VARCHAR2,
                                        enddate   VARCHAR2,
                                        orggrade  VARCHAR2,
                                        MYTAB     OUT MYTABLE);*/

  PROCEDURE Line_Analyse_GETTABLE(orgids   VARCHAR2,
                                  dates    VARCHAR2,
                                  orggrade VARCHAR2,
                                  MYTAB    OUT MYTABLE);

/*  PROCEDURE Line_Change_GETTABLE(orgids    VARCHAR2,
                                 startdate VARCHAR2,
                                 enddate   VARCHAR2,
                                 orggrade  VARCHAR2,
                                 MYTAB     OUT MYTABLE);*/

  PROCEDURE LineNetwork_Analyse_GETTABLE(areatype VARCHAR2,
                                         dates    VARCHAR2,
                                         MYTAB    OUT MYTABLE);
  PROCEDURE LineNetwork_Change_GETTABLE(areatype  VARCHAR2,
                                        startdate VARCHAR2,
                                        enddate   VARCHAR2,
                                        MYTAB     OUT MYTABLE);
/*  PROCEDURE Macroscopic_SQ_GETTABLE(dates  VARCHAR2,
                                    orgids VARCHAR2,
                                    MYTAB  OUT MYTABLE);*/

END PKG_OSE_GetData;
/

prompt
prompt Creating package PKG_OSE_GIS
prompt ============================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_GIS IS

  -- Author  : HUJIHUO
  -- Created : 2012-05-16 11:37:42
  -- Purpose : GIS数据处理服务

  PROCEDURE TREATEGIS;
  PROCEDURE TREATEGIS(V_DATE DATE);
END PKG_OSE_GIS;
/

prompt
prompt Creating package PKG_OSE_GPSICDATA
prompt ==================================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_GPSICDATA IS
  ---------------------------------------------------------------------------
  --结存几天之前数据，默认为5
  G_GPSICDATA CONSTANT NUMBER := 5;
  --线路速度时段，默认为0.5
  G_INTERVAL CONSTANT NUMBER := 0.5;
  --线路车辆运营开始时间(04:00为4/24、04:30为4.5/24)
  G_START_TIME CONSTANT NUMBER := 4 / 24;
  --最大停站时间(分钟)
  G_MAX_STOPSTATION NUMBER := 4;
  --最小停站时间(分钟)
  G_MIN_STOPSTATION NUMBER := 0.5;
  --是否计算站点客流
  G_CALC_PSG BOOLEAN := TRUE;
  --公交管理卡类型为100以上
  G_IC_MANAGE CONSTANT NUMBER := 100;
  --线路标准票价为2元
  G_IC_ROUTESTD CONSTANT NUMBER := 2;
  TYPE STATION_INFO IS RECORD(
    ROUTE_ID      VARCHAR(20),
    SUBROUTE_ID   VARCHAR(20),
    SEGMENT_ID    VARCHAR(20),
    STATION_ID    VARCHAR(36),
    SNGSERIAL_ID  NUMBER,
    DUALSERIAL_ID NUMBER);
  TYPE STATION_LIST IS TABLE OF STATION_INFO INDEX BY VARCHAR2(100);
  TYPE BUS_RUNDATA IS RECORD(
    ROUTEID       BSVCBUSARRLFTLD5.ROUTEID%TYPE,
    SUBROUTEID    BSVCBUSARRLFTLD5.SUBROUTEID%TYPE,
    PRODUCTID     BSVCBUSARRLFTLD5.PRODUCTID%TYPE,
    STATIONSEQNUM BSVCBUSARRLFTLD5.STATIONSEQNUM%TYPE,
    STATIONNUM    BSVCBUSARRLFTLD5.STATIONNUM%TYPE,
    STATIONTYPE   BSVCBUSARRLFTLD5.STATIONTYPE%TYPE,
    ISARRLFT      BSVCBUSARRLFTLD5.ISARRLFT%TYPE,
    ACTDATETIME   BSVCBUSARRLFTLD5.ACTDATETIME%TYPE,
    RECDATETIME   BSVCBUSARRLFTLD5.RECDATETIME%TYPE,
    GPSMILE       BSVCBUSARRLFTLD5.GPSMILE%TYPE);
  TYPE ARRLFT IS RECORD(
    ROUTENAME   VARCHAR2(36),
    ROUTECODE   VARCHAR2(36),
    BUSID       VARCHAR2(36),
    BUSSELFID   VARCHAR2(36),
    CARDID      VARCHAR2(36),
    STATIONID   VARCHAR2(36),
    SEGMENTID   VARCHAR2(36),
    SNGSERIALID NUMBER,
    ARR         BUS_RUNDATA,
    LFT         BUS_RUNDATA);
  TYPE TYPE_ENTRY IS RECORD(
    TYPENAME  VARCHAR2(50),
    ITEMKEY   VARCHAR2(50),
    ITEMVALUE NUMBER);
  --IC卡类型字典数组
  TYPE ICCARDTYPE_LIST IS TABLE OF TYPE_ENTRY INDEX BY VARCHAR2(2);
  G_CARDTYPELIST ICCARDTYPE_LIST;
  --IC卡消费与卡类型对应关系
  TYPE TYPE_CONSUME IS RECORD(
    CARDTYPE_SRC  NUMBER,
    CARDNAME_SRC  VARCHAR2(50),
    CARDTYPE_DES  NUMBER,
    CARDNAME_DES  VARCHAR2(50),
    CARD_PRICE    NUMBER(5, 2),
    CARD_DISCOUNT NUMBER(5, 3));
  TYPE COMSUMETYPE_LIST IS TABLE OF TYPE_CONSUME INDEX BY VARCHAR2(2);
  G_COMSUMETYPELIST COMSUMETYPE_LIST;
  ---------------------------------------------------------------------------
  --计算IC卡收入
  FUNCTION FUN_CALCICINCOME(V_CONSUMETYPE NUMBER,
                            V_REMAINTIMES NUMBER) RETURN NUMBER;
  --计算IC卡优惠
  FUNCTION FUN_CALCICFAVORABLE(V_CONSUMETYPE NUMBER,
                               V_REMAINTIMES NUMBER) RETURN NUMBER;
  --计算IC卡类型
  FUNCTION FUN_CALCICCONSUMETYPE(V_CONSUMETYPE NUMBER) RETURN NUMBER;
  PROCEDURE LOADTYPEENTRY;
  ---------------------------------------------------------------------------
  /* PROCEDURE P_IMPORT_BUSRUNDATA(V_DATE DATE);*/
  PROCEDURE P_IMPORT_BUSARRLFTDATA(V_DATE DATE);
  PROCEDURE P_IMPORT_MONTHCONSUME(V_DATE DATE);
  ---------------------------------------------------------------------------
  --GPS、IC相关数据结存(JOB调用接口)
  PROCEDURE TREATE_GPSICDATA;
  --GPS、IC相关数据结存(调用接口)
  PROCEDURE TREATE_GPSICDATASTORAGE(V_BEGINDATE DATE, V_ENDDATE DATE);
  PROCEDURE COMPUTING_HOURSPEED(V_DATE DATE);
  PROCEDURE COMPUTING_HOURSPEED_LINENET(V_DATE DATE);
  PROCEDURE COMPUTING_HOURSPEED_PHASE(V_DATE DATE);
  PROCEDURE COMPUTING_STAINTERSPEED(V_DATE DATE);
  --结存GPS数据(手工调用接口，调用之前请先导入GPS数据)
  PROCEDURE TREATE_GPSDATA(V_DATE DATE);
  PROCEDURE TREATE_GPS(V_ROUTEID VARCHAR2, V_DATE DATE);
  PROCEDURE TREATE_ROUTEARRLFT(V_ROUTE_ID VARCHAR2,
                               V_DATE     DATE,
                               V_RET      OUT NUMBER);
  PROCEDURE TREATE_WRITESTATIONDATA(V_ARRLFT       ARRLFT,
                                    G_STATION_LIST STATION_LIST,
                                    V_LAST_TIME    DATE,
                                    V_TIME         DATE);
  PROCEDURE TREATE_ROUTEPECCANCY(V_ROUTEID VARCHAR2,
                                 V_DATE    DATE,
                                 V_RET     OUT NUMBER);
  PROCEDURE TREATE_TIMEPHASESPEED(V_ROUTEID VARCHAR2, V_DATE DATE);
  PROCEDURE TREATE_ICDATA(V_DATE DATE);
  PROCEDURE TREATE_ICDATA1(V_BEGIN_DATE DATE, V_END_DATE DATE);
  --车辆IC收入结存(JZ_CASHINCOME)
  PROCEDURE TREATE_CASHINCOMEIC(V_DATE DATE);
  PROCEDURE TREATE_CASHINCOMECASH(V_DATE DATE);
  PROCEDURE TREATE_CONSUMECARDTYPE(V_DATE DATE);
  PROCEDURE TREATE_CONSUMECARDTYPE2(V_DATE DATE);
  PROCEDURE TREATE_ORGDAYPSG(V_DATE DATE);
  PROCEDURE TREATE_TIMEPHASEPSG(V_DATE DATE);
  PROCEDURE TREATE_DAYTAKEPSG(V_BEGINDATE DATE, V_ENDDATE DATE);
  PROCEDURE TREATE_BRTICSTORAGE(V_DATE DATE);
  PROCEDURE TREATE_STATIONCONSUME(V_DATE DATE);
  PROCEDURE TREATE_HOURPHASEICNUM_ORG(V_DATE DATE);
  PROCEDURE TREATE_HOURPHASEICNUM_PHASE(V_DATE DATE);
  PROCEDURE TREATE_HOURPHASEICNUM(V_DATE DATE);
  PROCEDURE TREATE_FSTANDLSTCONSUME(V_DATE DATE);
  PROCEDURE TREATE_FSTANDLST(V_DATESTART DATE, V_DATEEND DATE);
  ---------------------------------------------------------------------------
END PKG_OSE_GPSICDATA;
/

prompt
prompt Creating package PKG_OSE_ONHOUR
prompt ===============================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_ONHOUR IS
  --线路车辆运营开始时间(04:00为4/24、04:30为4.5/24)
  G_START_TIME CONSTANT NUMBER := 2 / 24;
  -- 标准信息
  TYPE onhour_stand IS RECORD(
    id             mconhourstand.onhourstandid%TYPE,
    route_id       mconhourstand.routeid%TYPE,
    subroute_id    mconhourstand.subrouteid%TYPE,
    segment_id     mconhourstand.segmentid%TYPE,
    start_time     mconhourstand.starttime%TYPE,
    end_time       mconhourstand.endtime%TYPE,
    starttime      DATE,
    endtime        DATE,
    dualserial_id  mconhourstanddetail.dualserialid%TYPE,
    station_id     mconhourstanddetail.stationid%TYPE,
    onhour_time    mconhourstanddetail.onhourtime%TYPE,
    offset_pos     mconhourstanddetail.offsetpos%TYPE,
    offset_neg     mconhourstanddetail.offsetneg%TYPE,
    alstation_type mconhourstanddetail.alstationtype%TYPE,
    row_id         VARCHAR2(60));

  -- 标准明细信息
  TYPE onhour_stand_detail IS RECORD(
    id             mconhourstanddetail.onhourstanddetailid%TYPE,
    pid            mconhourstanddetail.onhourstandid%TYPE,
    route_id       mconhourstand.routeid%TYPE,
    subroute_id    mconhourstand.subrouteid%TYPE,
    dualserial_id  mconhourstanddetail.dualserialid%TYPE,
    station_id     mconhourstanddetail.stationid%TYPE,
    onhour_time    mconhourstanddetail.onhourtime%TYPE,
    offset_pos     mconhourstanddetail.offsetpos%TYPE,
    offset_neg     mconhourstanddetail.offsetneg%TYPE,
    alstation_type mconhourstanddetail.alstationtype%TYPE);

  -- 标准列表
  TYPE onhour_stand_list IS TABLE OF onhour_stand INDEX BY VARCHAR2(60);
  g_onhour_stand_list onhour_stand_list;

  -- 车次信息
  TYPE sequence_info IS RECORD(
    row_id           VARCHAR2(20),
    route_id         bz_busrunrecordld.routeid%TYPE,
    subroute_id      bz_busrunrecordld.subrouteid%TYPE,
    segment_id       bz_busrunrecordld.segmentid%TYPE,
    bus_id           bz_busrunrecordld.busid%TYPE,
    product_id       mcbusinfogs.productid%TYPE,
    startstation_id  bz_busrunrecordld.startstationid%TYPE,
    endstation_id    bz_busrunrecordld.endstationid%TYPE,
    startstation_seq mcrsegmentstationgs.dualserialid%TYPE,
    endstation_seq   mcrsegmentstationgs.dualserialid%TYPE,
    leave_time       bz_busrunrecordld.leavetime%TYPE,
    arrive_time      bz_busrunrecordld.arrivetime%TYPE,
    real_leave_time  bz_busrunrecordld.leavetime%TYPE,
    real_arrive_time bz_busrunrecordld.arrivetime%TYPE,
    driver_id        bz_busrunrecordld.Driverid%TYPE,
    busrr_id         bz_busrunrecordld.busrrid%TYPE);

  TYPE sequence_list IS TABLE OF sequence_info INDEX BY VARCHAR2(20);
  g_sequence_list sequence_list;

  -- 报站信息
  TYPE rep_station IS RECORD(
    product_id     bsvcbusarrlftld5.productid%TYPE,
    actdatetime    bsvcbusarrlftld5.actdatetime%TYPE,
    route_id       bsvcbusarrlftld5.routeid%TYPE,
    subroute_id    bsvcbusarrlftld5.subrouteid%TYPE,
    stationseq_num bsvcbusarrlftld5.stationseqnum%TYPE,
    isarrlft       bsvcbusarrlftld5.isarrlft%TYPE,
    bussid         bsvcbusarrlftld5.bussid%TYPE,
    row_id         VARCHAR2(20));

  TYPE rep_station_list IS TABLE OF rep_station INDEX BY VARCHAR2(20);
  g_rep_station_list rep_station_list;

  PROCEDURE Run;
  PROCEDURE Run(v_date IN DATE);
  PROCEDURE Run(v_begindate IN DATE, v_enddate IN DATE);

END PKG_OSE_ONHOUR;
/

prompt
prompt Creating package PKG_OSE_ORGTREE
prompt ================================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_ORGTREE IS
  --------------------------------------------------------------------------
  --结存组织树
  PROCEDURE TREATE_ORGTREESTORAGE;
  --结存下级组织
  PROCEDURE TREATE_CHILDORGTREE(V_PORGID    VARCHAR2,
                                V_PORGGRADE VARCHAR2);
  --------------------------------------------------------------------------
END PKG_OSE_ORGTREE;
/

prompt
prompt Creating package PKG_OSE_REPLICATION
prompt ====================================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_REPLICATION IS

  -- Author  : HUJIHUO
  -- Created : 2012-5-29 14:04:31
  -- Purpose : 公交业务数据的Oracle数据库间复制
  --车次表、排队表导入时间差（3天前）
  G_SEQ_DELTA CONSTANT NUMBER := 2;
  --排班表导入时间差（1天前）
  G_ARR_DELTA CONSTANT NUMBER := 1;
  --IC卡数据导入时间差（30天前）
  G_IC_DELTA   CONSTANT NUMBER := 5;
  G_CASH_DELTA CONSTANT NUMBER := 7;
  G_SV_DELTA   CONSTANT NUMBER := 1;
  G_OIL_DELTA  CONSTANT NUMBER := 30;

  --源数据库连接
  G_SOURCE_DB CONSTANT VARCHAR2(256) := '@gj';
  --目标数据库连接
  G_DEST_DB CONSTANT VARCHAR2(256) := '';

  --复制当天数据
  PROCEDURE MAKE_REPLICATION;
  --复制某天数据
  PROCEDURE MAKE_REPLICATION(V_DATE DATE);
  --复制某时间段范围内数据
  PROCEDURE MAKE_REPLICATION(V_BEGINDATE DATE, V_ENDDATE DATE);

  PROCEDURE TREATE_DATA;
  PROCEDURE REPLICATION_BASEDATA;
  PROCEDURE REPLICATION_BUSINESS(V_FROMDATE DATE, V_TODATE DATE);

  PROCEDURE P_IMPORT_BUSRUNDATA;
  PROCEDURE P_IMPORT_BUSRUNDATA(V_DATE      DATE,
                                V_STARTTIME NUMBER,
                                V_ENDTIME   NUMBER);
  PROCEDURE TREATE_GJBUSCOUNT(V_DATE DATE);
END PKG_OSE_REPLICATION;
/

prompt
prompt Creating package PKG_OSE_RUNDATA
prompt ================================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_RUNDATA IS
  ---------------------------------------------------------------------------
  --线路车辆运营开始时间(04:00为4/24、04:30为4.5/24)
  G_START_TIME CONSTANT NUMBER := 4 / 24;
  --班次数计算标准：1-按趟次数计算;2-按公交班次数计算
  G_SHIFTCALC_STD CONSTANT CHAR(1) := '2';
  --发车间隔误差时间范围
  G_SENDBUS_INTERVAL CONSTANT NUMBER := 1;
  --驾驶员最大休息时间（超过2小时不作为工作时间）
  G_DRIVER_TIME CONSTANT NUMBER := 2;
  --定义结存几天之前运营数据，默认为5天之前
  G_RUNDATA CONSTANT NUMBER := 3;
  ---------------------------------------------------------------------------
  --业务（运营）数据结存(JOB调用接口)  
  PROCEDURE TREATE_RUNDATA;
  --业务（运营）数据结存(手工调用接口)  
  PROCEDURE TREATE_RUNDATASTORAGE(V_BEGINDATE DATE, V_ENDDATE DATE);
  --导入发车记录数据
  PROCEDURE IMPORT_BUSRUNRECORD(V_DATE DATE);
  --车辆时段发车间隔
  PROCEDURE TREATE_BUSSENDINTERVAL(V_DATE DATE);
  --车辆数据日结存
  PROCEDURE TREATE_BUSDAYSTORAGE(V_DATE DATE);
  --首末班时间按月份备份
  PROCEDURE TREATE_ROUTEFSTANDLSTSEQTIME(V_DATE DATE);
  --每分钟运营车辆数据结存
  PROCEDURE TREATE_BUSRUNCOUNT(V_DATE DATE);
  --早高峰GPS车辆数据结存
  PROCEDURE TREATE_GJBUSCOUNT(V_DATE DATE);
  --早高峰运营车辆数据结存
  PROCEDURE TREATE_MORBUSRUNCOUNT(V_DATE DATE);
  --线路峰段结存
  PROCEDURE TREATE_ROUTETIMEPHASESTORAGE(V_DATE DATE);
  --线路五峰段结存
  PROCEDURE TREATE_ROUTETIMEPHASESTORAGE2(V_DATE DATE);
  --线路日结存
  PROCEDURE TREATE_ROUTEDAYDATASTORAGE(V_DATE DATE);
  --投诉数据结存
  PROCEDURE TREATE_COMPLAINTS(V_DATE DATE);
  --驾驶员驾驶时间结存
  PROCEDURE TREATE_DRIVETIMESTORAGE(V_DATE DATE);
  --行车事故信息结存
  PROCEDURE TREATE_SAFETYEVENTINFO(V_DATE DATE);
  PROCEDURE TREATE_SAFETYEVENTINFO_PHASE(V_DATE DATE);
  --更新指标是否合格
  PROCEDURE INDICATOR_UPDATE_ALL(V_DATE DATE);
  --车次准点率预警结存
  PROCEDURE INDICATOR_BUSNUMPUNCTUAL(V_DATE DATE);
  --班次完成率预警结存
  PROCEDURE INDICATOR_BUSSHIFTCOMPLETE(V_DATE DATE);
  --首末班准点率预警结存
  PROCEDURE INDICATOR_FSTANDLSTPUNCTUAL(V_DATE DATE);
  --线路发车间隔兑现率预警结存
  PROCEDURE INDICATOR_ROUTESENDBLANK(V_DATE DATE);
  --乘客满意度预警结存
  PROCEDURE INDICATOR_SATISFY(V_DATE DATE);
  PROCEDURE TREATE_ROUTETIMEPHASE_PHASE(V_DATE DATE);
  ---------------------------------------------------------------------------
END PKG_OSE_RUNDATA;
/

prompt
prompt Creating package PKG_OSE_RUNDATA1
prompt =================================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_RUNDATA1 IS
  ---------------------------------------------------------------------------
  --线路车辆运营开始时间(04:00为4/24、04:30为4.5/24)
  G_START_TIME CONSTANT NUMBER := 4 / 24;
  --班次数计算标准：1-按趟次数计算;2-按公交班次数计算
  G_SHIFTCALC_STD CONSTANT CHAR(1) := '2';
  --发车间隔误差时间范围
  G_SENDBUS_INTERVAL CONSTANT NUMBER := 1;
  --驾驶员最大休息时间（超过2小时不作为工作时间）
  G_DRIVER_TIME CONSTANT NUMBER := 2;
  --定义结存几天之前运营数据，默认为5天之前
  G_RUNDATA CONSTANT NUMBER := 3;
  ---------------------------------------------------------------------------
  --业务（运营）数据结存(JOB调用接口)  
  PROCEDURE TREATE_RUNDATA;
  --业务（运营）数据结存(手工调用接口)  
  PROCEDURE TREATE_RUNDATASTORAGE(V_BEGINDATE DATE, V_ENDDATE DATE);
  --导入发车记录数据
  PROCEDURE IMPORT_BUSRUNRECORD(V_DATE DATE);
  --车辆时段发车间隔
  PROCEDURE TREATE_BUSSENDINTERVAL(V_DATE DATE);
  --车辆数据日结存
  PROCEDURE TREATE_BUSDAYSTORAGE(V_DATE DATE);
  --首末班时间按月份备份
  PROCEDURE TREATE_ROUTEFSTANDLSTSEQTIME(V_DATE DATE);
  --每分钟运营车辆数据结存
  PROCEDURE TREATE_BUSRUNCOUNT(V_DATE DATE);
  --早高峰GPS车辆数据结存
  PROCEDURE TREATE_GJBUSCOUNT(V_DATE DATE);
  --早高峰运营车辆数据结存
  PROCEDURE TREATE_MORBUSRUNCOUNT(V_DATE DATE);
  --线路峰段结存
  PROCEDURE TREATE_ROUTETIMEPHASESTORAGE(V_DATE DATE);
  --线路五峰段结存
  PROCEDURE TREATE_ROUTETIMEPHASESTORAGE2(V_DATE DATE);
  --线路日结存
  PROCEDURE TREATE_ROUTEDAYDATASTORAGE(V_DATE DATE);
  --投诉数据结存
  PROCEDURE TREATE_COMPLAINTS(V_DATE DATE);
  --驾驶员驾驶时间结存
  PROCEDURE TREATE_DRIVETIMESTORAGE(V_DATE DATE);
  --行车事故信息结存
  PROCEDURE TREATE_SAFETYEVENTINFO(V_DATE DATE);
  PROCEDURE TREATE_SAFETYEVENTINFO_PHASE(V_DATE DATE);
  --更新指标是否合格
  PROCEDURE INDICATOR_UPDATE_ALL(V_DATE DATE);
  --车次准点率预警结存
  PROCEDURE INDICATOR_BUSNUMPUNCTUAL(V_DATE DATE);
  --班次完成率预警结存
  PROCEDURE INDICATOR_BUSSHIFTCOMPLETE(V_DATE DATE);
  --首末班准点率预警结存
  PROCEDURE INDICATOR_FSTANDLSTPUNCTUAL(V_DATE DATE);
  --线路发车间隔兑现率预警结存
  PROCEDURE INDICATOR_ROUTESENDBLANK(V_DATE DATE);
  --乘客满意度预警结存
  PROCEDURE INDICATOR_SATISFY(V_DATE DATE);
  PROCEDURE TREATE_ROUTETIMEPHASE_PHASE(V_DATE DATE);
  ---------------------------------------------------------------------------
END PKG_OSE_RUNDATA1;
/

prompt
prompt Creating package PKG_OSE_SPEED
prompt ==============================
prompt
CREATE OR REPLACE PACKAGE OSECD.PKG_OSE_SPEED IS
  PROCEDURE TREATE_SPEED;
END PKG_OSE_SPEED;
/

prompt
prompt Creating package QUEST_PPCM_SNAPSHOT_PKG
prompt ========================================
prompt
CREATE OR REPLACE PACKAGE OSECD.QUEST_PPCM_SNAPSHOT_PKG
  IS
--
-- Sample PPCM data collector for use with PPCM reference implementation
-- Collects enough data from Oracle for PPCM analysis.  OS Stats (CPU, Disk, Etc)
-- are collected by an external program and provided to the take_xxx_snapshot routines
--
-- MODIFICATION HISTORY
-- Person      Date    Comments
-- ---------   ------  ------------------------------------------
-- Guy          Feb07   Initial



   -- standard snapshot
   PROCEDURE take_snapshot  ;
   -- snapshot with option to reset collections
   PROCEDURE take_snapshot_reset;


  -- Probability of getting a R value of this magnitude
  FUNCTION prob_r (
      p_n   NUMBER /* number of records*/,
      p_r   NUMBER                                /* correlation coefficient*/
   )
      RETURN NUMBER;
  -- Submit  or adjust a snapshot job

  -- Snapshot job mgt
  FUNCTION submit_snapshot_job (
      p_first_time_hhmm   VARCHAR2,
      p_interval_hrs      INTEGER
   )
      RETURN NUMBER;

  PROCEDURE remove_snapshot_job;
  FUNCTION job_interval_hrs (p_dbms_job_interval VARCHAR2)
      RETURN NUMBER;
  --
  -- Return the value of a parameter
  --
  FUNCTION ppcm_parameter (p_parameter_name VARCHAR2)
      RETURN VARCHAR2;
  PROCEDURE set_ppcm_parameter (
      p_parameter_name VARCHAR2,
      p_parameter_value VARCHAR2
  );
  PROCEDURE purge_snapshots;
END; -- Package spec
/

prompt
prompt Creating type QUEST_SOO_ALERTTRACE_LINE_TYP
prompt ===========================================
prompt
CREATE OR REPLACE TYPE OSECD.quest_soo_alerttrace_line_typ IS OBJECT (linedate DATE, linetext VARCHAR2(4000), filestatus NUMBER )
/

prompt
prompt Creating type QUEST_SOO_ALERTTRACE_LOG_TYP
prompt ==========================================
prompt
CREATE OR REPLACE TYPE OSECD.quest_soo_alerttrace_log_typ IS TABLE OF quest_soo_alerttrace_line_typ
/

prompt
prompt Creating package QUEST_SOO_ALERTTRACE
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE OSECD.quest_soo_alerttrace
AS
/******************************************************************************
   NAME:       quest_soo_alerttrace
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        30/10/2007  Joe Tyrrell      Initial Creation
******************************************************************************/

   --initializeLines
   PROCEDURE initializelines (p_lines NUMBER, p_chunksize NUMBER);

   --  Readfile

   -- Input paramters:
   --   p_filename
   --       NULL -- Alert Log File Name
   --
   --   p_nav
   --       0  --  previous,
   --       1  --  forward.
   --       2  --  Search by Bytes
   --      -1  --  reset a file.
   --      -2  --  reset all the files position.
   --     100  --  Start of the file
   --     101  --  End of the file
   --
   --   p_search
   --       NULL - No search
   --       If p_nav is 2 then it must be numeric.
   --
   --   p_casesensitive
   --       0 - No Case Sensitive
   --       1 - Case Sensitive
   --   r_read_seconds
   --       5 - Default number of seconds a string search
   --           will be performed on file.
   --           If no values are found in allocated time
   --           1 row will be returned with position, date, and 'STRING NOT FOUND' text

   FUNCTION readfile (
      p_filename        VARCHAR2 DEFAULT NULL,
      p_nav             NUMBER   DEFAULT 101,
      p_search          VARCHAR2 DEFAULT NULL,
      p_casesensitive   NUMBER   DEFAULT 0,
      p_read_seconds    NUMBER 	 DEFAULT 5
   )
      RETURN quest_soo_alerttrace_log_typ;

END quest_soo_alerttrace;
/

prompt
prompt Creating package QUEST_SOO_PKG
prompt ==============================
prompt
CREATE OR REPLACE PACKAGE OSECD.QUEST_SOO_PKG
IS
--
-- This package contains routines to support Spotlight On Oracle
--
-- Person      Date    Comments
-- ---------   ------  -----------------------------------------------
-- Guy         7oct98  Initial
-- Megh        20Jun99 Added procedures obj_keep, obj_unkeep and
--                     flush_shared_pool. Also added function obj_type
-- Han B Xie   Jun2000 - now.

    -- Global indicating that the object cache is initialized
    g_object_cache_initialized     NUMBER:=0;
    g_debug                        NUMBER:=0;

    -- And make them global accessible
    /* -------------------------------------------------------------
    || The following statements define the "segment cache".  This
    || comprises a number of PL/SQL tables which contain details
    || of file/block ranges for all existing segments.
    ||
    || get_segname uses a binary chop to find the appropriate entry
    */ -------------------------------------------------------------
    TYPE object_cache_numtype       IS TABLE OF NUMBER      INDEX BY BINARY_INTEGER;
    TYPE object_cache_tabtype       IS TABLE OF VARCHAR(61) INDEX BY BINARY_INTEGER;

    object_cache_fileno             object_cache_numtype;
    object_cache_extno              object_cache_numtype;
    object_cache_blockno            object_cache_numtype;
    object_cache_length             object_cache_numtype;
    object_cache_segname            object_cache_tabtype;
    object_cache_count              NUMBER := 0;

    object_cache                    object_cache_tabtype;

    --
    -- Function to format SQL
    --
    Function format_sql ( p_sql_text IN varchar2,
                          p_max_len  IN number:=256)
             RETURN  varchar2;
    PRAGMA restrict_references(format_sql, WNDS, RNDS, WNPS, RNPS);

    --
    -- Event_category returns the event "category" so we can group
    -- like categories.  It's overloaded to accept either a event anme
    -- or the INDX from X$KSLEI
    --
    FUNCTION event_category(p_event varchar2, tag VARCHAR2 := 'pre 4.0') RETURN varchar2;
    PRAGMA   RESTRICT_REFERENCES (event_category, WNDS, RNDS, WNPS);

    FUNCTION event_category(p_indx number, tag VARCHAR2 := 'pre 4.0') RETURN varchar2;
    PRAGMA   RESTRICT_REFERENCES (event_category, WNDS, RNDS, WNPS);

    FUNCTION latch_category(p_latch_name varchar2) RETURN varchar2;
    PRAGMA   RESTRICT_REFERENCES (latch_category, WNDS, RNDS, WNPS);

    FUNCTION obj_type(object_t varchar2) RETURN char;
    PRAGMA   RESTRICT_REFERENCES (obj_type, WNDS, RNDS, WNPS);

    FUNCTION IsSpOk RETURN number;
    PRAGMA   RESTRICT_REFERENCES (IsSpOk, WNDS, WNPS);

    FUNCTION SgaOther RETURN number;
    PRAGMA   RESTRICT_REFERENCES (SgaOther, WNDS, WNPS);

    --
    -- Procedure initialize to initialize PL/SQL tables , etc
    --
    PROCEDURE initialize;

    -- Quick but essential initialize
    PROCEDURE initialize_fast;
    -- Slower initialize which can be defered until main screen collected
    PROCEDURE initialize_objects;

    -- Print the current lock-tree
    PROCEDURE locktree(p_agent_id VARCHAR2 DEFAULT 'N/A');

    -- Set a normal trace on for the session
    PROCEDURE set_trace(p_sid NUMBER, p_serial NUMBER, p_level NUMBER);

    -- overload for backward compatibility
    PROCEDURE set_trace(p_sid NUMBER, p_serial NUMBER, p_mode boolean);

    -- Kill the nominated session
    PROCEDURE kill_session(p_sid NUMBER, p_serial NUMBER);

    -- Turn timed statistics on
    PROCEDURE set_timed_statistics;

    -- Keep object in shared pool
    -- PROCEDURE obj_keep(name in varchar2, type in varchar2);

    -- Unkeep object from shared pool
    -- PROCEDURE obj_unkeep(name in varchar2, type in varchar2);

    -- Flush shared pool
    PROCEDURE flush_shared_pool;

    --
    -- Translate values in the form 999{K|M} to byte values so
    -- instance monitor can deal with them
    --

    FUNCTION TRANSLATE_PARAMETER( p_value VARCHAR2) RETURN  varchar2;

    PRAGMA  RESTRICT_REFERENCES (translate_parameter, WNDS, RNDS, WNPS);

    --
    -- These routines support the "show locked row" facility
    --
    --Published procedures
    --Show the row locks being waited for by the specified sid
    FUNCTION show_locked_row(lsid in number) return varchar2;
    FUNCTION toRadixString(num in number, radix in number) return varchar2;
    PRAGMA   restrict_references(toRadixString, WNDS, WNPS, RNDS, RNPS);
    FUNCTION digitToString(num in number) return varchar2;
    PRAGMA   restrict_references(digitToString, WNDS, WNPS, RNDS, RNPS);

    FUNCTION sga_cat(p_pool VARCHAR2, p_name VARCHAR2) RETURN VARCHAR2;
    PRAGMA   restrict_references(sga_cat, WNDS, RNDS, WNPS, RNPS);

    FUNCTION sga_cat2(p_pool VARCHAR2, p_name VARCHAR2) RETURN VARCHAR2;
    PRAGMA   restrict_references(sga_cat2, WNDS, RNDS, WNPS, RNPS);

    FUNCTION sga_pool7(p_name VARCHAR2) RETURN VARCHAR2;
    PRAGMA   restrict_references(sga_pool7, WNDS, RNDS, WNPS, RNPS);

    FUNCTION sga_area7(p_name VARCHAR2) RETURN VARCHAR2;
    PRAGMA   restrict_references(sga_area7, WNDS, RNDS, WNPS, RNPS);

    -- Stuff for getting full SQL text
    -- FUNCTION exact_db_version(p_major OUT NUMBER,
    --                          p_minor1 OUT NUMBER,
    --                          p_minor2 OUT NUMBER)
    --         RETURN VARCHAR2;
    --

    FUNCTION get_long_sqltext(p_hash_value NUMBER,
                              p_address RAW)
             RETURN VARCHAR2;

    FUNCTION get_session_long_sqltext(p_sid NUMBER)
             RETURN VARCHAR2;

    -- Decode lock details: TYPE, MODE, REQUEST
    FUNCTION lock_type_decode(type_p VARCHAR2, id2_p NUMBER default -1)
             RETURN VARCHAR2;
    PRAGMA restrict_references(lock_type_decode, WNDS, WNPS, RNPS);

    FUNCTION lock_mode_decode(mode_p NUMBER) RETURN VARCHAR2;
    PRAGMA   restrict_references(lock_mode_decode, WNDS, WNPS, RNPS);

    FUNCTION event_detail ( event_p  IN VARCHAR2,
                            p1text_p IN VARCHAR2, p1_p IN NUMBER,
                            p2text_p IN VARCHAR2 DEFAULT '', p2_p IN NUMBER DEFAULT 0,
                            p3text_p IN VARCHAR2 DEFAULT '', p3_p IN NUMBER DEFAULT 0) RETURN VARCHAR2;

    -- wait_detail is a quicker version of event_detail to be used in SELECT cluase.
    FUNCTION wait_detail ( event_p  IN VARCHAR2,
                           p1text_p IN VARCHAR2, p1_p IN NUMBER,
                           p2text_p IN VARCHAR2 DEFAULT '', p2_p IN NUMBER DEFAULT 0,
                           p3text_p IN VARCHAR2 DEFAULT '', p3_p IN NUMBER DEFAULT 0) RETURN VARCHAR2;
    PRAGMA   RESTRICT_REFERENCES (wait_detail, WNDS, WNPS);

    FUNCTION dataobj_object(dataobj_p NUMBER) RETURN VARCHAR2;

    FUNCTION job_interval(next_date_p DATE, interval_p VARCHAR2) RETURN DATE;

    --
    -- I18N versions
    --
    PROCEDURE locktree_41(p_agent_id VARCHAR2 DEFAULT 'N/A');
    FUNCTION show_locked_row_41(lsid in number) return varchar2;

    FUNCTION lock_type_decode_41(type_p VARCHAR2, id2_p NUMBER default -1)
             RETURN VARCHAR2;
    PRAGMA restrict_references(lock_type_decode_41, WNDS, WNPS, RNPS);

    FUNCTION lock_mode_decode_41(mode_p NUMBER) RETURN VARCHAR2;
    PRAGMA   restrict_references(lock_mode_decode_41, WNDS, WNPS, RNPS);

    FUNCTION event_detail_41 ( event_p  IN VARCHAR2,
                            p1text_p IN VARCHAR2, p1_p IN NUMBER,
                            p2text_p IN VARCHAR2 DEFAULT '', p2_p IN NUMBER DEFAULT 0,
                            p3text_p IN VARCHAR2 DEFAULT '', p3_p IN NUMBER DEFAULT 0) RETURN VARCHAR2;

    FUNCTION wait_detail_41 ( event_p  IN VARCHAR2,
                           p1text_p IN VARCHAR2, p1_p IN NUMBER,
                           p2text_p IN VARCHAR2 DEFAULT '', p2_p IN NUMBER DEFAULT 0,
                           p3text_p IN VARCHAR2 DEFAULT '', p3_p IN NUMBER DEFAULT 0) RETURN VARCHAR2;
    PRAGMA   RESTRICT_REFERENCES (wait_detail_41, WNDS, WNPS);

  PROCEDURE populate_event_table;
END;
/

prompt
prompt Creating package QUEST_SOO_SCHEMA_MGR
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE OSECD.QUEST_SOO_SCHEMA_MGR
IS
   -- Check that a table exists
   FUNCTION table_exists (p_table_name VARCHAR2)
      RETURN BOOLEAN;

   -- Get the version of an SOO schema
   FUNCTION get_version (p_schema_id VARCHAR2)
      RETURN NUMBER;

   -- Set the version of an SOO schema
   PROCEDURE set_version (p_schema_id VARCHAR2, p_version NUMBER);

   -- initialize the package objects (tables, etc)
   PROCEDURE init;
END;
/

prompt
prompt Creating package QUEST_SOO_SQLTRACE
prompt ===================================
prompt
CREATE OR REPLACE PACKAGE OSECD.QUEST_SOO_SQLTRACE
IS
   /*-------------------------------------------------------------------------
   ** Package for loading a SQL trace file in the USER_DUMP_DEST into spotlight
   ** tables
   ** Default usage:
   **   load_trace(file_name=>'Sid_Pid.trc')
   **
   ** Revision History:
   **
   **    Guy Harrison    July 2007   Initial
   *--------------------------------------------------------------------------*/

   /*-------------------------------------------------------------------------
   ** Load the nominated trace file
   **   The named file must exist in the USER_DUMP_DEST
   **   File name is case sensitive on UNIX
   **
   ** Revision History:
   **
   **    Guy Harrison    July 2007   Initial
   *--------------------------------------------------------------------------*/
   PROCEDURE aaatestit;       -- temporary entry point for convenient testing

   -- Return text description for a given Oracle error code
   FUNCTION ERROR_TEXT (ERROR_CODE NUMBER)
      RETURN VARCHAR2;

   --
   -- Set tracing on for the nominated session and take a guess at the
   -- trace name (might be wrong if tracefile_identifier set)
   --
   FUNCTION set_trace (p_sid NUMBER, p_serial NUMBER, p_level NUMBER)
      RETURN VARCHAR2;

   --
   -- Run load trace as a background (DBMS_JOB) job
   --
   FUNCTION background_load_trace (
      file_name        VARCHAR2,
      process_waits    INTEGER := 1 /*process wait lines*/,
      process_binds    INTEGER := 1 /* process bind info*/,
      load_recursive   INTEGER := 1 /* load/process recursive SQL*/,
      line_limit       INTEGER := NULL /* # of lines to read: -1 for all */,
      comment_text     VARCHAR2 := NULL,
      debug_level      INTEGER := 0,
      pga_limit        NUMBER := NULL
   )
      RETURN NUMBER;

   --
   -- Process every row scheduled for background processing
   --
   PROCEDURE background_loadjob;

   --
   -- Foreground load trace
   --
   PROCEDURE load_trace (
      file_name        VARCHAR2,
      load_all_lines   BOOLEAN
            := TRUE /*load individual FETCH and WAIT lines */,
      process_waits    INTEGER := 1 /*process wait lines*/,
      process_binds    INTEGER := 1 /* process bind info*/,
      load_recursive   INTEGER := 1 /* load/process recursive SQL*/,
      line_limit       INTEGER := NULL /* # of lines to read: -1 for all */,
      comment_text     VARCHAR2 := NULL,
      debug_level      INTEGER := 0,
      pga_limit        NUMBER := NULL
   );
END;
/

prompt
prompt Creating package QUEST_SOO_USER_MANAGER
prompt =======================================
prompt
CREATE OR REPLACE PACKAGE OSECD.QUEST_SOO_USER_MANAGER
IS
--
-- This package contains routines for user management, mostly for QCO
--
-- Person      Date    Comments
-- ---------   ------  -----------------------------------------------
-- Han B Xie   May2001 Created.

    PROCEDURE grant_user    (user_p VARCHAR2);
    PROCEDURE revoke_user   (user_p VARCHAR2);
    FUNCTION  validate_user (user_p VARCHAR2) RETURN INTEGER;

END; -- QUEST_SOO_USER_MANAGER
/

prompt
prompt Creating package QUEST_SOO_UTIL
prompt ===============================
prompt
CREATE OR REPLACE PACKAGE OSECD.quest_soo_util
AS
--
-- This package contains utility routines to support Spotlight On Oracle
--
-- Person      Date         Comments
-- ---------   -----------  -----------------------------------------------
-- Joe T       14-Jan-2008  Initial

   -- Get details about events on system.
   -- Replacement for quest_soo_pkb.event_detail_41 and wait_detail_41
   FUNCTION event_detail (
      p_event    VARCHAR2,
      p_p1text   VARCHAR2,
      p_p1       NUMBER,
      p_p2text   VARCHAR2,
      p_p2       NUMBER,
      p_p3text   VARCHAR2,
      p_p3       NUMBER,
      p_type     PLS_INTEGER DEFAULT 1               -- 1 is Event, 2 is Wait
   )
      RETURN VARCHAR2;

   -- Do some transformation and return a lock type description
   FUNCTION get_lock_type_desc (p_lock_type VARCHAR2, p_id2 NUMBER DEFAULT -1)
      RETURN VARCHAR2;

   -- Get lock mode description
   -- It's a number so use indexing from 0 to 6
   FUNCTION get_lock_mode_desc (p_idx PLS_INTEGER)
      RETURN VARCHAR2;

   -- Get lock mode description
   -- If part of Q, X, N etc then will be ok
   FUNCTION get_lock_mode_desc (p_idx VARCHAR2)
      RETURN VARCHAR2;

END quest_soo_util;
/

prompt
prompt Creating function GETORGIDS
prompt ===========================
prompt
create or replace function osecd.GetOrgids
(
   v_orgid varchar2
)
return varchar2
as
rtnResult varchar2(2000);
orgids mcorginfogs.orgid%TYPE;
cursor cur is select orgid from mcorginfogs
start with orgid = v_orgid connect by prior orgid = parentorgid;
begin
  open cur;
    loop
      fetch cur into orgids;
      exit when cur%NOTFOUND;
      rtnResult := rtnResult || ''',''' || orgids;
    end loop;
  close cur;
  if length(rtnResult) > 0 then
    rtnResult := substr(rtnResult,3);
    rtnResult := rtnResult || '''';
  end if;
  return rtnResult;
end;
/

prompt
prompt Creating procedure EXECUTE_IMMEDIATE
prompt ====================================
prompt
CREATE OR REPLACE PROCEDURE OSECD.execute_immediate( p_sql_text VARCHAR2 ) IS

   COMPILATION_ERROR EXCEPTION;
   PRAGMA EXCEPTION_INIT(COMPILATION_ERROR,-24344);

   l_cursor INTEGER DEFAULT 0;
   rc       INTEGER DEFAULT 0;
   stmt     VARCHAR2(1000);

BEGIN

   l_cursor := DBMS_SQL.OPEN_CURSOR;
   DBMS_SQL.PARSE(l_cursor, p_sql_text, DBMS_SQL.NATIVE);
   rc := DBMS_SQL.EXECUTE(l_cursor);
   DBMS_SQL.CLOSE_CURSOR(l_cursor);
--
-- Ignore compilation errors because these sometimes happen due to
-- dependencies between views AND procedures
--
   EXCEPTION WHEN COMPILATION_ERROR THEN DBMS_SQL.CLOSE_CURSOR(l_cursor);
       WHEN OTHERS THEN
          BEGIN
              DBMS_SQL.CLOSE_CURSOR(l_cursor);
              raise_application_error(-20101,sqlerrm || '  when executing ''' || p_sql_text || '''   ');
          END;
END;
/

prompt
prompt Creating procedure MYTEST
prompt =========================
prompt
CREATE OR REPLACE PROCEDURE OSECD.MYTEST AS

V_PRODUCTID  NUMBER:=0;
V_ISARRLEFT CHAR(1);
V_ACTDATETIME DATE;
V_GPSMILE NUMBER;
V_STATIONID VARCHAR2(30);
V_SUMSPEED NUMBER(15,2) := 0;
V_SUMCOUNT NUMBER := 0;
V_ISCALC BOOLEAN;
BEGIN
  FOR CUR IN (SELECT PRODUCTID, ACTDATETIME,ISARRLFT,GPSMILE,STATIONNUM FROM BSVCBUSARRLFTLD5 T
               WHERE T.ACTDATETIME > SYSDATE- 5 / 1440 AND T.DATATYPE = '4'
               ORDER BY T.PRODUCTID, T.ACTDATETIME DESC)  LOOP
               IF(V_PRODUCTID <> CUR.PRODUCTID  AND CUR.ISARRLFT = '1') THEN
                  V_PRODUCTID := CUR.PRODUCTID;
                  V_ISARRLEFT := CUR.ISARRLFT;
                  V_ACTDATETIME := CUR.ACTDATETIME;
                  V_GPSMILE := CUR.GPSMILE;
                  V_STATIONID := CUR.STATIONNUM;
                  V_ISCALC := FALSE;
              ELSIF( V_PRODUCTID = CUR.PRODUCTID AND V_STATIONID <> CUR.STATIONNUM AND V_ISCALC = FALSE) THEN
                   IF(CUR.ISARRLFT = '2') THEN
                     IF((V_GPSMILE - CUR.GPSMILE > 0) AND  (V_ACTDATETIME- CUR.ACTDATETIME > 0))  THEN
                         V_SUMSPEED := V_SUMSPEED +  (V_GPSMILE - CUR.GPSMILE) / ((V_ACTDATETIME- CUR.ACTDATETIME)*24*3600);
                         V_SUMCOUNT := V_SUMCOUNT + 1;
                         V_ISCALC := TRUE;
                      END IF;
                 END IF;
              END IF;
  END LOOP;
  dbms_output.put_line('SPEED:' || V_SUMSPEED || '     COUNT:' ||  V_SUMCOUNT);
END ;
/

prompt
prompt Creating procedure PROC_COSTACCVEHICLEARCHIVE
prompt =============================================
prompt
create or replace procedure osecd.PROC_COSTACCVEHICLEARCHIVE(v_intCount out NUMBER) is
  /***********************************************************************************
    【名称】PROC_COSTACCVEHICLEARCHIVE
    【作者】zhaoliang
    【用途】成本补贴核算车辆归档
    【更新日期】2016-01-18
    【版本历史】
      ----------------------------------------------------------------
      2016-01-18   初始版本
      ----------------------------------------------------------------

      ----------------------------------------------------------------
    【输入参数】
    【输出参数】v_intCount：整数，记录条数
    【操作表】BZ_COSTACCVEHICLEARCHIVE 成本补贴核算车辆归档表
  ***********************************************************************************/
  TYPE T_CURSOR IS REF CURSOR;
  CUR_VEHICLE            T_CURSOR;
  CUR_TYPE               T_CURSOR;
  V_BUSID                VARCHAR2(50); --车辆ID
  V_ORGID                VARCHAR2(50);
  V_ROUTEID              VARCHAR2(50);
  V_BUSCOUNT             NUMBER := 0; --车辆总数
  V_TYPECOUNT            NUMBER := 0;
  V_LENGTH               NUMBER := 0;
  V_FUELTYPE             VARCHAR2(50);
  V_AGE                  NUMBER := 0;
  V_USEDATE              DATE;
  V_COSTACCVEHICLETYPEID VARCHAR2(50);
  V_BUSLENGTHMIN         NUMBER := 0;
  V_BUSLENGTHMAX         NUMBER := 0;
  V_BUSFUELTYPE          VARCHAR2(50);
  V_BUSAGEMIN            NUMBER := 0;
  V_BUSAGEMAX            NUMBER := 0;
  V_USEDATEMIN           DATE;
  V_USEDATEMAX           DATE;

begin

  DELETE FROM BZ_COSTACCVEHICLEARCHIVE T WHERE 1 = 1;
  COMMIT;

  SELECT COUNT(1)
    INTO V_BUSCOUNT
    FROM MCBUSINFOGS T
   WHERE 1 = 1
     AND T.ISACTIVE = '1';

  SELECT COUNT(1)
    INTO V_TYPECOUNT
    FROM BZ_COSTACCVEHICLETYPE T
   WHERE 1 = 1
     AND T.ISACTIVE = '1';

  IF V_BUSCOUNT <= 0 OR V_TYPECOUNT <= 0 THEN
    BEGIN
      SELECT 0 INTO v_intCount FROM DUAL;
    END;
  END IF;

  IF V_BUSCOUNT > 0 AND V_TYPECOUNT > 0 THEN
    BEGIN

      SELECT V_BUSCOUNT INTO v_intCount FROM DUAL;

      OPEN CUR_VEHICLE FOR
        SELECT T.BUSID
          FROM MCBUSINFOGS T
         WHERE 1 = 1
           AND T.ISACTIVE = '1';

      LOOP
        FETCH CUR_VEHICLE
          INTO V_BUSID;
        EXIT WHEN CUR_VEHICLE%NOTFOUND;

        BEGIN

          SELECT T.ORGID,
                 T.ROUTEID,
                 T.BUSLENGTH,
                 T.FUELTYPE,
                 TRUNC(MONTHS_BETWEEN(TRUNC(SYSDATE + 1, 'DD'),
                                      TRUNC(T.ROADCERTIFICATEDATE, 'DD')) / 12),

                 T.ROADCERTIFICATEDATE
            INTO V_ORGID, V_ROUTEID, V_LENGTH, V_FUELTYPE, V_AGE, V_USEDATE
            FROM MCBUSINFOGS T
           WHERE 1 = 1
             AND T.BUSID = V_BUSID;

          OPEN CUR_TYPE FOR
            SELECT T.COSTACCVEHICLETYPEID
              FROM BZ_COSTACCVEHICLETYPE T
             WHERE 1 = 1
               AND T.ISACTIVE = '1';

          LOOP
            FETCH CUR_TYPE
              INTO V_COSTACCVEHICLETYPEID;
            EXIT WHEN CUR_TYPE%NOTFOUND;

            BEGIN

              SELECT T.BUSLENGTHMIN,
                     T.BUSLENGTHMAX,
                     T.BUSFUELTYPE,
                     T.BUSAGEMIN,
                     T.BUSAGEMAX,
                     T.USEDATEMIN,
                     T.USEDATEMAX
                INTO V_BUSLENGTHMIN,
                     V_BUSLENGTHMAX,
                     V_BUSFUELTYPE,
                     V_BUSAGEMIN,
                     V_BUSAGEMAX,
                     V_USEDATEMIN,
                     V_USEDATEMAX
                FROM BZ_COSTACCVEHICLETYPE T
               WHERE 1 = 1
                 AND T.COSTACCVEHICLETYPEID = V_COSTACCVEHICLETYPEID;

              IF V_LENGTH >= V_BUSLENGTHMIN AND V_LENGTH < V_BUSLENGTHMAX AND
                 V_FUELTYPE = V_BUSFUELTYPE AND V_AGE >= V_BUSAGEMIN AND
                 V_AGE < V_BUSAGEMAX AND V_USEDATE >= V_USEDATEMIN AND
                 V_USEDATE < V_USEDATEMAX THEN
                BEGIN

                  INSERT INTO BZ_COSTACCVEHICLEARCHIVE
                    (COSTACCVEHICLEARCHIVEID,
                     REGIONCODE,
                     COSTACCVEHICLETYPEID,
                     ORGID,
                     ROUTEID,
                     BUSID,
                     ISACTIVE,
                     VERIFYSTATUS,
                     CREATED,
                     CREATEBY)
                    SELECT SEQ_COSTACCVEHICLEARCHIVE.NEXTVAL,
                           '',
                           V_COSTACCVEHICLETYPEID,
                           V_ORGID,
                           V_ROUTEID,
                           V_BUSID,
                           '1',
                           '0',
                           SYSDATE,
                           'admin'
                      FROM DUAL;
                END;
              END IF;

              COMMIT;

            END;

          END LOOP;

          CLOSE CUR_TYPE;

        END;
      END LOOP;

      CLOSE CUR_VEHICLE;

    END;
  END IF;

  COMMIT;
end PROC_COSTACCVEHICLEARCHIVE;
/

prompt
prompt Creating procedure PROC_EMERGENCYSCHEDULE
prompt =========================================
prompt
create or replace procedure osecd.PROC_EMERGENCYSCHEDULE(v_strEmergencyEventID in VARCHAR2,
                                                   v_dtPlanStartDate     in DATE,
                                                   v_intRealCrowd        in NUMBER,
                                                   v_intPlanInterval     in NUMBER,
                                                   v_intPlanCapacity     in NUMBER,
                                                   v_strPlanBy           in VARCHAR2,
                                                   v_intCount            out NUMBER) is
  /***********************************************************************************
    【名称】PROC_EMERGENCYSCHEDULE
    【作者】zhaoliang
    【用途】应急事件计划排班
    【更新日期】2015-09-18
    【版本历史】
      ----------------------------------------------------------------
      2015-06-10   初始版本
      ----------------------------------------------------------------

      ----------------------------------------------------------------
    【输入参数】v_strEmergencyEventID：字符，应急事件主键ID
                v_dtPlanStartDate：日期，疏散时间
                v_intRealCrowd：整数，疏散人数
                v_intPlanInterval：整数，计划间隔
                v_intPlanCapacity：整数，核定载客
                v_strPlanBy：字符，创建人
    【输出参数】v_intCount：整数，记录条数
    【操作表】BZ_EMERGENCYSCHEDULE 应急事件计划排班表
  ***********************************************************************************/
  TYPE T_CURSOR IS REF CURSOR;
  CUR_SCHEDULE T_CURSOR;
  V_BUSNUM     NUMBER := 0; --疏散客流所需车辆总数
  V_BUSNO      NUMBER := 0; --车辆序号

begin

  --1.输入参数判断
  IF v_intRealCrowd <= 0 THEN
    BEGIN
      SELECT -1 INTO v_intCount FROM DUAL;
    END;
  END IF;
  IF v_intPlanCapacity <= 0 THEN
    BEGIN
      SELECT -1 INTO v_intCount FROM DUAL;
    END;
  END IF;
  --2.应急排班处理
  IF v_intRealCrowd > 0 AND v_intPlanCapacity > 0 THEN
    BEGIN
      --2.1删除该事件原应急排班计划
      DELETE FROM BZ_EMERGENCYSCHEDULE T
       WHERE T.EMERGENCYEVENTID = v_strEmergencyEventID;
      COMMIT;
      --2.2计算疏散客流所需车辆总数
      SELECT CEIL(v_intRealCrowd / v_intPlanCapacity)
        INTO V_BUSNUM
        FROM DUAL;
      --2.3应急排班
      OPEN CUR_SCHEDULE FOR
        SELECT DISTINCT T.NUM
          FROM (SELECT LEVEL AS NUM FROM DUAL CONNECT BY LEVEL <= V_BUSNUM) T
         ORDER BY NUM;

      LOOP
        FETCH CUR_SCHEDULE
          INTO V_BUSNO;
        EXIT WHEN CUR_SCHEDULE%NOTFOUND;
        BEGIN
          --写入应急排班数据
          INSERT INTO BZ_EMERGENCYSCHEDULE
            (EMERGENCYSCHEDULEID,
             EMERGENCYEVENTID,
             ORGID,
             ROUTEID,
             BUSID,
             BUSCARDID,
             RUNSTARTDATE,
             RUNENDDATE,
             PLANCAPACITY,
             PLANSTARTDATE,
             PLANINTERVAL,
             ISACTIVE,
             VERIFYSTATUS,
             MEMOS,
             CREATED,
             CREATEBY)
            SELECT SEQ_EMERGENCYSCHEDULE.NEXTVAL,
                   v_strEmergencyEventID,
                   '',
                   '',
                   '',
                   '车辆' || V_BUSNO,
                   v_dtPlanStartDate +
                   (V_BUSNO - 1) * v_intPlanInterval / 24 / 60,
                   NULL,
                   (CASE
                     WHEN V_BUSNO < V_BUSNUM THEN
                      v_intPlanCapacity
                     ELSE
                      v_intRealCrowd - (V_BUSNO - 1) * v_intPlanCapacity
                   END),
                   v_dtPlanStartDate,
                   v_intPlanInterval,
                   '1',
                   '0',
                   '',
                   SYSDATE,
                   v_strPlanBy
              FROM DUAL;

          COMMIT;
        END;
      END LOOP;

      CLOSE CUR_SCHEDULE;

    END;
  END IF;

  COMMIT;
end PROC_EMERGENCYSCHEDULE;
/

prompt
prompt Creating procedure PROC_ROUTESAMPLE
prompt ===================================
prompt
create or replace procedure osecd.PROC_ROUTESAMPLE(v_dtSampleMonth      in DATE,
                                             v_strSampleMonthChar in VARCHAR2,
                                             v_intSampleMonth     in NUMBER,
                                             v_dtSampleYearStart  in DATE,
                                             v_dtSampleYearEnd    in DATE,
                                             v_strSampleBy        in VARCHAR2,
                                             v_strMemos           in VARCHAR2,
                                             v_intCount           out NUMBER) is
  /***********************************************************************************
    【名称】PROC_ROUTESAMPLE
    【作者】zhaoliang
    【用途】运营考核线路抽样
    【更新日期】2014-11-25
    【更新内容】1、10条实际非营运线路排除，取消排除
                2、抽样率改为20%
                3、抽样线路样本逻辑完善
                4、只允许抽取一次
    【输入参数】v_dtSampleMonth：日期，考核抽样月份
                v_strSampleMonthChar：字符，考核抽样月份
                v_intSampleMonth：整数，考核抽样月份
                v_dtSampleYearStart：日期，考核抽样年度开始日期
                v_dtSampleYearEnd：日期，考核抽样年度结束日期
                v_strSampleBy：字符，抽样人
                v_strMemos：字符，备注
    【输出参数】v_intCount：整数，审核记录条数
    【操作表】BZ_ROUTESAMPLERECORD 运营考核线路抽样记录表
              BZ_ROUTESAMPLEDETAIL 运营考核线路抽样详情表
  ***********************************************************************************/
  V_RECORDCOUNT     NUMBER := 0; --本月已审核的抽样记录
  V_SAMPLETOTAL     NUMBER := 0; --本月行业抽样线路总数
  V_ORGROUTETOTAL   NUMBER := 0; --本月企业营运线路总数
  V_ORGSAMPLETOTAL  NUMBER := 0; --本月企业（应）抽样线路总数
  V_REMAINTOTAL     NUMBER := 0; --本年度企业剩余未抽样线路总数
  V_ORGSAMPLERECORD NUMBER := 0; --本月企业抽样记录数
  TYPE T_CURSOR IS REF CURSOR;
  CUR_ORGSAMPLE         T_CURSOR;
  V_ROUTESAMPLERECORDID VARCHAR2(50); --运营考核线路抽样记录主键ID
  V_ORGID               VARCHAR2(50); --企业ID

begin
  --判断该月是否存在已审核的抽样记录
  SELECT COUNT(1)
    INTO V_RECORDCOUNT
    FROM BZ_ROUTESAMPLERECORD R
   WHERE R.VERIFYSTATUS = '1'
     AND R.SAMPLEMONTHCHAR = v_strSampleMonthChar;
  --1.该月存在抽样记录时，写入返回值用于程序判断及提示
  IF V_RECORDCOUNT > 0 THEN
    BEGIN
      SELECT -1 INTO v_intCount FROM DUAL;
    END;
  END IF;
  --2.该月不存在抽样记录时，进行抽样处理
  IF V_RECORDCOUNT <= 0 THEN
    BEGIN
      --2.1先后删除该月原详情记录和抽样记录（注意删除顺序）
      DELETE FROM BZ_ROUTESAMPLEDETAIL D
       WHERE D.ROUTESAMPLERECORDID IN
             (SELECT R.ROUTESAMPLERECORDID
                FROM BZ_ROUTESAMPLERECORD R
               WHERE R.SAMPLEMONTHCHAR = v_strSampleMonthChar);
      DELETE FROM BZ_ROUTESAMPLERECORD R
       WHERE R.SAMPLEMONTHCHAR = v_strSampleMonthChar;
      COMMIT;
      --2.2获取运营考核线路抽样记录主键ID
      SELECT SEQ_ORGRUNINDICATORPLAN.NEXTVAL
        INTO V_ROUTESAMPLERECORDID
        FROM DUAL;
      --2.2写入抽样记录数据
      INSERT INTO BZ_ROUTESAMPLERECORD
        (ROUTESAMPLERECORDID,
         SAMPLEMONTH,
         SAMPLEMONTHCHAR,
         SAMPLETOTAL,
         SAMPLEBY,
         SAMPLEDATE,
         VERIFYSTATUS,
         MEMOS,
         CREATED,
         CREATEBY)
        SELECT V_ROUTESAMPLERECORDID,
               v_dtSampleMonth,
               v_strSampleMonthChar,
               0, --抽样线路总条数
               v_strSampleBy,
               SYSDATE,
               '1', --只允许抽取一次，置为已审核
               v_strMemos,
               SYSDATE,
               v_strSampleBy
          FROM DUAL;
      COMMIT;
      --2.3写入抽样详情数据
      OPEN CUR_ORGSAMPLE FOR
        SELECT T.ORGID
          FROM MCORGINFOGS T
         WHERE T.ISACTIVE = '1'
           AND T.ORGGRADE = '1'
           AND T.ORGID <> 'FZY';
      LOOP
        FETCH CUR_ORGSAMPLE
          INTO V_ORGID;
        BEGIN
          --获取本月企业营运线路总数
          SELECT COUNT(T.ROUTEID)
            INTO V_ORGROUTETOTAL
            FROM MCROUTEINFOGS T, MCORGINFOGS ORG, JZ_ORGGRADETREE JZORG
           WHERE T.ORGID = JZORG.ORGID
             AND JZORG.PARENTORGID = ORG.ORGID
             AND T.ISACTIVE = '1'
                /*以下增加10条实际非营运线路过滤，2014.10.29根据公交处意见，取消过滤*/
                /* AND T.ROUTENAME NOT IN ('N15', '东部假日专线1', '4路区间线', '大鹏半岛夏季夜班车2号', '317高峰专线','大鹏半岛夏季夜班车1号', '757', '618', '619', 'B865')*/
             AND ORG.ORGID = V_ORGID;
          --获取本月企业（应）抽样线路总数：总数x20%，向上取整
          SELECT CEIL(V_ORGROUTETOTAL * 0.2)
            INTO V_ORGSAMPLETOTAL
            FROM DUAL;
          --获取本年度企业剩余未抽样线路总数
          SELECT COUNT(S.ROUTEID)
            INTO V_REMAINTOTAL
            FROM (SELECT T.ROUTEID, T.ROUTENAME, T.ORGID SUBORGID, ORG.ORGID
                    FROM MCROUTEINFOGS   T,
                         MCORGINFOGS     ORG,
                         JZ_ORGGRADETREE JZORG
                   WHERE T.ORGID = JZORG.ORGID
                     AND JZORG.PARENTORGID = ORG.ORGID
                     AND T.ISACTIVE = '1'
                     AND ORG.ORGID = V_ORGID
                     AND T.ROUTEID NOT IN
                         (SELECT D.ROUTEID
                            FROM BZ_ROUTESAMPLEDETAIL D,
                                 BZ_ROUTESAMPLERECORD R
                           WHERE D.ROUTESAMPLERECORDID =
                                 R.ROUTESAMPLERECORDID(+)
                             AND D.VERIFYSTATUS = '1'
                             AND D.ISACTIVE = '1'
                             AND D.DATATYPE = '1'
                             AND R.SAMPLEMONTH >= v_dtSampleYearStart
                             AND R.SAMPLEMONTH <= v_dtSampleYearEnd)) S;
          --获取本月企业抽样记录数，用于重复抽取过滤
          SELECT COUNT(1)
            INTO V_ORGSAMPLERECORD
            FROM BZ_ROUTESAMPLEDETAIL T
           WHERE T.ROUTESAMPLERECORDID = V_ROUTESAMPLERECORDID
             AND T.DATATYPE = '0'
             AND T.ORGID = V_ORGID;
          --写入抽样详情数据
          IF V_ORGSAMPLERECORD <= 0 THEN
            BEGIN
              --2.3.1企业抽样汇总数据
              INSERT INTO BZ_ROUTESAMPLEDETAIL
                (ROUTESAMPLEDETAILID,
                 ROUTESAMPLERECORDID,
                 DATATYPE,
                 ORGID,
                 ORGROUTETOTAL,
                 ORGSAMPLERATE,
                 ORGSAMPLETOTAL,
                 SUBORGID,
                 ROUTEID,
                 ROUTENAME,
                 VERIFYSTATUS,
                 ISACTIVE,
                 MEMOS,
                 CREATED,
                 CREATEBY)
                SELECT SEQ_ORGRUNINDICATORPLAN.NEXTVAL,
                       V_ROUTESAMPLERECORDID,
                       '0', --数据类别(0企业抽样汇总数据，1线路抽样详情数据)
                       V_ORGID,
                       V_ORGROUTETOTAL, --企业该月线路总条数
                       0.20,
                       V_ORGSAMPLETOTAL, --企业该月抽样线路数
                       '',
                       '',
                       '',
                       '1', --置为已审核
                       '1',
                       v_strMemos,
                       SYSDATE,
                       v_strSampleBy
                  FROM DUAL;

              --2.3.2线路抽样详情数据

              --2.3.2.1当本年度企业剩余未抽样线路总数m >= 本月企业（应）抽样线路总数n
              IF V_REMAINTOTAL >= V_ORGSAMPLETOTAL THEN
                BEGIN
                  --从本年度企业剩余未抽样线路中抽取n条
                  INSERT INTO BZ_ROUTESAMPLEDETAIL
                    (ROUTESAMPLEDETAILID,
                     ROUTESAMPLERECORDID,
                     DATATYPE,
                     ORGID,
                     ORGROUTETOTAL,
                     ORGSAMPLERATE,
                     ORGSAMPLETOTAL,
                     SUBORGID,
                     ROUTEID,
                     ROUTENAME,
                     VERIFYSTATUS,
                     ISACTIVE,
                     MEMOS,
                     CREATED,
                     CREATEBY)
                    SELECT SEQ_ORGRUNINDICATORPLAN.NEXTVAL,
                           V_ROUTESAMPLERECORDID,
                           '1', --数据类别(0企业抽样汇总数据，1线路抽样详情数据)
                           V_ORGID,
                           V_ORGROUTETOTAL,
                           0.20,
                           V_ORGSAMPLETOTAL,
                           RR.SUBORGID,
                           RR.ROUTEID,
                           RR.ROUTENAME,
                           '1', --置为已审核
                           '1',
                           v_strMemos,
                           SYSDATE,
                           v_strSampleBy
                      FROM (SELECT S.ROUTEID,
                                   S.ROUTENAME,
                                   S.SUBORGID,
                                   S.ORGID
                              FROM (SELECT T.ROUTEID,
                                           T.ROUTENAME,
                                           T.ORGID SUBORGID,
                                           ORG.ORGID
                                      FROM MCROUTEINFOGS   T,
                                           MCORGINFOGS     ORG,
                                           JZ_ORGGRADETREE JZORG
                                     WHERE T.ORGID = JZORG.ORGID
                                       AND JZORG.PARENTORGID = ORG.ORGID
                                       AND T.ISACTIVE = '1'
                                       AND ORG.ORGID = V_ORGID
                                       AND T.ROUTEID NOT IN
                                           (SELECT D.ROUTEID
                                              FROM BZ_ROUTESAMPLEDETAIL D,
                                                   BZ_ROUTESAMPLERECORD R
                                             WHERE D.ROUTESAMPLERECORDID =
                                                   R.ROUTESAMPLERECORDID(+)
                                               AND D.VERIFYSTATUS = '1'
                                               AND D.ISACTIVE = '1'
                                               AND D.DATATYPE = '1'
                                               AND R.SAMPLEMONTH >=
                                                   v_dtSampleYearStart
                                               AND R.SAMPLEMONTH <=
                                                   v_dtSampleYearEnd)
                                     ORDER BY DBMS_RANDOM.RANDOM) S
                             WHERE ROWNUM <= V_ORGSAMPLETOTAL) RR;
                END;
              END IF;

              --2.3.2.2当本年度企业剩余未抽样线路总数m <= 0
              IF V_REMAINTOTAL <= 0 THEN
                BEGIN
                  --从全部线路样本（不含区间线、高峰线）中抽取n条
                  ----线路表ROUTEGRADE字段：5区间线，7高峰线
                  INSERT INTO BZ_ROUTESAMPLEDETAIL
                    (ROUTESAMPLEDETAILID,
                     ROUTESAMPLERECORDID,
                     DATATYPE,
                     ORGID,
                     ORGROUTETOTAL,
                     ORGSAMPLERATE,
                     ORGSAMPLETOTAL,
                     SUBORGID,
                     ROUTEID,
                     ROUTENAME,
                     VERIFYSTATUS,
                     ISACTIVE,
                     MEMOS,
                     CREATED,
                     CREATEBY)
                    SELECT SEQ_ORGRUNINDICATORPLAN.NEXTVAL,
                           V_ROUTESAMPLERECORDID,
                           '1', --数据类别(0企业抽样汇总数据，1线路抽样详情数据)
                           V_ORGID,
                           V_ORGROUTETOTAL,
                           0.20,
                           V_ORGSAMPLETOTAL,
                           RR.SUBORGID,
                           RR.ROUTEID,
                           RR.ROUTENAME,
                           '1', --置为已审核
                           '1',
                           v_strMemos,
                           SYSDATE,
                           v_strSampleBy
                      FROM (SELECT S.ROUTEID,
                                   S.ROUTENAME,
                                   S.SUBORGID,
                                   S.ORGID
                              FROM (SELECT T.ROUTEID,
                                           T.ROUTENAME,
                                           T.ORGID SUBORGID,
                                           ORG.ORGID
                                      FROM MCROUTEINFOGS   T,
                                           MCORGINFOGS     ORG,
                                           JZ_ORGGRADETREE JZORG
                                     WHERE T.ORGID = JZORG.ORGID
                                       AND JZORG.PARENTORGID = ORG.ORGID
                                       AND T.ISACTIVE = '1'
                                       AND ORG.ORGID = V_ORGID
                                       AND T.ROUTEGRADE NOT IN ('5', '7')
                                     ORDER BY DBMS_RANDOM.RANDOM) S
                             WHERE ROWNUM <= V_ORGSAMPLETOTAL) RR;
                END;
              END IF;

              --2.3.2.3 当本年度企业剩余未抽样线路总数 < 本月企业（应）抽样线路总数
              --从全部线路样本（不含区间线、高峰线及未抽取的m条）中抽取n-m条
              --抽取全部剩余未抽取的m条
              IF V_REMAINTOTAL > 0 AND V_REMAINTOTAL < V_ORGSAMPLETOTAL THEN
                BEGIN
                  --从全部线路样本（不含区间线、高峰线及未抽取的m条）中抽取n-m条
                  ----线路表ROUTEGRADE字段：5区间线，7高峰线
                  INSERT INTO BZ_ROUTESAMPLEDETAIL
                    (ROUTESAMPLEDETAILID,
                     ROUTESAMPLERECORDID,
                     DATATYPE,
                     ORGID,
                     ORGROUTETOTAL,
                     ORGSAMPLERATE,
                     ORGSAMPLETOTAL,
                     SUBORGID,
                     ROUTEID,
                     ROUTENAME,
                     VERIFYSTATUS,
                     ISACTIVE,
                     MEMOS,
                     CREATED,
                     CREATEBY)
                    SELECT SEQ_ORGRUNINDICATORPLAN.NEXTVAL,
                           V_ROUTESAMPLERECORDID,
                           '1', --数据类别(0企业抽样汇总数据，1线路抽样详情数据)
                           V_ORGID,
                           V_ORGROUTETOTAL,
                           0.20,
                           V_ORGSAMPLETOTAL,
                           RR.SUBORGID,
                           RR.ROUTEID,
                           RR.ROUTENAME,
                           '1', --置为已审核
                           '1',
                           v_strMemos,
                           SYSDATE,
                           v_strSampleBy
                      FROM (SELECT S.ROUTEID,
                                   S.ROUTENAME,
                                   S.SUBORGID,
                                   S.ORGID
                              FROM (SELECT T.ROUTEID,
                                           T.ROUTENAME,
                                           T.ORGID SUBORGID,
                                           ORG.ORGID
                                      FROM MCROUTEINFOGS   T,
                                           MCORGINFOGS     ORG,
                                           JZ_ORGGRADETREE JZORG
                                     WHERE T.ORGID = JZORG.ORGID
                                       AND JZORG.PARENTORGID = ORG.ORGID
                                       AND T.ISACTIVE = '1'
                                       AND ORG.ORGID = V_ORGID
                                       AND T.ROUTEID NOT IN
                                           (SELECT S.ROUTEID
                                              FROM (SELECT T.ROUTEID,
                                                           T.ROUTENAME,
                                                           T.ORGID SUBORGID,
                                                           ORG.ORGID
                                                      FROM MCROUTEINFOGS   T,
                                                           MCORGINFOGS     ORG,
                                                           JZ_ORGGRADETREE JZORG
                                                     WHERE T.ORGID =
                                                           JZORG.ORGID
                                                       AND JZORG.PARENTORGID =
                                                           ORG.ORGID
                                                       AND T.ISACTIVE = '1'
                                                       AND ORG.ORGID = V_ORGID
                                                       AND T.ROUTEID NOT IN
                                                           (SELECT D.ROUTEID
                                                              FROM BZ_ROUTESAMPLEDETAIL D,
                                                                   BZ_ROUTESAMPLERECORD R
                                                             WHERE D.ROUTESAMPLERECORDID =
                                                                   R.ROUTESAMPLERECORDID(+)
                                                               AND D.VERIFYSTATUS = '1'
                                                               AND D.ISACTIVE = '1'
                                                               AND D.DATATYPE = '1'
                                                               AND R.SAMPLEMONTH >=
                                                                   v_dtSampleYearStart
                                                               AND R.SAMPLEMONTH <=
                                                                   v_dtSampleYearEnd)) S)
                                       AND T.ROUTEGRADE NOT IN ('5', '7')
                                     ORDER BY DBMS_RANDOM.RANDOM) S
                             WHERE ROWNUM <=
                                   V_ORGSAMPLETOTAL - V_REMAINTOTAL) RR;
                  --抽取全部剩余未抽取的m条
                  INSERT INTO BZ_ROUTESAMPLEDETAIL
                    (ROUTESAMPLEDETAILID,
                     ROUTESAMPLERECORDID,
                     DATATYPE,
                     ORGID,
                     ORGROUTETOTAL,
                     ORGSAMPLERATE,
                     ORGSAMPLETOTAL,
                     SUBORGID,
                     ROUTEID,
                     ROUTENAME,
                     VERIFYSTATUS,
                     ISACTIVE,
                     MEMOS,
                     CREATED,
                     CREATEBY)
                    SELECT SEQ_ORGRUNINDICATORPLAN.NEXTVAL,
                           V_ROUTESAMPLERECORDID,
                           '1', --数据类别(0企业抽样汇总数据，1线路抽样详情数据)
                           V_ORGID,
                           V_ORGROUTETOTAL,
                           0.20,
                           V_ORGSAMPLETOTAL,
                           RR.SUBORGID,
                           RR.ROUTEID,
                           RR.ROUTENAME,
                           '1', --置为已审核
                           '1',
                           v_strMemos,
                           SYSDATE,
                           v_strSampleBy
                      FROM (SELECT S.ROUTEID,
                                   S.ROUTENAME,
                                   S.SUBORGID,
                                   S.ORGID
                              FROM (SELECT T.ROUTEID,
                                           T.ROUTENAME,
                                           T.ORGID SUBORGID,
                                           ORG.ORGID
                                      FROM MCROUTEINFOGS   T,
                                           MCORGINFOGS     ORG,
                                           JZ_ORGGRADETREE JZORG
                                     WHERE T.ORGID = JZORG.ORGID
                                       AND JZORG.PARENTORGID = ORG.ORGID
                                       AND T.ISACTIVE = '1'
                                       AND ORG.ORGID = V_ORGID
                                       AND T.ROUTEID NOT IN
                                           (SELECT D.ROUTEID
                                              FROM BZ_ROUTESAMPLEDETAIL D,
                                                   BZ_ROUTESAMPLERECORD R
                                             WHERE D.ROUTESAMPLERECORDID =
                                                   R.ROUTESAMPLERECORDID(+)
                                               AND D.VERIFYSTATUS = '1'
                                               AND D.ISACTIVE = '1'
                                               AND D.DATATYPE = '1'
                                               AND R.SAMPLEMONTH >=
                                                   v_dtSampleYearStart
                                               AND R.SAMPLEMONTH <=
                                                   v_dtSampleYearEnd)
                                     ORDER BY DBMS_RANDOM.RANDOM) S
                             WHERE ROWNUM <= V_REMAINTOTAL) RR;
                END;
              END IF;

              COMMIT;
            END;
          END IF;
        END;
        EXIT WHEN CUR_ORGSAMPLE%NOTFOUND;
      END LOOP;
      CLOSE CUR_ORGSAMPLE;
      --2.4更新抽样条数
      --2.4.1更新企业抽样条数
      UPDATE BZ_ROUTESAMPLEDETAIL T
         SET T.ORGSAMPLETOTAL = (SELECT COUNT(TT.ROUTESAMPLEDETAILID)
                                   FROM BZ_ROUTESAMPLEDETAIL TT
                                  WHERE T.ROUTESAMPLERECORDID =
                                        TT.ROUTESAMPLERECORDID
                                    AND T.ORGID = TT.ORGID
                                    AND TT.DATATYPE = '1')
       WHERE T.DATATYPE = '0'
         AND T.ROUTESAMPLERECORDID = V_ROUTESAMPLERECORDID;
      COMMIT;
      --2.4.2更新行业抽样条数
      SELECT NVL(SUM(D.ORGSAMPLETOTAL), 0)
        INTO V_SAMPLETOTAL
        FROM BZ_ROUTESAMPLEDETAIL D
       WHERE D.ROUTESAMPLERECORDID = V_ROUTESAMPLERECORDID
         AND D.DATATYPE = '0';
      SELECT V_SAMPLETOTAL INTO v_intCount FROM DUAL;
      UPDATE BZ_ROUTESAMPLERECORD R
         SET R.SAMPLETOTAL = V_SAMPLETOTAL
       WHERE R.ROUTESAMPLERECORDID = V_ROUTESAMPLERECORDID;
      COMMIT;
    END;
  END IF;

  COMMIT;
end PROC_ROUTESAMPLE;
/

prompt
prompt Creating procedure PROC_ROUTESHIFTARRANGEVERIFY
prompt ===============================================
prompt
CREATE OR REPLACE PROCEDURE OSECD.PROC_ROUTESHIFTARRANGEVERIFY(v_strRouteShiftArrangeID IN VARCHAR2,
                                                         v_strOperateType         IN VARCHAR2,
                                                         v_strVerifyTo            IN VARCHAR2,
                                                         v_strVerifyBy            IN VARCHAR2,
                                                         v_intCount               OUT NUMBER) IS

  /***********************************************************************************
    【名称】PROC_ROUTESHIFTARRANGEVERIFY
    【用途】营运车次计划审核
    【输入参数】v_strRouteShiftArrangeID：字符，营运车次计划主键ID
                v_strOperateType：字符，操作类别，0批量，1单条
                v_strVerifyTo：字符，审核类别，0反审核，1审核
                v_strVerifyBy：字符，审核人
    【输出参数】v_intCount：整数，审核数据条数
    【操作表】BZ_ROUTESHIFTARRANGE 营运车次计划表
              BZ_ROUTESHIFTARRANGECHECK 营运车次计划归档表
  ***********************************************************************************/

  TYPE T_CURSOR IS REF CURSOR;
  CUR_ARRANGE T_CURSOR;
  CUR_RUNDATE T_CURSOR;

  V_ROUTESHIFTARRANGEID VARCHAR2(50); --营运车次计划主键ID
  V_RUNDATESTART        DATE; --计划执行日期(开始)
  V_RUNDATEEND          DATE; --计划执行日期(结束)
  V_RUNDATE             DATE; --计划执行日期

BEGIN

  --1.单条数据操作时
  IF v_strOperateType = '1' AND v_strVerifyTo IS NOT NULL THEN
    BEGIN

      --主键非空
      IF v_strRouteShiftArrangeID IS NOT NULL THEN
        BEGIN
          SELECT COUNT(1)
            INTO v_intCount
            FROM BZ_ROUTESHIFTARRANGE T
           WHERE 1 = 1
             AND T.ROUTESHIFTARRANGEID = v_strRouteShiftArrangeID;
          IF v_intCount > 0 THEN
            BEGIN
              --1.1删除归档表数据
              DELETE FROM BZ_ROUTESHIFTARRANGECHECK T
               WHERE T.ROUTESHIFTARRANGEID = v_strRouteShiftArrangeID;
              COMMIT;
              --1.2记录计划执行日期区间
              SELECT T.RUNDATESTART, T.RUNDATEEND
                INTO V_RUNDATESTART, V_RUNDATEEND
                FROM BZ_ROUTESHIFTARRANGE T
               WHERE 1 = 1
                 AND T.ROUTESHIFTARRANGEID = v_strRouteShiftArrangeID;
              --1.3审核或反审核车次计划
              UPDATE BZ_ROUTESHIFTARRANGE T
                 SET T.VERIFYSTATUS = v_strVerifyTo,
                     T.VERIFYBY     = v_strVerifyBy,
                     T.VERIFYDATE   = SYSDATE
               WHERE 1 = 1
                 AND T.ROUTESHIFTARRANGEID = v_strRouteShiftArrangeID;
              COMMIT;
              --1.4审核时，写入归档表
              IF v_strVerifyTo = '1' THEN
                BEGIN

                  OPEN CUR_RUNDATE FOR
                    SELECT DISTINCT T.DT AS RUNDATE
                      FROM (SELECT V_RUNDATESTART + LEVEL - 1 AS DT
                              FROM DUAL
                            CONNECT BY LEVEL <=
                                       FLOOR(V_RUNDATEEND - V_RUNDATESTART) + 1) T
                     ORDER BY RUNDATE;

                  LOOP
                    FETCH CUR_RUNDATE
                      INTO V_RUNDATE;
                    EXIT WHEN CUR_RUNDATE%NOTFOUND;
                    BEGIN

                      INSERT INTO BZ_ROUTESHIFTARRANGECHECK
                        (ROUTESHIFTARRANGECHECKID,
                         ROUTESHIFTARRANGEID,
                         ROUTESHIFTARRANGEUPLOADID,
                         RUNDATE,
                         DATATYPE,
                         ORGID,
                         ROUTEID,
                         SUBROUTEID,
                         SEGMENTID,
                         BUSID,
                         SEQNO,
                         STATIONID,
                         PLANDEPARTURETIME,
                         PLANDEPARTURETIMECHAR,
                         BUSSELFID,
                         BUSCARDID,
                         BUSLENGTH,
                         BUSAGE,
                         BUSFUELTYPE,
                         BUSRECDATE,
                         STATIONNAME,
                         ROUTELENGTH,
                         ISRUSHHOURSHIFT,
                         ARRANGEMEMOS,
                         ISACTIVE,
                         VERIFYSTATUS,
                         VERIFYBY,
                         VERIFYDATE,
                         VERIFYMEMOS,
                         MEMOS,
                         CREATED,
                         CREATEBY,
                         UPDATED,
                         UPDATEBY,
                         RETAIN1,
                         RETAIN2,
                         RETAIN3,
                         RETAIN4,
                         RETAIN5,
                         RETAIN6,
                         RETAIN7,
                         RETAIN8,
                         RETAIN9,
                         RETAIN10)
                        SELECT SEQ_ROUTESHIFTARRANGECHECK.NEXTVAL,
                               T.ROUTESHIFTARRANGEID,
                               T.ROUTESHIFTARRANGEUPLOADID,
                               V_RUNDATE,
                               T.DATATYPE,
                               T.ORGID,
                               T.ROUTEID,
                               T.SUBROUTEID,
                               T.SEGMENTID,
                               T.BUSID,
                               T.SEQNO,
                               T.STATIONID,
                               T.PLANDEPARTURETIME,
                               T.PLANDEPARTURETIMECHAR,
                               T.BUSSELFID,
                               T.BUSCARDID,
                               T.BUSLENGTH,
                               T.BUSAGE,
                               T.BUSFUELTYPE,
                               T.BUSRECDATE,
                               T.STATIONNAME,
                               T.ROUTELENGTH,
                               T.ISRUSHHOURSHIFT,
                               T.ARRANGEMEMOS,
                               T.ISACTIVE,
                               T.VERIFYSTATUS,
                               T.VERIFYBY,
                               T.VERIFYDATE,
                               T.VERIFYMEMOS,
                               T.MEMOS,
                               T.CREATED,
                               T.CREATEBY,
                               T.UPDATED,
                               T.UPDATEBY,
                               T.RETAIN1,
                               T.RETAIN2,
                               T.RETAIN3,
                               T.RETAIN4,
                               T.RETAIN5,
                               T.RETAIN6,
                               T.RETAIN7,
                               T.RETAIN8,
                               T.RETAIN9,
                               T.RETAIN10
                          FROM BZ_ROUTESHIFTARRANGE T
                         WHERE 1 = 1
                           AND T.ROUTESHIFTARRANGEID =
                               v_strRouteShiftArrangeID;

                      COMMIT;
                    END;
                  END LOOP;

                  CLOSE CUR_RUNDATE;

                END;
              END IF;
              COMMIT;
            END;
          END IF;

        END;
      END IF;

      IF v_strRouteShiftArrangeID IS NULL THEN
        BEGIN
          SELECT 0 INTO v_intCount FROM DUAL;
        END;
      END IF;

    END;
  END IF;

  --2.批量数据操作，审核
  IF v_strOperateType = '0' AND v_strVerifyTo = '1' THEN
    BEGIN
      SELECT COUNT(1)
        INTO v_intCount
        FROM BZ_ROUTESHIFTARRANGE T
       WHERE 1 = 1
         AND T.VERIFYSTATUS = '0';
      IF v_intCount > 0 THEN
        BEGIN
          --2.1遍历车次计划表
          OPEN CUR_ARRANGE FOR
            SELECT T.ROUTESHIFTARRANGEID
              FROM BZ_ROUTESHIFTARRANGE T
             WHERE 1 = 1
               AND T.VERIFYSTATUS = '0';

          LOOP
            FETCH CUR_ARRANGE
              INTO V_ROUTESHIFTARRANGEID;
            EXIT WHEN CUR_ARRANGE%NOTFOUND;

            BEGIN

              --2.1.1删除归档表数据
              DELETE FROM BZ_ROUTESHIFTARRANGECHECK T
               WHERE T.ROUTESHIFTARRANGEID = V_ROUTESHIFTARRANGEID;
              COMMIT;
              --2.1.2记录计划执行日期区间
              SELECT T.RUNDATESTART, T.RUNDATEEND
                INTO V_RUNDATESTART, V_RUNDATEEND
                FROM BZ_ROUTESHIFTARRANGE T
               WHERE 1 = 1
                 AND T.ROUTESHIFTARRANGEID = V_ROUTESHIFTARRANGEID;

              OPEN CUR_RUNDATE FOR
                SELECT DISTINCT T.DT AS RUNDATE
                  FROM (SELECT V_RUNDATESTART + LEVEL - 1 AS DT
                          FROM DUAL
                        CONNECT BY LEVEL <=
                                   FLOOR(V_RUNDATEEND - V_RUNDATESTART) + 1) T
                 ORDER BY RUNDATE;

              LOOP
                FETCH CUR_RUNDATE
                  INTO V_RUNDATE;
                EXIT WHEN CUR_RUNDATE%NOTFOUND;
                BEGIN

                  INSERT INTO BZ_ROUTESHIFTARRANGECHECK
                    (ROUTESHIFTARRANGECHECKID,
                     ROUTESHIFTARRANGEID,
                     ROUTESHIFTARRANGEUPLOADID,
                     RUNDATE,
                     DATATYPE,
                     ORGID,
                     ROUTEID,
                     SUBROUTEID,
                     SEGMENTID,
                     BUSID,
                     SEQNO,
                     STATIONID,
                     PLANDEPARTURETIME,
                     PLANDEPARTURETIMECHAR,
                     BUSSELFID,
                     BUSCARDID,
                     BUSLENGTH,
                     BUSAGE,
                     BUSFUELTYPE,
                     BUSRECDATE,
                     STATIONNAME,
                     ROUTELENGTH,
                     ISRUSHHOURSHIFT,
                     ARRANGEMEMOS,
                     ISACTIVE,
                     VERIFYSTATUS,
                     VERIFYBY,
                     VERIFYDATE,
                     VERIFYMEMOS,
                     MEMOS,
                     CREATED,
                     CREATEBY,
                     UPDATED,
                     UPDATEBY,
                     RETAIN1,
                     RETAIN2,
                     RETAIN3,
                     RETAIN4,
                     RETAIN5,
                     RETAIN6,
                     RETAIN7,
                     RETAIN8,
                     RETAIN9,
                     RETAIN10)
                    SELECT SEQ_ROUTESHIFTARRANGECHECK.NEXTVAL,
                           T.ROUTESHIFTARRANGEID,
                           T.ROUTESHIFTARRANGEUPLOADID,
                           V_RUNDATE,
                           T.DATATYPE,
                           T.ORGID,
                           T.ROUTEID,
                           T.SUBROUTEID,
                           T.SEGMENTID,
                           T.BUSID,
                           T.SEQNO,
                           T.STATIONID,
                           T.PLANDEPARTURETIME,
                           T.PLANDEPARTURETIMECHAR,
                           T.BUSSELFID,
                           T.BUSCARDID,
                           T.BUSLENGTH,
                           T.BUSAGE,
                           T.BUSFUELTYPE,
                           T.BUSRECDATE,
                           T.STATIONNAME,
                           T.ROUTELENGTH,
                           T.ISRUSHHOURSHIFT,
                           T.ARRANGEMEMOS,
                           T.ISACTIVE,
                           --T.VERIFYSTATUS,
                           --T.VERIFYBY,
                           --T.VERIFYDATE,
                           v_strVerifyTo,
                           v_strVerifyBy,
                           SYSDATE,
                           T.VERIFYMEMOS,
                           T.MEMOS,
                           T.CREATED,
                           T.CREATEBY,
                           T.UPDATED,
                           T.UPDATEBY,
                           T.RETAIN1,
                           T.RETAIN2,
                           T.RETAIN3,
                           T.RETAIN4,
                           T.RETAIN5,
                           T.RETAIN6,
                           T.RETAIN7,
                           T.RETAIN8,
                           T.RETAIN9,
                           T.RETAIN10
                      FROM BZ_ROUTESHIFTARRANGE T
                     WHERE 1 = 1
                       AND T.ROUTESHIFTARRANGEID = V_ROUTESHIFTARRANGEID;

                  COMMIT;
                END;
              END LOOP;

              CLOSE CUR_RUNDATE;

            END;

          END LOOP;

          CLOSE CUR_ARRANGE;

          --2.2审核车次计划
          UPDATE BZ_ROUTESHIFTARRANGE T
             SET T.VERIFYSTATUS = v_strVerifyTo,
                 T.VERIFYBY     = v_strVerifyBy,
                 T.VERIFYDATE   = SYSDATE
           WHERE 1 = 1
             AND T.VERIFYSTATUS = '0';
          COMMIT;

        END;
      END IF;
    END;
  END IF;

  --3.批量数据操作，反审核
  IF v_strOperateType = '0' AND v_strVerifyTo = '0' THEN
    BEGIN
      SELECT COUNT(1)
        INTO v_intCount
        FROM BZ_ROUTESHIFTARRANGE T
       WHERE 1 = 1
         AND T.VERIFYSTATUS = '1';
      IF v_intCount > 0 THEN
        BEGIN
          --3.1删除已审核车次对应归档表
          DELETE FROM BZ_ROUTESHIFTARRANGECHECK T
           WHERE 1 = 1
             AND T.ROUTESHIFTARRANGEID IN
                 (SELECT T.ROUTESHIFTARRANGEID
                    FROM BZ_ROUTESHIFTARRANGE T
                   WHERE 1 = 1
                     AND T.VERIFYSTATUS = '1');
          --3.2反审核车次记录
          UPDATE BZ_ROUTESHIFTARRANGE T
             SET T.VERIFYSTATUS = v_strVerifyTo,
                 T.VERIFYBY     = v_strVerifyBy,
                 T.VERIFYDATE   = SYSDATE
           WHERE 1 = 1
             AND T.VERIFYSTATUS = '1';
          COMMIT;

          COMMIT;
        END;
      END IF;
    END;
  END IF;

END PROC_ROUTESHIFTARRANGEVERIFY;
/

prompt
prompt Creating procedure PROC_ROUTESHIFTCHECKVERIFY
prompt =============================================
prompt
CREATE OR REPLACE PROCEDURE OSECD.PROC_ROUTESHIFTCHECKVERIFY(V_ID            IN VARCHAR2,
                                                       V_CHECKED       IN VARCHAR2,
                                                       V_RUSHHOUR      IN VARCHAR2,
                                                       V_DEPARTURETIME IN DATE,
                                                       V_MEMOS         IN VARCHAR2,
                                                       V_CHECKBY       IN VARCHAR2,
                                                       V_STRORGIDS     IN VARCHAR2,
                                                       V_STRROUTEID    IN VARCHAR2,
                                                       V_STRDATESTART  IN VARCHAR2,
                                                       V_STRDATEEND    IN VARCHAR2,
                                                       V_CHECKSTART    IN VARCHAR2,
                                                       V_CHECKEND      IN VARCHAR2,
                                                       V_DATATYPE      IN VARCHAR2,
                                                       V_ISCHECKED     IN VARCHAR2) IS
  V_STRSQL   VARCHAR2(4000);
  V_SQLWHERE VARCHAR2(100);
BEGIN
  IF (V_ID <> '''') THEN
    UPDATE BZ_ROUTESHIFTCHECK
       SET ISCHECKED            = V_CHECKED,
           ISCHECKRUSHHOURSHIFT = V_RUSHHOUR,
           CHECKDEPARTURETIME   = V_DEPARTURETIME,
           CHECKMEMOS           = V_MEMOS,
           CHECKBY              = V_CHECKBY,
           CHECKDATE            = SYSDATE
     WHERE ROUTESHIFTCHECKID = V_ID;
  ELSE
    V_SQLWHERE := ' 1=1 ';
    IF (V_STRROUTEID <> '''' AND V_STRROUTEID <> '-1') THEN
      V_SQLWHERE := V_SQLWHERE || ' AND ROUTEID=' || V_STRROUTEID;
    END IF;
    IF (V_CHECKSTART <> '''') THEN
      V_SQLWHERE := V_SQLWHERE || ' (LEAVETIME - PLANSTARTTIME)*24*60>=' ||
                    V_CHECKSTART;
    END IF;
    IF (V_CHECKEND <> '''') THEN
      V_SQLWHERE := V_SQLWHERE || ' (LEAVETIME - PLANSTARTTIME)*24*60<=' ||
                    V_CHECKEND;
    END IF;
    IF (V_DATATYPE <> '''' AND V_DATATYPE <> '-1') THEN
      V_SQLWHERE := V_SQLWHERE || ' AND SHIFTDATATYPE=' || V_DATATYPE;
    END IF;
    IF (V_ISCHECKED <> '''' AND V_ISCHECKED <> '-1') THEN
      V_SQLWHERE := V_SQLWHERE || ' AND ISCHECKED=' || V_ISCHECKED;
    END IF;
    V_STRSQL    := 'UPDATE BZ_ROUTESHIFTCHECK
     SET ISCHECKED = ''' || V_CHECKED || ''',
           CHECKMEMOS = ''' || V_MEMOS || ''',
           CHECKBY = ''' || V_CHECKBY || ''',
           CHECKDATE = SYSDATE
   WHERE ' || V_SQLWHERE || '
     AND ORGID IN (' || V_STRORGIDS || ')
     AND RUNDATADATE <= DATE ''' || V_STRDATEEND || '''
     AND RUNDATADATE >= DATE ''' || V_STRDATESTART || '''';
    EXECUTE IMMEDIATE V_STRSQL;
  END IF;
  COMMIT;
END PROC_ROUTESHIFTCHECKVERIFY;
/

prompt
prompt Creating procedure PROC_TEST
prompt ============================
prompt
CREATE OR REPLACE PROCEDURE OSECD.proc_test AS
   TYPE MYTABLE IS REF CURSOR;
   BEGIN
     exec Pkg_Javawstest.PROC_JAVAWSTEST('NK11',date'2015-09-17',MYTABLE);

   END proc_test;
/

prompt
prompt Creating procedure P_A_TEST_1
prompt =============================
prompt
CREATE OR REPLACE PROCEDURE OSECD.p_a_test_1 (parm1 IN VARCHAR2,out_para OUT VARCHAR2)AS
   temp   VARCHAR2 (100);
   BEGIN SELECT orgname INTO temp FROM a_test WHERE orgid = parm1;
    out_para:=temp;
   DBMS_OUTPUT.put_line (out_para);
   END p_a_test_1;
/

prompt
prompt Creating procedure P_A_TEST_2
prompt =============================
prompt
create or replace procedure osecd.p_a_test_2(param1 in varchar2,param2 in varchar2) as
       begin
           insert into A_TEST (orgid,orgname) values (param1,param2);
       end p_a_test_2;
/

prompt
prompt Creating procedure P_CDJWBUSINFO
prompt ================================
prompt
create or replace procedure osecd.p_cdjwbusinfo(rundate date) is
begin--lee
  delete cdjw_businfo ;
  insert into cdjw_businfo
    (busid,
     busselfid,
     cardid,
     orgid,
     orgidfrom,
     busstatus,
     createdate,
     rundate)
    select *
      from cdjw_businfo@gj
  commit;
end p_cdjwbusinfo;
/

prompt
prompt Creating procedure P_LOADBUSORDER
prompt =================================
prompt
CREATE OR REPLACE PROCEDURE OSECD.P_LOADBUSORDER(V_ROUTEID   IN NVARCHAR2,
                                           V_BEGINTIME IN NVARCHAR2) IS
BEGIN
  --清空表fdisbusorderinfo
  DELETE FROM FDISBUSORDERINFO
   WHERE ROUTEID IN 'V_ROUTEID'
     AND RUNDATE = V_BEGINTIME;
  COMMIT;

  INSERT INTO FDISBUSORDERINFO
    (ID,
     BUSID,
     ORDERNUM,
     SHIFTNUMSTRING,
     SHIFTTYPE,
     ROUTEID,
     SUBROUTEID,
     RUNDATE,
     CHECKED,
     ISACTIVE,
     BUSORDERTYPE,
     BUSRUNDIRECTION)
    SELECT ARRANGESID,
           BUSID,
           ROWNUM,
           SHIFTNUMSTRING,
           SHIFTTYPE,
           ROUTEID,
           SUBROUTEID,
           EXECDATE,
           1,
           1,
           BUSORDERTYPE,
           SHIFTDIRECTION
      FROM (SELECT T.ARRANGESID,
                   T.BUSID,
                   T.SHIFTNUMSTRING,
                   T.SHIFTTYPE,
                   T.ROUTEID,
                   T.SUBROUTEID,
                   T.EXECDATE,
                   T.BUSORDERTYPE,
                   T.SHIFTDIRECTION
              FROM FDISBUSORDERVIEW T
             WHERE T.EXECDATE = V_BEGINTIME
               AND T.ROUTEID IN 'V_ROUTEID '
               AND T.GROUPNUM = ' 1 '
               AND EMPPTYPE = ' 1 '
             ORDER BY T.ONWORKTIME);
  COMMIT;
END P_LOADBUSORDER;
/

prompt
prompt Creating procedure SAVEBUSMONITORICONCOLOR
prompt ==========================================
prompt
create or replace procedure osecd.SaveBusMonitorIconColor
(
   v_busicon varchar2,
   v_buscolor varchar2,
   v_userid varchar2
)
is
rowicons int;
rowcolors int;
execsql varchar2(2000);
begin
  select count(*) into rowicons from sysconfig where configtype = 'busicon' and userid=''||v_userid||'';
  select count(*) into rowcolors from sysconfig where configtype = 'buscolor' and userid=''||v_userid||'';
  if rowicons = 1 then
    execsql := 'update sysconfig set configvalue = ''' || v_busicon ||
     ''' where configtype=''busicon'' and userid='''||v_userid||'''';
    execute immediate execsql;
    commit;
  elsif rowicons = 0 then
    insert into sysconfig(configid,configtype,configvalue,userid)
    values('001','busicon',v_busicon,v_userid);
    commit;
  else
    execsql := '';
  end if;
  if rowcolors = 1 then
    execsql := 'update sysconfig set configvalue = ''' || v_buscolor ||
     ''' where configtype=''buscolor'' and userid='''||v_userid||'''';
    execute immediate execsql;
    commit;
  elsif rowcolors = 0 then
    insert into sysconfig(configid,configtype,configvalue,userid)
    values('002','buscolor',v_buscolor,v_userid);
    commit;
  else
    execsql := '';
  end if;
end;
/

prompt
prompt Creating procedure SAVEMONITORORG
prompt =================================
prompt
create or replace procedure osecd.SaveMonitorOrg
(
   v_orgid varchar2
)
is
roworg int;
begin
  select count(*) into roworg from sysconfig where configtype = 'monitororgid';
  if roworg = 1 then
    update sysconfig set configvalue = v_orgid
    where configtype='monitororgid';
    commit;
  elsif roworg = 0 then
    insert into sysconfig(configid,configtype,configvalue)
    values('003','monitororgid',v_orgid);
    commit;
  end if;
end;
/

prompt
prompt Creating procedure TREATE_INDICATORWARNING
prompt ==========================================
prompt
CREATE OR REPLACE PROCEDURE OSECD.TREATE_INDICATORWARNING(V_DATE DATE) AS
  V_DATE_IN     DATE;
  V_BEGIN_MONTH DATE;
  V_END_MONTH   DATE;
BEGIN
  V_DATE_IN     := TRUNC(V_DATE);
  V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
  V_END_MONTH   := LAST_DAY(V_DATE_IN);
  --日志

  --删除原有数据
  DELETE FROM JZ_INDICATORWARNINGSTORAGE
   WHERE JZDATE >= V_BEGIN_MONTH
     AND JZDATE < V_END_MONTH;
  --插入新数据
  INSERT INTO JZ_INDICATORWARNINGSTORAGE
    (RECORDID,
     INDICATORID,
     INDICATORNAME,
     INDICATORUNIT,
     INDICATORSTANDARDVALUE,
     ORGID,
     ORGNAME,
     INDICATORVALUE,
     JZDATE,
     STORAGEORGTYPE,
     INDICATORTYPE)
    SELECT s_busrunstorage.NEXTVAL AS RECORDID,
           T.INDICATORID              AS INDICATORID,
           T.INDICATORNAME            AS INDICATORNAME,
           T.INDICATORUNIT            AS INDICATORUNIT,
           T.INDICATORSTANDARDVALUE   AS INDICATORSTANDARDVALUE,
           T.ORGID                    AS ORGID,
           T.ORGNAME                  AS ORGNAME,
           T.INDICATORVALUE           AS INDICATORVALUE,
           T.JZDATE                   AS JZDATE,
           T.STORAGEORGTYPE           AS STORAGEORGTYPE,
           T.INDICATORTYPE            AS INDICATORTYPE
      FROM (SELECT IND.INDICATORID AS INDICATORID,
                   IND.INDICATORNAME AS INDICATORNAME,
                   IND.INDICATORUNIT AS INDICATORUNIT,
                   IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                   T.ORGID AS ORGID,
                   T.ORGNAME AS ORGNAME,
                   T.BUSSHIFTREALIZERATE AS INDICATORVALUE,
                   V_DATE_IN AS JZDATE,
                   '2' AS STORAGEORGTYPE,
                   '1' AS INDICATORTYPE
              FROM SYS_INDICATORWARNING IND,
                   (SELECT T.ORGID AS ORGID,
                           ORG.ORGNAME AS ORGNAME,
                           ROUND(DECODE(T.PLANSEQCOUNT,
                                        0,
                                        NULL,
                                        T.ACTUALSEQCOUNT / T.PLANSEQCOUNT),
                                 4) AS BUSSHIFTREALIZERATE
                      FROM MCORGINFOGS ORG, JZ_ROUTEDAYSTORAGE T
                     WHERE T.ORGID = ORG.ORGID
                       AND T.JZDATE >= V_BEGIN_MONTH
                       AND T.JZDATE <
                           V_END_MONTH
                       AND T.DATASAVELEVEL = 2
                       AND T.STORAGEORGTYPE = 2
                       AND ORG.ORGTYPE = 1) T
             WHERE IND.INDICATORID = 1 --班次兑现率
            UNION
            SELECT IND.INDICATORID AS INDICATORID,
                   IND.INDICATORNAME AS INDICATORNAME,
                   IND.INDICATORUNIT AS INDICATORUNIT,
                   IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                   T.ORGID AS ORGID,
                   T.ORGNAME AS ORGNAME,
                   T.FSTLSTONTIMERATE AS INDICATORVALUE,
                   TO_DATE('2011-07-01', 'YYYY-MM-DD') AS JZDATE,
                   '2' AS STORAGEORGTYPE,
                   '1' AS INDICATORTYPE
              FROM SYS_INDICATORWARNING IND,
                   (select rday.orgid as orgid,
                           org.orgname as orgname,
                           round(decode(rday.fstlstseqcount,
                                        0,
                                        null,
                                        (rday.fstontimecount +
                                        rday.lstontimecount) /
                                        rday.fstlstseqcount),
                                 4) as FSTLSTONTIMERATE
                      from mcorginfogs org, jz_routedaystorage rday
                     where rday.orgid = org.orgid(+)
                       and rday.datasavelevel = 2
                       and rday.storageorgtype = 2
                       and rday.jzdate >= V_BEGIN_MONTH
                       and rday.jzdate < V_END_MONTH
                       and org.orgtype = 1) T
             WHERE IND.INDICATORID = 4 --首末班准点率
            UNION
            SELECT IND.INDICATORID AS INDICATORID,
                   IND.INDICATORNAME AS INDICATORNAME,
                   IND.INDICATORUNIT AS INDICATORUNIT,
                   IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                   T.ORGID AS ORGID,
                   T.ORGNAME AS ORGNAME,
                   T.KMILEINCOME AS INDICATORVALUE,
                   V_DATE_IN AS JZDATE,
                   '2' AS STORAGEORGTYPE,
                   '1' AS INDICATORTYPE
              FROM SYS_INDICATORWARNING IND,
                   (SELECT CASHINCOME.ORGID AS ORGID,
                           CASHINCOME.ORGNAME AS ORGNAME,
                           ROUND(DECODE(RUNMILE.RUNMILES,
                                        0,
                                        NULL,
                                        (CASHINCOME.CASHINCOME /
                                        RUNMILE.RUNMILES) * 1000),
                                 2) AS KMILEINCOME
                      FROM (SELECT CASH.ORGID AS ORGID,
                                   ORG.ORGNAME AS ORGNAME,
                                   SUM(CASH.TOTALINCOME) AS CASHINCOME
                              FROM JZ_CASHINCOME CASH, MCORGINFOGS ORG
                             WHERE ORG.ORGID = CASH.ORGID(+)
                               AND ORG.ORGTYPE = 1
                               AND CASH.DATASAVELEVEL = 2
                               AND CASH.STORAGEORGTYPE = 2
                               AND CASH.JZDATE >=V_BEGIN_MONTH
                               AND CASH.JZDATE < V_END_MONTH
                             GROUP BY CASH.ORGID, ORG.ORGNAME) CASHINCOME,
                           (SELECT RDAY.ORGID    AS ORGID,
                                   ORG.ORGNAME   AS ORGNAME,
                                   RDAY.RUNMILES AS RUNMILES
                              FROM JZ_ROUTEDAYSTORAGE RDAY, MCORGINFOGS ORG
                             WHERE ORG.ORGID = RDAY.ORGID(+)
                               AND ORG.ORGTYPE = 1
                               AND RDAY.DATASAVELEVEL = 2
                               AND RDAY.STORAGEORGTYPE = 2
                               AND RDAY.JZDATE >= V_BEGIN_MONTH
                               AND RDAY.JZDATE <V_END_MONTH ) RUNMILE
                     WHERE CASHINCOME.ORGID = RUNMILE.ORGID) T
             WHERE IND.INDICATORID = 5) T; --千车公里收入
  COMMIT;
END;
/

prompt
prompt Creating package body PKG_DBA_MANAGE
prompt ====================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_DBA_MANAGE IS
  /****************************************************************************************
  *    名称：PKG_DBA_MANAGE                                                               *
  *                                                                                       *
  *    功能：分区表管理                                                                   *
  *                                                                                       *
  *    作者：csbin                                                                        *
  *    日期：2008-04-03                                                                   *
  *                                                                                       *
  *    要求：运行本脚本的用户必须有以下权限                                               *
  *           GRANT CREATE TABLESPACE     TO 用户名;                                      *
  *           GRANT ALTER USER            TO 用户名;                                      *
  *           GRANT ALTER ANY  TABLE      TO 用户名;                                      *
  *           GRANT DROP TABLESPACE       TO 用户名;                                      *
  *           GRANT ALTER TABLESPACE      TO 用户名;                                      *
  *           GRANT DEBUG CONNECT SESSION TO 用户名;                                      *
  *                                                                                       *
  *    版本号     修改日期     修改人   内容                                              *
  * ------------------------------------------------------------------------------------- *
  *      3.0     2010-01-27    csbin    调整为GPS日分区管理                               *
  *      3.0     2010-08-30    hujihuo  调整日、月分区表名管理                            *
  *      3.0     2011-02-22    hujihuo   增加手动添加或删除分区                           *
  ****************************************************************************************/

  /****************************************************************************************
  *    名称：write_log                                                                    *
  *                                                                                       *
  *    功能：写操作日志                                                                   *
  *                                                                                       *
  *    作者：csbin                                                                        *
  *    日期：2008-04-03                                                                   *
  ****************************************************************************************/
  PROCEDURE write_log(v_log IN log_info) IS
  BEGIN
    INSERT INTO pkg_getsequence_logs
      (logid,
       module,
       submodule,
       loglevel,
       context,
       actdatetime,
       actendtime,
       logtype,
       routeid)
    VALUES
      (s_pkg_getsequence_log.nextval,
       'PKG_DBA_MANAGE',
       v_log.submodule,
       v_log.log_level,
       v_log.log_context,
       v_log.actdatetime,
       v_log.actendtime,
       v_log.log_type,
       v_log.route_id);
    NULL;
  END;
  /****************************************************************************************
  *    名称：P_REBUILD_INDEX                                                              *
  *                                                                                       *
  *    功能：重建失效分区                                                                 *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2013-01-07                                                                   *
  ****************************************************************************************/
 PROCEDURE P_REBUILD_INDEX IS
   v_date DATE := LAST_DAY(SYSDATE) + 1; --创建下一个月的表空间和分区
   v_ret  VARCHAR2(255);
   CURSOR cur_sql IS
     SELECT 'alter index   ' || INDEX_NAME || ' rebuild partition ' ||
            partition_name || '  tablespace ' || tablespace_name  as ss --|| ';'
       FROM USER_IND_PARTITIONS
      WHERE STATUS = 'UNUSABLE'
      ORDER BY INDEX_NAME, partition_name;
 BEGIN
   FOR cur_r IN cur_sql LOOP
      BEGIN
        EXECUTE IMMEDIATE cur_r.ss;
       EXCEPTION
       WHEN OTHERS THEN
          null;
       END;
    END LOOP;
 END;
 
  /****************************************************************************************
  *    名称：P_PARTITION_ADD                                                              *
  *                                                                                       *
  *    功能：动态创建表分区                                                               *
  *                                                                                       *
  *    作者：csbin                                                                        *
  *    日期：2008-04-03                                                                   *
  ****************************************************************************************/
  PROCEDURE P_PARTITION_ADD IS
    v_date DATE := LAST_DAY(SYSDATE) + 1; --创建下一个月的表空间和分区
    v_ret  VARCHAR2(255);
  BEGIN
    --P_PARTITION_ADD2(v_date, v_ret);
    ADD_PARTITION(v_date, v_ret);
  END P_PARTITION_ADD;

  PROCEDURE P_PARTITION_ADD2(v_ret out VARCHAR2) IS
    v_date DATE := LAST_DAY(SYSDATE) + 1; --创建下一个月的表空间和分区
  BEGIN
    --P_PARTITION_ADD2(v_date, v_ret);
    ADD_PARTITION(v_date, v_ret);
    null;
  END P_PARTITION_ADD2;
  /****************************************************************************************
  *    名称：P_PARTITION_ADD                                                              *
  *                                                                                       *
  *    功能：手工添加分区                                                                 *
  *                                                                                       *
  *    作者：csbin                                                                        *
  *    日期：2008-04-03                                                                   *
  *                                                                                       *
  *    日期：2008-04-07 适应RAC环境                                                       *
  ****************************************************************************************/
  PROCEDURE P_PARTITION_ADD(v_date IN DATE) IS
    v_ret VARCHAR2(255);
  BEGIN
    v_ret := '';
    --P_PARTITION_ADD2(v_date, v_ret);
    ADD_PARTITION(v_date, v_ret);
  END P_PARTITION_ADD;


  PROCEDURE ADD_PARTITION(v_date date, v_ret out varchar2) IS
    SSQL        VARCHAR2(1024) := '';
    v_begindate date;
    v_enddate   date;
  begin
    for cur in (select table_name,
                       tablespace_tbl,
                       partition_type,
                       truncate_date,
                       tablespace_idx,
                       partition_column
                  from dba_part_table) loop
      --加入最大分区
      if not exist_partition(cur.table_name, 'P_MAX') then
        begin
          SSQL := 'ALTER TABLE ' || cur.table_name ||
                  ' ADD PARTITION P_MAX  VALUES LESS THAN(maxvalue) TABLESPACE ' ||
                  cur.tablespace_tbl;
          EXECUTE IMMEDIATE SSQL;
        exception
          when others then
            null;
        end;
      end if;

      --按类型创建分区
      case cur.partition_type
      --日分区
        when 0 then

          select to_date(to_char(v_date, 'yyyymm') || '01', 'yyyymmdd')
            into v_begindate
            from dual;
          select add_months(v_begindate, 1) - 1 into v_enddate from dual;
          while (v_begindate <= v_enddate) loop
            begin
              SSQL := 'alter table ' || cur.table_name ||
                      ' split partition p_MAX at ' || '(to_date(''' ||
                      to_char(v_begindate + 1, 'yyyymmdd') ||
                      ''',''yyyymmdd''))' || 'into (partition P_' ||
                      to_char(v_begindate, 'yyyymmdd') || ' tablespace ' ||
                      cur.tablespace_tbl || ' ,partition p_MAX)';

              v_begindate := v_begindate + 1;

              EXECUTE IMMEDIATE SSQL;
            exception
              when others then
                null;
            end;
          end loop;
          --月分区
        when 1 then
          begin
            select to_date(to_char(v_date, 'yyyymm') || '01', 'yyyymmdd')
              into v_begindate
              from dual;

            SSQL := 'alter table ' || cur.table_name ||
                    ' split partition p_MAX at ' || '(to_date(''' ||
                    to_char(add_months(v_begindate, 1), 'yyyymmdd') ||
                    ''',''yyyymmdd''))' || 'into (partition P_' ||
                    to_char(v_begindate, 'yyyymm') || ' tablespace ' ||
                    cur.tablespace_tbl || ' ,partition p_MAX)';

            EXECUTE IMMEDIATE SSQL;
          exception
            when others then
              null;
          end;
          --年分区
        when 2 then
          begin
            select to_date(to_char(v_date, 'yyyy') || '0101', 'yyyymmdd')
              into v_begindate
              from dual;

            SSQL := 'alter table ' || cur.table_name ||
                    ' split partition p_MAX at ' || '(to_date(''' ||
                    to_char(add_months(v_begindate, 12), 'yyyymmdd') ||
                    ''',''yyyymmdd''))' || 'into (partition P_' ||
                    to_char(v_begindate, 'yyyy') || ' tablespace ' ||
                    cur.tablespace_tbl || ' ,partition p_MAX)';

            EXECUTE IMMEDIATE SSQL;
          exception
            when others then
              null;
          end;
      end case;

    end loop;
    --重建失效分区
    P_REBUILD_INDEX;
  EXCEPTION
    WHEN OTHERS THEN
      v_ret := g_false; --null;
  END;

  FUNCTION exist_partition(v_tablename varchar2, v_partname varchar2)
    RETURN boolean IS
    v_num number(1);
  begin
    select count(0)
      into v_num
      from user_tab_partitions t
     where t.table_name = upper(v_tablename)
       and t.partition_name = upper(v_partname);

    return(v_num = 1);
  end;
  /****************************************************************************************
  *    名称：ADD_PARTITION                                                                *
  *                                                                                       *
  *    功能：增加表分区执行函数                                                           *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2010-09-01                                                                   *
  ****************************************************************************************/
  PROCEDURE ADD_PARTITION2(v_tablename      varchar2,
                           v_partname       varchar2,
                           v_tablespacename varchar2,
                           v_condition      varchar2,
                           v_ret            out varchar2) IS
    SSQL VARCHAR2(1024) := '';
  begin
    --SSQL := 'ALTER TABLE ' || v_tablename || ' ADD PARTITION ' ||
    --        v_partname || ' VALUES LESS THAN(TO_DATE(''' || v_condition ||
    --        ''',''YYYYMMDD'')) TABLESPACE ' || v_tablespacename;
    --EXECUTE IMMEDIATE SSQL;
    --加入最大分区
    if not exist_partition(v_tablename, 'P_MAX') then
      begin
        SSQL := 'ALTER TABLE ' || v_tablename ||
                ' ADD PARTITION P_MAX  VALUES LESS THAN(maxvalue) TABLESPACE ' ||
                v_tablespacename;
        EXECUTE IMMEDIATE SSQL;
      exception
        when others then
          null;
      end;
    end if;

    SSQL := 'alter table ' || v_tablename || ' split partition p_MAX at ' ||
            '(to_date(''' || v_condition || ''',''yyyymmdd''))' ||
            'into (partition ' || v_partname || ' tablespace ' ||
            v_tablespacename || ' ,partition p_MAX)';

    EXECUTE IMMEDIATE SSQL;

  EXCEPTION
    WHEN OTHERS THEN
      v_ret := g_false; --null;
  END;

  /****************************************************************************************
  *    名称：P_PARTITION_DEL                                                              *
  *                                                                                       *
  *    功能：删除表分区                                                                   *
  *                                                                                       *
  *    作者：csbin                                                                        *
  *    日期：2008-04-03                                                                   *
  ****************************************************************************************/
  PROCEDURE P_PARTITION_DEL IS
    v_date DATE := ADD_MONTHS(SYSDATE, -1 * g_del_months);
  BEGIN
    P_PARTITION_DEL(v_date);
  END P_PARTITION_DEL;
  /****************************************************************************************
  *    名称：P_PARTITION_DEL                                                              *
  *                                                                                       *
  *    功能：手工删除分区                                                                 *
  *                                                                                       *
  *    作者：csbin                                                                        *
  *    日期：2008-04-03                                                                   *
  ****************************************************************************************/
  PROCEDURE P_PARTITION_DEL(v_date IN DATE) IS
    v_ret VARCHAR2(255) := '';
  BEGIN
    DEL_PARTITION(v_date, v_ret);
  END P_PARTITION_DEL;

  /****************************************************************************************
  *    名称：DEL_PARTITION                                                                *
  *                                                                                       *
  *    功能：删除表分区执行函数                                                           *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2010-09-01                                                                   *
  ****************************************************************************************/
  PROCEDURE DEL_PARTITION2(v_tablename varchar2,
                           v_partname  varchar2,
                           v_ret       out varchar2) IS
    SSQL VARCHAR2(1024) := '';
  begin
    --清空表分区
    SSQL := 'ALTER TABLE ' || v_tablename || ' TRUNCATE PARTITION ' ||
            v_partname;
    EXECUTE IMMEDIATE SSQL;

    -- 给表删除分区
    SSQL := 'ALTER TABLE ' || v_tablename || ' DROP PARTITION ' ||
            v_partname;
    EXECUTE IMMEDIATE SSQL;
  EXCEPTION
    WHEN OTHERS THEN
      v_ret := g_false; --null;
  end;
  /****************************************************************************************
  *    名称：DEL_PARTITION                                                                *
  *                                                                                       *
  *    功能：删除表分区执行函数                                                           *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2010-09-01                                                                   *
  ****************************************************************************************/
  PROCEDURE DEL_PARTITION(v_date date, v_ret out varchar2) IS
    v_datestr   VARCHAR2(10);
    v_begindate date;
    v_enddate   date;
  begin
    for cur in (select table_name,
                       tablespace_tbl,
                       partition_type,
                       truncate_date,
                       tablespace_idx,
                       partition_column
                  from dba_part_table) loop

      --按类型删除分区
      case cur.partition_type
      --日分区
        when 0 then
          select to_date(to_char(v_date, 'yyyymm') || '01', 'yyyymmdd')
            into v_begindate
            from dual;
          select add_months(v_begindate, 1) - 1 into v_enddate from dual;
          while (v_begindate <= v_enddate) loop
            begin
              v_datestr := to_char(v_begindate, 'yyyymmdd');
              DEL_PARTITION2(cur.table_name, 'P_' || v_datestr, v_ret);

              v_begindate := v_begindate + 1;
            exception
              when others then
                null;
            end;
          end loop;
          --月分区
        when 1 then
          begin
            v_datestr := to_char(v_date, 'yyyymm');
            DEL_PARTITION2(cur.table_name, 'P_' || v_datestr, v_ret);
          exception
            when others then
              null;
          end;
          --年分区
        when 2 then
          begin
            v_datestr := to_char(v_date, 'yyyy');
            DEL_PARTITION2(cur.table_name, 'P_' || v_datestr, v_ret);
          exception
            when others then
              null;
          end;
      end case;

    end loop;
  EXCEPTION
    WHEN OTHERS THEN
      v_ret := g_false; --null;
  end;


  /****************************************************************************************
  *    名称：P_INIT                                                                       *
  *                                                                                       *
  *    功能：初始化分区表(从数据库表)                                                     *
  *                                                                                       *
  *    作者：miniproboy                                                                   *
  *    日期：2010-11-10                                                                   *
  ****************************************************************************************/
  PROCEDURE P_INIT IS
    v_log log_info;
  BEGIN

    -- 日志功能

    for cur in (select table_name,
                       tablespace_tbl,
                       partition_type,
                       tablespace_idx,
                       partition_column
                  from dba_part_table) loop
      begin
        pkg_deal_part_tab.p_main(cur.table_name,
                                 cur.tablespace_tbl,
                                 cur.tablespace_idx,
                                 cur.partition_column,
                                 cur.partition_type,
                                 2,
                                 4,
                                 1,
                                 1);

        v_log.submodule   := 'P_INIT';
        v_log.actdatetime := sysdate;
        v_log.log_type    := 0;
        v_log.log_level   := 2;
        v_log.log_context := user || '转换分区表' || cur.table_name;
        write_log(v_log);
      exception
        when others then
          null;
      end;
    end loop;
  END;
  /****************************************************************************************
  *    名称：MANUAL_ADD_PARTITION                                                         *
  *    功能：手工创建分区                                                                 *
  *    作者：hujihuo                                                                      *
  *    日期：2010-02-22                                                                   *
  *    参数：v_date ：创建一个月的分区，月分区创建一个，日分区创建全月的日分区            *
  *          v_tablename:创建分区的表名                                                   *
  *          v_tablespacename：创建分区表所在有表空间                                     *
  *          v_partition_type：创建表分区类型，0-日分区，1-月分区，2年分区                *
  ****************************************************************************************/
  PROCEDURE MANUAL_ADD_PARTITION(v_date           date,
                                 v_tablename      varchar2,
                                 v_tablespacename varchar2,
                                 v_partition_type varchar2) IS
    v_month         VARCHAR2(6) := TO_CHAR(v_date, 'YYYYMM');
    v_begin_date    DATE := trunc(v_date, 'mm');
    v_end_date      DATE := LAST_DAY(v_begin_date) + 1;
    v_cur_date      DATE := v_begin_date;
    v_cur_date_str  VARCHAR2(10) := TO_CHAR(v_cur_date, 'YYYYMMDD');
    v_next_date_str VARCHAR2(10);
    v_log           log_info;
    v_ret           varchar2(1024);
  BEGIN
    v_ret := g_true;
    ------------------------------------------------------------------------
    -- 日志功能
    v_log.submodule   := 'MANUAL_ADD_PARTITION';
    v_log.actdatetime := sysdate;
    v_log.log_type    := 0;
    v_log.log_level   := 2;
    v_log.log_context := user || '创建分区 PARTITION P_' || v_month;
    ------------------------------------------------------------------------
    case v_partition_type
    --日分区
      when 0 then
        begin
          WHILE v_cur_date < v_end_date LOOP
            v_cur_date_str  := TO_CHAR(v_cur_date, 'YYYYMMDD');
            v_next_date_str := TO_CHAR(v_cur_date + 1, 'YYYYMMDD');
            ADD_PARTITION2(v_tablename,
                           'P_' || v_cur_date_str,
                           v_tablespacename,
                           v_next_date_str,
                           v_ret);
            v_cur_date := v_cur_date + 1;
          END LOOP;
        end;
        --月分区
      when 1 then
        begin
          v_next_date_str := TO_CHAR(v_end_date, 'YYYYMMDD');
          ADD_PARTITION2(v_tablename,
                         'P_' || v_month,
                         v_tablespacename,
                         v_next_date_str,
                         v_ret);
        end;
        --年分区
      when 1 then
        begin
          select to_date(to_char(v_date, 'yyyy') || '1201', 'yyyymmdd')
            into v_end_date
            from dual; --20101201
          v_end_date      := LAST_DAY(v_end_date) + 1; --20110101
          v_next_date_str := TO_CHAR(v_end_date, 'YYYYMMDD');

          ADD_PARTITION2(v_tablename,
                         'P_' || TO_CHAR(v_date, 'YYYY'),
                         v_tablespacename,
                         v_next_date_str,
                         v_ret);
        end;
    end case;
  ------------------------------------------------------------------------
    v_log.actendtime := sysdate;
    write_log(v_log);
    ------------------------------------------------------------------------
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      v_ret := g_false;
  END MANUAL_ADD_PARTITION;
  /****************************************************************************************
  *    名称：MANUAL_DEL_PARTITION                                                         *
  *    功能：手工删除分区                                                                 *
  *    作者：hujihuo                                                                      *
  *    日期：2010-02-22                                                                   *
  *    参数：v_date ：删除一个月的分区，月分区删除一个，日分区删除全月30个日分区          *
  *          v_tablename:删除分区的表名                                                   *
  *          v_partition_type：表分区类型，0-日分区，1-月分区，2年分区                    *
  ****************************************************************************************/
  PROCEDURE MANUAL_DEL_PARTITION(v_date           date,
                                 v_tablename      varchar2,
                                 v_partition_type varchar2) IS
    v_month        VARCHAR2(6) := TO_CHAR(v_date, 'YYYYMM');
    v_begin_date   DATE := trunc(v_date, 'mm');
    v_end_date     DATE := LAST_DAY(v_begin_date) + 1;
    v_cur_date     DATE := v_begin_date;
    v_cur_date_str VARCHAR2(10) := TO_CHAR(v_cur_date, 'YYYYMMDD');
    v_log          log_info;
    v_ret          varchar2(200);
  BEGIN
    v_ret := g_true;
    ------------------------------------------------------------------------
    -- 日志功能
    v_log.submodule   := 'MANUAL_DEL_PARTITION';
    v_log.actdatetime := sysdate;
    v_log.log_type    := 0;
    v_log.log_level   := 2;
    v_log.log_context := user || '删除分区 PARTITION' || v_tablename;
    ------------------------------------------------------------------------
    case v_partition_type
    --日分区
      when 0 then
        begin
          WHILE v_cur_date < v_end_date LOOP
            v_cur_date_str := TO_CHAR(v_cur_date, 'YYYYMMDD');
            DEL_PARTITION2(v_tablename, 'P_' || v_cur_date_str, v_ret);
            v_cur_date := v_cur_date + 1;
          END LOOP;
        end;
        --月分区
      when 1 then
        begin
          DEL_PARTITION2(v_tablename, 'P_' || v_month, v_ret);
        end;
        --年分区
      when 2 then
        begin
          DEL_PARTITION2(v_tablename,
                         'P_' || TO_CHAR(v_cur_date, 'YYYY'),
                         v_ret);
        end;
    END CASE;
  ------------------------------------------------------------------------
    v_log.actendtime := sysdate;
    write_log(v_log);
    ------------------------------------------------------------------------
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      v_ret := g_false;
  END;

  PROCEDURE DEL_PARTITION(v_begindate date, v_enddate date) as
  v_date_in date;
  v_ret varchar2(1024);
  begin
     v_date_in := trunc(v_begindate);
    WHILE (v_date_in <= v_enddate) LOOP
      BEGIN
        DEL_PARTITION(v_date => v_date_in,v_ret => v_ret);
        v_date_in := add_months(v_date_in , 1);
      END;
    END LOOP;
  end ;
  
END;
/

prompt
prompt Creating package body PKG_DEAL_PART_TAB
prompt =======================================
prompt
create or replace package body osecd.PKG_DEAL_PART_TAB as
  YYYYMMDD VARCHAR2(50) := TO_CHAR(TRUNC(SYSDATE), 'yyyymmdd');

  v_sql varchar2(4000);
  /*------------------------------------------------------------------------------------------------
  功能：记录日志，将各步骤中拼的SQL保存起来
  --------------------------------------------------------------------------------------------------*/
  procedure P_INSERT_LOG(v_tablename   in varchar2,
                         v_deal_model  in varchar2,
                         v_sql_text    in varchar2,
                         v_remark      in varchar2 default null,
                         v_exec_order1 number default 0,
                         v_exec_order2 number default 0) as
  begin
    insert into DBA_PART_TAB_LOG
      (TAB_NAME,
       deal_model,
       SQL_TEXT,
       DEAL_TIME,
       REMARK,
       exec_order1,
       exec_order2)
    values
      (v_tablename,
       v_deal_model,
       v_SQL_text,
       SYSDATE,
       v_remark,
       v_exec_order1,
       v_exec_order2);
    commit;
  exception
    when others then
      null;
  end;

  /*------------------------------------------------------------------------------------------------
  功能：在获取到V_SQL的动态SQL后，是否EXECUTE IMMEDIATE执行前做一个判断，
  根据p_deal_flag的入参而定，0为不执行，非0为执行
  --------------------------------------------------------------------------------------------------*/
  procedure P_IF_JUDGE(v_sql in varchar2, v_deal_flag in number) as
  begin
    if v_deal_flag = 0 then
      null;
    else
      execute immediate (v_sql);
    end if;
  end;

  /*-------------------------------------------------------------------------------------------------
     功能：将原表重命名为_yyyymmdd格式的表名
  -------------------------------------------------------------------------------------------------*/
  procedure P_RENAME(v_tablename in varchar2) as
    V_CNT NUMBER(9) := 0;
  begin
    SELECT COUNT(*)
      INTO V_CNT
      FROM user_objects
     WHERE object_name = UPPER(v_tablename || YYYYMMDD);

    IF V_CNT = 0 THEN
      v_sql := 'rename ' || v_tablename || ' to ' || v_tablename || '_' ||
               YYYYMMDD;
      p_insert_log(v_tablename,
                   'P_RENAME',
                   v_sql,
                   '完成原表的重命名，改为_YYYYMMDD形式',
                   1);
      execute immediate (v_sql); --这里无需做判断，rename动作真实完成！如果后续只是为生成脚本而不是真实执行分区操作，最后再把这个表RENAME回去！
    ELSE
      DBMS_OUTPUT.PUT_LINE('备份表' || v_tablename || '_' || YYYYMMDD ||
                           '已存在');
    END IF;

    DBMS_OUTPUT.PUT_LINE('将' || v_tablename || ' 表RENMAE成 ' || v_tablename || '_' ||
                         YYYYMMDD || '，并删除其约束索引等');
  end;

  /*-----------------------------------------------------------------------------------------------
     功能：用CREATE TABLE AS SELECT 的方式从RENAME的_yyyymmdd表中新建出一个只有MAXVALUE的初步分区表
  -------------------------------------------------------------------------------------------------*/
  procedure P_CREATEAS(v_tablename      in varchar2,
                       v_tablespacename IN VARCHAR2,
                       v_part_column    in varchar2,
                       v_struct_only    in number,
                       v_deal_flag      in number,
                       v_parallel       in number default 4) as

  begin
    v_sql := 'create table ' || v_tablename || '
          partition by range ( ' || v_part_column || ' )
          (
          partition P_MAX    values less than (maxvalue)
          )
          nologging
          parallel 4
          tablespace ' || v_tablespacename || '
       as select /*+parallel(t,' || v_parallel ||
             ')*/ *  from ' || v_tablename || '_' || YYYYMMDD;

    if v_struct_only = 0 then
      v_sql := v_sql || ' where 1=2';
    else
      v_sql := v_sql || ' where 1=1';
    end if;

    p_insert_log(v_tablename,
                 'p_ctas',
                 v_sql,
                 '完成CTAS建初步分区表',
                 2,
                 1);
    p_if_judge(v_sql, v_deal_flag);

    v_sql := 'alter table ' || v_tablename || ' logging';
    p_insert_log(v_tablename,
                 'p_createas',
                 v_sql,
                 '将新分区表修改回LOGGING属性',
                 2,
                 2);
    p_if_judge(v_sql, v_deal_flag);

    v_sql := 'alter table ' || v_tablename || ' noparallel';
    p_insert_log(v_tablename,
                 'p_createas',
                 v_sql,
                 '将新分区表修改回NOPARALLEL属性',
                 2,
                 3);
    p_if_judge(v_sql, v_deal_flag);
    DBMS_OUTPUT.PUT_LINE('通过CTAS的方式从 ' || v_tablename || '_' || YYYYMMDD ||
                         ' 中新建' || v_tablename || '表，完成初步分区改造工作');
  end;

  /*---------------------------------------------------------------------------------------------
   功能：将CREATE TABLE AS SELECT 的方式新建出一个只有MAXVALUE的初步分区表进行SPLIT，
   按月份进行切分，默认p_part_nums产生24个分区，构造2年的分区表，第一个分区为当前月的
   上一个月
  -----------------------------------------------------------------------------------------------*/
  procedure P_SPLIT_PART(v_tablename      in varchar2,
                         v_tablespacename IN VARCHAR2,
                         v_deal_flag      in number,
                         v_part_nums      in number default 2,
                         v_part_type      in number default 0) as
    v_first_day date;
    v_next_day  date;
    v_prev_day  date;
    v_last_day  date;
    ii          number(9) := 0;
  begin
    case v_part_type
    --日分区
      when 0 then
        BEGIN
          /*
          select to_date(to_char(sysdate, 'yyyymm') || '01', 'yyyymmdd')
            into v_first_day
            from dual;
          select add_months(v_first_day, v_part_nums) - 1
            into v_last_day
            from dual;*/
          select to_date(to_char(g_partition_startdate, 'yyyymm') || '01', 'yyyymmdd')
            into v_first_day
            from dual;
          select add_months(to_date(to_char(g_partition_enddate, 'yyyymm') || '01', 'yyyymmdd'),1)-1
            into v_last_day
            from dual;
          while (v_first_day <= v_last_day) loop
            v_sql       := 'alter table ' || v_tablename ||
                           ' split partition p_MAX at ' || '(to_date(''' ||
                           to_char(v_first_day + 1, 'yyyymmdd') ||
                           ''',''yyyymmdd''))' || 'into (partition P_' ||
                           to_char(v_first_day, 'yyyymmdd') ||
                           ' tablespace ' || v_tablespacename ||
                           ' ,partition p_MAX)';
            ii          := ii + 1;
            v_first_day := v_first_day + 1;
            p_insert_log(v_tablename,
                         'v_split_part',
                         v_sql,
                         '分区表完成分区SPLIT工作',
                         3,
                         ii);

            p_if_judge(v_sql, v_deal_flag);
          end loop;
        exception
          when others then
            null;
        end;
        --月分区
      when 1 then
        begin
          /*select to_date(to_char(sysdate, 'yyyymm') || '01', 'yyyymmdd')
            into v_first_day
            from dual;
          for i in 1 .. v_part_nums LOOP */
          select to_date(to_char(g_partition_startdate, 'yyyymm') || '01', 'yyyymmdd')
            into v_first_day
            from dual;
          SELECT to_date(to_char(g_partition_enddate, 'yyyymm') || '01', 'yyyymmdd')
            into v_last_day
            from dual;
          while (v_first_day <= v_last_day) loop
            --select add_months(v_first_day, i) into v_next_day from dual;
            --select add_months(v_next_day, -1) into v_prev_day from dual;
            v_prev_day:=v_first_day;
            v_next_day:=add_months(v_prev_day, 1);
            v_sql := 'alter table ' || v_tablename ||
                     ' split partition p_MAX at ' || '(to_date(''' ||
                     to_char(v_next_day, 'yyyymmdd') || ''',''yyyymmdd''))' ||
                     'into (partition P_' || to_char(v_prev_day, 'yyyymm') ||
                     ' tablespace ' || v_tablespacename ||
                     ' ,partition p_MAX)';

            p_insert_log(v_tablename,
                         'v_split_part',
                         v_sql,
                         '分区表完成分区SPLIT工作',
                         3,
                         0);
            p_if_judge(v_sql, v_deal_flag);
            v_first_day:=add_months(to_date(to_char(v_first_day, 'yyyymm') || '01', 'yyyymmdd'),1);
          end loop;
        exception
          when others then
            null;
        end;
        --年分区
      when 2 then
        begin
          select to_date(to_char(sysdate, 'yyyy') || '0101', 'yyyymmdd')
            into v_first_day
            from dual;

          v_sql := 'alter table ' || v_tablename ||
                   ' split partition p_MAX at ' || '(to_date(''' ||
                   to_char(add_months(v_first_day, 12), 'yyyymmdd') ||
                   ''',''yyyymmdd''))' || 'into (partition P_' ||
                   to_char(v_first_day, 'yyyy') || ' tablespace ' ||
                   v_tablespacename || ' ,partition p_MAX)';
          p_insert_log(v_tablename,
                       'v_split_part',
                       v_sql,
                       '分区表完成分区SPLIT工作',
                       3,
                       1);
          p_if_judge(v_sql, v_deal_flag);

        exception
          when others then
            null;
        end;
    end case;

    --删除最大表分区
    /*
    v_sql := 'ALTER TABLE ' || v_tablename || ' TRUNCATE PARTITION p_MAX';
    p_if_judge(v_sql, v_deal_flag);

    v_sql := 'ALTER TABLE ' || v_tablename || ' DROP PARTITION p_MAX ';
    p_if_judge(v_sql, v_deal_flag);
    */
    DBMS_OUTPUT.PUT_LINE('对新建的' || v_tablename || '分区表完成分区SPLIT工作');
  end;

  /*-----------------------------------------------------------------------------------------------
     功能：从_YYYYMMDD备份表中得到表和字段的注释，为新分区表的表名和字段增加注释
  ------------------------------------------------------------------------------------------------*/
  procedure P_DEAL_TAB_COMMENTS(v_tablename in varchar2,
                                v_deal_flag in number) as
  begin
    for i in (select *
                from user_tab_comments
               where table_name = UPPER(v_tablename) || '_' || YYYYMMDD) loop
      v_sql := 'comment on table ' || v_tablename || ' is ' || '''' ||
               i.COMMENTS || '''';
      p_insert_log(v_tablename,
                   'p_deal_comments',
                   v_sql,
                   '将新分区表的表的注释加上',
                   4,
                   1);
      p_if_judge(v_sql, v_deal_flag);
    end loop;

    DBMS_OUTPUT.PUT_LINE('对' || v_tablename || '表增加表名的注释内容');
  end;

  /*---------------------------------------------------------------------------------------------
   功能：从_YYYYMMDD备份表中得到表和字段的注释，为新分区表的表名和字段增加注释
  -----------------------------------------------------------------------------------------------*/
  procedure P_DEAL_COL_COMMENTS(v_tablename in varchar2,
                                v_deal_flag in number) as
  begin
    for i in (select *
                from user_col_comments
               where table_name = UPPER(v_tablename) || '_' || YYYYMMDD) loop
      v_sql := 'comment on column ' || v_tablename || '.' || i.COLUMN_NAME ||
               ' is ' || '''' || i.COMMENTS || '''';
      p_insert_log(v_tablename,
                   'p_deal_col_comments',
                   v_sql,
                   '将新分区表的列的注释加上',
                   4,
                   2);
      p_if_judge(v_sql, v_deal_flag);
    end loop;

    DBMS_OUTPUT.PUT_LINE('对' || v_tablename || '表增加列名及字段的注释内容');
  end;

  /*---------------------------------------------------------------------------------------------
    功能：从_YYYYMMDD备份表中得到原表的DEFAULT值，为新分区表的表名和字段增加DEFAULT值
  -----------------------------------------------------------------------------------------------*/
  procedure P_DEAL_DEFALUT_AND_NULLABLE(v_tablename in varchar2,
                                        v_deal_flag in number) as
  begin
    for i in (select *
                from user_tab_columns
               where table_name = UPPER(v_tablename) || '_' || YYYYMMDD
                 and data_default is not null) loop
      v_sql := 'alter table ' || v_tablename || ' modify ' || i.COLUMN_NAME ||
               ' default ' || i.data_default;
      p_insert_log(v_tablename,
                   'p_deal_default',
                   v_sql,
                   '将新分区表的默认值加上',
                   5);
      p_if_judge(v_sql, v_deal_flag);
    end loop;

    DBMS_OUTPUT.PUT_LINE('对' || v_tablename || '表完成默认DEFAULT值的增加');
  end;

  /*---------------------------------------------------------------------------------------------
    功能：从_YYYYMMDD备份表中得到原表的CHECK值，为新分区表增加CHECK值
     另注：
      user_constraints已经包行了非空的判断，可以略去如下类似的从user_tab_columns获取非空判断的代码编写来判断是否
      for i in (select * from user_tab_columns where table_name=UPPER(P_TAB)||'_'||YYYYMMDD and nullable='N') loop
       v_sql:='alter table '||p_tab||' modify '||i.COLUMN_NAME ||' not null';
  -----------------------------------------------------------------------------------------------*/
  procedure P_DEAL_CHECK(v_tablename in varchar2, v_deal_flag in number) as
  begin
    for i in (select *
                from user_constraints
               where table_name = UPPER(v_tablename) || '_' || YYYYMMDD
                 and constraint_type = 'C') loop
      v_sql := 'alter table ' || v_tablename || '_' || YYYYMMDD ||
               ' drop constraint ' || I.CONSTRAINT_NAME;
      p_insert_log(v_tablename,
                   'p_deal_check',
                   v_sql,
                   '将备份出来的原表的CHECK删除',
                   6,
                   1);
      p_if_judge(v_sql, v_deal_flag);

      v_sql := 'alter table ' || v_tablename || ' ADD CONSTRAINT ' ||
               I.CONSTRAINT_NAME || ' CHECK (' || I.SEARCH_CONDITION || ')';
      p_insert_log(v_tablename,
                   'p_deal_check',
                   v_sql,
                   '将新分区表的CHECK加上',
                   6,
                   2);
      p_if_judge(v_sql, v_deal_flag);
    end loop;

    DBMS_OUTPUT.PUT_LINE('对' || v_tablename || '完成CHECK的约束');
  end;

  /*---------------------------------------------------------------------------------------------
    功能：从_YYYYMMDD备份表中得到原表的主键信息，为新分区表增加主键值，并删除旧表主键
  -----------------------------------------------------------------------------------------------*/
  procedure P_DEAL_PK(v_tablename      in varchar2,
                      v_deal_flag      in number,
                      v_idx_tablespace IN VARCHAR2) as
  begin
    for i in (WITH T AS (SELECT INDEX_NAME, TABLE_NAME, COLUMN_NAME
                   from USER_IND_COLUMNS
                  where index_name in
                        (select index_name
                           from sys.user_constraints t
                          WHERE TABLE_NAME =
                                UPPER(v_tablename) || '_' || YYYYMMDD
                            and constraint_type = 'P'))SELECT INDEX_NAME,
                      TABLE_NAME,
                      MAX(substr(sys_connect_by_path(COLUMN_NAME,
                                                     ','),
                                 2)) str
                FROM (SELECT column_name,
                              INDEX_NAME,
                              TABLE_NAME,
                              row_number() over(PARTITION BY INDEX_NAME, TABLE_NAME ORDER BY COLUMN_NAME) rn
                         FROM T) t
               START WITH rn = 1
              CONNECT BY rn = PRIOR
                         rn + 1
                     AND INDEX_NAME = PRIOR
                         INDEX_NAME
               GROUP BY INDEX_NAME,
                         T.TABLE_NAME) loop
      v_sql := 'alter table ' || i.table_name || ' drop constraint ' ||
               i.index_name || ' cascade';
      p_insert_log(v_tablename,
                   'p_deal_pk',
                   v_sql,
                   '将备份出来的原表的主键删除',
                   7,
                   1);
      p_if_judge(v_sql, v_deal_flag);
      /*
      v_sql := 'ALTER TABLE ' || v_tablename || ' ADD CONSTRAINT ' ||
               I.INDEX_NAME || ' PRIMARY KEY (' || I.STR || ')' ||
               ' using index tablespace ' || v_idx_tablespace;
      */
      v_sql := 'CREATE  INDEX ' || I.INDEX_NAME || ' ON ' || v_tablename || '(' ||
                 I.STR || ')' || ' local ';

      p_insert_log(v_tablename,
                   'p_deal_pk',
                   v_sql,
                   '将新分区表的主键加上',
                   7,
                   2);
      p_if_judge(v_sql, v_deal_flag);
    end loop;

    DBMS_OUTPUT.PUT_LINE('对' || v_tablename || '完成主键的增加');
  end;

  /*---------------------------------------------------------------------------------------------
   功能：从_YYYYMMDD备份表中得到原表的约束，为新分区表增加约束值，并删除旧表约束
  -----------------------------------------------------------------------------------------------*/
  procedure P_DEAL_CONSTRAINT(v_tablename in varchar2,
                              v_deal_flag in number) as
  begin
    for i in (with t1 as (SELECT /*+no_merge */
                   POSITION,
                   t.owner,
                   t.constraint_name as constraint_name1,
                   t.table_name as table_name1,
                   t.column_name as column_name1
                    FROM user_cons_columns t
                   where constraint_name in
                         (SELECT CONSTRAINT_NAME
                            FROM user_constraints
                           where table_name =
                                 UPPER(v_tablename) || '_' || YYYYMMDD
                             AND CONSTRAINT_TYPE = 'R')), t2 as (SELECT /*+no_merge */
                                                         t.POSITION,
                                                         c.constraint_name constraint_name1,
                                                         t.constraint_name as constraint_name2,
                                                         t.table_name as table_name2,
                                                         t.column_name as column_name2,
                                                         MAX(t.POSITION) OVER(PARTITION BY c.constraint_name) MAX_POSITION
                                                          FROM user_cons_columns t,
                                                               user_constraints  c
                                                         WHERE c.table_name =
                                                               UPPER(v_tablename) || '_' ||
                                                               YYYYMMDD
                                                           AND t.constraint_name =
                                                               c.r_constraint_name
                                                           AND c.constraint_type = 'R'), t3 AS (SELECT t1.*,
                                                                                              t2.constraint_name2,
                                                                                              t2.table_name2,
                                                                                              t2.column_name2,
                                                                                              t2.max_position
                                                                                         FROM t1,
                                                                                              t2
                                                                                        WHERE t1.constraint_name1 =
                                                                                              t2.constraint_name1
                                                                                          AND t1.position =
                                                                                              t2.position)select t3.*,
                      SUBSTR(SYS_CONNECT_BY_PATH(column_name1,
                                                 ','),
                             2) as FK,
                      SUBSTR(SYS_CONNECT_BY_PATH(column_name2,
                                                 ','),
                             2) AS PK
                from t3
               WHERE POSITION =
                     MAX_POSITION
               START WITH position = 1
              CONNECT BY constraint_name1 = PRIOR
                         constraint_name1
                     AND position = PRIOR
                         position + 1) loop
      v_sql := 'alter table ' || v_tablename || '_' || YYYYMMDD ||
               ' drop constraint ' || i.constraint_name1;
      p_insert_log(v_tablename,
                   'p_deal_constraint',
                   v_sql,
                   '删除原表FK外键',
                   8,
                   1);
      p_if_judge(v_sql, v_deal_flag);

      v_sql := 'alter table ' || v_tablename || ' add constraint ' ||
               i.constraint_name1 || ' foreign key ( ' || i.fk ||
               ') references ' || i.table_name2 || ' (' || i.pk || ' )';
      p_insert_log(v_tablename,
                   'p_deal_constraint',
                   v_sql,
                   '将新分区表的外键加上',
                   8,
                   2);
      p_if_judge(v_sql, v_deal_flag);
    end loop;
    DBMS_OUTPUT.PUT_LINE('对' || v_tablename || '完成外键的增加');
  end;

  /*---------------------------------------------------------------------------------------------
    功能：从_YYYYMMDD备份表中得到原表的索引信息，为新分区表增加普通索引（唯一和非唯一索引，
    函数索引暂不考虑），并删除旧表索引
  -----------------------------------------------------------------------------------------------*/
  procedure P_DEAL_IDX(v_tablename      in varchar2,
                       v_deal_flag      in number,
                       v_idx_tablespace IN VARCHAR2) as
  begin
    for i in (WITH T AS (select C.*, I.UNIQUENESS
                   from user_ind_columns C,
                        (SELECT DISTINCT index_name, UNIQUENESS
                           from user_indexes
                          where table_name =
                                UPPER(v_tablename) || '_' || YYYYMMDD
                            and index_type = 'NORMAL'
                            AND INDEX_NAME NOT IN
                                (SELECT CONSTRAINT_NAME
                                   FROM USER_CONSTRAINTS)) i
                  where c.index_name = i.index_name)SELECT INDEX_NAME,
                      TABLE_NAME,
                      UNIQUENESS,
                      MAX(substr(sys_connect_by_path(COLUMN_NAME,
                                                     ','),
                                 2)) str
                FROM (SELECT column_name,
                              INDEX_NAME,
                              TABLE_NAME,
                              row_number() over(PARTITION BY INDEX_NAME, TABLE_NAME ORDER BY COLUMN_NAME) rn,
                              UNIQUENESS
                         FROM T) t
               START WITH rn = 1
              CONNECT BY rn = PRIOR
                         rn + 1
                     AND INDEX_NAME = PRIOR
                         INDEX_NAME
               GROUP BY INDEX_NAME,
                         T.TABLE_NAME,
                         UNIQUENESS) loop
      v_sql := 'drop index ' || i.index_name;
      p_insert_log(v_tablename,
                   'p_deal_normal_idx',
                   v_sql,
                   '删除原表索引',
                   9,
                   1);
      p_if_judge(v_sql, v_deal_flag);
      /*
      if i.uniqueness = 'UNIQUE' then
        v_sql := 'CREATE UNIQUE INDEX ' || i.INDEX_NAME || ' ON ' ||
                 v_tablename || '(' || i.STR || ')' || ' tablespace ' ||
                 v_idx_tablespace;
      elsif i.uniqueness = 'NONUNIQUE' then
        v_sql := 'CREATE  INDEX ' || i.INDEX_NAME || ' ON ' || v_tablename || '(' ||
                 i.STR || ')' || ' tablespace ' || v_idx_tablespace;
      end if;
      */
      v_sql := 'CREATE  INDEX ' || i.INDEX_NAME || ' ON ' || v_tablename || '(' ||
                 i.STR || ')' || ' local ';
      p_insert_log(v_tablename,
                   'p_deal_normal_idx',
                   v_sql,
                   '将新分区表的索引加上',
                   9,
                   2);
      p_if_judge(v_sql, v_deal_flag);
    end loop;
    DBMS_OUTPUT.PUT_LINE('对' || v_tablename || '完成新分区表索引的增加');
  end;

  /*---------------------------------------------------------------------------------------------
    功能：分区表转换入口
  -----------------------------------------------------------------------------------------------*/
  procedure P_MAIN(v_tablename      in varchar2, --需要进行分区改造的表名
                   v_tab_tablespace IN VARCHAR2, --分区的表空间
                   v_idx_tablespace IN VARCHAR2, --分区的索引表空间
                   v_part_column    in varchar2, --需要分区的列（时间范围分区）
                   v_part_type      in number default 0, --0为月分区，1为日分区
                   v_part_nums      in number default 2, --需要分区的月份数（默认从当前月开始）
                   v_parallel       in number default 4, --并行度设置
                   v_deal_flag      in number default 0, --新表是否是只建表结构不导入数据，0为只建结构，非0如1等值，为导数据
                   v_struct_only    in number default 0) as --0为不执行，只将脚本记录进part_tab_log的sql_text字段中，1为不仅记录，而且执行！
  begin
    delete from dba_part_tab_log where tab_name = v_tablename;
    commit;
    ---将原表先RENAME为YYYYMMDD的后缀名的表
    P_RENAME(v_tablename);
    ---CTAS建立除部分分区的分区表
    P_CREATEAS(v_tablename,
               v_tab_tablespace,
               v_part_column,
               v_struct_only,
               v_deal_flag,
               v_parallel);
    ---将分区表分区完整
    P_SPLIT_PART(v_tablename,
                 v_tab_tablespace,
                 v_deal_flag,
                 v_part_nums,
                 v_part_type);
    --增加分区表的表注释
    P_DEAL_TAB_COMMENTS(v_tablename, v_deal_flag);
    --增加分区表的列注释
    P_DEAL_COL_COMMENTS(v_tablename, v_deal_flag);
    --增加分区表的默认值
    P_DEAL_DEFALUT_AND_NULLABLE(v_tablename, v_deal_flag);
    --增加分区表的CHECK
    P_DEAL_CHECK(v_tablename, v_deal_flag);
    --增加分区表的主键
    P_DEAL_PK(v_tablename, v_deal_flag, v_idx_tablespace);
    ---增加外键
    P_DEAL_CONSTRAINT(v_tablename, v_deal_flag);
    --增加分区表的索引
    P_DEAL_IDX(v_tablename, v_deal_flag, v_idx_tablespace);

    if FALSE /*v_deal_flag = 0*/ then
      DBMS_OUTPUT.PUT_LINE('请特别留意!!!，以上只是对' || v_tablename ||
                           '进行生成脚本动作，未真正执行分区改造等执行动作，脚本可从part_tab_log中获取');
      DBMS_OUTPUT.PUT_LINE('如果需要真正完成执行动作，请将pkg_deal_part_tab.p_main的 p_deal_flag参数值设置为非0值，如1');
      --即便只获取脚本而无需执行，前面RENAME的动作也必须真实完成，因为很多数据字典信息要取自_YYYYMM表的信息，
      --因此前面必须执行，只好在这里最后再RENAME替换回去
      execute immediate 'rename ' || v_tablename || '_' || YYYYMMDD ||
                        ' to ' || v_tablename;
    else
      DBMS_OUTPUT.PUT_LINE('对' || v_tablename ||
                           '已经完成了操作分区改造等执行步骤，脚本可从part_tab_log中获取');
      execute immediate 'drop '|| UPPER(v_tablename) || '_' || YYYYMMDD ;--删除原表
    end if;
  end;

end;
/

prompt
prompt Creating package body PKG_JAVAWSTEST
prompt ====================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_JAVAWSTEST IS

  procedure PROC_JAVAWSTEST(v_busid      VARCHAR2,
                                             V_DATE  DATE,
                                             MYTAB   OUT  MYTABLE) AS

 V_DATE_IN    DATE := TRUNC(V_DATE);
begin

if v_busid is not null
  then
  OPEN MYTAB FOR
select V_DATE as jzdate,t.* from mcbusinfogs t where t.cardid = v_busid ;
else
  OPEN MYTAB FOR
select V_DATE as jzdate,t.* from mcbusinfogs t  ;--where rownum < 100
end if;


end PROC_JAVAWSTEST;

  END PKG_JAVAWSTEST;
/

prompt
prompt Creating package body PKG_JAVAWSTEST2
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_JAVAWSTEST2 IS
  procedure PROC_JAVAWSTEST(v_busid in VARCHAR2,
                                      MYTAB   OUT  MYTABLE) AS
begin
if v_busid is not null
  then
  OPEN MYTAB FOR
select t.* from mcbusinfogs t where t.cardid = v_busid;
else
  OPEN MYTAB FOR
select t.* from mcbusinfogs t where rownum < 10 ;
end if;
end PROC_JAVAWSTEST;
  END PKG_JAVAWSTEST2;
/

prompt
prompt Creating package body PKG_OSE_BASICDATA
prompt =======================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_BASICDATA IS
  --------------------------------------------------------------------------------------------
  /***************************************************************************************
  *    名称：WRITE_LOG                                                                   *
  *                                                                                      *
  *    功能：写入日志                                                                    *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2,
                      FUNC_DESC     VARCHAR2,
                      V_DATE        DATE,
                      LOGINFO       VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := SUBSTR(LOGINFO, 1, 250);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '1',
       V_DATE,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /****************************************************************************************
  *    名称：WRITE_EXCEPTION                                                             *
  *                                                                                      *
  *    功能：写入异常日志                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_EXCEPTION(PROCEDURENAME VARCHAR2,
                            FUNC_DESC     VARCHAR2,
                            V_DATE        DATE,
                            ERRORCODE     NUMBER,
                            ERRORTEXT     VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := ERRORCODE || '-' || SUBSTR(ERRORTEXT, 1, 200);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '0',
       V_DATE,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /***************************************************************************************
  *    名称：Get_MainSubRoute                                                            *
  *                                                                                      *
  *    功能：获取线路主子线                                                              *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE GET_MAINSUBROUTE(V_DATE         DATE,
                             V_USEDATE      DATE,
                             V_ROUTEID      VARCHAR2,
                             V_SUBROUTEID   OUT VARCHAR2,
                             V_SUBROUTENAME OUT VARCHAR2) AS
  BEGIN
    V_SUBROUTEID   := '0';
    V_SUBROUTENAME := NULL;
    --取主子线ID
    FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                  FROM MCSUBROUTEINFOGS SUB
                 WHERE SUB.ROUTEID = V_ROUTEID
                   AND SUB.ISMAINSUB = '1'
                   AND SUB.ISACTIVE = '1'
                   AND SUB.BEGINDATE <= V_DATE
                   AND SUB.ENDDATE >= V_DATE) LOOP
      V_SUBROUTEID   := CUR.SUBROUTEID;
      V_SUBROUTENAME := CUR.SUBROUTENAME;
    END LOOP;
    --没有结存日期的主子线，则取当前有效的主子线
    IF (V_SUBROUTEID = '0') THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISMAINSUB = '1'
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_USEDATE
                             AND SUB.ENDDATE >= V_USEDATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
    --没有主子线，则取非主子线最小的ID
    IF (V_SUBROUTEID = '0') THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_DATE
                             AND SUB.ENDDATE >= V_DATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
    IF (V_SUBROUTEID = '0') THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_USEDATE
                             AND SUB.ENDDATE >= V_USEDATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('GetMainSubRoute',
                      '获取线路主子线',
                      V_DATE,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_BASICDATA                                                            *
  *                                                                                      *
  *    功能：基础数据结存(JOB调用接口)                                                     *
  *                                                                                      *
  *    作者：huhuimin                                                                    *
  *    日期：2014-02-24                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_BASICDATA AS
  BEGIN
    TREATE_BASEDATASTORAGE(TRUNC(SYSDATE) - G_BASICDATA,
                           TRUNC(SYSDATE) - G_BASICDATA);
  END;
  /***************************************************************************************
  *    名称：TREATE_BASEDATASTORAGE                                                      *
  *                                                                                      *
  *    功能：基础数据结存(调用接口)                                                       *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_BASEDATASTORAGE(V_BEGINDATE DATE, V_ENDDATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_BEGINDATE);
    WHILE (TO_CHAR(V_DATE_IN, 'yyyyMM') <= TO_CHAR(V_ENDDATE, 'yyyyMM')) LOOP
      --结存组织树
      TREATE_ORGTREEPHASESTORAGE(V_DATE_IN);
      --专用道
      TREATE_ACCOMMODATIONSTORAGE(V_DATE_IN);
      --车辆
      TREATE_BUSPHASESTORAGE(V_DATE_IN);
      --人员
      TREATE_EMPLOYEEPHASESTORAGE(V_DATE_IN);
      --站点
      TREATE_STATIONPHASESTORAGE(V_DATE_IN);
      --场站
      TREATE_SITEPHASESTORAGE(V_DATE_IN);
      --线路
      TREATE_ROUTEBASICDATASTORAGE(V_DATE_IN);
      --线路类型
      TREATE_ROUTETYPEPHASESTORAGE(V_DATE_IN);
      --站点地图数据更新
      TREATE_STATIONINFO_MAP(V_DATE_IN);
      --线路地图数据更新
      TREATE_ROUTEINFO_MAP(V_DATE_IN);
      V_DATE_IN := ADD_MONTHS(V_DATE_IN, 1);
    END LOOP;
  END;
  /***************************************************************************************
  *    名称：TREATE_ORGTREEPHASESTORAGE                                                  *
  *                                                                                      *
  *    功能：组织级别数据结存表                                                           *
  *    作者：YANGTAO                                                                     *
  *    日期：2013-10-11                                                                  *
  ***************************************************************************************/
  PROCEDURE TREATE_ORGTREEPHASESTORAGE(V_DATE DATE) AS
    V_ORGID    VARCHAR2(36);
    V_PORGID   VARCHAR2(36);
    V_ORGGRADE VARCHAR2(2);
    V_DATE_IN  DATE := TRUNC(V_DATE);
  BEGIN
    -- 全部
    BEGIN
      WRITE_LOG('TREATE_ORGTREEPHASESTORAGE',
                '组织级别结存表',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE FROM JZ_ORGGRADETREE;
    
      --插入当前组织
      FOR CUR_BASEORG IN (SELECT ORGID, ORGGRADE FROM MCORGINFOVW) LOOP
        V_ORGID    := CUR_BASEORG.ORGID;
        V_ORGGRADE := CUR_BASEORG.ORGGRADE;
      
        TREATE_CHILDORGTREE(V_ORGID, V_ORGGRADE, V_DATE_IN);
      
      END LOOP;
      COMMIT;
    
      --填写组织关系字段
      FOR CUR_RELATION IN (SELECT ORG.ORGID      AS PORGID,
                                  CHILDORG.ORGID AS ORGID
                             FROM MCORGINFOVW ORG, MCORGINFOVW CHILDORG
                            WHERE ORG.ORGID = CHILDORG.PARENTORGID) LOOP
        V_ORGID  := CUR_RELATION.ORGID;
        V_PORGID := CUR_RELATION.PORGID;
      
        UPDATE JZ_ORGGRADETREE
           SET RELATION = '1'
         WHERE PARENTORGID = V_PORGID
           AND ORGID = V_ORGID;
      END LOOP;
    
      WRITE_LOG('TREATE_ORGTREEPHASESTORAGE',
                '组织级别结存表',
                V_DATE_IN,
                '结束');
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_ORGTREEPHASESTORAGE',
                        V_DATE_IN,
                        '组织级别结存表',
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：Treate_OrgTreePhaseStorage                                                  *
  *                                                                                      *
  *    功能：组织界别数据结存表 当前组织所有下级和自身关系                                  *
  *    作者：YANGTAO                                                                     *
  *    日期：2013-10-11                                                                  *
  ***************************************************************************************/
  PROCEDURE TREATE_CHILDORGTREE(V_PORGID    VARCHAR2,
                                V_PORGGRADE VARCHAR2,
                                V_DATE      DATE) AS
    V_ORGID    VARCHAR2(36);
    V_ORGGRADE VARCHAR2(2);
    V_RELATION CHAR(1);
    V_DATE_IN  DATE := TRUNC(V_DATE);
  BEGIN
  
    FOR CURORG IN (SELECT ORG.ORGID, ORG.ORGGRADE
                     FROM MCORGINFOVW ORG
                    START WITH ORG.ORGID = V_PORGID
                   CONNECT BY PRIOR ORG.ORGID = ORG.PARENTORGID) LOOP
      V_ORGID    := CURORG.ORGID;
      V_ORGGRADE := CURORG.ORGGRADE;
    
      IF V_ORGID = V_PORGID THEN
        V_RELATION := '0'; --本机
      ELSE
        V_RELATION := '2'; --间隔下级
      END IF;
    
      INSERT INTO JZ_ORGGRADETREE
        (ORGTREEID,
         ORGID,
         PARENTORGID,
         ORGGRADE,
         RELATION,
         JZDATE,
         RECDATE)
      VALUES
        (S_ROUTESTORAGE.NEXTVAL,
         V_ORGID,
         V_PORGID,
         V_PORGGRADE,
         V_RELATION,
         V_DATE_IN,
         SYSDATE);
    END LOOP;
  END;
  /***************************************************************************************
  *    名称：TREATE_ACCOMMODATIONSTORAGE                                                 *
  *                                                                                      *
  *    功能：专用道信息结存                                                              *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ACCOMMODATIONSTORAGE(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    NULL;
  END;
  /***************************************************************************************
  *    名称：TREATE_BUSPHASESTORAGE                                                      *
  *                                                                                      *
  *    功能：车辆阶段结存表                                                               *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_BUSPHASESTORAGE(V_DATE DATE) AS
    V_DATE_IN     DATE := TRUNC(V_DATE);
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    -- 全部 STORAGEBUSFIRSTTYPE=0
    BEGIN
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－全部',
                V_DATE,
                '开始');
      --删除全部数据
      DELETE JZ_BUSPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEBUSFIRSTTYPE = '0';
      --线路 --
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ROUTE.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               ROUTE.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '0' AS STORAGEBUSFIRSTTYPE, --全部
               '全部' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.SEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.SEATCOUNT, 0) + NVL(T.STANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.STDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL, --月
               '4' AS STORAGEORGTYPE --线路
          FROM MCROUTEINFOVW ROUTE,
               MCORGINFOVW ORG,
               (SELECT R.ROUTEID,
                       COUNT(*) BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) SEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) STANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) STDCOUNT
                  FROM MCBUSINFOVW BUS, MCRBUSROUTEGS R
                 WHERE R.BUSID = BUS.BUSID
                   AND BUS.ISACTIVE = '1'
                 GROUP BY R.ROUTEID) T
         WHERE ROUTE.ROUTEID = T.ROUTEID(+)
           AND ROUTE.ORGID = ORG.ORGID(+)
           AND ROUTE.ISACTIVE = '1'
           AND ORG.ISACTIVE = '1';
      --组织--
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '0' AS STORAGEBUSFIRSTTYPE,
               '全部' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.BUSSEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.BUSSEATCOUNT, 0) + NVL(T.BUSSTANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.BUSSTANDARDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       COUNT(BUS.BUSID) AS BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) BUSSEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) AS BUSSTANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) AS BUSSTANDARDCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCBUSINFOGS BUS
                 WHERE ORGTREE.ORGID = BUS.ORGID
                   AND BUS.ISACTIVE = '1'
                 GROUP BY ORGTREE.PARENTORGID) T,
               MCORGINFOVW ORG
         WHERE T.ORGID(+) = ORG.ORGID
           AND ORG.ISACTIVE = '1';
      COMMIT; --提交
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－全部',
                V_DATE,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_BUSPHASESTORAGE',
                        '车辆阶段结存表－全部',
                        V_DATE,
                        SQLCODE,
                        SQLERRM);
    END;
    --空调  1
    BEGIN
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－空调',
                V_DATE,
                '开始');
      --删除
      DELETE JZ_BUSPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEBUSFIRSTTYPE = '1';
      --线路 --
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ROUTE.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               ROUTE.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '1' AS STORAGEBUSFIRSTTYPE, --空调
               '空调' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.SEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.SEATCOUNT, 0) + NVL(T.STANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.STDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL, --月
               '4' AS STORAGEORGTYPE --线路
          FROM MCROUTEINFOVW ROUTE,
               MCORGINFOVW ORG,
               (SELECT R.ROUTEID,
                       COUNT(*) BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) SEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) STANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) STDCOUNT
                  FROM MCBUSINFOVW BUS, MCRBUSROUTEGS R
                 WHERE R.BUSID = BUS.BUSID
                   AND BUS.ISACTIVE = '1'
                   AND BUS.HASCONDITION = '1'
                 GROUP BY R.ROUTEID) T
         WHERE ROUTE.ROUTEID = T.ROUTEID(+)
           AND ROUTE.ISACTIVE = '1'
           AND ORG.ISACTIVE = '1'
           AND ROUTE.ORGID = ORG.ORGID(+);
      --组织--
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '1' AS STORAGEBUSFIRSTTYPE,
               '空调' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.BUSSEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.BUSSEATCOUNT, 0) + NVL(T.BUSSTANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.BUSSTANDARDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       COUNT(BUS.BUSID) AS BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) BUSSEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) AS BUSSTANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) AS BUSSTANDARDCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCBUSINFOGS BUS
                 WHERE ORGTREE.ORGID = BUS.ORGID
                   AND BUS.ISACTIVE = '1'
                   AND BUS.HASCONDITION = '1'
                 GROUP BY ORGTREE.PARENTORGID) T,
               MCORGINFOVW ORG
         WHERE T.ORGID(+) = ORG.ORGID
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－空调',
                V_DATE,
                '结束');
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_BUSPHASESTORAGE',
                        '车辆阶段结存表－空调',
                        V_DATE,
                        SQLCODE,
                        SQLERRM);
    END;
    --低地板 2
    BEGIN
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－低地板',
                V_DATE,
                '开始');
      --删除
      DELETE JZ_BUSPHASESTORAGE
       WHERE JZDATE >=
             TO_DATE(TO_CHAR(V_DATE_IN, 'yyyyMM') || '01', 'yyyyMMdd')
         AND JZDATE < TO_DATE(TO_CHAR(ADD_MONTHS(V_DATE_IN, 1), 'yyyyMM') || '01',
                              'yyyyMMdd')
         AND STORAGEBUSFIRSTTYPE = '2';
      --线路 --
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ROUTE.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               ROUTE.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '2' AS STORAGEBUSFIRSTTYPE, --低地板
               '低地板' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.SEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.SEATCOUNT, 0) + NVL(T.STANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.STDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL, --月
               '4' AS STORAGEORGTYPE --线路
          FROM MCROUTEINFOVW ROUTE,
               MCORGINFOVW ORG,
               (SELECT R.ROUTEID,
                       COUNT(*) BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) SEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) STANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) STDCOUNT
                  FROM MCBUSINFOVW BUS, MCRBUSROUTEGS R --modify by hujihuo 2013-01-25
                 WHERE R.BUSID = BUS.BUSID
                   AND BUS.ISACTIVE = '1'
                   AND BUS.ISLOWFLOOR = '1'
                 GROUP BY R.ROUTEID) T
         WHERE ROUTE.ROUTEID = T.ROUTEID(+)
           AND ROUTE.ISACTIVE = '1'
           AND ORG.ISACTIVE = '1'
           AND ROUTE.ORGID = ORG.ORGID(+);
      --组织--
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '2' AS STORAGEBUSFIRSTTYPE,
               '低地板' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.BUSSEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.BUSSEATCOUNT, 0) + NVL(T.BUSSTANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.BUSSTANDARDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       COUNT(BUS.BUSID) AS BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) BUSSEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) AS BUSSTANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) AS BUSSTANDARDCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCBUSINFOGS BUS
                 WHERE ORGTREE.ORGID = BUS.ORGID
                   AND BUS.ISACTIVE = '1'
                   AND BUS.ISLOWFLOOR = '1'
                 GROUP BY ORGTREE.PARENTORGID) T,
               MCORGINFOVW ORG
         WHERE T.ORGID(+) = ORG.ORGID
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－低地板',
                V_DATE,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_BUSPHASESTORAGE',
                        '车辆阶段结存表－低地板',
                        V_DATE,
                        SQLCODE,
                        SQLERRM);
    END;
    --燃料  3
    BEGIN
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－燃料',
                V_DATE,
                '开始');
      --删除
      DELETE JZ_BUSPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEBUSFIRSTTYPE = '3';
      --线路 --
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ROUTE.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               ROUTE.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '3' AS STORAGEBUSFIRSTTYPE, --燃料
               '燃料' STORAGEBUSFIRSTNAME,
               T.FUELTYPE AS STORAGEBUSSECONDTYPE,
               P.ITEMKEY AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.SEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.SEATCOUNT, 0) + NVL(T.STANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.STDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL, --月
               '4' AS STORAGEORGTYPE --线路
          FROM MCROUTEINFOVW ROUTE,
               MCORGINFOVW ORG,
               (SELECT R.ROUTEID,
                       BUS.FUELTYPE,
                       COUNT(*) BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) SEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) STANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) STDCOUNT
                  FROM MCBUSINFOVW BUS, MCRBUSROUTEGS R --modify by hujihuo 2013-01-25
                 WHERE R.BUSID = BUS.BUSID
                 GROUP BY R.ROUTEID, BUS.FUELTYPE) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'FUELTYPE') P
         WHERE ROUTE.ROUTEID = T.ROUTEID(+)
           AND ROUTE.ISACTIVE = '1'
           AND ORG.ISACTIVE = '1'
           AND T.FUELTYPE = P.ITEMVALUE(+)
           AND ROUTE.ORGID = ORG.ORGID(+);
      --组织--
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '3' AS STORAGEBUSFIRSTTYPE,
               '燃料' STORAGEBUSFIRSTNAME,
               P.ITEMVALUE STORAGEBUSSECONDTYPE,
               P.ITEMKEY AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.BUSSEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.BUSSEATCOUNT, 0) + NVL(T.BUSSTANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.BUSSTANDARDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       BUS.FUELTYPE,
                       COUNT(BUS.BUSID) AS BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) BUSSEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) AS BUSSTANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) AS BUSSTANDARDCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCBUSINFOGS BUS
                 WHERE ORGTREE.ORGID = BUS.ORGID
                   AND BUS.ISACTIVE = '1'
                 GROUP BY ORGTREE.PARENTORGID, BUS.FUELTYPE) T,
               MCORGINFOVW ORG,
               (SELECT TY.ITEMKEY, TY.ITEMVALUE
                  FROM TYPEENTRY TY
                 WHERE TY.TYPENAME = 'FUELTYPE') P
         WHERE T.ORGID(+) = ORG.ORGID
           AND T.FUELTYPE = P.ITEMVALUE(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－燃料',
                V_DATE,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_BUSPHASESTORAGE',
                        '车辆阶段结存表－燃料',
                        V_DATE,
                        SQLCODE,
                        SQLERRM);
    END;
    --IC卡 4
    BEGIN
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－IC卡',
                V_DATE,
                '开始');
      --删除
      DELETE JZ_BUSPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEBUSFIRSTTYPE = '4';
      --线路 --
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ROUTE.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               ROUTE.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '4' AS STORAGEBUSFIRSTTYPE, --IC卡
               'IC卡' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.SEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.SEATCOUNT, 0) + NVL(T.STANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.STDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL, --月
               '4' AS STORAGEORGTYPE --线路
          FROM MCROUTEINFOVW ROUTE,
               MCORGINFOVW ORG,
               (SELECT R.ROUTEID,
                       COUNT(*) BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) SEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) STANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) STDCOUNT
                  FROM MCBUSINFOVW BUS, MCRBUSROUTEGS R --modify by hujihuo 2013-01-25
                 WHERE R.BUSID = BUS.BUSID
                   AND BUS.HASICCARDEQMT = '1'
                 GROUP BY R.ROUTEID) T
         WHERE ROUTE.ROUTEID = T.ROUTEID(+)
           AND ROUTE.ISACTIVE = '1'
           AND ORG.ISACTIVE = '1'
           AND ROUTE.ORGID = ORG.ORGID(+);
      --组织--
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '4' AS STORAGEBUSFIRSTTYPE,
               'IC卡' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.BUSSEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.BUSSEATCOUNT, 0) + NVL(T.BUSSTANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.BUSSTANDARDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       COUNT(BUS.BUSID) AS BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) BUSSEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) AS BUSSTANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) AS BUSSTANDARDCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCBUSINFOGS BUS
                 WHERE ORGTREE.ORGID = BUS.ORGID
                   AND BUS.ISACTIVE = '1'
                   AND BUS.HASICCARDEQMT = '1'
                 GROUP BY ORGTREE.PARENTORGID) T,
               MCORGINFOVW ORG
         WHERE T.ORGID(+) = ORG.ORGID
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－IC卡',
                V_DATE,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_BUSPHASESTORAGE',
                        '车辆阶段结存表－IC卡',
                        V_DATE,
                        SQLCODE,
                        SQLERRM);
    END;
    --高档  5
    BEGIN
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－高档',
                V_DATE,
                '开始');
      --删除
      DELETE JZ_BUSPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEBUSFIRSTTYPE = '5';
      --线路 --
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ROUTE.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               ROUTE.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               5 AS STORAGEBUSFIRSTTYPE, --高档
               '高档' STORAGEBUSFIRSTNAME,
               T.BUSGRADE AS STORAGEBUSSECONDTYPE,
               P.ITEMKEY AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.SEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.SEATCOUNT, 0) + NVL(T.STANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.STDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL, --月
               '4' AS STORAGEORGTYPE --线路
          FROM MCROUTEINFOVW ROUTE,
               MCORGINFOVW ORG,
               (SELECT R.ROUTEID,
                       BUS.BUSGRADE,
                       COUNT(*) BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) SEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) STANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) STDCOUNT
                  FROM MCBUSINFOVW BUS, MCRBUSROUTEGS R --modify by hujihuo 2013-01-25
                 WHERE R.BUSID = BUS.BUSID
                   AND BUS.ISACTIVE = '1'
                 GROUP BY R.ROUTEID, BUS.BUSGRADE) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'BUSGRADE') P
         WHERE ROUTE.ROUTEID = T.ROUTEID(+)
           AND ROUTE.ISACTIVE = '1'
           AND ORG.ISACTIVE = '1'
           AND T.BUSGRADE = P.ITEMVALUE(+)
           AND ROUTE.ORGID = ORG.ORGID(+);
      --组织--
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '5' AS STORAGEBUSFIRSTTYPE,
               '高档' STORAGEBUSFIRSTNAME,
               P.ITEMVALUE STORAGEBUSSECONDTYPE,
               P.ITEMKEY AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.BUSSEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.BUSSEATCOUNT, 0) + NVL(T.BUSSTANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.BUSSTANDARDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       BUS.BUSGRADE,
                       COUNT(BUS.BUSID) AS BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) BUSSEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) AS BUSSTANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) AS BUSSTANDARDCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCBUSINFOGS BUS
                 WHERE ORGTREE.ORGID = BUS.ORGID
                   AND BUS.ISACTIVE = '1'
                 GROUP BY ORGTREE.PARENTORGID, BUS.BUSGRADE) T,
               MCORGINFOVW ORG,
               (SELECT TY.ITEMKEY, TY.ITEMVALUE
                  FROM TYPEENTRY TY
                 WHERE TY.TYPENAME = 'BUSGRADE') P
         WHERE T.ORGID(+) = ORG.ORGID
           AND T.BUSGRADE = P.ITEMVALUE(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－高档',
                V_DATE,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_BUSPHASESTORAGE',
                        '车辆阶段结存表－高档',
                        V_DATE,
                        SQLCODE,
                        SQLERRM);
    END;
    --车载机 6
    BEGIN
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－车载机',
                V_DATE_IN,
                '开始');
      --删除
      DELETE JZ_BUSPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEBUSFIRSTTYPE = '6';
      --线路 --
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ROUTE.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               ROUTE.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '6' AS STORAGEBUSFIRSTTYPE, --车载机
               '车载机' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.SEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.SEATCOUNT, 0) + NVL(T.STANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.STDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL, --月
               '4' AS STORAGEORGTYPE --线路
          FROM MCROUTEINFOVW ROUTE,
               MCORGINFOVW ORG,
               (SELECT R.ROUTEID,
                       COUNT(*) BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) SEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) STANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) STDCOUNT
                  FROM MCBUSINFOVW BUS, MCRBUSROUTEGS R --modify by hujihuo 2013-01-25
                 WHERE R.BUSID = BUS.BUSID
                   AND BUS.ISACTIVE = '1'
                   AND NVL(BUS.PRODUCTID, 0) > 0
                 GROUP BY R.ROUTEID) T
         WHERE ROUTE.ROUTEID = T.ROUTEID(+)
           AND ROUTE.ISACTIVE = '1'
           AND ORG.ISACTIVE = '1'
           AND ROUTE.ORGID = ORG.ORGID(+);
      --组织--
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '6' AS STORAGEBUSFIRSTTYPE,
               '车载机' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.BUSSEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.BUSSEATCOUNT, 0) + NVL(T.BUSSTANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.BUSSTANDARDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       COUNT(BUS.BUSID) AS BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) BUSSEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) AS BUSSTANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) AS BUSSTANDARDCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCBUSINFOGS BUS
                 WHERE ORGTREE.ORGID = BUS.ORGID
                   AND BUS.ISACTIVE = '1'
                   AND NVL(BUS.PRODUCTID, '0') > '0'
                 GROUP BY ORGTREE.PARENTORGID) T,
               MCORGINFOVW ORG
         WHERE T.ORGID(+) = ORG.ORGID
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－车载机',
                V_DATE_IN,
                '结束');
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_BUSPHASESTORAGE',
                        '车辆阶段结存表－车载机',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --车内监控  7
    BEGIN
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－车内监控',
                V_DATE_IN,
                '开始');
      --删除
      DELETE JZ_BUSPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEBUSFIRSTTYPE = '7';
      --线路 --
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ROUTE.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               ROUTE.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '7' AS STORAGEBUSFIRSTTYPE, --车内监控
               '车内监控' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.SEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.SEATCOUNT, 0) + NVL(T.STANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.STDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL, --月
               '4' AS STORAGEORGTYPE --线路
          FROM MCROUTEINFOVW ROUTE,
               MCORGINFOVW ORG,
               (SELECT R.ROUTEID,
                       COUNT(*) BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) SEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) STANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) STDCOUNT
                  FROM MCBUSINFOVW BUS, MCRBUSROUTEGS R --modify by hujihuo 2013-01-25
                 WHERE R.BUSID = BUS.BUSID
                   AND BUS.ISACTIVE = '1'
                   AND NVL(BUS.BUSINVIDEOCOUNT, 0) > 0
                 GROUP BY R.ROUTEID) T
         WHERE ROUTE.ROUTEID = T.ROUTEID(+)
           AND ORG.ISACTIVE = '1'
           AND ROUTE.ISACTIVE = '1'
           AND ROUTE.ORGID = ORG.ORGID(+);
      --组织--
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '7' AS STORAGEBUSFIRSTTYPE,
               '车内监控' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.BUSSEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.BUSSEATCOUNT, 0) + NVL(T.BUSSTANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.BUSSTANDARDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       COUNT(BUS.BUSID) AS BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) BUSSEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) AS BUSSTANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) AS BUSSTANDARDCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCBUSINFOGS BUS
                 WHERE ORGTREE.ORGID = BUS.ORGID
                   AND BUS.ISACTIVE = '1'
                   AND NVL(BUS.BUSINVIDEOCOUNT, 0) > 0
                 GROUP BY ORGTREE.PARENTORGID) T,
               MCORGINFOVW ORG
         WHERE T.ORGID(+) = ORG.ORGID
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－车内监控',
                V_DATE_IN,
                '结束');
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_BUSPHASESTORAGE',
                        '车辆阶段结存表－车内监控',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --车外抓拍  8
    BEGIN
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－车外抓拍',
                V_DATE_IN,
                '开始');
      --删除
      DELETE JZ_BUSPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEBUSFIRSTTYPE = '8';
      --线路 --
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ROUTE.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               ROUTE.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '8' AS STORAGEBUSFIRSTTYPE, --车外抓拍
               '车外抓拍' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.SEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.SEATCOUNT, 0) + NVL(T.STANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.STDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL, --月
               '4' AS STORAGEORGTYPE --线路
          FROM MCROUTEINFOVW ROUTE,
               MCORGINFOVW ORG,
               (SELECT R.ROUTEID,
                       COUNT(*) BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) SEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) STANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) STDCOUNT
                  FROM MCBUSINFOVW BUS, MCRBUSROUTEGS R --modify by hujihuo 2013-01-25
                 WHERE R.BUSID = BUS.BUSID
                   AND BUS.ISACTIVE = '1'
                   AND NVL(BUS.BUSOUTVIDEOCOUNT, 0) > 0
                 GROUP BY R.ROUTEID) T
         WHERE ROUTE.ROUTEID = T.ROUTEID(+)
           AND ORG.ISACTIVE = '1'
           AND ROUTE.ISACTIVE = '1'
           AND ROUTE.ORGID = ORG.ORGID(+);
      --组织--
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '8' AS STORAGEBUSFIRSTTYPE,
               '车外抓拍' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.BUSSEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.BUSSEATCOUNT, 0) + NVL(T.BUSSTANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.BUSSTANDARDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       COUNT(BUS.BUSID) AS BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) BUSSEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) AS BUSSTANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) AS BUSSTANDARDCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCBUSINFOGS BUS
                 WHERE ORGTREE.ORGID = BUS.ORGID
                   AND BUS.ISACTIVE = '1'
                   AND NVL(BUS.BUSOUTVIDEOCOUNT, 0) > 0
                 GROUP BY ORGTREE.PARENTORGID) T,
               MCORGINFOVW ORG
         WHERE T.ORGID(+) = ORG.ORGID
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－车外抓拍',
                V_DATE_IN,
                '结束');
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_BUSPHASESTORAGE',
                        '车辆阶段结存表－车外抓拍',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --LED 9
    BEGIN
      WRITE_LOG('TREATE_BUSPHASESTORAGE',
                '车辆阶段结存表－LED',
                V_DATE_IN,
                '开始');
      --删除
      DELETE JZ_BUSPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEBUSFIRSTTYPE = '9';
      --线路 --
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ROUTE.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               ROUTE.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '9' AS STORAGEBUSFIRSTTYPE, --LED
               'LED' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.SEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.SEATCOUNT, 0) + NVL(T.STANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.STDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL, --月
               '4' AS STORAGEORGTYPE --线路
          FROM MCROUTEINFOVW ROUTE,
               MCORGINFOVW ORG,
               (SELECT R.ROUTEID,
                       COUNT(*) BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) SEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) STANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) STDCOUNT
                  FROM MCBUSINFOVW BUS, MCRBUSROUTEGS R --modify by hujihuo 2013-01-25
                 WHERE R.BUSID = BUS.BUSID
                   AND BUS.ISACTIVE = '1'
                   AND (BUS.HASINBUSLED = '1' OR BUS.HASHEADBUSLED = '1')
                 GROUP BY R.ROUTEID) T
         WHERE ROUTE.ROUTEID = T.ROUTEID(+)
           AND ORG.ISACTIVE = '1'
           AND ROUTE.ISACTIVE = '1'
           AND ROUTE.ORGID = ORG.ORGID(+);
      --组织--
      INSERT INTO JZ_BUSPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         STORAGEBUSFIRSTTYPE,
         STORAGEBUSFIRSTNAME,
         STORAGEBUSSECONDTYPE,
         STORAGEBUSSECONDNAME,
         BUSCOUNT,
         BUSSEATCOUNT,
         BUSPSGCOUNT,
         BUSSTANDARDCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               '9' AS STORAGEBUSFIRSTTYPE,
               'LED' STORAGEBUSFIRSTNAME,
               NULL STORAGEBUSSECONDTYPE,
               NULL AS STORAGEBUSSECONDNAME,
               NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
               NVL(T.BUSSEATCOUNT, 0) AS BUSSEATCOUNT,
               NVL(T.BUSSEATCOUNT, 0) + NVL(T.BUSSTANDCOUNT, 0) AS BUSPSGCOUNT,
               NVL(T.BUSSTANDARDCOUNT, 0) AS BUSSTANDARDCOUNT,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       COUNT(BUS.BUSID) AS BUSCOUNT,
                       SUM(NVL(BUS.SEATCOUNT, 0)) BUSSEATCOUNT,
                       SUM(NVL(BUS.STANDCOUNT, 0)) AS BUSSTANDCOUNT,
                       SUM(NVL(BUS.STDCOEFFICIENT, 1)) AS BUSSTANDARDCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCBUSINFOGS BUS
                 WHERE ORGTREE.ORGID = BUS.ORGID
                   AND BUS.ISACTIVE = '1'
                   AND (BUS.HASINBUSLED = '1' OR BUS.HASHEADBUSLED = '1')
                 GROUP BY ORGTREE.PARENTORGID) T,
               MCORGINFOVW ORG
         WHERE T.ORGID(+) = ORG.ORGID
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('Treate_BusPhaseStorage',
                '车辆阶段结存表－LED',
                V_DATE_IN,
                '结束');
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('P_BusPhaseStorage',
                        '车辆阶段结存表－LED',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：Treate_EmployeePhaseStorage                                                 *
  *                                                                                      *
  *    功能：人员数据结存表                                                               *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_EMPLOYEEPHASESTORAGE(V_DATE DATE) AS
    V_DATE_IN     DATE := TRUNC(V_DATE);
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    -- 全部 STORAGEEMPFSTTYPE='0'
    BEGIN
      WRITE_LOG('TREATE_EMPLOYEEPHASESTORAGE',
                '人员数据结存表－全部',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_EMPLOYEEPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEEMPFSTTYPE = '0';
      --组织--
      INSERT INTO JZ_EMPLOYEEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STORAGEEMPFSTTYPE,
         STORAGEEMPFSTNAME,
         STORAGEEMPSCDTYPE,
         STORAGEEMPSCDNAME,
         STORAGEEMPTHIRDTYPE,
         STORAGEEMPTHIRDNAME,
         EMPCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_EMPSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '0' AS STORAGEEMPFSTTYPE,
               '全部' AS STORAGEEMPFSTNAME,
               NULL AS STORAGEEMPSCDTYPE,
               NULL AS STORAGEEMPSCDNAME,
               NULL AS STORAGEEMPTHIRDTYPE,
               NULL AS STORAGEEMPTHIRDNAME,
               NVL(T.EMPCOUNT, 0) AS EMPCOUNT,
               '2' AS DATASAVELEVEL, --月
               ORG.ORGGRADE AS STORAGEORGTYPE --车队
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       COUNT(EMP.EMPID) AS EMPCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCEMPLOYEEINFOGS EMP
                 WHERE ORGTREE.ORGID = EMP.ORGID
                   AND EMP.ISACTIVE = '1'
                 GROUP BY ORGTREE.PARENTORGID) T,
               MCORGINFOVW ORG
         WHERE T.ORGID(+) = ORG.ORGID;
      COMMIT;
      WRITE_LOG('TREATE_EMPLOYEEPHASESTORAGE',
                '人员数据结存表－全部',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_EMPLOYEEPHASESTORAGE',
                        V_DATE_IN,
                        '人员数据结存表－全部',
                        SQLCODE,
                        SQLERRM);
    END;
    --岗位  1
    BEGIN
      WRITE_LOG('TREATE_EMPLOYEEPHASESTORAGE',
                '人员数据结存表－岗位',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_EMPLOYEEPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEEMPFSTTYPE = '1';
      --组织--
      INSERT INTO JZ_EMPLOYEEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STORAGEEMPFSTTYPE,
         STORAGEEMPFSTNAME,
         STORAGEEMPSCDTYPE,
         STORAGEEMPSCDNAME,
         STORAGEEMPTHIRDTYPE,
         STORAGEEMPTHIRDNAME,
         EMPCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_EMPSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '1' AS STORAGEEMPFSTTYPE,
               '岗位' AS STORAGEEMPFSTNAME,
               TY.PITEMVALUE AS STORAGEEMPSCDTYPE,
               TY.PITEMKEY AS STORAGEEMPSCDNAME,
               T.POSITIONTYPE AS STORAGEEMPTHIRDTYPE,
               TY.ITEMKEY AS STORAGEEMPTHIRDNAME,
               NVL(T.EMPCOUNT, 0) AS EMPCOUNT,
               '2' AS DATASAVELEVEL, --月
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       EMP.POSITIONTYPE,
                       COUNT(EMP.EMPID) AS EMPCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCEMPLOYEEINFOGS EMP
                 WHERE ORGTREE.ORGID = EMP.ORGID
                   AND EMP.ISACTIVE = '1'
                 GROUP BY ORGTREE.PARENTORGID, EMP.POSITIONTYPE) T,
               MCORGINFOVW ORG,
               (SELECT T1.ITEMKEY,
                       T1.ITEMVALUE,
                       T2.ITEMKEY AS PITEMKEY,
                       T2.ITEMVALUE AS PITEMVALUE
                  FROM TYPEENTRY T1, TYPEENTRY T2
                 WHERE T1.TYPENAME = 'POSITIONTYPE'
                   AND T1.PARENTID = T2.TYPEENTRYID(+)) TY
         WHERE T.ORGID(+) = ORG.ORGID
           AND T.POSITIONTYPE = TY.ITEMVALUE(+);
      COMMIT;
      WRITE_LOG('TREATE_EMPLOYEEPHASESTORAGE',
                '人员数据结存表－岗位',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_EMPLOYEEPHASESTORAGE',
                        V_DATE,
                        '人员数据结存表－岗位',
                        SQLCODE,
                        SQLERRM);
    END;
    --职称  2
    BEGIN
      WRITE_LOG('TREATE_EMPLOYEEPHASESTORAGE',
                '人员数据结存表－职称',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_EMPLOYEEPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEEMPFSTTYPE = '2';
      --组织--
      INSERT INTO JZ_EMPLOYEEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STORAGEEMPFSTTYPE,
         STORAGEEMPFSTNAME,
         STORAGEEMPSCDTYPE,
         STORAGEEMPSCDNAME,
         STORAGEEMPTHIRDTYPE,
         STORAGEEMPTHIRDNAME,
         EMPCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_EMPSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '2' AS STORAGEEMPFSTTYPE,
               '职称' AS STORAGEEMPFSTNAME,
               T.TECHNICALPOST AS STORAGEEMPSCDTYPE,
               P.ITEMKEY AS STORAGEEMPSCDNAME,
               NULL AS STORAGEEMPTHIRDTYPE,
               NULL AS STORAGEEMPTHIRDNAME,
               NVL(T.EMPCOUNT, 0) AS EMPCOUNT,
               '2' AS DATASAVELEVEL, --月
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       EMP.TECHNICALPOST,
                       COUNT(EMP.EMPID) AS EMPCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCEMPLOYEEINFOGS EMP
                 WHERE ORGTREE.ORGID = EMP.ORGID
                   AND EMP.ISACTIVE = '1'
                 GROUP BY ORGTREE.PARENTORGID, EMP.TECHNICALPOST) T,
               MCORGINFOVW ORG,
               (SELECT TY.ITEMKEY, TY.ITEMVALUE
                  FROM TYPEENTRY TY
                 WHERE TY.TYPENAME = 'TECHNICALPOSTTYPE') P
         WHERE T.ORGID(+) = ORG.ORGID
           AND T.TECHNICALPOST = P.ITEMVALUE(+);
      COMMIT;
      WRITE_LOG('TREATE_EMPLOYEEPHASESTORAGE',
                '人员数据结存表－职称',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_EMPLOYEEPHASESTORAGE',
                        V_DATE_IN,
                        '人员数据结存表－职称',
                        SQLCODE,
                        SQLERRM);
    END;
    --文化程度  3
    BEGIN
      WRITE_LOG('TREATE_EMPLOYEEPHASESTORAGE',
                '人员数据结存表－文化程度',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_EMPLOYEEPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEEMPFSTTYPE = '3';
      --组织--
      INSERT INTO JZ_EMPLOYEEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STORAGEEMPFSTTYPE,
         STORAGEEMPFSTNAME,
         STORAGEEMPSCDTYPE,
         STORAGEEMPSCDNAME,
         STORAGEEMPTHIRDTYPE,
         STORAGEEMPTHIRDNAME,
         EMPCOUNT,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_EMPSTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '3' AS STORAGEEMPFSTTYPE,
               '文化程度' AS STORAGEEMPFSTNAME,
               T.DIPLOMA AS STORAGEEMPSCDTYPE,
               P.ITEMKEY AS STORAGEEMPSCDNAME,
               NULL AS STORAGEEMPTHIRDTYPE,
               NULL AS STORAGEEMPTHIRDNAME,
               NVL(T.EMPCOUNT, 0) AS EMPCOUNT,
               '2' AS DATASAVELEVEL, --月
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORGTREE.PARENTORGID AS ORGID,
                       EMP.DIPLOMA,
                       COUNT(EMP.EMPID) AS EMPCOUNT
                  FROM JZ_ORGGRADETREE ORGTREE, MCEMPLOYEEINFOGS EMP
                 WHERE ORGTREE.ORGID = EMP.ORGID
                   AND EMP.ISACTIVE = '1'
                 GROUP BY ORGTREE.PARENTORGID, EMP.DIPLOMA) T,
               MCORGINFOVW ORG,
               (SELECT TY.ITEMKEY, TY.ITEMVALUE
                  FROM TYPEENTRY TY
                 WHERE TY.TYPENAME = 'DIPLOMATYPE') P
         WHERE T.ORGID(+) = ORG.ORGID
           AND T.DIPLOMA = P.ITEMVALUE(+);
      COMMIT;
      WRITE_LOG('TREATE_EMPLOYEEPHASESTORAGE',
                '人员数据结存表－文化程度',
                V_DATE_IN,
                '结束');
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_EMPLOYEEPHASESTORAGE',
                        '人员数据结存表－文化程度',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTEBASICDATA_ORG                                                *
  *                                                                                      *
  *    功能：线路基础数据结存表(组织结存)                                                  *
  *                                                                                      *
  *    作者：huhuimin                                                                     *
  *    日期：2012-04-05                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEBASICDATA_ORG(V_DATE DATE) AS
    V_DATE_IN     DATE := TRUNC(V_DATE);
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    WRITE_LOG('TREAT_ROUTEDAYSTORAGE_ORG',
              '线路基础数据结存表-组织月结',
              V_DATE_IN,
              '开始');
    --删除月结数据
    DELETE FROM JZ_ROUTEBASICDATAPHASESTORAGE
     WHERE JZDATE >= V_BEGIN_MONTH
       AND JZDATE < V_END_MONTH
       AND STORAGEORGTYPE != '4'
       AND DATASAVELEVEL = '2'; --月结数据
    --插入新的月结数据
    INSERT INTO JZ_ROUTEBASICDATAPHASESTORAGE
      (RECORDID, --记录编号
       ORGID, --组织编号
       ROUTEID, --线路编号
       ROUTENAME, --线路名称
       SUBROUTEID, --子线路编号
       SUBROUTENAME, --子线路名称
       JZDATE, --结存日起
       ROUTECOUNT, --线路条数
       BUSCOUNT, --车辆数
       STANDARDBUSCOUNT, --车辆标台数
       SEATCOUNT, --座位数
       PSGCOUNT, --客位数
       EMPLOYEECOUNT, --人员数
       STATIONCOUNT, --站点数
       ROUTELENGTH, --线路长度
       CIRCULATETIME, --周转时间（分钟）
       FSTSTATIONID, --主站ID
       LSTSTATIONID, --副站ID
       AVERAGESTATIONDISTANCE, --平均站距（米）
       MAXSTATIONDISTANCE, --最大站距（米）
       MINSTATIONDISTANCE, --最小站距（米）
       ACCOMMODATIONLENGTH, --使用专用道长度
       ISAPTS, --是否使用调度系统
       APTSRATE, --调度系统普及率
       ROUTENONBEELINECFST, --线路非直线系数
       ROUTESIDENONPOISECFST, --线路客运量断面不均衡系数
       ROUTEDIRECTNONPOISECFST, --线路客运量方向不均衡系数
       ROUTETIMEPOISECFST, --线路客运量时间不均衡系数
       STORAGEORGTYPE, --组织结存级别
       DATASAVELEVEL, --数据结存级别
       RECDATE --记录日期
       )
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID, --记录编号
             ORG.ORGID AS ORGID, --组织编号
             NULL AS ROUTEID, --线路编号
             NULL AS ROUTENAME, --线路名称
             NULL AS SUBROUTEID, --主子线编号
             NULL AS SUBROUTENAME, --主子线名称
             V_DATE_IN AS JZDATE, --结存日期
             T.ROUTECOUNT AS ROUTECOUNT, --线路条数
             T.BUSCOUNT AS BUSCOUNT, --车辆数
             T.STANDARDBUSCOUNT, --车辆标台数
             T.SEATCOUNT, --座位数
             T.PSGCOUNT, --客位数
             T.EMPLOYEECOUNT, --人员数
             T.STATIONCOUNT, --站点数
             T.ROUTELENGTH, --线路长度
             NULL AS CIRCULATETIME, --周转时间（分钟）
             NULL AS FSTSTATIONID, --主站ID
             NULL AS LSTSTATIONID, --副站ID
             T.AVERAGESTATIONDISTANCE, --平均站距（米）
             T.MAXSTATIONDISTANCE, --最大站距（米）
             T.MINSTATIONDISTANCE, --最小站距（米）
             T.ACCOMMODATIONLENGTH, --使用专用道长度
             T.ISAPTS, --是否使用调度系统
             T.APTSRATE, --调度系统普及率
             NULL AS ROUTENONBEELINECFST, --线路非直线系数
             NULL AS ROUTESIDENONPOISECFST, --线路客运量断面不均衡系数
             NULL AS ROUTEDIRECTNONPOISECFST, --线路客运量方向不均衡系数
             NULL AS ROUTETIMEPOISECFST, --线路客运量时间不均衡系数
             ORG.ORGGRADE AS STORAGEORGTYPE,
             '2' AS DATASAVELEVEL, --月结
             SYSDATE AS RECDATE --记录日期
        FROM MCORGINFOVW ORG,
             (SELECT O.PARENTORGID AS ORGID,
                     SUM(T.ROUTECOUNT) AS ROUTECOUNT,
                     SUM(T.BUSCOUNT) AS BUSCOUNT,
                     SUM(T.STANDARDBUSCOUNT) AS STANDARDBUSCOUNT,
                     SUM(T.SEATCOUNT) AS SEATCOUNT,
                     SUM(T.PSGCOUNT) AS PSGCOUNT,
                     SUM(T.EMPLOYEECOUNT) AS EMPLOYEECOUNT,
                     SUM(T.STATIONCOUNT) AS STATIONCOUNT,
                     SUM(T.ROUTELENGTH) AS ROUTELENGTH,
                     ROUND(DECODE(SUM(T.STATIONCOUNT - 1),
                                  0,
                                  NULL,
                                  SUM((T.STATIONCOUNT - 1) *
                                      T.AVERAGESTATIONDISTANCE) /
                                  SUM(T.STATIONCOUNT - 1)),
                           2) AS AVERAGESTATIONDISTANCE,
                     MAX(T.MAXSTATIONDISTANCE) AS MAXSTATIONDISTANCE,
                     MIN(T.MINSTATIONDISTANCE) AS MINSTATIONDISTANCE,
                     SUM(T.ACCOMMODATIONLENGTH) AS ACCOMMODATIONLENGTH,
                     NULL AS ISAPTS,
                     ROUND(SUM(DECODE(ISAPTS, 1, 1, 0)) / SUM(T.ROUTECOUNT),
                           4) AS APTSRATE
                FROM JZ_ROUTEBASICDATAPHASESTORAGE T, JZ_ORGGRADETREE O
               WHERE T.JZDATE = V_DATE_IN
                 AND T.DATASAVELEVEL = '2'
                 AND T.STORAGEORGTYPE = '4'
                 AND T.ORGID = O.ORGID
               GROUP BY O.PARENTORGID) T
       WHERE ORG.ORGID = T.ORGID(+)
         AND ORG.ISACTIVE = '1';
    COMMIT;
    WRITE_LOG('TREAT_ROUTEBASICDATA_ORG',
              '线路基础数据结存表-组织月结',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREAT_ROUTEBASICDATA_ORG',
                      '线路基础数据结存表-组织月结',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTEBASICDATA_YEAR                                                *
  *                                                                                      *
  *    功能：线路基础数据结存表(年结)                                                  *
  *                                                                                      *
  *    作者：huhuimin                                                                     *
  *    日期：2012-04-06                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEBASICDATA_YEAR(V_DATE DATE) AS
    V_DATE_IN    DATE;
    V_BEGIN_YEAR DATE;
    V_END_YEAR   DATE;
  BEGIN
    V_DATE_IN    := TRUNC(V_DATE);
    V_BEGIN_YEAR := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                            'YYYY-MM-DD');
    V_END_YEAR   := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                       '-01-01',
                                       'YYYY-MM-DD'),
                               12) - 1;
    WRITE_LOG('TREATE_ROUTEBASICDATA_YEAR',
              '线路基础数据年度结存',
              V_DATE_IN,
              '开始');
    --删除线路年结数据
    DELETE FROM JZ_ROUTEBASICDATAPHASESTORAGE
     WHERE JZDATE >= V_BEGIN_YEAR
       AND JZDATE < V_END_YEAR
       AND DATASAVELEVEL = '1' --年结
       AND STORAGEORGTYPE = '4'; --线路
    --插入新的线路年结数据
    INSERT INTO JZ_ROUTEBASICDATAPHASESTORAGE
      (RECORDID, --记录编号
       ORGID, --组织编号
       ROUTEID, --线路编号
       ROUTENAME, --线路名称
       SUBROUTEID, --子线路编号
       SUBROUTENAME, --子线路名称
       JZDATE, --结存日起
       ROUTECOUNT, --线路条数
       BUSCOUNT, --车辆数
       STANDARDBUSCOUNT, --车辆标台数
       SEATCOUNT, --座位数
       PSGCOUNT, --客位数
       EMPLOYEECOUNT, --人员数
       STATIONCOUNT, --站点数
       ROUTELENGTH, --线路长度
       CIRCULATETIME, --周转时间（分钟）
       FSTSTATIONID, --主站ID
       LSTSTATIONID, --副站ID
       AVERAGESTATIONDISTANCE, --平均站距（米）
       MAXSTATIONDISTANCE, --最大站距（米）
       MINSTATIONDISTANCE, --最小站距（米）
       ACCOMMODATIONLENGTH, --使用专用道长度
       ISAPTS, --是否使用调度系统
       APTSRATE, --调度系统普及率
       ROUTENONBEELINECFST, --线路非直线系数
       ROUTESIDENONPOISECFST, --线路客运量断面不均衡系数
       ROUTEDIRECTNONPOISECFST, --线路客运量方向不均衡系数
       ROUTETIMEPOISECFST, --线路客运量时间不均衡系数
       STORAGEORGTYPE, --组织结存级别
       DATASAVELEVEL, --数据结存级别
       RECDATE --记录日期
       )
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
             T.ORGID, --组织编号
             T.ROUTEID, --线路编号
             T.ROUTENAME, --线路名称
             T.SUBROUTEID, --子线路编号
             T.SUBROUTENAME, --子线路名称
             V_DATE_IN AS JZDATE, --结存日起
             T.ROUTECOUNT, --线路条数
             T.BUSCOUNT, --车辆数
             T.STANDARDBUSCOUNT, --车辆标台数
             T.SEATCOUNT, --座位数
             T.PSGCOUNT, --客位数
             T.EMPLOYEECOUNT, --人员数
             T.STATIONCOUNT, --站点数
             T.ROUTELENGTH, --线路长度
             T.CIRCULATETIME, --周转时间（分钟）
             T.FSTSTATIONID, --主站ID
             T.LSTSTATIONID, --副站ID
             T.AVERAGESTATIONDISTANCE, --平均站距（米）
             T.MAXSTATIONDISTANCE, --最大站距（米）
             T.MINSTATIONDISTANCE, --最小站距（米）
             T.ACCOMMODATIONLENGTH, --使用专用道长度
             T.ISAPTS, --是否使用调度系统
             T.APTSRATE, --调度系统普及率
             NULL AS ROUTENONBEELINECFST, --线路非直线系数
             NULL AS ROUTESIDENONPOISECFST, --线路客运量断面不均衡系数
             NULL AS ROUTEDIRECTNONPOISECFST, --线路客运量方向不均衡系数
             NULL AS ROUTETIMEPOISECFST, --线路客运量时间不均衡系数
             '4' AS STORAGEORGTYPE, --线路
             '1' AS DATASAVELEVEL, --年结
             SYSDATE AS RECDATE --记录日期
        FROM JZ_ROUTEBASICDATAPHASESTORAGE T
       WHERE T.JZDATE =
             (SELECT MAX(T.JZDATE)
                FROM JZ_ROUTEBASICDATAPHASESTORAGE T
               WHERE TO_CHAR(T.JZDATE, 'YYYY') = TO_CHAR(V_DATE_IN, 'YYYY'))
         AND T.DATASAVELEVEL = '2' --月结
         AND T.STORAGEORGTYPE = '4'; --线路数据
    --组织
    --删除各级组织年结数据
    DELETE FROM JZ_ROUTEBASICDATAPHASESTORAGE
     WHERE JZDATE >= V_BEGIN_YEAR
       AND JZDATE < V_END_YEAR
       AND DATASAVELEVEL = '1' --年结
       AND STORAGEORGTYPE <> '4';
    --插入新的年结数据
    INSERT INTO JZ_ROUTEBASICDATAPHASESTORAGE
      (RECORDID, --记录编号
       ORGID, --组织编号
       ROUTEID, --线路编号
       ROUTENAME, --线路名称
       SUBROUTEID, --子线路编号
       SUBROUTENAME, --子线路名称
       JZDATE, --结存日起
       ROUTECOUNT, --线路条数
       BUSCOUNT, --车辆数
       STANDARDBUSCOUNT, --车辆标台数
       SEATCOUNT, --座位数
       PSGCOUNT, --客位数
       EMPLOYEECOUNT, --人员数
       STATIONCOUNT, --站点数
       ROUTELENGTH, --线路长度
       CIRCULATETIME, --周转时间（分钟）
       FSTSTATIONID, --主站ID
       LSTSTATIONID, --副站ID
       AVERAGESTATIONDISTANCE, --平均站距（米）
       MAXSTATIONDISTANCE, --最大站距（米）
       MINSTATIONDISTANCE, --最小站距（米）
       ACCOMMODATIONLENGTH, --使用专用道长度
       ISAPTS, --是否使用调度系统
       APTSRATE, --调度系统普及率
       ROUTENONBEELINECFST, --线路非直线系数
       ROUTESIDENONPOISECFST, --线路客运量断面不均衡系数
       ROUTEDIRECTNONPOISECFST, --线路客运量方向不均衡系数
       ROUTETIMEPOISECFST, --线路客运量时间不均衡系数
       STORAGEORGTYPE, --组织结存级别
       DATASAVELEVEL, --数据结存级别
       RECDATE --记录日期
       )
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
             T.ORGID, --组织编号
             T.ROUTEID, --线路编号
             T.ROUTENAME, --线路名称
             T.SUBROUTEID, --子线路编号
             T.SUBROUTENAME, --子线路名称
             V_DATE_IN AS JZDATE, --结存日起
             T.ROUTECOUNT, --线路条数
             T.BUSCOUNT, --车辆数
             T.STANDARDBUSCOUNT, --车辆标台数
             T.SEATCOUNT, --座位数
             T.PSGCOUNT, --客位数
             T.EMPLOYEECOUNT, --人员数
             T.STATIONCOUNT, --站点数
             T.ROUTELENGTH, --线路长度
             T.CIRCULATETIME, --周转时间（分钟）
             T.FSTSTATIONID, --主站ID
             T.LSTSTATIONID, --副站ID
             T.AVERAGESTATIONDISTANCE, --平均站距（米）
             T.MAXSTATIONDISTANCE, --最大站距（米）
             T.MINSTATIONDISTANCE, --最小站距（米）
             T.ACCOMMODATIONLENGTH, --使用专用道长度
             T.ISAPTS, --是否使用调度系统
             T.APTSRATE, --调度系统普及率
             NULL AS ROUTENONBEELINECFST, --线路非直线系数
             NULL AS ROUTESIDENONPOISECFST, --线路客运量断面不均衡系数
             NULL AS ROUTEDIRECTNONPOISECFST, --线路客运量方向不均衡系数
             NULL AS ROUTETIMEPOISECFST, --线路客运量时间不均衡系数
             T.STORAGEORGTYPE AS STORAGEORGTYPE, --
             '1' AS DATASAVELEVEL, --年结
             SYSDATE AS RECDATE --记录日期
        FROM JZ_ROUTEBASICDATAPHASESTORAGE T
       WHERE T.JZDATE =
             (SELECT MAX(T.JZDATE)
                FROM JZ_ROUTEBASICDATAPHASESTORAGE T
               WHERE TO_CHAR(T.JZDATE, 'YYYY') = TO_CHAR(V_DATE_IN, 'YYYY'))
         AND T.DATASAVELEVEL = '2' --月结
         AND T.STORAGEORGTYPE <> '4';
    COMMIT;
    WRITE_LOG('TREAT_ROUTEBASICDATA_ORG',
              '线路基础数据结存表-年结',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREAT_ROUTEBASICDATA_ORG',
                      '线路基础数据结存表-年结',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTEBASICDATASTORAGE                                                *
  *                                                                                      *
  *    功能：线路基础数据结存表                                                          *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEBASICDATASTORAGE(V_DATE DATE) AS
    V_DATE_IN                DATE := TRUNC(V_DATE);
    V_USEDATE                DATE; --子线路有效日期
    V_ROUTESTYLE             CHAR(1);
    V_ROUTEID                NUMBER;
    V_SEGCOUNT               NUMBER;
    V_SUBROUTEID             JZ_ROUTEBASICDATAPHASESTORAGE.SUBROUTEID%TYPE; --子线名称
    V_SUBROUTENAME           JZ_ROUTEBASICDATAPHASESTORAGE.SUBROUTENAME%TYPE; --子线名称
    V_STATIONCOUNT           JZ_ROUTEBASICDATAPHASESTORAGE.STANDARDBUSCOUNT%TYPE; --站点个数
    V_ROUTELENGTH            JZ_ROUTEBASICDATAPHASESTORAGE.ROUTELENGTH%TYPE; --线路长度
    V_AVERAGESTATIONDISTANCE JZ_ROUTEBASICDATAPHASESTORAGE.AVERAGESTATIONDISTANCE%TYPE; --平均站距
    V_MAXSTATIONDISTANCE     JZ_ROUTEBASICDATAPHASESTORAGE.MAXSTATIONDISTANCE%TYPE; --最大站距
    V_MINSTATIONDISTANCE     JZ_ROUTEBASICDATAPHASESTORAGE.MINSTATIONDISTANCE%TYPE; --最小站距
    V_ACCOMMODATIONLENGTH    JZ_ROUTEBASICDATAPHASESTORAGE.ACCOMMODATIONLENGTH%TYPE; --专用道长度
    V_CIRCULATETIME          JZ_ROUTEBASICDATAPHASESTORAGE.CIRCULATETIME%TYPE; --周转时间
    V_FSTSTATIONID           JZ_ROUTEBASICDATAPHASESTORAGE.FSTSTATIONID%TYPE; --主站ID
    V_LSTSTATIONID           JZ_ROUTEBASICDATAPHASESTORAGE.LSTSTATIONID%TYPE; --副站ID
    V_BEGIN_MONTH            DATE;
    V_END_MONTH              DATE;
  BEGIN
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    V_USEDATE     := SYSDATE;
    WRITE_LOG('TREATE_ROUTEBASICDATASTORAGE',
              '线路基础数据结存表',
              V_DATE_IN,
              '开始');
    --删除全部数据
    DELETE JZ_ROUTEBASICDATAPHASESTORAGE
     WHERE JZDATE >= V_BEGIN_MONTH
       AND JZDATE < V_END_MONTH;
    --线路 生成人、车数据--
    INSERT INTO JZ_ROUTEBASICDATAPHASESTORAGE
      (RECORDID,
       ORGID,
       ROUTEID,
       ROUTENAME,
       JZDATE,
       ROUTECOUNT,
       BUSCOUNT,
       STANDARDBUSCOUNT,
       SEATCOUNT,
       PSGCOUNT,
       EMPLOYEECOUNT,
       STATIONCOUNT,
       ROUTELENGTH,
       AVERAGESTATIONDISTANCE,
       MAXSTATIONDISTANCE,
       MINSTATIONDISTANCE,
       ACCOMMODATIONLENGTH,
       ISAPTS,
       APTSRATE,
       ROUTENONBEELINECFST,
       ROUTESIDENONPOISECFST,
       ROUTEDIRECTNONPOISECFST,
       ROUTETIMEPOISECFST,
       DATASAVELEVEL,
       STORAGEORGTYPE)
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
             ROUTE.ORGID AS ORGID,
             ROUTE.ROUTEID AS ROUTEID,
             ROUTE.ROUTENAME AS ROUTENAME,
             V_DATE_IN AS JZDATE,
             1 AS ROUTECOUNT, --线路条数
             NVL(T.BUSCOUNT, 0) AS BUSCOUNT,
             NVL(T.STDCOUNT, 0) AS BUSSTANDARDCOUNT,
             NVL(T.SEATCOUNT, 0) AS SEATCOUNT,
             NVL(T.SEATCOUNT, 0) + NVL(T.STANDCOUNT, 0) AS PSGCOUNT,
             NVL(T2.EMPCOUNT, 0) AS EMPCOUNT,
             0 AS STATIONCOUNT,
             0 AS ROUTELENGTH,
             0 AS AVERAGESTATIONDISTANCE,
             0 AS MAXSTATIONDISTANCE,
             0 AS MINSTATIONDISTANCE,
             0 AS ACCOMMODATIONLENGTH,
             NVL(ROUTE.ISAPTS, '0') AS ISAPTS,
             NVL(ROUTE.ISAPTS, '0') AS APTSRATE, --智能调度系统普及率
             1 AS ROUTENONBEELINECFST,
             0 AS ROUTESIDENONPOISECFST,
             0 AS ROUTEDIRECTNONPOISECFST,
             0 AS ROUTETIMEPOISECFST,
             '2' AS DATASAVELEVEL, --月,
             '4' AS STORAGEORGTYPE
        FROM MCROUTEINFOVW ROUTE,
             (SELECT R.ROUTEID,
                     COUNT(*) BUSCOUNT,
                     SUM(NVL(BUS.SEATCOUNT, 0)) SEATCOUNT,
                     SUM(NVL(BUS.STANDCOUNT, 0)) STANDCOUNT,
                     SUM(NVL(BUS.STDCOEFFICIENT, 0)) STDCOUNT
                FROM MCBUSINFOVW BUS, MCRBUSROUTEGS R
               WHERE R.BUSID = BUS.BUSID
               GROUP BY R.ROUTEID) T,
             (SELECT R.ROUTEID, COUNT(*) EMPCOUNT
                FROM MCEMPLOYEEINFOGS EMP, MCREMPROUTEGS R
               WHERE R.EMPID = EMP.EMPID
               GROUP BY R.ROUTEID) T2
       WHERE ROUTE.ROUTEID = T.ROUTEID(+)
         AND ROUTE.ROUTEID = T2.ROUTEID(+);
    COMMIT;
    --线路长度、站点距离数据--
    FOR CUR_R IN (SELECT DISTINCT ROUTEID
                    FROM JZ_ROUTEBASICDATAPHASESTORAGE
                   WHERE JZDATE >= V_BEGIN_MONTH
                     AND JZDATE < V_END_MONTH
                   ORDER BY ROUTEID) LOOP
      BEGIN
        V_ROUTEID                := CUR_R.ROUTEID; --不这样处理，直接使用没有值，不清楚为什么
        V_STATIONCOUNT           := 0;
        V_ROUTELENGTH            := 0;
        V_AVERAGESTATIONDISTANCE := 0;
        V_MAXSTATIONDISTANCE     := 0;
        V_MINSTATIONDISTANCE     := 0;
        V_ACCOMMODATIONLENGTH    := 0;
        GET_MAINSUBROUTE(V_DATE,
                         V_USEDATE,
                         V_ROUTEID,
                         V_SUBROUTEID,
                         V_SUBROUTENAME);
        IF (V_SUBROUTEID > 0) THEN
          --线路长度、单程条数
          FOR CUR IN (SELECT ROUND(SUM(NVL(SEG.SNGMILE, 0)) / COUNT(*), 2) AS ROUTELENGTH,
                             SUM(NVL(SEG.ACCOMMODATIONLENGTH, 0)) AS ACCOMMODATIONLENGTH,
                             SUM(NVL(SEG.SNGTIME, 0)) AS CIRCULATETIME,
                             COUNT(*) AS SEGCOUNT
                        FROM MCSEGMENTINFOGS SEG
                       WHERE SEG.ROUTEID = V_ROUTEID
                         AND SEG.SUBROUTEID = V_SUBROUTEID) LOOP
            V_ROUTELENGTH         := CUR.ROUTELENGTH;
            V_ACCOMMODATIONLENGTH := CUR.ACCOMMODATIONLENGTH;
            V_SEGCOUNT            := CUR.SEGCOUNT;
            V_CIRCULATETIME       := CUR.CIRCULATETIME;
          END LOOP;
          --主副站ID
          V_FSTSTATIONID := NULL;
          V_LSTSTATIONID := NULL;
          IF (V_ROUTESTYLE = '1') THEN
            --上下行
            FOR CUR IN (SELECT R.STATIONID AS FSTSTATIONID,
                               RR.STATIONID AS LSTSTATIONID,
                               SEG.SEGMENTID,
                               SEG.SEGMENTNAME,
                               SEG.RUNDIRECTION
                          FROM MCSEGMENTINFOGS SEG,
                               (SELECT T.SEGMENTID,
                                       MIN(T.SNGSERIALID) MINSNG,
                                       MAX(T.SNGSERIALID) MAXSNG
                                  FROM MCRSEGMENTSTATIONGS T
                                 WHERE T.ROUTEID = V_ROUTEID
                                   AND T.SUBROUTEID = V_SUBROUTEID
                                 GROUP BY T.SEGMENTID) T,
                               MCRSEGMENTSTATIONGS R,
                               MCRSEGMENTSTATIONGS RR
                         WHERE T.SEGMENTID = SEG.SEGMENTID
                           AND T.SEGMENTID = R.SEGMENTID
                           AND T.MINSNG = R.SNGSERIALID
                           AND T.SEGMENTID = RR.SEGMENTID
                           AND T.MAXSNG = RR.SNGSERIALID
                           AND ROWNUM < 2
                         ORDER BY SEG.RUNDIRECTION) LOOP
              IF (CUR.RUNDIRECTION = '1') THEN
                V_FSTSTATIONID := CUR.FSTSTATIONID;
                V_LSTSTATIONID := CUR.LSTSTATIONID;
              ELSE
                V_FSTSTATIONID := CUR.LSTSTATIONID;
                V_LSTSTATIONID := CUR.FSTSTATIONID;
              END IF;
            END LOOP;
          ELSE
            --环行
            FOR CUR IN (SELECT R.STATIONID AS FSTSTATIONID,
                               RR.STATIONID AS LSTSTATIONID,
                               SEG.SEGMENTID,
                               SEG.SEGMENTNAME,
                               SEG.RUNDIRECTION
                          FROM MCSEGMENTINFOGS SEG,
                               (SELECT T.SEGMENTID, MIN(T.SNGSERIALID) MINSNG
                                  FROM MCRSEGMENTSTATIONGS T
                                 WHERE T.ROUTEID = V_ROUTEID
                                   AND T.SUBROUTEID = V_SUBROUTEID
                                 GROUP BY T.SEGMENTID) T,
                               (SELECT T.SEGMENTID, MIN(T.SNGSERIALID) MAXSNG
                                  FROM MCRSEGMENTSTATIONGS T
                                 WHERE T.ROUTEID = V_ROUTEID
                                   AND T.SUBROUTEID = V_SUBROUTEID
                                   AND T.STATIONTYPE = '12'
                                 GROUP BY T.SEGMENTID) T2,
                               MCRSEGMENTSTATIONGS R,
                               MCRSEGMENTSTATIONGS RR
                         WHERE T.SEGMENTID = SEG.SEGMENTID
                           AND T2.SEGMENTID = SEG.SEGMENTID(+)
                           AND T.SEGMENTID = R.SEGMENTID
                           AND T.MINSNG = R.SNGSERIALID
                           AND T2.SEGMENTID = RR.SEGMENTID(+)
                           AND T2.MAXSNG = RR.SNGSERIALID(+)
                           AND ROWNUM < 2) LOOP
              IF (CUR.RUNDIRECTION = '1') THEN
                V_FSTSTATIONID := CUR.FSTSTATIONID;
                V_LSTSTATIONID := CUR.LSTSTATIONID;
              ELSE
                V_FSTSTATIONID := CUR.LSTSTATIONID;
                V_LSTSTATIONID := CUR.FSTSTATIONID;
              END IF;
            END LOOP;
            --如果没有返回站，取中间一个
            IF (V_LSTSTATIONID IS NULL) THEN
              FOR CUR IN (SELECT R.STATIONID AS FSTSTATIONID,
                                 RR.STATIONID AS LSTSTATIONID,
                                 SEG.SEGMENTID,
                                 SEG.SEGMENTNAME,
                                 SEG.RUNDIRECTION
                            FROM MCSEGMENTINFOGS SEG,
                                 (SELECT T.SEGMENTID,
                                         MIN(T.SNGSERIALID) MINSNG,
                                         ROUND((NVL(MIN(T.SNGSERIALID), 0) +
                                               NVL(MAX(T.SNGSERIALID), 0)) / 2) MAXSNG
                                    FROM MCRSEGMENTSTATIONGS T
                                   WHERE T.ROUTEID = 27
                                     AND T.SUBROUTEID = 27
                                   GROUP BY T.SEGMENTID) T,
                                 MCRSEGMENTSTATIONGS R,
                                 MCRSEGMENTSTATIONGS RR
                           WHERE T.SEGMENTID = SEG.SEGMENTID
                             AND T.SEGMENTID = R.SEGMENTID
                             AND T.MINSNG = R.SNGSERIALID
                             AND T.SEGMENTID = RR.SEGMENTID
                             AND T.MAXSNG = RR.SNGSERIALID
                             AND ROWNUM < 2) LOOP
                V_FSTSTATIONID := CUR.FSTSTATIONID;
                V_LSTSTATIONID := CUR.LSTSTATIONID;
              END LOOP;
            END IF;
          END IF;
          --站点个数
          SELECT COUNT(*)
            INTO V_STATIONCOUNT
            FROM MCSEGMENTINFOGS SEG, MCRSEGMENTSTATIONGS R
           WHERE SEG.SEGMENTID = R.SEGMENTID
             AND SEG.ROUTEID = V_ROUTEID
             AND SEG.SUBROUTEID = V_SUBROUTEID;
          --平均站距
          IF (V_SEGCOUNT > 0 AND V_STATIONCOUNT > 3) THEN
            --有单程信息
            V_AVERAGESTATIONDISTANCE := ROUND(V_ROUTELENGTH * 1000 /
                                              (V_STATIONCOUNT - V_SEGCOUNT));
          END IF;
          --最大或最小站距
          FOR CUR IN (SELECT MAX(NVL(R.DISTANCE, 0)) AS MAXSTATIONDISTANCE,
                             MIN(DECODE(NVL(R.DISTANCE, 0),
                                        0,
                                        9999,
                                        R.DISTANCE)) AS MINSTATIONDISTANCE
                        FROM MCRSEGMENTSTATIONGS R
                       WHERE R.ROUTEID = V_ROUTEID
                         AND R.SUBROUTEID = V_SUBROUTEID) LOOP
            V_MAXSTATIONDISTANCE := CUR.MAXSTATIONDISTANCE;
            V_MINSTATIONDISTANCE := CUR.MINSTATIONDISTANCE;
          END LOOP;
          IF (V_MINSTATIONDISTANCE = 9999) THEN
            V_MINSTATIONDISTANCE := 0;
          END IF;
          IF (V_MAXSTATIONDISTANCE = 0 AND V_MINSTATIONDISTANCE = 0) THEN
            V_MAXSTATIONDISTANCE := V_AVERAGESTATIONDISTANCE;
            V_MINSTATIONDISTANCE := V_AVERAGESTATIONDISTANCE;
          END IF;
          --更新结存表
          UPDATE JZ_ROUTEBASICDATAPHASESTORAGE T
             SET T.ROUTELENGTH            = NVL(V_ROUTELENGTH, 0),
                 T.STATIONCOUNT           = NVL(V_STATIONCOUNT, 0),
                 T.AVERAGESTATIONDISTANCE = NVL(V_AVERAGESTATIONDISTANCE, 0),
                 T.MAXSTATIONDISTANCE     = NVL(V_MAXSTATIONDISTANCE, 0),
                 T.MINSTATIONDISTANCE     = NVL(V_MINSTATIONDISTANCE, 0),
                 T.ACCOMMODATIONLENGTH    = NVL(V_ACCOMMODATIONLENGTH, 0),
                 T.CIRCULATETIME          = NVL(V_CIRCULATETIME, 0),
                 T.FSTSTATIONID           = V_FSTSTATIONID,
                 T.LSTSTATIONID           = V_LSTSTATIONID,
                 T.SUBROUTEID             = V_SUBROUTEID,
                 T.SUBROUTENAME           = V_SUBROUTENAME
           WHERE JZDATE >=
                 TO_DATE(TO_CHAR(V_DATE_IN, 'yyyyMM') || '01', 'yyyyMMdd')
             AND JZDATE <
                 TO_DATE(TO_CHAR(ADD_MONTHS(V_DATE_IN, 1), 'yyyyMM') || '01',
                         'yyyyMMdd')
             AND ROUTEID = V_ROUTEID;
        END IF;
        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          WRITE_EXCEPTION('TREATE_ROUTEBASICDATASTORAGE',
                          '线路基础数据结存表－' || V_ROUTEID,
                          V_DATE,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP;
    COMMIT;
    TREATE_ROUTEBASICDATA_ORG(V_DATE_IN);
    TREATE_ROUTEBASICDATA_YEAR(V_DATE_IN);
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      WRITE_EXCEPTION('TREATE_ROUTEBASICDATASTORAGE',
                      '线路基础数据结存表',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTETYPEPHASESTORAGE                                                *
  *                                                                                      *
  *    功能：按线路类型指标结存表                                                        *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETYPEPHASESTORAGE(V_DATE DATE) AS
    V_DATE_IN     DATE := TRUNC(V_DATE);
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    -- 全部 0
    BEGIN
      WRITE_LOG('TREATE_ROUTETYPEPHASESTORAGE',
                '按线路类型指标结存表－全部',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_ROUTETYPEPHASESTORAGE T
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEROUTETYPEFSTTYPE = '0';
      --各级组织
      INSERT INTO JZ_ROUTETYPEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STORAGEROUTETYPEFSTTYPE,
         STORAGEROUTETYPEFSTNAME,
         STORAGEROUTETYPESCDTYPE,
         STORAGEROUTETYPESCDNAME,
         ROUTECOUNT,
         ROUTELENGTH,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ORGID AS ORGID,
               T.ORGNAME AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '0' AS STORAGEROUTETYPEFSTTYPE,
               '全部' AS STORAGEROUTETYPEFSTNAME,
               NULL AS STORAGEROUTETYPESCDTYPE,
               NULL AS STORAGEROUTETYPESCDNAME,
               NVL(T.ROUTECOUNT, 0) AS ROUTECOUNT,
               NVL(T.ROUTELENGTH, 0) AS ROUTELENGTH,
               '2' AS DATASAVELEVEL,
               T.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORG.ORGID,
                       ORG.ORGNAME,
                       ORG.ORGGRADE,
                       O.ROUTECOUNT,
                       O.ROUTELENGTH
                  FROM MCORGINFOVW ORG,
                       (SELECT ORG.PARENTORGID AS ORGID,
                               COUNT(*) AS ROUTECOUNT,
                               SUM(JZ.ROUTELENGTH) AS ROUTELENGTH
                          FROM JZ_ORGGRADETREE               ORG,
                               MCROUTEINFOVW                 ROUTE,
                               JZ_ROUTEBASICDATAPHASESTORAGE JZ
                         WHERE ORG.ORGID = ROUTE.ORGID
                           AND ROUTE.ROUTEID = JZ.ROUTEID(+)
                           AND JZ.DATASAVELEVEL = '2' --月
                           AND JZ.STORAGEORGTYPE = '4' --线路
                           AND JZ.JZDATE >= V_BEGIN_MONTH
                           AND JZ.JZDATE < V_END_MONTH
                         GROUP BY ORG.PARENTORGID) O
                 WHERE ORG.ORGID = O.ORGID(+)) T;
      COMMIT;
      WRITE_LOG('TREATE_ROUTETYPEPHASESTORAGE',
                '按线路类型指标结存表－全部',
                V_DATE_IN,
                '结束');
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('TREATE_ROUTETYPEPHASESTORAGE',
                        '按线路类型指标结存表－全部',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --线路级别  1
    BEGIN
      WRITE_LOG('TREATE_ROUTETYPEPHASESTORAGE',
                '按线路类型指标结存表－线路级别',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_ROUTETYPEPHASESTORAGE T
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEROUTETYPEFSTTYPE = '1';
      --各级组织
      INSERT INTO JZ_ROUTETYPEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STORAGEROUTETYPEFSTTYPE,
         STORAGEROUTETYPEFSTNAME,
         STORAGEROUTETYPESCDTYPE,
         STORAGEROUTETYPESCDNAME,
         ROUTECOUNT,
         ROUTELENGTH,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ORGID AS ORGID,
               T.ORGNAME AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '1' AS STORAGEROUTETYPEFSTTYPE,
               '线路级别' AS STORAGEROUTETYPEFSTNAME,
               T.ROUTEGRADE AS STORAGEROUTETYPESCDTYPE,
               T.ROUTEGRADENAME AS STORAGEROUTETYPESCDNAME,
               NVL(T.ROUTECOUNT, 0) AS ROUTECOUNT,
               NVL(T.ROUTELENGTH, 0) AS ROUTELENGTH,
               '2' AS DATASAVELEVEL,
               T.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORG.ORGID,
                       ORG.ORGNAME,
                       ORG.ORGGRADE,
                       O.ROUTEGRADE,
                       P.ITEMKEY AS ROUTEGRADENAME,
                       O.ROUTECOUNT,
                       O.ROUTELENGTH
                  FROM MCORGINFOVW ORG,
                       (SELECT ORG.PARENTORGID AS ORGID,
                               ROUTE.ROUTEGRADE,
                               COUNT(*) AS ROUTECOUNT,
                               SUM(JZ.ROUTELENGTH) AS ROUTELENGTH
                          FROM JZ_ORGGRADETREE               ORG,
                               MCROUTEINFOVW                 ROUTE,
                               JZ_ROUTEBASICDATAPHASESTORAGE JZ
                         WHERE ORG.ORGID = ROUTE.ORGID
                           AND ROUTE.ROUTEID = JZ.ROUTEID(+)
                           AND JZ.DATASAVELEVEL = '2' --月
                           AND JZ.STORAGEORGTYPE = '4' --线路
                           AND JZ.JZDATE >= V_BEGIN_MONTH
                           AND JZ.JZDATE < V_END_MONTH
                         GROUP BY ORG.PARENTORGID, ROUTE.ROUTEGRADE) O,
                       (SELECT *
                          FROM TYPEENTRY T
                         WHERE T.TYPENAME = 'ROUTEGRADE') P
                 WHERE ORG.ORGID = O.ORGID(+)
                   AND O.ROUTEGRADE = P.ITEMVALUE(+)) T;
      COMMIT;
      WRITE_LOG('TREATE_ROUTETYPEPHASESTORAGE',
                '按线路类型指标结存表－线路级别',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('TREATE_ROUTETYPEPHASESTORAGE',
                        '按线路类型指标结存表－线路级别',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --线路类型  2
    BEGIN
      WRITE_LOG('TREATE_ROUTETYPEPHASESTORAGE',
                '按线路类型指标结存表－线路类型',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_ROUTETYPEPHASESTORAGE T
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGEROUTETYPEFSTTYPE = '2';
      --各级组织
      INSERT INTO JZ_ROUTETYPEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STORAGEROUTETYPEFSTTYPE,
         STORAGEROUTETYPEFSTNAME,
         STORAGEROUTETYPESCDTYPE,
         STORAGEROUTETYPESCDNAME,
         ROUTECOUNT,
         ROUTELENGTH,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ORGID AS ORGID,
               T.ORGNAME AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '2' AS STORAGEROUTETYPEFSTTYPE,
               '线路类型' AS STORAGEROUTETYPEFSTNAME,
               T.ROUTETYPE AS STORAGEROUTETYPESCDTYPE,
               T.ROUTETYPENAME AS STORAGEROUTETYPESCDNAME,
               NVL(T.ROUTECOUNT, 0) AS ROUTECOUNT,
               NVL(T.ROUTELENGTH, 0) AS ROUTELENGTH,
               '2' AS DATASAVELEVEL,
               T.ORGGRADE AS STORAGEORGTYPE
          FROM (SELECT ORG.ORGID,
                       ORG.ORGNAME,
                       ORG.ORGGRADE,
                       O.ROUTETYPE,
                       P.ITEMKEY AS ROUTETYPENAME,
                       O.ROUTECOUNT,
                       O.ROUTELENGTH
                  FROM MCORGINFOVW ORG,
                       (SELECT ORG.PARENTORGID AS ORGID,
                               ROUTE.ROUTETYPE,
                               COUNT(*) AS ROUTECOUNT,
                               SUM(JZ.ROUTELENGTH) AS ROUTELENGTH
                          FROM JZ_ORGGRADETREE               ORG,
                               MCROUTEINFOVW                 ROUTE,
                               JZ_ROUTEBASICDATAPHASESTORAGE JZ
                         WHERE ORG.ORGID = ROUTE.ORGID
                           AND ROUTE.ROUTEID = JZ.ROUTEID(+)
                           AND JZ.DATASAVELEVEL = '2' --月
                           AND JZ.STORAGEORGTYPE = '4' --线路
                           AND JZ.JZDATE >= V_BEGIN_MONTH
                           AND JZ.JZDATE < V_END_MONTH
                         GROUP BY ORG.PARENTORGID, ROUTE.ROUTETYPE) O,
                       (SELECT *
                          FROM TYPEENTRY T
                         WHERE T.TYPENAME = 'ROUTETYPE') P
                 WHERE ORG.ORGID = O.ORGID(+)
                   AND O.ROUTETYPE = P.ITEMVALUE(+)) T;
      COMMIT;
      WRITE_LOG('TREATE_ROUTETYPEPHASESTORAGE',
                '按线路类型指标结存表－线路类型',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('TREATE_ROUTETYPEPHASESTORAGE',
                        '按线路类型指标结存表－线路类型',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：TREATE_SITEPHASESTORAGE                                                     *
  *                                                                                      *
  *    功能：场站数据结存表                                                              *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_SITEPHASESTORAGE(V_DATE DATE) AS
    V_DATE_IN     DATE := TRUNC(V_DATE);
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    -- 全部 0
    BEGIN
      WRITE_LOG('TREATE_SITEPHASESTORAGE',
                '场站数据结存表－全部',
                V_DATE,
                '开始');
      --删除全部数据
      DELETE JZ_SITEPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STATISTICTYPE = '0';
      INSERT INTO JZ_SITEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STATISTICTYPE,
         STATISTICNAME,
         STORAGESITEFIRSTTYPE,
         STORAGESITEFIRSTNAME,
         STORAGESITESECONDTYPE,
         STORAGESITESECONDNAME,
         SITECOUNT,
         SITEACRE,
         SITECAPABILITY,
         SITEREQUREMENTCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '0' AS STATISTICTYPE,
               '全部' AS STATISTICNAME,
               T.SITETYPE AS STORAGESITEFIRSTTYPE,
               P.ITEMKEY AS STORAGESITEFIRSTNAME,
               '' AS STORAGESITESECONDTYPE,
               '' AS STORAGESITESECONDNAME,
               NVL(T.SITECOUNT, 0) AS SITECOUNT,
               NVL(T.ACREAGES, 0) AS SITEACRE,
               NVL(T.SITECAPIBILITYS, 0) AS SITECAPABILITY,
               NVL(T.ACTUALBUSCOUNT, 0) AS SITEREQUREMENTCOUNT,
               '2' DATASAVELEVEL
          FROM (SELECT SITETYPE,
                       COUNT(*) SITECOUNT,
                       SUM(NVL(SITECAPIBILITY, 0)) AS SITECAPIBILITYS,
                       SUM(NVL(ACREAGE, 0)) AS ACREAGES,
                       SUM(NVL(ACTUALBUSCOUNT, 0)) AS ACTUALBUSCOUNT
                  FROM (SELECT CASE TO_CHAR(T.SITETYPE)
                                 WHEN '6' THEN
                                  '7'
                                 ELSE
                                  TO_CHAR(T.SITETYPE)
                               END AS SITETYPE,
                               T.SITECAPIBILITY,
                               T.ACREAGE,
                               T.ACTUALBUSCOUNT
                          FROM MCSITEINFOGS T)
                 GROUP BY SITETYPE) T,
               (SELECT *
                  FROM TYPEENTRY
                 WHERE TYPENAME = 'STORAGESITEFIRSTTYPE') P
         WHERE T.SITETYPE = P.ITEMVALUE(+);
      COMMIT;
      WRITE_LOG('TREATE_SITEPHASESTORAGE',
                '场站数据结存表－全部',
                V_DATE,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('TREATE_SITEPHASESTORAGE',
                        '场站数据结存表－全部',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --按规模或等级统计  1
    BEGIN
      WRITE_LOG('TREATE_SITEPHASESTORAGE',
                '场站数据结存表－按规模或等级统计',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_SITEPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STATISTICTYPE = '1';
      INSERT INTO JZ_SITEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STATISTICTYPE,
         STATISTICNAME,
         STORAGESITEFIRSTTYPE,
         STORAGESITEFIRSTNAME,
         STORAGESITESECONDTYPE,
         STORAGESITESECONDNAME,
         SITECOUNT,
         SITEACRE,
         SITECAPABILITY,
         SITEREQUREMENTCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '1' AS STATISTICTYPE,
               '按规模或等级统计' AS STATISTICNAME,
               T.SITETYPE AS STORAGESITEFIRSTTYPE,
               P.ITEMKEY AS STORAGESITEFIRSTNAME,
               T.SITELEVEL AS STORAGESITESECONDTYPE,
               T.SITELEVELNAME AS STORAGESITESECONDNAME,
               NVL(T.SITECOUNT, 0) AS SITECOUNT,
               NVL(T.ACREAGES, 0) AS SITEACRE,
               NVL(T.SITECAPIBILITYS, 0) AS SITECAPABILITY,
               NVL(T.ACTUALBUSCOUNT, 0) AS SITEREQUREMENTCOUNT,
               '2' DATASAVELEVEL
          FROM (SELECT S.SITETYPE,
                       S.SITELEVEL,
                       P.ITEMKEY AS SITELEVELNAME,
                       COUNT(*) SITECOUNT,
                       SUM(NVL(SITECAPIBILITY, 0)) AS SITECAPIBILITYS,
                       SUM(NVL(ACREAGE, 0)) AS ACREAGES,
                       SUM(NVL(ACTUALBUSCOUNT, 0)) AS ACTUALBUSCOUNT
                  FROM (SELECT CASE TO_CHAR(T.SITETYPE)
                                 WHEN '6' THEN
                                  '7'
                                 ELSE
                                  TO_CHAR(T.SITETYPE)
                               END AS SITETYPE,
                               T.SITELEVEL,
                               T.SITECAPIBILITY,
                               T.ACREAGE,
                               T.ACTUALBUSCOUNT
                          FROM MCSITEINFOGS T) S,
                       (SELECT '1' AS PITEMVALUE, P1.ITEMKEY, P1.ITEMVALUE
                          FROM TYPEENTRY P1
                         WHERE P1.TYPENAME = 'STOPSITETYPE' --停车场
                        UNION
                        SELECT '3' AS PITEMVALUE,
                               NULL AS ITEMKEY,
                               NULL AS ITEMVALUE
                          FROM DUAL --加油加气站
                        UNION
                        SELECT '5' AS PITEMVALUE, P1.ITEMKEY, P1.ITEMVALUE
                          FROM TYPEENTRY P1
                         WHERE P1.TYPENAME = 'MAINTAINSITETYPE' --维修厂
                        UNION
                        SELECT '7' AS PITEMVALUE, P1.ITEMKEY, P1.ITEMVALUE
                          FROM TYPEENTRY P1
                         WHERE P1.TYPENAME = 'MAINSTATIONTYPE' --主副站
                        ) P
                 WHERE S.SITETYPE = P.PITEMVALUE(+)
                   AND S.SITELEVEL = P.ITEMVALUE(+)
                 GROUP BY SITETYPE, SITELEVEL, P.ITEMKEY) T,
               (SELECT *
                  FROM TYPEENTRY
                 WHERE TYPENAME = 'STORAGESITEFIRSTTYPE') P
         WHERE T.SITETYPE = P.ITEMVALUE(+);
    
      COMMIT;
      WRITE_LOG('TREATE_SITEPHASESTORAGE',
                '场站数据结存表－按规模或等级统计',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('TREATE_SITEPHASESTORAGE',
                        '场站数据结存表－按规模或等级统计',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --按地区类型RegionLevel统计  2
    BEGIN
      WRITE_LOG('TREATE_SITEPHASESTORAGE',
                '场站数据结存表－按地区类型RegionLevel统计',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_SITEPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STATISTICTYPE = '2';
      INSERT INTO JZ_SITEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STATISTICTYPE,
         STATISTICNAME,
         STORAGESITEFIRSTTYPE,
         STORAGESITEFIRSTNAME,
         STORAGESITESECONDTYPE,
         STORAGESITESECONDNAME,
         SITECOUNT,
         SITEACRE,
         SITECAPABILITY,
         SITEREQUREMENTCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '2' AS STATISTICTYPE,
               '按地区类型RegionLevel统计' AS STATISTICNAME,
               T.SITETYPE AS STORAGESITEFIRSTTYPE,
               P.ITEMKEY AS STORAGESITEFIRSTNAME,
               T.REGIONLEVEL AS STORAGESITESECONDTYPE,
               T.REGIONLEVELNAME AS STORAGESITESECONDNAME,
               NVL(T.SITECOUNT, 0) AS SITECOUNT,
               NVL(T.ACREAGES, 0) AS SITEACRE,
               NVL(T.SITECAPIBILITYS, 0) AS SITECAPABILITY,
               NVL(T.ACTUALBUSCOUNT, 0) AS SITEREQUREMENTCOUNT,
               '2' DATASAVELEVEL
          FROM (SELECT S.SITETYPE,
                       S.REGIONLEVEL,
                       P.ITEMKEY AS REGIONLEVELNAME,
                       COUNT(*) SITECOUNT,
                       SUM(NVL(SITECAPIBILITY, 0)) AS SITECAPIBILITYS,
                       SUM(NVL(ACREAGE, 0)) AS ACREAGES,
                       SUM(NVL(ACTUALBUSCOUNT, 0)) AS ACTUALBUSCOUNT
                  FROM (SELECT CASE TO_CHAR(T.SITETYPE)
                                 WHEN '6' THEN
                                  '7'
                                 ELSE
                                  TO_CHAR(T.SITETYPE)
                               END AS SITETYPE,
                               T.REGIONLEVEL,
                               T.SITECAPIBILITY,
                               T.ACREAGE,
                               T.ACTUALBUSCOUNT
                          FROM MCSITEINFOGS T) S,
                       (SELECT ITEMKEY, ITEMVALUE
                          FROM TYPEENTRY
                         WHERE TYPENAME = 'REGIONLEVEL') P
                 WHERE S.REGIONLEVEL = P.ITEMVALUE(+)
                 GROUP BY S.SITETYPE, S.REGIONLEVEL, P.ITEMKEY) T,
               (SELECT *
                  FROM TYPEENTRY
                 WHERE TYPENAME = 'STORAGESITEFIRSTTYPE') P
         WHERE T.SITETYPE = P.ITEMVALUE(+);
      COMMIT;
      WRITE_LOG('TREATE_SITEPHASESTORAGE',
                '场站数据结存表－按地区类型RegionLevel统计',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('TREATE_SITEPHASESTORAGE',
                        '场站数据结存表－按地区类型RegionLevel统计',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --按行政区域RegionArea统计 3
    BEGIN
      WRITE_LOG('TREATE_SITEPHASESTORAGE',
                '场站数据结存表－按行政区域RegionArea统计',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_SITEPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STATISTICTYPE = '3';
      INSERT INTO JZ_SITEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STATISTICTYPE,
         STATISTICNAME,
         STORAGESITEFIRSTTYPE,
         STORAGESITEFIRSTNAME,
         STORAGESITESECONDTYPE,
         STORAGESITESECONDNAME,
         SITECOUNT,
         SITEACRE,
         SITECAPABILITY,
         SITEREQUREMENTCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '3' AS STATISTICTYPE,
               '按行政区域RegionArea统计' AS STATISTICNAME,
               T.SITETYPE AS STORAGESITEFIRSTTYPE,
               P.ITEMKEY AS STORAGESITEFIRSTNAME,
               T.REGIONAREA AS STORAGESITESECONDTYPE,
               T.REGIONAREANAME AS STORAGESITESECONDNAME,
               NVL(T.SITECOUNT, 0) AS SITECOUNT,
               NVL(T.ACREAGES, 0) AS SITEACRE,
               NVL(T.SITECAPIBILITYS, 0) AS SITECAPABILITY,
               NVL(T.ACTUALBUSCOUNT, 0) AS SITEREQUREMENTCOUNT,
               '2' DATASAVELEVEL
          FROM (SELECT S.SITETYPE,
                       S.REGIONAREA,
                       P.ITEMKEY AS REGIONAREANAME,
                       COUNT(*) SITECOUNT,
                       SUM(NVL(SITECAPIBILITY, 0)) AS SITECAPIBILITYS,
                       SUM(NVL(ACREAGE, 0)) AS ACREAGES,
                       SUM(NVL(ACTUALBUSCOUNT, 0)) AS ACTUALBUSCOUNT
                  FROM (SELECT CASE TO_CHAR(T.SITETYPE)
                                 WHEN '6' THEN
                                  '7'
                                 ELSE
                                  TO_CHAR(T.SITETYPE)
                               END AS SITETYPE,
                               T.REGIONAREA,
                               T.SITECAPIBILITY,
                               T.ACREAGE,
                               T.ACTUALBUSCOUNT
                          FROM MCSITEINFOGS T) S,
                       (SELECT ITEMKEY, ITEMVALUE
                          FROM TYPEENTRY
                         WHERE TYPENAME = 'REGIONAREA') P
                 WHERE S.REGIONAREA = P.ITEMVALUE(+)
                 GROUP BY S.SITETYPE, S.REGIONAREA, P.ITEMKEY) T,
               (SELECT *
                  FROM TYPEENTRY
                 WHERE TYPENAME = 'STORAGESITEFIRSTTYPE') P
         WHERE T.SITETYPE = P.ITEMVALUE(+);
      COMMIT;
      WRITE_LOG('TREATE_SITEPHASESTORAGE',
                '场站数据结存表－按行政区域RegionArea统计',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('TREATE_SITEPHASESTORAGE',
                        '场站数据结存表－按行政区域RegionArea统计',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --是否占用道路  4
    BEGIN
      WRITE_LOG('TREATE_SITEPHASESTORAGE',
                '场站数据结存表－是否占用道路',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_SITEPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STATISTICTYPE = '4';
      INSERT INTO JZ_SITEPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         JZDATE,
         STATISTICTYPE,
         STATISTICNAME,
         STORAGESITEFIRSTTYPE,
         STORAGESITEFIRSTNAME,
         STORAGESITESECONDTYPE,
         STORAGESITESECONDNAME,
         SITECOUNT,
         SITEACRE,
         SITECAPABILITY,
         SITEREQUREMENTCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               V_DATE_IN AS JZDATE,
               '4' AS STATISTICTYPE,
               '占用道路' AS STATISTICNAME,
               T.SITETYPE AS STORAGESITEFIRSTTYPE,
               P.ITEMKEY AS STORAGESITEFIRSTNAME,
               '' AS STORAGESITESECONDTYPE,
               '' AS STORAGESITESECONDNAME,
               NVL(T.SITECOUNT, 0) AS SITECOUNT,
               NVL(T.ACREAGES, 0) AS SITEACRE,
               NVL(T.SITECAPIBILITYS, 0) AS SITECAPABILITY,
               NVL(T.ACTUALBUSCOUNT, 0) AS SITEREQUREMENTCOUNT,
               '2' DATASAVELEVEL
          FROM (SELECT SITETYPE,
                       COUNT(*) SITECOUNT,
                       SUM(NVL(SITECAPIBILITY, 0)) AS SITECAPIBILITYS,
                       SUM(NVL(ACREAGE, 0)) AS ACREAGES,
                       SUM(NVL(ACTUALBUSCOUNT, 0)) AS ACTUALBUSCOUNT
                  FROM (SELECT CASE TO_CHAR(T.SITETYPE)
                                 WHEN '6' THEN
                                  '7'
                                 ELSE
                                  TO_CHAR(T.SITETYPE)
                               END AS SITETYPE,
                               T.SITECAPIBILITY,
                               T.ACREAGE,
                               T.ACTUALBUSCOUNT
                          FROM MCSITEINFOGS T
                         WHERE T.ISUSEROAD = '1')
                 GROUP BY SITETYPE) T,
               (SELECT *
                  FROM TYPEENTRY
                 WHERE TYPENAME = 'STORAGESITEFIRSTTYPE') P
         WHERE T.SITETYPE = P.ITEMVALUE(+);
      COMMIT;
      WRITE_LOG('TREATE_SITEPHASESTORAGE',
                '场站数据结存表－是否占用道路',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('TREATE_SITEPHASESTORAGE',
                        '场站数据结存表－是否占用道路',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：站点数据结存表                                                              *
  *                                                                                      *
  *    功能：TREATE_STATIONPHASESTORAGE                                                  *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_STATIONPHASESTORAGE(V_DATE DATE) AS
    V_DATE_IN     DATE := TRUNC(V_DATE);
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    WRITE_LOG('TREATE_STATIONPHASESTORAGE',
              '站点数据结存表',
              V_DATE_IN,
              '开始');
    -- 全部  0
    BEGIN
      WRITE_LOG('TREATE_STATIONPHASESTORAGE',
                '站点数据结存表－全部',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE FROM JZ_STATIONPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGESTATIONFIRSTTYPE = '0';
      COMMIT;
      --全部 0
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               NULL AS REGIONLEVEL,
               NULL AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '0' AS STORAGESTATIONFIRSTTYPE,
               '全部' AS STORAGESTATIONFIRSTNAME,
               '0' AS STORAGESTATIONSECONDTYPE,
               '全部' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.ISACTIVE = '1') T;
      --港湾停靠站 1
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               NULL AS REGIONLEVEL,
               NULL AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '0' AS STORAGESTATIONFIRSTTYPE,
               '全部' AS STORAGESTATIONFIRSTNAME,
               '1' AS STORAGESTATIONSECONDTYPE,
               '港湾停靠站' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.ISFLEETSTATION = '1'
                   AND T.ISACTIVE = '1') T;
      --枢纽站 2
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               NULL AS REGIONLEVEL,
               NULL AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '0' AS STORAGESTATIONFIRSTTYPE,
               '全部' AS STORAGESTATIONFIRSTNAME,
               '2' AS STORAGESTATIONSECONDTYPE,
               '枢纽站' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.ISHANGESTATION = '1'
                   AND T.ISACTIVE = '1') T;
      --候车亭 3
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               NULL AS REGIONLEVEL,
               NULL AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '0' AS STORAGESTATIONFIRSTTYPE,
               '全部' AS STORAGESTATIONFIRSTNAME,
               '3' AS STORAGESTATIONSECONDTYPE,
               '候车亭' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.HASWAITINGBOISK = '1'
                   AND T.ISACTIVE = '1') T;
      --电子站牌 4
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               NULL AS REGIONLEVEL,
               NULL AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '0' AS STORAGESTATIONFIRSTTYPE,
               '全部' AS STORAGESTATIONFIRSTNAME,
               '4' AS STORAGESTATIONSECONDTYPE,
               '电子站牌' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.HASELEBOARD = '1'
                   AND T.ISACTIVE = '1') T;
      COMMIT;
      WRITE_LOG('TREATE_STATIONPHASESTORAGE',
                '站点数据结存表－全部',
                V_DATE_IN,
                '结束');
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('TREATE_STATIONPHASESTORAGE',
                        '站点数据结存表－全部',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
  
    -- 按地区类型RegionLevel统计 1
    BEGIN
      WRITE_LOG('TREATE_STATIONPHASESTORAGE',
                '站点数据结存表－按地区类型RegionLevel统计',
                V_DATE,
                '开始');
      --删除全部数据
      DELETE JZ_STATIONPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGESTATIONFIRSTTYPE = '1';
      --全部 0
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               T.REGIONLEVEL AS REGIONLEVEL,
               P.ITEMKEY AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '1' AS STORAGESTATIONFIRSTTYPE,
               '按地区类型RegionLevel统计' AS STORAGESTATIONFIRSTNAME,
               '0' AS STORAGESTATIONSECONDTYPE,
               '全部' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT T.REGIONLEVEL AS REGIONLEVEL,
                       COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.ISACTIVE = '1'
                 GROUP BY T.REGIONLEVEL) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'REGIONLEVEL') P
         WHERE T.REGIONLEVEL = P.ITEMVALUE(+);
      --港湾停靠站 1
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               T.REGIONLEVEL AS REGIONLEVEL,
               P.ITEMKEY AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '1' AS STORAGESTATIONFIRSTTYPE,
               '按地区类型RegionLevel统计' AS STORAGESTATIONFIRSTNAME,
               '1' AS STORAGESTATIONSECONDTYPE,
               '港湾停靠站' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT T.REGIONLEVEL AS REGIONLEVEL,
                       COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.ISFLEETSTATION = '1'
                   AND T.ISACTIVE = '1'
                 GROUP BY T.REGIONLEVEL) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'REGIONLEVEL') P
         WHERE T.REGIONLEVEL = P.ITEMVALUE(+);
      --枢纽站 2
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               T.REGIONLEVEL AS REGIONLEVEL,
               P.ITEMKEY AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '1' AS STORAGESTATIONFIRSTTYPE,
               '按地区类型RegionLevel统计' AS STORAGESTATIONFIRSTNAME,
               '2' AS STORAGESTATIONSECONDTYPE,
               '枢纽站' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT T.REGIONLEVEL AS REGIONLEVEL,
                       COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.ISHANGESTATION = '1'
                   AND T.ISACTIVE = '1'
                 GROUP BY T.REGIONLEVEL) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'REGIONLEVEL') P
         WHERE T.REGIONLEVEL = P.ITEMVALUE(+);
      --候车亭 3
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               T.REGIONLEVEL AS REGIONLEVEL,
               P.ITEMKEY AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '1' AS STORAGESTATIONFIRSTTYPE,
               '按地区类型RegionLevel统计' AS STORAGESTATIONFIRSTNAME,
               '3' AS STORAGESTATIONSECONDTYPE,
               '候车亭' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT T.REGIONLEVEL AS REGIONLEVEL,
                       COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.HASWAITINGBOISK = '1'
                   AND T.ISACTIVE = '1'
                 GROUP BY T.REGIONLEVEL) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'REGIONLEVEL') P
         WHERE T.REGIONLEVEL = P.ITEMVALUE(+);
      --电子站牌 4
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               T.REGIONLEVEL AS REGIONLEVEL,
               P.ITEMKEY AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '1' AS STORAGESTATIONFIRSTTYPE,
               '按地区类型RegionLevel统计' AS STORAGESTATIONFIRSTNAME,
               '4' AS STORAGESTATIONSECONDTYPE,
               '电子站牌' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT T.REGIONLEVEL AS REGIONLEVEL,
                       COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.HASELEBOARD = '1'
                   AND T.ISACTIVE = '1'
                 GROUP BY T.REGIONLEVEL) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'REGIONLEVEL') P
         WHERE T.REGIONLEVEL = P.ITEMVALUE(+);
      COMMIT;
      WRITE_LOG('TREATE_STATIONPHASESTORAGE',
                '站点数据结存表－按地区类型RegionLevel统计',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('TREATE_STATIONPHASESTORAGE',
                        '站点数据结存表－按地区类型RegionLevel统计',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    -- 按行政区域RegionArea统计 2
    BEGIN
      WRITE_LOG('TREATE_STATIONPHASESTORAGE',
                '站点数据结存表－按行政区域RegionArea统计',
                V_DATE_IN,
                '开始');
      --删除全部数据
      DELETE JZ_STATIONPHASESTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND STORAGESTATIONFIRSTTYPE = '2';
      --全部 0
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               T.REGIONAREA AS REGIONLEVEL,
               P.ITEMKEY AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '2' AS STORAGESTATIONFIRSTTYPE,
               '按行政区域RegionArea统计' AS STORAGESTATIONFIRSTNAME,
               '0' AS STORAGESTATIONSECONDTYPE,
               '全部' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT T.REGIONAREA AS REGIONAREA,
                       COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.ISACTIVE = '1'
                 GROUP BY T.REGIONAREA) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'REGIONAREA') P
         WHERE T.REGIONAREA = P.ITEMVALUE(+);
      --港湾停靠站 1
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               T.REGIONAREA AS REGIONLEVEL,
               P.ITEMKEY AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '2' AS STORAGESTATIONFIRSTTYPE,
               '按行政区域RegionArea统计' AS STORAGESTATIONFIRSTNAME,
               '1' AS STORAGESTATIONSECONDTYPE,
               '港湾停靠站' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT T.REGIONAREA AS REGIONAREA,
                       COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.ISFLEETSTATION = '1'
                   AND T.ISACTIVE = '1'
                 GROUP BY T.REGIONAREA) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'REGIONAREA') P
         WHERE T.REGIONAREA = P.ITEMVALUE(+);
      --枢纽站 2
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               T.REGIONAREA AS REGIONLEVEL,
               P.ITEMKEY AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '2' AS STORAGESTATIONFIRSTTYPE,
               '按行政区域RegionArea统计' AS STORAGESTATIONFIRSTNAME,
               '2' AS STORAGESTATIONSECONDTYPE,
               '枢纽站' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT T.REGIONAREA AS REGIONAREA,
                       COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.ISHANGESTATION = '1'
                   AND T.ISACTIVE = '1'
                 GROUP BY T.REGIONAREA) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'REGIONAREA') P
         WHERE T.REGIONAREA = P.ITEMVALUE(+);
      --候车亭 3
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               T.REGIONAREA AS REGIONLEVEL,
               P.ITEMKEY AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '2' AS STORAGESTATIONFIRSTTYPE,
               '按行政区域RegionArea统计' AS STORAGESTATIONFIRSTNAME,
               '3' AS STORAGESTATIONSECONDTYPE,
               '候车亭' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT T.REGIONAREA AS REGIONAREA,
                       COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.HASWAITINGBOISK = '1'
                   AND T.ISACTIVE = '1'
                 GROUP BY T.REGIONAREA) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'REGIONAREA') P
         WHERE T.REGIONAREA = P.ITEMVALUE(+);
      --电子站牌 4
      INSERT INTO JZ_STATIONPHASESTORAGE
        (RECORDID,
         ORGID,
         ORGNAME,
         AREATYPE,
         AREANAME,
         JZDATE,
         STORAGESTATIONFIRSTTYPE,
         STORAGESTATIONFIRSTNAME,
         STORAGESTATIONSECONDTYPE,
         STORAGESTATIONSECONDNAME,
         STATIONCOUNT,
         STATIONLENGTH,
         STATIONSTOPBUSCOUNT,
         DATASAVELEVEL)
        SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
               NULL AS ORGID,
               NULL AS ORGNAME,
               T.REGIONAREA AS REGIONLEVEL,
               P.ITEMKEY AS REGIONLEVELNAME,
               V_DATE_IN AS JZDATE,
               '2' AS STORAGESTATIONFIRSTTYPE,
               '按行政区域RegionArea统计' AS STORAGESTATIONFIRSTNAME,
               '4' AS STORAGESTATIONSECONDTYPE,
               '电子站牌' AS STORAGESTATIONSECONDNAME,
               NVL(T.STATIONCOUNT, 0) AS STATIONCOUNT,
               NVL(T.MAXSTATIONLENGTH, 0) AS STATIONLENGTH,
               NVL(T.MAXFLEETSTATIONBUSCOUNT, 0) AS STATIONSTOPBUSCOUNT,
               '2' AS DATASAVELEVEL
          FROM (SELECT T.REGIONAREA AS REGIONAREA,
                       COUNT(*) STATIONCOUNT,
                       MAX(NVL(T.STATIONLENGTH, 0)) AS MAXSTATIONLENGTH,
                       MIN(NVL(T.STATIONLENGTH, 0)) AS MINSTATIONLENGTH,
                       MAX(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MAXFLEETSTATIONBUSCOUNT,
                       MIN(NVL(T.FLEETSTATIONBUSCOUNT, 0)) AS MINFLEETSTATIONBUSCOUNT
                  FROM MCSTATIONINFOGS T
                 WHERE T.HASELEBOARD = '1'
                   AND T.ISACTIVE = '1'
                 GROUP BY T.REGIONAREA) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'REGIONAREA') P
         WHERE T.REGIONAREA = P.ITEMVALUE(+);
      COMMIT;
      WRITE_LOG('TREATE_STATIONPHASESTORAGE',
                '站点数据结存表－按行政区域RegionArea统计',
                V_DATE_IN,
                '结束');
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('TREATE_STATIONPHASESTORAGE',
                        '站点数据结存表－按行政区域RegionArea统计',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：线路地图数据更新                                                              *
  *                                                                                       *
  *    功能：TREATE_ROUTEINFO_MAP                                                         *
  *                                                                                       *
  *    作者：huhuimin                                                                     *
  *    日期：2013-12-26                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEINFO_MAP(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    WRITE_LOG('TREATE_ROUTEINFO_MAP',
              '地图信息数据处理―线路信息',
              V_DATE_IN,
              '开始');
    --删除数据表原有数据
    DELETE FROM MCROUTEINFOGS_MAP;
    --插入更新的数据
    INSERT INTO MCROUTEINFOGS_MAP
      (SEGMENTID,
       SEGMENTNAME,
       SUBROUTENAME,
       RUNDIRECTION,
       SNGMILE,
       SNGTIME,
       ACCOMMODATIONLENGTH,
       FSTANDLSTSTATIONNAME,
       STATIONNUM,
       ROUTEID,
       ROUTENAME,
       ORGNAME,
       FSTANDLSTTIME)
      SELECT T.SEGMENTID,
             T.SEGMENTNAME,
             SUB.SUBROUTENAME,
             TY1.ITEMKEY AS RUNDIRECTION,
             T.SNGMILE,
             T.SNGTIME,
             T.ACCOMMODATIONLENGTH,
             STA1.STATIONNAME || '-' || STA2.STATIONNAME AS FSTANDLSTSTATIONNAME,
             T.STATIONNUM,
             T.ROUTEID,
             ROU.ROUTENAME,
             ORG.ORGNAME,
             (CASE
               WHEN TO_CHAR(T.FSTSENDTIME, 'HH24:MI:SS') = '00:00:00' OR
                    TO_CHAR(T.LSTSENTIME, 'HH24:MI:SS') = '00:00:00' OR
                    T.FSTSENDTIME IS NULL OR T.LSTSENTIME IS NULL THEN
                ''
               ELSE
                TO_CHAR(T.FSTSENDTIME, 'HH24:MI:SS') || '-' ||
                TO_CHAR(T.LSTSENTIME, 'HH24:MI:SS')
             END) FSTANDLSTTIME
        FROM MCSEGMENTINFOGS T,
             MCSUBROUTEINFOGS SUB,
             TYPEENTRY TY1,
             MCSTATIONINFOGS STA1,
             MCSTATIONINFOGS STA2,
             MCROUTEINFOVW ROU,
             (SELECT ORG2.ORGID, ORG.ORGNAME
                FROM MCORGINFOVW ORG,
                     (SELECT ORGID, PARENTORGID FROM MCORGINFOVW) ORG2
               WHERE ORG.ORGID = ORG2.PARENTORGID
                 AND ORG.ORGGRADE = 2) ORG
       WHERE T.SUBROUTEID = SUB.SUBROUTEID(+)
         AND TY1.TYPENAME = 'RUNDIRECTION'
         AND T.RUNDIRECTION = TY1.ITEMVALUE
         AND T.ISACTIVE='1'
         AND SUB.ISACTIVE='1'
         AND SUB.BEGINDATE <= V_DATE_IN
         AND SUB.ENDDATE >= V_DATE_IN
         AND T.FSTSTATIONID = STA1.STATIONID(+)
         AND T.LSTSTATIONID = STA2.STATIONID(+)
         AND T.ROUTEID = ROU.ROUTEID(+)
         AND ROU.ORGID = ORG.ORGID(+);
    COMMIT;
    WRITE_LOG('TREATE_ROUTEINFO_MAP',
              '地图信息数据处理―线路信息',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTEINFO_MAP',
                      '地图信息数据处理―线路信息',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：站点地图数据更新                                                              *
  *                                                                                       *
  *    功能：TREATE_STATIONINFO_MAP                                                       *
  *                                                                                       *
  *    作者：huhuimin                                                                     *
  *    日期：2013-12-26                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_STATIONINFO_MAP(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    WRITE_LOG('TREATE_STATIONINFO_MAP',
              '地图信息数据处理―站点信息',
              V_DATE_IN,
              '开始');
    --删除数据表原有数据
    DELETE FROM MCSTATIONINFOGS_MAP;
    --插入更新的数据
    INSERT INTO MCSTATIONINFOGS_MAP
      (STATIONNO,
       STATIONNAME,
       ALIASNAME,
       LONGITUDE,
       LATITUDE,
       STATIONPOSITION,
       REGIONLEVEL,
       HASELEBOARD,
       HASWAITINGBOISK,
       ISHANGESTATION,
       ISFLEETSTATION,
       FLEETSTATIONBUSCOUNT,
       ISMAINFLEETSTATION,
       STATIONLENGTH,
       ROUTEINFO)
      SELECT T.STATIONNO,
             T.STATIONNAME,
             T.ALIASNAME,
             T.LONGITUDE,
             T.LATITUDE,
             T.STATIONPOSITION,
             TY1.ITEMKEY AS REGIONLEVEL,
             TY3.ITEMKEY || '电子站牌' AS HASELEBOARD,
             TY4.ITEMKEY || '候车亭' AS HASWAITINGBOISK,
             (CASE
               WHEN T.ISHANGESTATION = '1' THEN
                '是'
               ELSE
                '不是'
             END) ISHANGESTATION,
             (CASE
               WHEN T.ISFLEETSTATION = '1' THEN
                '是'
               ELSE
                '不是'
             END) ISFLEETSTATION,
             T.FLEETSTATIONBUSCOUNT,
             (CASE
               WHEN T.ISMAINFLEETSTATION = '1' THEN
                '是'
               ELSE
                '不是'
             END) ISMAINFLEETSTATION,
             T.STATIONLENGTH,
             NULL AS ROUTEINFO
        FROM MCSTATIONINFOVW T, TYPEENTRY TY1, TYPEENTRY TY3, TYPEENTRY TY4
       WHERE TY1.TYPENAME = 'REGIONLEVEL'
         AND T.REGIONLEVEL = TY1.ITEMVALUE
         AND TY3.TYPENAME = 'HAS'
         AND T.HASELEBOARD = TY3.ITEMVALUE
         AND TY4.TYPENAME = 'HAS'
         AND T.HASWAITINGBOISK = TY4.ITEMVALUE;
    --更新途经线路信息
    FOR CUR_ROUTEINFO IN (SELECT STA.STATIONID, STA.STATIONNO, ROU.ROUTENAME
                            FROM MCSTATIONINFOVW   STA,
                                 MCRROUTESTATIONGS RSTA,
                                 MCROUTEINFOVW     ROU
                           WHERE STA.STATIONID = RSTA.STATIONID
                             AND ROU.ROUTEID = RSTA.ROUTEID) LOOP
      UPDATE MCSTATIONINFOGS_MAP T
         SET T.ROUTEINFO = T.ROUTEINFO || ',' || CUR_ROUTEINFO.ROUTENAME
       WHERE T.STATIONNO = CUR_ROUTEINFO.STATIONNO
         AND T.ROUTEINFO IS NOT NULL;
      UPDATE MCSTATIONINFOGS_MAP T
         SET T.ROUTEINFO = CUR_ROUTEINFO.ROUTENAME
       WHERE T.STATIONNO = CUR_ROUTEINFO.STATIONNO
         AND T.ROUTEINFO IS NULL;
    END LOOP;
    COMMIT;
    WRITE_LOG('TREATE_STATIONINFO_MAP',
              '地图信息数据处理―站点信息',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_STATIONINFO_MAP',
                      '地图信息数据处理―站点信息',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
END PKG_OSE_BASICDATA;
/

prompt
prompt Creating package body PKG_OSE_BUSARRSTATION
prompt ===========================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_BUSARRSTATION IS
  /***************************************************************************************
  *    名称：WRITE_LOG                                                                   *
  *                                                                                      *
  *    功能：写入日志                                                                    *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2,
                      FUNC_DESC     VARCHAR2,
                      V_DATE        DATE,
                      LOGINFO       VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := SUBSTR(LOGINFO, 1, 250);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '1',
       V_DATE,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /****************************************************************************************
  *    名称：WRITE_EXCEPTION                                                             *
  *                                                                                      *
  *    功能：写入异常日志                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_EXCEPTION(PROCEDURENAME VARCHAR2,
                            FUNC_DESC     VARCHAR2,
                            V_DATE        DATE,
                            ERRORCODE     NUMBER,
                            ERRORTEXT     VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := ERRORCODE || '-' || SUBSTR(ERRORTEXT, 1, 200);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '0',
       V_DATE,
       SYSDATE,
       V_INFO);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  PROCEDURE TREATE_BUSARRSTATION AS
    V_DATE_IN DATE := TRUNC(SYSDATE) - 5;
  BEGIN
    P_IMPORT_BUSARRLFTDATA(V_DATE_IN);
    TREATE_BUSARRSTATION(V_DATE_IN);
  END;
  /****************************************************************************************
  *    名称：P_IMPORT_BUSARRLFTDATA                                                       *
  *                                                                                       *
  *    功能：导入到离站数据                                                               *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2011-05-04                                                                   *
  ****************************************************************************************/
  PROCEDURE P_IMPORT_BUSARRLFTDATA(V_DATE DATE) AS
    V_DATE_IN   DATE;
    V_STARTDATE DATE;
    V_SQL       VARCHAR2(500);
  BEGIN
    V_DATE_IN   := TRUNC(V_DATE);
    V_STARTDATE := SYSDATE;
  
    WRITE_LOG('P_IMPORT_BUSARRLFTDATA',
              '导入到离站数据',
              V_DATE_IN,
              '开始');
    -------------------------------------------------------------------------------------------------
    -- 清除当天到离站数据
    -------------------------------------------------------------------------------------------------
    --SELECT 'TRUNCATE TABLE BSVCBUSARRLFTLD5TEMP' INTO V_SQL FROM DUAL;
    --EXECUTE IMMEDIATE V_SQL;
    --COMMIT;
    -------------------------------------------------------------------------------------------------
    -- 分时段导入到离站数据
    -------------------------------------------------------------------------------------------------
    FOR CUR IN 1 + (G_START_TIME * 24) .. 24 + (G_START_TIME * 24) LOOP
      BEGIN
        INSERT /*+append*/
        INTO BSVCBUSARRLFTLD5TEMP
          (BUSRDID,
           DATATYPE,
           ROUTEID,
           SUBROUTEID,
           PRODUCTID,
           STATIONSEQNUM,
           STATIONNUM,
           ISARRLFT,
           ACTDATETIME,
           RECDATETIME,
           WRITEID,
           ISAPPEND,
           BUSSID,
           LONGITUDE,
           LATITUDE,
           ALTITUDE,
           GPSSPEED,
           SENSORSPEED,
           ROTATIONANGLE,
           STATIONTYPE,
           ISMANULOPT,
           PACKCODE,
           SMCODE,
           ONPNUM,
           OFFPNUM,
           LEFTPNUM,
           TPTDATA,
           DOORSTATE,
           PECCANCYTYPE,
           PECCANCYTIME,
           STANDARDVALUE,
           PECCANCYVALUE,
           GPSMILE,
           CHECKED,
           ASSEDATE,
           ASSESSOR,
           BUSID,
           DRIVERID,
           BUSRRID)
          (SELECT BUSRDID,
                  DATATYPE,
                  ROUTEID,
                  SUBROUTEID,
                  PRODUCTID,
                  STATIONSEQNUM,
                  STATIONNUM,
                  ISARRLFT,
                  ACTDATETIME,
                  RECDATETIME,
                  WRITEID,
                  ISAPPEND,
                  BUSSID,
                  LONGITUDE,
                  LATITUDE,
                  ALTITUDE,
                  GPSSPEED,
                  SENSORSPEED,
                  ROTATIONANGLE,
                  STATIONTYPE,
                  ISMANULOPT,
                  PACKCODE,
                  SMCODE,
                  ONPNUM,
                  OFFPNUM,
                  LEFTPNUM,
                  TPTDATA,
                  DOORSTATE,
                  PECCANCYTYPE,
                  PECCANCYTIME,
                  STANDARDVALUE,
                  PECCANCYVALUE,
                  GPSMILE,
                  CHECKED,
                  ASSEDATE,
                  ASSESSOR,
                  BUSID,
                  DRIVERID,
                  BUSRRID
             FROM BSVCBUSARRLFTLD5 T
            WHERE T.ACTDATETIME >= V_DATE_IN + (CUR - 1) / 24
              AND T.ACTDATETIME < V_DATE_IN + CUR / 24) ORDER BY T.ROUTEID, T.PRODUCTID, T.ACTDATETIME;
        --每cur/24提交一次
        COMMIT;
      END;
    END LOOP;
    WRITE_LOG('P_IMPORT_BUSARRLFTDATA',
              '导入到离站数据',
              V_DATE_IN,
              '时间：' || ROUND((SYSDATE - V_STARTDATE) * 24 * 60 * 60, 2) || '秒');
    -------------------------------------------------------------------------------------------------
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('P_IMPORT_BUSARRLFTDATA',
                      '导入到离站数据',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_BUSARRSTATION                                                       *
  *                                                                                      *
  *    功能：车辆到站刷卡数据结存                                                         *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                    *
  *    日期：2013-03-30                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_BUSARRSTATION(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_BUSARRSTATION',
              '车辆到站数据结存',
              V_DATE_IN,
              '开始');
    --删除已有同日数据
    DELETE FROM JZ_STATIONCONSUME T WHERE T.JZDATE = V_DATE_IN;
    --删除已有同日数据
    DELETE FROM JZ_BUSARRSTATION T WHERE T.JZDATE = V_DATE_IN;
  
    FOR CUR_ROUTE IN (SELECT ROU.ROUTEID, ROU.ROUTENAME
                        FROM MCROUTEINFOVW ROU
                       ORDER BY ROUTEID) LOOP
    
      WRITE_LOG('TREATE_BUSARRSTATION',
                '车辆到站数据结存 - ' || CUR_ROUTE.ROUTEID,
                V_DATE_IN,
                '开始');
      EXECUTE IMMEDIATE 'truncate table  BSVCBUSARRLFTLD5_ROU';
      INSERT INTO BSVCBUSARRLFTLD5_ROU
        (ROUTEID,
         STATIONNO,
         ACTDATETIME,
         ROUTENAME,
         BUSID,
         CARDID,
         BUSSELFID,
         GPSMILE,
         ISARRLFT)
        SELECT T.ROUTEID,
               T.STATIONNUM,
               T.ACTDATETIME,
               ROU.ROUTENAME,
               BUS.BUSID,
               BUS.CARDID,
               BUS.BUSSELFID,
               T.GPSMILE,
               T.ISARRLFT
          FROM (SELECT T.ROUTEID,
                       T.STATIONNUM,
                       T.ACTDATETIME,
                       T.PRODUCTID,
                       T.GPSMILE,
                       T.ISARRLFT
                  FROM BSVCBUSARRLFTLD5TEMP T
                 WHERE T.ROUTEID = CUR_ROUTE.ROUTEID) T,
               MCBUSINFOGS BUS,
               MCROUTEINFOGS ROU
         WHERE T.PRODUCTID = BUS.PRODUCTID
           AND T.ROUTEID = ROU.ROUTEID;
      COMMIT;
      UPDATE BSVCBUSARRLFTLD5_ROU T
         SET T.NEXTARRTIME = (SELECT NVL(MIN(T2.ACTDATETIME), V_DATE_IN + 1) AS NEXTARRTIME
                                FROM BSVCBUSARRLFTLD5_ROU T2
                               WHERE T2.BUSID = T.BUSID
                                 AND T2.ISARRLFT = 1
                                 AND T2.ACTDATETIME > T.ACTDATETIME)
       WHERE T.ISARRLFT = '1';
      COMMIT;
    
      UPDATE BSVCBUSARRLFTLD5_ROU T
         SET T.LASTARRTIME = (SELECT NVL(MAX(T2.ACTDATETIME), V_DATE_IN) AS LASTARRTIME
                                FROM BSVCBUSARRLFTLD5_ROU T2
                               WHERE T2.BUSID = T.BUSID
                                 AND T2.ISARRLFT = 1
                                 AND T2.ACTDATETIME < T.ACTDATETIME)
       WHERE T.ISARRLFT = '1';
      COMMIT;
    
      --到站时间数据结存 开始     
    
      INSERT INTO JZ_BUSARRSTATION
        (RECORDID,
         ROUTEID,
         ROUTENAME,
         BUSID,
         STATIONID,
         ARRTIME,
         LEATIME,
         JZDATE,
         GPSMILE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ROUTEID,
               CUR_ROUTE.ROUTENAME AS ROUTENAME,
               TT.BUSID,
               TT.STATIONNO,
               TT.ARRTIME AS ARRTIME,
               TT.LEATIME AS LEATIME,
               V_DATE_IN AS JZDATE,
               TT.GPSMILE
          FROM (SELECT T1.ROUTEID,
                       T1.BUSID,
                       T1.STATIONNO,
                       T1.GPSMILE,
                       T1.ACTDATETIME AS ARRTIME,
                       MIN(T2.ACTDATETIME) AS LEATIME
                  FROM BSVCBUSARRLFTLD5_ROU T1, BSVCBUSARRLFTLD5_ROU T2
                 WHERE T1.ROUTEID = T2.ROUTEID
                   AND T1.BUSID = T2.BUSID
                   AND T1.STATIONNO = T2.STATIONNO
                   AND T1.ISARRLFT = '1'
                   AND T2.ISARRLFT = '2'
                   AND T1.ACTDATETIME < T2.ACTDATETIME
                 GROUP BY T1.ROUTEID,
                          T1.BUSID,
                          T1.STATIONNO,
                          T1.ACTDATETIME,
                          T1.GPSMILE) TT;
      COMMIT;
    
      UPDATE JZ_BUSARRSTATION T
         SET T.CARDID = (SELECT BUS.CARDID
                           FROM MCBUSINFOGS BUS
                          WHERE BUS.BUSID = T.BUSID)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;
    
      UPDATE JZ_BUSARRSTATION T
         SET T.STATIONID = (SELECT STA.STATIONID
                              FROM MCSTATIONINFOGS STA
                             WHERE STA.STATIONNO = T.STATIONID)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;
    
      UPDATE JZ_BUSARRSTATION T
         SET T.STATIONNAME = (SELECT STA.STATIONNAME
                                FROM MCSTATIONINFOGS STA
                               WHERE STA.STATIONID = T.STATIONID)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;
    
      UPDATE JZ_BUSARRSTATION T
         SET T.FSTLEAVETIME = (SELECT MAX(TT.LEAVETIME)
                                 FROM BZ_BUSRUNRECORDLDTEMP TT
                                WHERE TT.ROUTEID = CUR_ROUTE.ROUTEID
                                  AND TT.RUNDATADATE = V_DATE_IN
                                  AND TT.RECTYPE = 1
                                  AND TT.BUSID = T.BUSID
                                  AND TT.LEAVETIME < T.LEATIME + 5 / 24 / 60)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;
    
      UPDATE JZ_BUSARRSTATION T
         SET T.FSTLEAVETIMEGPS = (SELECT MIN(TT.LEATIME)
                                    FROM JZ_BUSARRSTATION TT
                                   WHERE TT.ROUTEID = CUR_ROUTE.ROUTEID
                                     AND TT.FSTLEAVETIME = T.FSTLEAVETIME
                                     AND TT.BUSID = T.BUSID
                                     AND TT.JZDATE = V_DATE_IN)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;
    
      UPDATE JZ_BUSARRSTATION T
         SET T.TIMEFROMFST = ROUND((T.ARRTIME - T.FSTLEAVETIME) * 24 * 60, 2)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;
      WRITE_LOG('TREATE_BUSARRSTATION',
                '车辆到站数据结存 - ' || CUR_ROUTE.ROUTEID,
                V_DATE_IN,
                '结束');
    END LOOP;
    WRITE_LOG('TREATE_BUSARRSTATION',
              '车辆到站数据结存',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_BUSARRSTATION',
                      '车辆到站数据结存',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
END PKG_OSE_BUSARRSTATION;
/

prompt
prompt Creating package body PKG_OSE_BUSENTRYSITE
prompt ==========================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_BUSENTRYSITE IS
  --------------------------------------------------------------------------------------------
  /***************************************************************************************
  *    名称：WRITE_LOG                                                                   *
  *                                                                                      *
  *    功能：写入日志                                                                    *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2,
                      FUNC_DESC     VARCHAR2,
                      V_DATE        DATE,
                      LOGINFO       VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := SUBSTR(LOGINFO, 1, 250);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '1',
       V_DATE,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /****************************************************************************************
  *    名称：WRITE_EXCEPTION                                                             *
  *                                                                                      *
  *    功能：写入异常日志                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_EXCEPTION(PROCEDURENAME VARCHAR2,
                            FUNC_DESC     VARCHAR2,
                            V_DATE        DATE,
                            ERRORCODE     NUMBER,
                            ERRORTEXT     VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := ERRORCODE || '-' || SUBSTR(ERRORTEXT, 1, 200);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '0',
       V_DATE,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

  PROCEDURE TREATE_BUSENTRYSITE(V_DATE DATE) AS
  BEGIN
    TREATE_RENAME;
    TREATE_REPLACESITE(V_DATE);
    TREATE_ENTRYSITE(V_DATE);
  END;
  /****************************************************************************************
  *    名称：TREATE_RENAME                                                             *
  *                                                                                      *
  *    功能：重命名场站名称                                                                *
  *                                                                                      *
  *    作者：huhuimin                                                                     *
  *    日期：2013-09-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_RENAME AS
  BEGIN
    WRITE_LOG('TREATE_RENAME',
              '车辆进场率--重命名场站名称',
              TRUNC(SYSDATE),
              '开始');
    FOR SITE_NAME IN (SELECT SITE.SITEID, SITE.SITENAME
                        FROM MCSITEINFOGS SITE) LOOP
      IF (SUBSTR(SITE_NAME.SITENAME, -2) = '进场' OR
         SUBSTR(SITE_NAME.SITENAME, -2) = '出场' OR
         SUBSTR(SITE_NAME.SITENAME, -2) = '进口' OR
         SUBSTR(SITE_NAME.SITENAME, -2) = '入口' OR
         SUBSTR(SITE_NAME.SITENAME, -2) = '出口') THEN
        UPDATE MCSITEINFOGS SITE
           SET SITE.ALIASNAME = SUBSTR(SITE_NAME.SITENAME,
                                       0,
                                       LENGTH(SITE_NAME.SITENAME) - 2)
         WHERE SITE.SITEID = SITE_NAME.SITEID;
      ELSIF (SUBSTR(SITE_NAME.SITENAME, -4, 4) = '（出口）' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 4) = '（入口）' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 4) = '（进口）' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 4) = '（人口）' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 4) = '（出场）' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 4) = '（进场）' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 4) = '(出口)' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 4) = '(入口)' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 4) = '(进口)' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 4) = '(人口)' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 4) = '(出场)' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 4) = '(进场)') THEN
        UPDATE MCSITEINFOGS SITE
           SET SITE.ALIASNAME = SUBSTR(SITE_NAME.SITENAME,
                                       0,
                                       LENGTH(SITE_NAME.SITENAME) - 4)
         WHERE SITE.SITEID = SITE_NAME.SITEID;
      ELSIF (SUBSTR(SITE_NAME.SITENAME, -3, 2) = '出场' OR
            SUBSTR(SITE_NAME.SITENAME, -3, 2) = '进场' OR
            SUBSTR(SITE_NAME.SITENAME, -3, 2) = '进口' OR
            SUBSTR(SITE_NAME.SITENAME, -3, 2) = '出口' OR
            SUBSTR(SITE_NAME.SITENAME, -3, 2) = '入口') THEN
        UPDATE MCSITEINFOGS SITE
           SET SITE.ALIASNAME = SUBSTR(SITE_NAME.SITENAME,
                                       0,
                                       LENGTH(SITE_NAME.SITENAME) - 3)
         WHERE SITE.SITEID = SITE_NAME.SITEID;
      ELSIF (SUBSTR(SITE_NAME.SITENAME, -1, 1) = '出' OR
            SUBSTR(SITE_NAME.SITENAME, -1, 1) = '进' OR
            SUBSTR(SITE_NAME.SITENAME, -1, 1) = '入') THEN
        UPDATE MCSITEINFOGS SITE
           SET SITE.ALIASNAME = SUBSTR(SITE_NAME.SITENAME,
                                       0,
                                       LENGTH(SITE_NAME.SITENAME) - 1)
         WHERE SITE.SITEID = SITE_NAME.SITEID;
      ELSIF (SUBSTR(SITE_NAME.SITENAME, -3, 3) = '（出）' OR
            SUBSTR(SITE_NAME.SITENAME, -3, 3) = '（进）' OR
            SUBSTR(SITE_NAME.SITENAME, -3, 3) = '（入）' OR
            SUBSTR(SITE_NAME.SITENAME, -3, 3) = '(出)' OR
            SUBSTR(SITE_NAME.SITENAME, -3, 3) = '(进)' OR
            SUBSTR(SITE_NAME.SITENAME, -3, 3) = '(入)') THEN
        UPDATE MCSITEINFOGS SITE
           SET SITE.ALIASNAME = SUBSTR(SITE_NAME.SITENAME,
                                       0,
                                       LENGTH(SITE_NAME.SITENAME) - 3)
         WHERE SITE.SITEID = SITE_NAME.SITEID;
      ELSIF (SUBSTR(SITE_NAME.SITENAME, -2, 1) = '出' OR
            SUBSTR(SITE_NAME.SITENAME, -2, 1) = '进' OR
            SUBSTR(SITE_NAME.SITENAME, -2, 1) = '入') THEN
        UPDATE MCSITEINFOGS SITE
           SET SITE.ALIASNAME = SUBSTR(SITE_NAME.SITENAME,
                                       0,
                                       LENGTH(SITE_NAME.SITENAME) - 2)
         WHERE SITE.SITEID = SITE_NAME.SITEID;
      ELSIF (SUBSTR(SITE_NAME.SITENAME, -5, 3) = '（出口' OR
            SUBSTR(SITE_NAME.SITENAME, -5, 3) = '（进口' OR
            SUBSTR(SITE_NAME.SITENAME, -5, 3) = '（入口' OR
            SUBSTR(SITE_NAME.SITENAME, -5, 3) = '（进场' OR
            SUBSTR(SITE_NAME.SITENAME, -5, 3) = '（出场' OR
            SUBSTR(SITE_NAME.SITENAME, -5, 3) = '(出口' OR
            SUBSTR(SITE_NAME.SITENAME, -5, 3) = '(进口' OR
            SUBSTR(SITE_NAME.SITENAME, -5, 3) = '(入口' OR
            SUBSTR(SITE_NAME.SITENAME, -5, 3) = '(进场' OR
            SUBSTR(SITE_NAME.SITENAME, -5, 3) = '(出场') THEN
        UPDATE MCSITEINFOGS SITE
           SET SITE.ALIASNAME = SUBSTR(SITE_NAME.SITENAME,
                                       0,
                                       LENGTH(SITE_NAME.SITENAME) - 5)
         WHERE SITE.SITEID = SITE_NAME.SITEID;
      ELSIF (SUBSTR(SITE_NAME.SITENAME, -4, 2) = '（出' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 2) = '（进' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 2) = '（入' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 2) = '(出' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 2) = '(进' OR
            SUBSTR(SITE_NAME.SITENAME, -4, 2) = '(入') THEN
        UPDATE MCSITEINFOGS SITE
           SET SITE.ALIASNAME = SUBSTR(SITE_NAME.SITENAME,
                                       0,
                                       LENGTH(SITE_NAME.SITENAME) - 4)
         WHERE SITE.SITEID = SITE_NAME.SITEID;
      ELSE
        UPDATE MCSITEINFOGS SITE
           SET SITE.ALIASNAME = SITE_NAME.SITENAME
         WHERE SITE.SITEID = SITE_NAME.SITEID;
      END IF;
      COMMIT;
    END LOOP;
    WRITE_LOG('TREATE_RENAME',
              '车辆进场率--重命名场站名称',
              TRUNC(SYSDATE),
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_RENAME',
                      '车辆进场率--重命名场站名称',
                      TRUNC(SYSDATE),
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：TREATE_RENAME                                                             *
  *                                                                                      *
  *    功能：结存场站经纬度范围                                                          *
  *                                                                                      *
  *    作者：huhuimin                                                                     *
  *    日期：2013-09-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_REPLACESITE(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
  
    WRITE_LOG('TREATE_REPLACESITE',
              '车辆进场率--结存场站经纬度范围',
              V_DATE_IN,
              '开始');
    MERGE INTO MCSITEINFOGS_ENTRYRATE SITE_EN
    USING (SELECT T.ALIASNAME AS SITENAME,
                  T.SITETYPE,
                  MIN(T.LONGITUDE) AS MINLONGITUDE,
                  MAX(T.LONGITUDE) AS MAXLONGITUDE,
                  MIN(T.LATITUDE) AS MINLATITUDE,
                  MAX(T.LATITUDE) AS MAXLATITUDE,
                  SUM(T.SITECAPIBILITY) AS SITECAPIBILITY
             FROM MCSITEINFOGS T
            WHERE T.LONGITUDE != 0
              AND T.LATITUDE != 0
            GROUP BY T.ALIASNAME, T.SITETYPE) SITE
    ON (SITE_EN.SITENAME = SITE.SITENAME AND SITE_EN.SITETYPE = SITE.SITETYPE)
    WHEN MATCHED THEN
      UPDATE
         SET SITE_EN.MAXLONGITUDE   = SITE.MAXLONGITUDE + 0.001,
             SITE_EN.MINLONGITUDE   = SITE.MINLONGITUDE - 0.001,
             SITE_EN.MAXLATITUDE    = SITE.MAXLATITUDE + 0.001,
             SITE_EN.MINLATITUDE    = SITE.MINLATITUDE - 0.001,
             SITE_EN.SITECAPIBILITY = SITE.SITECAPIBILITY,
             ENDDATE                = V_DATE_IN
    WHEN NOT MATCHED THEN
      INSERT
        (SITEID,
         SITENAME,
         MAXLONGITUDE,
         MINLONGITUDE,
         MAXLATITUDE,
         MINLATITUDE,
         SITECAPIBILITY,
         STARTDATE,
         ENDDATE,
         SITETYPE)
      VALUES
        (S_SITESTORAGE.NEXTVAL,
         SITE.SITENAME,
         SITE.MAXLONGITUDE + 0.001,
         SITE.MINLONGITUDE - 0.001,
         SITE.MAXLATITUDE + 0.001,
         SITE.MINLATITUDE - 0.001,
         SITE.SITECAPIBILITY,
         V_DATE_IN,
         V_DATE_IN,
         SITE.SITETYPE);
    COMMIT;
  
    WRITE_LOG('TREATE_REPLACESITE',
              '车辆进场率--结存场站经纬度范围',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_REPLACESITE',
                      '车辆进场率--结存场站经纬度范围',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：TREATE_ENTRYSITE                                                             *
  *                                                                                      *
  *    功能：结存场站经纬度范围                                                          *
  *                                                                                      *
  *    作者：huhuimin                                                                     *
  *    日期：2013-09-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ENTRYSITE(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TO_DATE(TO_CHAR(V_DATE, 'yyyy-mm-dd hh24:mi'),
                         'yyyy-mm-dd hh24:mi');
    WRITE_LOG('TREATE_ENTRYSITE',
              '车辆进场率--车辆进场率',
              TRUNC(V_DATE_IN),
              '开始');
    DELETE FROM JZ_BUSENTRYSITE T
     WHERE T.JZDATE = TRUNC(V_DATE_IN)
       AND T.JZTIME = TO_NUMBER(TO_CHAR(V_DATE_IN, 'hh24')) * 60 +
           TO_NUMBER(TO_CHAR(V_DATE_IN, 'mi'));
    INSERT INTO JZ_BUSENTRYSITE
      (RECORDID,
       SITEID,
       SITENAME,
       JZTIME,
       SITECAPIBILITY,
       ACTUALBUSCOUNT,
       SUMBUSCOUNT,
       JZDATE,
       SUMENTRYCOUNT,
       SITETYPE)
      SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
             T.SITEID AS SITEID,
             T.SITENAME AS SITENAME,
             TO_NUMBER(TO_CHAR(V_DATE_IN, 'hh24')) * 60 +
             TO_NUMBER(TO_CHAR(V_DATE_IN, 'mi')) AS JZTIME,
             T.SITECAPIBILITY AS SITECAPIBILITY,
             T.ACTUALBUSCOUNT AS ACTUALBUSCOUNT,
             0 AS SUMBUSCOUNT,
             TRUNC(V_DATE_IN) AS JZDATE,
             0 AS SUMENTRYCOUNT,
             T.SITETYPE AS SITETYPE
        FROM (SELECT SITE.SITEID,
                     SITE.SITENAME,
                     SITE.SITETYPE,
                     SITE.SITECAPIBILITY,
                     COUNT(LASTP.PRODUCTID) AS ACTUALBUSCOUNT
                FROM MCSITEINFOGS_ENTRYRATE     SITE,
                     BSVCBUSLASTPOSITIONDATALD5 LASTP
               WHERE LASTP.LONGITUDE BETWEEN SITE.MINLONGITUDE AND
                     SITE.MAXLONGITUDE
                 AND LASTP.LATITUDE BETWEEN SITE.MINLATITUDE AND
                     SITE.MAXLATITUDE
               GROUP BY SITE.SITEID,
                        SITE.SITENAME,
                        SITE.SITETYPE,
                        SITE.SITECAPIBILITY) T;
    COMMIT;
    --全市总车辆数
    UPDATE JZ_BUSENTRYSITE T
       SET T.SUMBUSCOUNT = (SELECT T.BUSCOUNT
                              FROM JZ_BUSPHASESTORAGE T
                             WHERE JZDATE = TRUNC(V_DATE_IN)
                               AND STORAGEBUSFIRSTTYPE = '0'
                               AND DATASAVELEVEL = '2'
                               AND STORAGEORGTYPE = '1')
     WHERE T.JZDATE = TRUNC(V_DATE_IN)
       AND T.JZTIME = TO_NUMBER(TO_CHAR(V_DATE_IN, 'hh24')) * 60 +
           TO_NUMBER(TO_CHAR(V_DATE_IN, 'mi'));
    --全市总进场数
    UPDATE JZ_BUSENTRYSITE T
       SET T.SUMENTRYCOUNT = (SELECT SUM(ACTUALBUSCOUNT)
                                FROM JZ_BUSENTRYSITE T
                               WHERE T.JZDATE = TRUNC(V_DATE_IN)
                                 AND T.JZTIME =
                                     TO_NUMBER(TO_CHAR(V_DATE_IN, 'hh24')) * 60 +
                                     TO_NUMBER(TO_CHAR(V_DATE_IN, 'mi')))
     WHERE T.JZDATE = TRUNC(V_DATE_IN)
       AND T.JZTIME = TO_NUMBER(TO_CHAR(V_DATE_IN, 'hh24')) * 60 +
           TO_NUMBER(TO_CHAR(V_DATE_IN, 'mi'));
    WRITE_LOG('TREATE_ENTRYSITE',
              '车辆进场率--车辆进场率',
              TRUNC(SYSDATE),
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ENTRYSITE',
                      '车辆进场率--车辆进场率',
                      TRUNC(SYSDATE),
                      SQLCODE,
                      SQLERRM);
  END;
END PKG_OSE_BUSENTRYSITE;
/

prompt
prompt Creating package body PKG_OSE_CALCDATA
prompt ======================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_CALCDATA IS
  /****************************************************************************************
  *    名称：CalcRoadSpeed2                                                              *
  *                                                                                      *
  *    功能：计算站点间线网平均运行速度                                                  *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE CalcRoadSpeed2(v_fromstationid VARCHAR2,
                           v_tostationid   VARCHAR2,
                           v_fromdate      DATE,
                           v_todate        DATE,
                           v_speed         OUT NUMBER) AS
    v_totalMile NUMBER;
    v_totalTime NUMBER;
    v_flag      NUMBER;
    CURSOR cur_seg(from_stationid VARCHAR2,
                   to_stationid   VARCHAR2,
                   from_date      DATE,
                   to_date_       DATE) IS
      SELECT SUM((d_arrgpsmile - o_lftgpsmile) / 1000) AS totalMile,
             SUM((d_arractdatetime - o_lftactdatetime) * 24) AS totalTime
        FROM (SELECT t.routeid,
                     t.subrouteid,
                     t.segmentid,
                     t.busid,
                     (LAG(t.stationnum)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_stationid,
                     (LAG(t.arractdatetime)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_arractdatetime,
                     (LAG(t.lftactdatetime)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_lftactdatetime,
                     (LAG(t.arrgpsmile)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_arrgpsmile,
                     (LAG(t.lftgpsmile)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_lftgpsmile,
                     t.Stationnum d_stationid,
                     t.arractdatetime d_arractdatetime,
                     t.lftactdatetime d_lftactdatetime,
                     t.arrgpsmile d_arrgpsmile,
                     t.lftgpsmile d_lftgpsmile
                FROM bsvcbusarrlftdatald t
               WHERE t.Stationnum IN (from_stationid, to_stationid)
                 AND t.actdatetime >= from_date
                 AND t.actdatetime <= to_date_) r
       WHERE r.o_stationid = from_stationid
         AND r.d_stationid = to_stationid;
  BEGIN
    v_totalMile := 0;
    v_totalTime := 0;
    v_flag      := 0;
    FOR cur IN cur_seg(v_fromstationid, v_tostationid, v_fromdate, v_todate) LOOP
      v_totalMile := cur.totalMile;
      v_totalTime := cur.totalTime;
      v_flag      := 1;
    END LOOP;

    IF (v_flag = 1) THEN
      --有数据
      v_totalMile := nvl(v_totalMile, -1);
      v_totalTime := nvl(v_totalTime, -1);

      IF (v_totalTime > 0 AND v_totalMile > 0) THEN
        v_speed := v_totalMile / v_totalTime;
      ELSE
        v_speed := 0;
      END IF;
    ELSE
      --无数据
      v_speed := -1;
    END IF;
  END;
  /****************************************************************************************
  *    名称：CalcRoadSpeed2                                                              *
  *                                                                                      *
  *    功能：计算站点间线路平均运行速度                                                  *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE CalcRoadSpeed2(v_routeid       VARCHAR2,
                           v_fromstationid VARCHAR2,
                           v_tostationid   VARCHAR2,
                           v_fromdate      DATE,
                           v_todate        DATE,
                           v_speed         OUT NUMBER) AS
    v_totalMile NUMBER;
    v_totalTime NUMBER;
    v_flag      NUMBER;
    CURSOR cur_seg(route_id       VARCHAR2,
                   from_stationid VARCHAR2,
                   to_stationid   VARCHAR2,
                   from_date      DATE,
                   to_date_       DATE) IS
      SELECT SUM((d_arrgpsmile - o_lftgpsmile) / 1000) AS totalMile,
             SUM((d_arractdatetime - o_lftactdatetime) * 24) AS totalTime
        FROM (SELECT t.routeid,
                     t.subrouteid,
                     t.segmentid,
                     t.busid,
                     (LAG(t.Stationnum)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_stationid,
                     (LAG(t.arractdatetime)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_arractdatetime,
                     (LAG(t.lftactdatetime)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_lftactdatetime,
                     (LAG(t.arrgpsmile)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_arrgpsmile,
                     (LAG(t.lftgpsmile)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_lftgpsmile,
                     t.Stationnum d_stationid,
                     t.arractdatetime d_arractdatetime,
                     t.lftactdatetime d_lftactdatetime,
                     t.arrgpsmile d_arrgpsmile,
                     t.lftgpsmile d_lftgpsmile
                FROM bsvcbusarrlftdatald t
               WHERE t.routeid = route_id
                 AND t.Stationnum IN (from_stationid, to_stationid)
                 AND t.actdatetime >= from_date
                 AND t.actdatetime <= to_date_) r
       WHERE r.o_stationid = from_stationid
         AND r.d_stationid = to_stationid;
  BEGIN
    v_totalMile := 0;
    v_totalTime := 0;
    v_flag      := 0;
    FOR cur IN cur_seg(v_routeid,
                       v_fromstationid,
                       v_tostationid,
                       v_fromdate,
                       v_todate) LOOP
      v_totalMile := cur.totalMile;
      v_totalTime := cur.totalTime;
      v_flag      := 1;
    END LOOP;

    IF (v_flag = 1) THEN
      --有数据
      v_totalMile := nvl(v_totalMile, -1);
      v_totalTime := nvl(v_totalTime, -1);

      IF (v_totalTime > 0 AND v_totalMile > 0) THEN
        v_speed := v_totalMile / v_totalTime;
      ELSE
        v_speed := 0;
      END IF;
    ELSE
      --无数据
      v_speed := -1;
    END IF;
  END;
  /****************************************************************************************
  *    名称：CalcRoadSpeed                                                               *
  *                                                                                      *
  *    功能：计算站点间线路平均运行速度                                                  *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE CalcRoadSpeed(v_routeid       VARCHAR2, --线路（计算线网速度为空）
                          v_fromstationid VARCHAR2, --开始站点
                          v_tostationid   VARCHAR2, --结束站点
                          v_from_date     VARCHAR2, --开始日期
                          v_to_date       VARCHAR2, --结束日期
                          v_from_time     VARCHAR2, --开始时间
                          v_to_time       VARCHAR2, --结束时间
                          v_flag          VARCHAR2, --标志 0-线路 1-线网
                          v_distince      OUT NUMBER, -- 平均距离
                          v_time          OUT NUMBER, --平均行驶时间
                          v_msg           OUT VARCHAR2 --返回信息
                          ) AS
    v_totalMile    NUMBER;
    v_totalTime    NUMBER;
    v_totalBus     NUMBER;
    v_segmentcount NUMBER;
    v_isexist      VARCHAR2(1);
    v_fromdate     DATE;
    v_todate       DATE;
    v_fromtime     VARCHAR2(8);
    v_totime       VARCHAR2(8);

    CURSOR cur_route(route_id       VARCHAR2,
                     from_stationid VARCHAR2,
                     to_stationid   VARCHAR2) IS
      SELECT COUNT(*) AS segmentcount
        FROM (SELECT r.routeid,
                     r.segmentid,
                     r.sngserialid,
                     st.stationid,
                     st.stationno
                FROM mcrsegmentstationgs r, mcstationinfogs st
               WHERE r.stationid = st.stationid
                 AND r.routeid = route_id
                 AND st.stationno = from_stationid) beginST,
             (SELECT r.routeid, r.segmentid, r.sngserialid, st.stationid
                FROM mcrsegmentstationgs r, mcstationinfogs st
               WHERE r.stationid = st.stationid
                 AND r.routeid = route_id
                 AND st.stationno = to_stationid) endST
       WHERE beginST.Routeid = endST.Routeid
         AND beginST.Segmentid = endST.Segmentid;

    CURSOR cur_route2(from_stationid VARCHAR2, to_stationid VARCHAR2) IS
      SELECT COUNT(*) AS segmentcount
        FROM (SELECT r.routeid,
                     r.segmentid,
                     r.sngserialid,
                     st.stationid,
                     st.stationno
                FROM mcrsegmentstationgs r, mcstationinfogs st
               WHERE r.stationid = st.stationid
                 AND st.stationno = from_stationid) beginST,
             (SELECT r.routeid, r.segmentid, r.sngserialid, st.stationid
                FROM mcrsegmentstationgs r, mcstationinfogs st
               WHERE r.stationid = st.stationid
                 AND st.stationno = to_stationid) endST
       WHERE beginST.Routeid = endST.Routeid
         AND beginST.Segmentid = endST.Segmentid;

    CURSOR cur_seg(route_id       VARCHAR2,
                   from_stationid VARCHAR2,
                   to_stationid   VARCHAR2,
                   from_date_     DATE,
                   to_date_       DATE,
                   from_time_     VARCHAR2,
                   to_time_       VARCHAR2) IS
      SELECT SUM(ABS(d_arrgpsmile - o_lftgpsmile) / 1000) AS totalMile,
             SUM(ABS(d_arractdatetime - o_lftactdatetime) * 24) AS totalTime,
             COUNT(*) AS totalBus
        FROM (SELECT t.routeid,
                     t.subrouteid,
                     t.segmentid,
                     t.busid,
                     (LAG(t.Stationnum)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_stationid,
                     (LAG(t.arractdatetime)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_arractdatetime,
                     (LAG(t.lftactdatetime)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_lftactdatetime,
                     (LAG(t.arrgpsmile)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_arrgpsmile,
                     (LAG(t.lftgpsmile)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_lftgpsmile,
                     t.Stationnum d_stationid,
                     t.arractdatetime d_arractdatetime,
                     t.lftactdatetime d_lftactdatetime,
                     t.arrgpsmile d_arrgpsmile,
                     t.lftgpsmile d_lftgpsmile
                FROM (SELECT *
                        FROM bsvcbusarrlftdatald t
                       WHERE t.routeid = route_id
                         AND t.Stationnum IN (from_stationid, to_stationid)
                         AND t.actdatetime >= from_date_
                         AND t.actdatetime <= to_date_
                         AND t.actdatetime2 >= from_time_
                         AND t.actdatetime2 <= to_time_) t) r
       WHERE ((r.o_stationid = from_stationid AND
             r.d_stationid = to_stationid) OR
             (r.d_stationid = from_stationid AND
             r.o_stationid = to_stationid))
         AND ABS(r.d_arractdatetime - r.o_lftactdatetime) * 24 < 4
         AND ABS(r.d_arractdatetime - r.o_lftactdatetime) > 0
         AND ABS(d_arrgpsmile - o_lftgpsmile) / 1000 < 100;

    CURSOR cur_seg2(from_stationid VARCHAR2,
                    to_stationid   VARCHAR2,
                    from_date_     DATE,
                    to_date_       DATE,
                    from_time_     VARCHAR2,
                    to_time_       VARCHAR2) IS
      SELECT SUM(ABS(d_arrgpsmile - o_lftgpsmile) / 1000) AS totalMile,
             SUM(ABS(d_arractdatetime - o_lftactdatetime) * 24) AS totalTime,
             COUNT(*) AS totalBus
        FROM (SELECT t.routeid,
                     t.subrouteid,
                     t.segmentid,
                     t.busid,
                     (LAG(t.Stationnum)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_stationid,
                     (LAG(t.arractdatetime)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_arractdatetime,
                     (LAG(t.lftactdatetime)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_lftactdatetime,
                     (LAG(t.arrgpsmile)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_arrgpsmile,
                     (LAG(t.lftgpsmile)
                      OVER(PARTITION BY t.ROUTEID,
                           t.subrouteid,
                           t.segmentid,
                           t.busid ORDER BY actdatetime)) o_lftgpsmile,
                     t.Stationnum d_stationid,
                     t.arractdatetime d_arractdatetime,
                     t.lftactdatetime d_lftactdatetime,
                     t.arrgpsmile d_arrgpsmile,
                     t.lftgpsmile d_lftgpsmile
                FROM (SELECT *
                        FROM bsvcbusarrlftdatald t
                       WHERE t.Stationnum IN (from_stationid, to_stationid)
                         AND t.actdatetime >= from_date_
                         AND t.actdatetime <= to_date_
                         AND t.actdatetime2 >= from_time_
                         AND t.actdatetime2 <= to_time_) t) r
       WHERE ((r.o_stationid = from_stationid AND
             r.d_stationid = to_stationid) OR
             (r.d_stationid = from_stationid AND
             r.o_stationid = to_stationid))
         AND ABS(r.d_arractdatetime - r.o_lftactdatetime) * 24 < 4
         AND ABS(r.d_arractdatetime - r.o_lftactdatetime) > 0
         AND ABS(d_arrgpsmile - o_lftgpsmile) / 1000 < 100;

  BEGIN
    v_distince := -1;
    v_time     := -1;
    v_msg      := 'OK';

    v_fromdate := to_date(v_from_date, 'yyyy-MM-dd');
    v_todate   := to_date(v_to_date, 'yyyy-MM-dd');
    v_fromtime := v_from_time;
    v_totime   := v_to_time;

    v_totalMile := 0;
    v_totalTime := 0;
    v_totalBus  := 0;

    --同一单程的站点？
    v_segmentcount := 0;
    IF (v_flag = '0') THEN
      FOR cur IN cur_route(v_routeid, v_fromstationid, v_tostationid) LOOP
        v_segmentcount := cur.segmentcount;
      END LOOP;
    ELSE
      FOR cur IN cur_route2(v_fromstationid, v_tostationid) LOOP
        v_segmentcount := cur.segmentcount;
      END LOOP;
    END IF;

    IF (v_segmentcount = 0) THEN
      v_msg := '两个站点不在同一线路同一运行方向上.' || v_fromstationid || '--' ||
               v_tostationid;
    ELSE
      --开始计算
      v_isexist := '0';
      IF (v_flag = '0') THEN
        FOR cur IN cur_seg(v_routeid,
                           v_fromstationid,
                           v_tostationid,
                           v_fromdate,
                           v_todate,
                           v_fromtime,
                           v_totime) LOOP
          v_totalMile := cur.totalMile;
          v_totalTime := cur.totalTime;
          v_totalBus  := cur.totalBus;
          v_isexist   := '1';
        END LOOP;
      ELSE
        FOR cur IN cur_seg2(v_fromstationid,
                            v_tostationid,
                            v_fromdate,
                            v_todate,
                            v_fromtime,
                            v_totime) LOOP
          v_totalMile := cur.totalMile;
          v_totalTime := cur.totalTime;
          v_totalBus  := cur.totalBus;
          v_isexist   := '1';
        END LOOP;
      END IF;

      v_distince := 0;
      v_time     := 0;
      IF (v_isexist = '1') THEN
        --有数据
        v_totalMile := nvl(v_totalMile, -1);
        v_totalTime := nvl(v_totalTime, -1);

        IF (v_totalBus > 0) THEN
          v_distince := round((v_totalMile / v_totalBus), 3); --平均距离
          v_time     := round((v_totalTime / v_totalBus), 3); --平均行驶时间
        ELSE
          v_msg := '此时段没有经过这个区间的GPS数据.';
        END IF;
      ELSE
        --无数据
        v_msg := '此时段没有经过这个区间的GPS数据.';
      END IF;
    END IF;

  EXCEPTION
    WHEN OTHERS THEN
      v_msg := SQLERRM;
  END;
  /****************************************************************************************/
  --获取线路首末班信息
  PROCEDURE GetRouteRunTime(v_routeid VARCHAR2, MYTAB OUT MYTABLE) AS
  BEGIN
    --全部线路
    IF (v_routeid = '-1') THEN
      OPEN MYTAB FOR
        SELECT r.routeid,
               r.routename,
               r.routestyle,
               --t.startdate,
               --t.enddate,
               --t.startweek,
               --t.endweek,
               t.mainstationlsttime,
               t.mainstationfsttime,
               t.secondstationlsttime,
               t.secondstationfsttime
          FROM mcrouteinfogs r,
               (SELECT *
                  FROM MCROUTEFSTANDLSTSEQTIMEGS t
                 WHERE t.startweek <= to_number(to_char(SYSDATE, 'w') + 1)
                   AND t.endweek >= to_number(to_char(SYSDATE, 'w') + 1)
                   AND t.startdate <=
                       to_date('2000' || to_char(SYSDATE, 'MM-dd'),
                               'yyyy-MM-dd')
                   AND t.enddate >=
                       to_date('2000' || to_char(SYSDATE, 'MM-dd'),
                               'yyyy-MM-dd')) t
         WHERE r.routeid = t.routeid(+)
         ORDER BY t.enddate;
    ELSE
      OPEN MYTAB FOR
        SELECT r.routeid,
               r.routename,
               r.routestyle,
               --t.startdate,
               --t.enddate,
               --t.startweek,
               --t.endweek,
               t.mainstationlsttime,
               t.mainstationfsttime,
               t.secondstationlsttime,
               t.secondstationfsttime
          FROM mcrouteinfogs r,
               (SELECT *
                  FROM MCROUTEFSTANDLSTSEQTIMEGS t
                 WHERE t.startweek <= to_number(to_char(SYSDATE, 'w') + 1)
                   AND t.endweek >= to_number(to_char(SYSDATE, 'w') + 1)
                   AND t.startdate <=
                       to_date('2000' || to_char(SYSDATE, 'MM-dd'),
                               'yyyy-MM-dd')
                   AND t.enddate >=
                       to_date('2000' || to_char(SYSDATE, 'MM-dd'),
                               'yyyy-MM-dd')) t
         WHERE r.routeid = t.routeid(+)
           AND t.routeid = v_routeid
         ORDER BY t.enddate;

    END IF;
  END;
  --获取专用道路
  PROCEDURE GetSpecialRoad(v_flag VARCHAR2 , MYTAB OUT MYTABLE) AS
  BEGIN
    --全部专用道路
    OPEN MYTAB FOR
      SELECT * FROM MCAccommodationroadinfoGS;
  END;

END PKG_OSE_CALCDATA;
/

prompt
prompt Creating package body PKG_OSE_COMMON
prompt ====================================
prompt
create or replace package body osecd.PKG_OSE_COMMON is

  /***************************************************************************************
  *    名称：ClearLog                                                                    *
  *                                                                                      *
  *    功能：定期清除日志                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-28                                                                  *
  ****************************************************************************************/
  PROCEDURE Clear_Log as
  BEGIN
     WRITE_LOG('Clear_Log','清除历史日志',trunc(SYSDATE),'成功');
     delete sys_jzlog t where t.recdate < SYSDATE - 40;
     commit;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END ;

  /***************************************************************************************
  *    名称：ExecuteSQL                                                                  *
  *                                                                                      *
  *    功能：执行SQL语句                                                                 *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-28                                                                  *
  ****************************************************************************************/
  PROCEDURE ExecuteSQL(v_sql VARCHAR2) AS
  BEGIN
    WRITE_LOG('ExecuteSQL', '执行SQL语句' || v_sql, NULL, '开始');
    EXECUTE IMMEDIATE v_sql;
    WRITE_LOG('ExecuteSQL', '执行SQL语句', NULL, '结束');
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('ExecuteSQL',
                      '执行SQL语句' || v_sql,
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;

  /***************************************************************************************
  *    名称：LoadTypeEntry                                                               *
  *                                                                                      *
  *    功能：加载字典类型                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2013-01-09                                                                  *
  ****************************************************************************************/
  PROCEDURE LoadTypeEntry AS
    CURSOR cur_type(v_typename VARCHAR2) IS
      SELECT typename, itemkey, itemvalue, isdefault, sequence, isactive
      FROM typeentry
      WHERE isactive='1' AND upper(typename)=upper(v_typename)
      ORDER BY sequence;

/*    CURSOR cur_trans IS
      SELECT id, cardtype_src, cardname_src, cardtype_des, cardname_des, card_price, card_discount
      FROM transform_iccard
      ORDER BY cardtype_src;
*/
    v_entry type_entry;
--    v_trans type_consume;
  BEGIN

    --加载组织级别 ORGGRADELEVEL 类型
      IF g_OrgGradeTypeList.count > 0 THEN
        g_OrgGradeTypeList.delete;
      END if;

    FOR cur IN cur_type('ORGGRADELEVEL') LOOP
      v_entry.typename   := cur.typename;
      v_entry.itemkey   := cur.itemkey;
      v_entry.itemvalue   := cur.itemvalue;
      IF NOT g_OrgGradeTypeList.EXISTS(cur.itemvalue) THEN
        g_OrgGradeTypeList(cur.itemvalue) := v_entry;
      END IF;
    END LOOP;
/*    --加载ICCARDTYPE类型
    FOR cur IN cur_type('ICCARDTYPE') LOOP
      v_entry.typename   := cur.typename;
      v_entry.itemkey   := cur.itemkey;
      v_entry.itemvalue   := cur.itemvalue;
      IF NOT g_cardtypelist.EXISTS(cur.itemvalue) THEN
        g_cardtypelist(cur.itemvalue) := v_entry;
      END IF;
    END LOOP;

    --加载IC卡类型转换列表
    FOR cur IN cur_trans LOOP
      v_trans.cardtype_src   := cur.cardtype_src;
      v_trans.cardname_src   := cur.cardname_src;
      v_trans.cardtype_des   := cur.cardtype_des;
      v_trans.cardname_des   := cur.cardname_des;
      v_trans.card_price   := cur.card_price;
      v_trans.card_discount   := cur.card_discount;
      IF NOT g_comsumetypelist.EXISTS(cur.cardtype_src) THEN
        g_comsumetypelist(cur.cardtype_src) := v_trans;
      END IF;
    END LOOP;*/

  END;


  /****************************************************************************************
  *    名称：WRITE_EXCEPTION                                                             *
  *                                                                                      *
  *    功能：写入异常日志                                                                *
  *                                                                                      *
  *    作者：YANGTAO                                                                     *
  *    日期：2013-11-11                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_EXCEPTION(PROCEDURENAME VARCHAR2, func_desc     VARCHAR2,
                            v_date        DATE, ERRORCODE     NUMBER,
                            ERRORTEXT     VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := ERRORCODE || '-' || SUBSTR(ERRORTEXT, 1, 200);
    INSERT INTO sys_jzlog
      (ID, procedurename, funcdesc, successflag, execdate, recdate, memos)
    VALUES
      (seq_oseid.nextval, procedurename,
       func_desc, '0',
       v_date, SYSDATE, V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
  END;

  /***************************************************************************************
  *    名称：WRITE_LOG                                                                   *
  *                                                                                      *
  *    功能：写入日志                                                                    *
  *                                                                                      *
  *    作者：YANGTAO                                                                     *
  *    日期：2013-11-11                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2, func_desc     VARCHAR2,
                      v_date        DATE, loginfo       VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := SUBSTR(loginfo, 1, 250);
    INSERT INTO sys_jzlog
      (ID, procedurename, funcdesc, successflag, execdate, recdate, memos)
    VALUES
      (seq_oseid.nextval, procedurename,
       func_desc, '1',
       v_date, SYSDATE, V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
  END;

end PKG_OSE_COMMON;
/

prompt
prompt Creating package body PKG_OSE_FUELSUBSIDYDATA
prompt =============================================
prompt
create or replace package body osecd.PKG_OSE_FUELSUBSIDYDATA is

  /***************************************************************************************
  *    名称：WRITE_LOG                                                                   *
  *                                                                                      *
  *    功能：写入日志                                                                    *
  *                                                                                      *
  *    作者：wangyi                                                                     *
  *    日期：2014-05-20                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2,
                      func_desc     VARCHAR2,
                      v_date        DATE,
                      loginfo       VARCHAR2) AS
  BEGIN
    PKG_OSE_COMMON.WRITE_LOG(PROCEDURENAME,func_desc,v_date,loginfo);
  END;


    /***************************************************************************************
  *    名称：GetOperationVehicle                                                                   *
  *                                                                                      *
  *    功能：结存月运营车辆数                                                                    *
  *                                                                                      *
  *    作者：wangyi                                                                     *
  *    日期：2014-05-20                                                                  *
  ****************************************************************************************/
  PROCEDURE GetOperationVehicle(v_date    DATE) AS

  v_date_in    DATE := trunc(v_date);
  v_quarter   varchar2(20);

  BEGIN
    select t.quarter into v_quarter  from SYS_QUARTER t where t.month =  to_char(v_date_in,'mm');
    WRITE_LOG('GetOperationVehicle', '结存运营车辆',
                v_date_in, '开始');

MERGE INTO jz_operationsvehicle P
USING (select distinct t.rl_date as operationdate,
                       b.productid,
                       b.cardid as carid,
                       org.orgcode,
                       trunc(t.rl_date, 'month') as operationmonth
         from BZ_ROUTEBUSRUNLOG t, mcbusinfogs b, mcorginfogs org
        where t.rl_busid = b.busid
          and b.orgid = org.orgid
          and t.rl_date = v_date_in) NP
ON (P.productid = NP.productid and P.operationmonth = NP.operationmonth) --判断是否存在的条件，车辆编号,月份
WHEN MATCHED THEN --如果已经存在就更新
  UPDATE
     SET P.OPERATIONDATE = NP.operationdate,P.OPERATIONQUARTER = v_quarter

WHEN NOT MATCHED THEN --如果不存在就插入
  INSERT
    (P.PRODUCTID, P.CARID, P.ORGCODE, P.OPERATIONDATE, P.OPERATIONMONTH,P.OPERATIONQUARTER)
  VALUES
    (NP.PRODUCTID,
     NP.CARID,
     NP.ORGCODE,
     NP.OPERATIONDATE,
     NP.OPERATIONMONTH,
     v_quarter);

   WRITE_LOG('GetOperationVehicle', '结存运营车辆',
                v_date_in, '结束');
  END;

      /***************************************************************************************
  *    名称：GetBusCount                                                                   *
  *                                                                                      *
  *    功能：结存月车辆总数                                                                    *
  *                                                                                      *
  *    作者：wangyi                                                                     *
  *    日期：2014-05-20                                                                  *
  ****************************************************************************************/
  PROCEDURE GetBusCount(v_date    DATE) AS

  v_date_in    DATE := trunc(v_date);
  v_quarter   varchar2(20);

  BEGIN
    select t.quarter into v_quarter  from SYS_QUARTER t where t.month =  to_char(v_date_in,'mm');
    WRITE_LOG('GetBusCount', '结存车辆总数',
                v_date_in, '开始');

MERGE INTO jz_operationsvehicle P
USING (select distinct t.rl_date as operationdate,
                       b.productid,
                       b.cardid as carid,
                       org.orgcode,
                       trunc(t.rl_date, 'month') as operationmonth
         from BZ_ROUTEBUSRUNLOG t, mcbusinfogs b, mcorginfogs org
        where t.rl_busid = b.busid
          and b.orgid = org.orgid
          and t.rl_date = v_date_in) NP
ON (P.productid = NP.productid and P.operationmonth = NP.operationmonth) --判断是否存在的条件，车辆编号,月份
WHEN MATCHED THEN --如果已经存在就更新
  UPDATE
     SET P.OPERATIONDATE = NP.operationdate,P.OPERATIONQUARTER = v_quarter

WHEN NOT MATCHED THEN --如果不存在就插入
  INSERT
    (P.PRODUCTID, P.CARID, P.ORGCODE, P.OPERATIONDATE, P.OPERATIONMONTH,P.OPERATIONQUARTER)
  VALUES
    (NP.PRODUCTID,
     NP.CARID,
     NP.ORGCODE,
     NP.OPERATIONDATE,
     NP.OPERATIONMONTH,
     v_quarter);

   WRITE_LOG('GetOperationVehicle', '结存运营车辆',
                v_date_in, '结束');
  END;


      /***************************************************************************************
  *    名称：Make_FuelSubsidy                                                                                                               *
  *                                                                                                                                                                           *
  *    功能：调用结存，定期执行                                                                                                     *
  *                                                                                                                                                            *
  *    作者：wangyi                                                                                                                                    *
  *    日期：2014-05-20                                                                  *
  ****************************************************************************************/
  PROCEDURE Make_FuelSubsidy(v_date    DATE) AS


  BEGIN
  GetOperationVehicle(v_date); --开始运营车辆结存
  END;


 /***************************************************************************************
  *    名称：Get_FuelSubsidy                                                                                                               *
  *                                                                                                                                                                           *
  *    功能：计算燃油补贴                                                                                                     *
  *                                                                                                                                                            *
  *    作者：wangyi                                                                                                                                    *
  *    日期：2014-05-20                                                                  *
  ****************************************************************************************/
  PROCEDURE Get_FuelSubsidy(v_year    date,
                                                                   v_quarter  VARCHAR2,
                                                                   MYTAB     OUT MYTABLE) AS
    v_price_in number;
    v_largebusoil_in number;
    v_middlebusoil_in number;
    v_fullsubsidyprice_in number;
    v_subsidyprice_in number;
    v_largebuslenght_in number;
    v_startdate date;
    v_enddate date;
    v_year_in date:=trunc(v_year,'yyyy');

    v_largeprice number;
    v_middleprice number;

  BEGIN
    if(v_quarter = '1') then
    v_startdate := v_year_in;
    v_enddate :=add_months(v_year_in,3);
    elsif (v_quarter = '2') then
    v_startdate := add_months(v_year_in,3);
    v_enddate :=add_months(v_year_in,6);
    elsif (v_quarter = '3') then
    v_startdate := add_months(v_year_in,6);
    v_enddate :=add_months(v_year_in,9);
    elsif (v_quarter = '4') then
    v_startdate := add_months(v_year_in,9);
    v_enddate :=add_months(v_year_in,12);
    end if;

    --赋值油价
    select  Round(SUM(FUELPRICE * (ENDDATE - STARTDATE + 1))  /  (v_enddate - v_startdate),2) AS AVERAVEFUELPRICE  into v_price_in from FUELPRICES t
    where t.startdate >= v_startdate
     and t.enddate < v_enddate;

     --赋值其他参数
     select t.largebusoil,t.middlebusoil,t.fullsubsidyprice,t.subsidyprice,t.largebuslength into v_largebusoil_in, v_middlebusoil_in,v_fullsubsidyprice_in,v_subsidyprice_in,v_largebuslenght_in from FUELSUBSIDYPARAMETER t
     where t.year = v_year_in
     and t.quarter = v_quarter;

    v_largeprice := v_largebusoil_in * (v_enddate - v_startdate) * ((v_fullsubsidyprice_in - v_subsidyprice_in) * 0.5 + (v_price_in - v_fullsubsidyprice_in));
    v_middleprice := v_middlebusoil_in * (v_enddate - v_startdate) * ((v_fullsubsidyprice_in - v_subsidyprice_in) * 0.5 + (v_price_in - v_fullsubsidyprice_in));

    --地方油补计算
  OPEN MYTAB FOR
  select * from (
  select org.orgid,
  org.orgname,
  org.orgcode,
  v_year_in as year,
  v_quarter as quarter,
  nvl(sm.busstartmiddlecount,0) as startmiddlebuscount, --季初中巴车辆数
  nvl(em.busendmiddlecount,0) as endmiddlebuscount, --季末中巴车辆数
  ROUND((nvl(sm.busstartmiddlecount,0)+nvl(em.busendmiddlecount,0)) / 2,0) as MIDDLEBUSCOUNT,--中巴车辆数
  ROUND((nvl(sm.busstartmiddlecount,0)+nvl(em.busendmiddlecount,0)) / 2 * v_middleprice,2) as MiddleFuelSubsidy,--中巴补贴额
  nvl(sl.busstartlargecount,0) as startlargebuscount,--季初大巴车辆数
  nvl(el.busendlargecount,0) as endlargebuscount,--季末大巴车辆数
  ROUND((nvl(sl.busstartlargecount,0) + nvl(el.busendlargecount,0)) / 2,0) as LARGEBUSCOUNT,--大巴车辆数
  ROUND((nvl(sl.busstartlargecount,0)+nvl(el.busendlargecount,0)) / 2 * v_largeprice,2) as LargeFuelSubsidy,--大巴补贴额
  ROUND((nvl(sm.busstartmiddlecount,0)+nvl(em.busendmiddlecount,0)) / 2 * v_middleprice,2) + ROUND((nvl(sl.busstartlargecount,0)+nvl(el.busendlargecount,0)) / 2 * v_largeprice,2) as AllFuelSubsidy,
  v_price_in as averagefuelprice, --平均油价
  v_largebusoil_in as largebusoil, --大巴日均补贴油量
  v_middlebusoil_in as middlebusoil, --中巴日均补贴油量
  v_fullsubsidyprice_in as fullsubsidyprice, --100%补贴油价
  v_subsidyprice_in  as subsidyprice,--补贴差价
  v_largebuslenght_in as largebuslength, --车长标准
  v_largeprice as largebusdaysubsidy,  --大巴单车补贴金额
  v_middleprice as middlebusdaysubsidy   --中巴单车补贴金额




 from
(select count(*) as busstartmiddlecount,orgid from JZ_BUSDAYSTORAGE  where jzdate = v_startdate and buslength < v_largebuslenght_in group by orgid) sm,
(select count(*) as busendmiddlecount,orgid from JZ_BUSDAYSTORAGE  where jzdate = v_enddate and buslength < v_largebuslenght_in  group by orgid) em,
(select count(*) as busstartlargecount,orgid from JZ_BUSDAYSTORAGE  where jzdate = v_startdate and buslength >= v_largebuslenght_in group by orgid) sl,
(select count(*) as busendlargecount,orgid from JZ_BUSDAYSTORAGE  where jzdate = v_enddate  and buslength >= v_largebuslenght_in  group by orgid) el,
mcorginfogs org,FUELORGINFO fuelorg
where fuelorg.orgid = org.orgid(+)
and org.orgcode = sm.orgid(+)
and sm.orgid = em.orgid(+)
and em.orgid = sl.orgid(+)
and sl.orgid = el.orgid(+)
and fuelorg.islocal = 1 --享受地方油补企业筛选
) s
    order by s.orgname ;


  END;

end PKG_OSE_FUELSUBSIDYDATA;
/

prompt
prompt Creating package body PKG_OSE_GETDATA
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_GetData IS
  /***
  返回数据集
  **/
  PROCEDURE ConsumeCard_GETTABLE(orgids    VARCHAR2,
                                 orggrade  VARCHAR2,
                                 forggrade VARCHAR2,
                                 startdate VARCHAR2,
                                 enddate   VARCHAR2,
                                 MYTAB     OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1' or orggrade = '2') THEN
      OPEN MYTAB FOR
        select *
          from (select *
                  from (select cash.orgid,
                               cash.orgname,
                               cash.storageorgtype,
                               cash.iccardname,
                               round(nvl(sum(cash.totalincome), 0) /
                                     (decode(sum(cash.totalincome),
                                             0,
                                             1,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     2) avgincome,
                               round(nvl(sum(cash.passengerflow), 0) /
                                     (decode(sum(cash.passengerflow),
                                             0,
                                             1,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     0) avgflow
                          from jz_cashincome cash
                         where cash.jzdate >=
                               to_date(startdate, 'yyyy-MM-dd')
                           and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                           and cash.orgid = orgids
                           and cash.storageorgtype = orggrade
                           and cash.datasavelevel = '3'
                           and cash.ticketsort = '2'
                           and cash.sourcefrom = '1'
                         group by cash.orgid,
                                  cash.orgname,
                                  cash.storageorgtype,
                                  cash.iccardname
                         order by cash.storageorgtype, cash.orgname)
                union all
                select *
                  from (select cash.orgid,
                               cash.orgname,
                               cash.storageorgtype,
                               N'全部',
                               round(nvl(sum(cash.totalincome), 0) /
                                     (decode(sum(cash.totalincome),
                                             0,
                                             1,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     2) avgincome,
                               round(nvl(sum(cash.passengerflow), 0) /
                                     (decode(sum(cash.passengerflow),
                                             0,
                                             1,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     0) avgflow
                          from jz_cashincome cash
                         where cash.jzdate >=
                               to_date(startdate, 'yyyy-MM-dd')
                           and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                           and cash.orgid = orgids
                           and cash.storageorgtype = orggrade
                           and cash.datasavelevel = '3'
                           and cash.ticketsort = '2'
                           and cash.sourcefrom = '1'
                         group by cash.orgid,
                                  cash.orgname,
                                  cash.storageorgtype
                         order by cash.storageorgtype, cash.orgname)
                union all
                select *
                  from (select cash.orgid,
                               cash.orgname,
                               cash.storageorgtype,
                               N'全部',
                               round(nvl(sum(cash.totalincome), 0) /
                                     (decode(sum(cash.totalincome),
                                             0,
                                             1,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     2) avgincome,
                               round(nvl(sum(cash.passengerflow), 0) /
                                     (decode(sum(cash.passengerflow),
                                             0,
                                             1,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     0) avgflow
                          from jz_cashincome cash
                         where cash.jzdate >=
                               to_date(startdate, 'yyyy-MM-dd')
                           and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                           and cash.storageorgtype = forggrade
                           and cash.datasavelevel = '3'
                           and cash.ticketsort = '2'
                           and cash.sourcefrom = '1'
                           and cash.orgid in
                               (SELECT orgid
                                  FROM (SELECT O.PARENTORGID,
                                               o.orgtype,
                                               O.ORGID,
                                               O.ORGNAME
                                          FROM MCORGINFOGS O
                                         WHERE PARENTORGID <> '-1'
                                        UNION ALL
                                        SELECT O.ORGID PARENTORGID,
                                               o.orgtype,
                                               O.ORGID,
                                               O.ORGNAME
                                          FROM MCORGINFOGS O
                                         WHERE NOT EXISTS
                                         (SELECT 1
                                                  FROM MCORGINFOGS
                                                 WHERE PARENTORGID = O.ORGID))
                                 WHERE parentorgid = orgids
                                   and orgtype = '1')
                         group by cash.orgid,
                                  cash.orgname,
                                  cash.storageorgtype
                         order by cash.storageorgtype, cash.orgname))
         order by storageorgtype, orgname;
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select *
                  from (select cash.orgid,
                               cash.orgname,
                               cash.storageorgtype,
                               cash.iccardname,
                               round(nvl(sum(cash.totalincome), 0) /
                                     (decode(sum(cash.totalincome),
                                             0,
                                             1,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     2) avgincome,
                               round(nvl(sum(cash.passengerflow), 0) /
                                     (decode(sum(cash.passengerflow),
                                             0,
                                             1,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     0) avgflow
                          from jz_cashincome cash
                         where cash.jzdate >=
                               to_date(startdate, 'yyyy-MM-dd')
                           and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                           and cash.orgid = orgids
                           and cash.storageorgtype = orggrade
                           and cash.datasavelevel = '3'
                           and cash.ticketsort = '2'
                           and cash.sourcefrom = '1'
                         group by cash.orgid,
                                  cash.orgname,
                                  cash.storageorgtype,
                                  cash.iccardname
                         order by cash.storageorgtype, cash.orgname)

                union all

                select *
                  from (select cash.orgid,
                               cash.orgname,
                               cash.storageorgtype,
                               N'全部',
                               round(nvl(sum(cash.totalincome), 0) /
                                     (decode(sum(cash.totalincome),
                                             0,
                                             1,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     2) avgincome,
                               round(nvl(sum(cash.passengerflow), 0) /
                                     (decode(sum(cash.passengerflow),
                                             0,
                                             0,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     0) avgflow
                          from jz_cashincome cash
                         where cash.jzdate >=
                               to_date(startdate, 'yyyy-MM-dd')
                           and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                           and cash.orgid = orgids
                           and cash.storageorgtype = orggrade
                           and cash.datasavelevel = '3'
                           and cash.ticketsort = '2'
                           and cash.sourcefrom = '1'
                         group by cash.orgid,
                                  cash.orgname,
                                  cash.storageorgtype
                         order by cash.storageorgtype, cash.orgname)

                union all
                select *
                  from (select cash.routeid orgid,
                               cash.routename orgname,
                               cash.storageorgtype,
                               N'全部',
                               round(nvl(sum(cash.totalincome), 0) /
                                     (decode(sum(cash.totalincome),
                                             0,
                                             1,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     2) avgincome,
                               round(nvl(sum(cash.passengerflow), 0) /
                                     (decode(sum(cash.passengerflow),
                                             0,
                                             0,
                                             (select count(count(*))
                                                from jz_cashincome cash
                                               where cash.jzdate >=
                                                     to_date(startdate,
                                                             'yyyy-MM-dd')
                                                 and cash.jzdate <=
                                                     to_date(enddate,
                                                             'yyyy-MM-dd')
                                                 and cash.orgid = orgids
                                                 and cash.datasavelevel = '3'
                                               group by cash.orgid, cash.jzdate))),
                                     0) avgflow
                          from jz_cashincome cash
                         where cash.jzdate >=
                               to_date(startdate, 'yyyy-MM-dd')
                           and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                           and cash.storageorgtype = forggrade
                           and cash.datasavelevel = '3'
                           and cash.ticketsort = '2'
                           and cash.sourcefrom = '1'
                           and cash.orgid = orgids
                         group by cash.routeid,
                                  cash.routename,
                                  cash.storageorgtype
                         order by cash.storageorgtype, cash.routename))
         order by storageorgtype, orgname;
    END IF;

  END;
  PROCEDURE ConsumeCard_Analyse_GETTABLE(orgids    VARCHAR2,
                                         orggrade  VARCHAR2,
                                         forggrade VARCHAR2,
                                         ymonth    VARCHAR2,
                                         MYTAB     OUT MYTABLE) AS
  BEGIN
    --分公司、车队
    IF (orggrade = '1' or orggrade = '2') THEN
      OPEN MYTAB FOR
        select cash.orgid orgid,
               cash.orgname orgname,
               to_char(cash.jzdate, 'yyyy-MM') ymonth,
               nvl(sum(cash.totalincome), 0) income,
               nvl(sum(cash.passengerflow), 0) flow,
               cash.storageorgtype
          from jz_cashincome cash
         where ((cash.orgid in (select orgid
                                  from mcorginfogs org
                                 where org.parentorgid = orgids
                                   and org.orgtype = '1') and
               cash.storageorgtype = forggrade) or
               (cash.orgid = orgids and cash.storageorgtype = orggrade))
           and cash.sourcefrom = '1'
           and cash.ticketsort = '2'
           and cash.datasavelevel = '3'
           and ((cash.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
               cash.jzdate < add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
               (cash.jzdate >=
               add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
               cash.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
               (cash.jzdate >=
               add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
               cash.jzdate <
               add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
         group by cash.orgid,
                  cash.orgname,
                  cash.storageorgtype,
                  to_char(cash.jzdate, 'yyyy-MM')
         order by cash.storageorgtype,
                  cash.orgname,
                  to_char(cash.jzdate, 'yyyy-MM');
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select cash.orgid orgid,
                       cash.orgname orgname,
                       to_char(cash.jzdate, 'yyyy-MM') ymonth,
                       nvl(sum(cash.totalincome), 0) income,
                       nvl(sum(cash.passengerflow), 0) flow,
                       cash.storageorgtype
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.storageorgtype = orggrade
                   and cash.sourcefrom = '1'
                   and cash.ticketsort = '2'
                   and cash.datasavelevel = '3'
                   and ((cash.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       cash.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by cash.orgid,
                          cash.orgname,
                          cash.storageorgtype,
                          to_char(cash.jzdate, 'yyyy-MM')
                 order by cash.storageorgtype,
                          cash.orgname,
                          to_char(cash.jzdate, 'yyyy-MM'))
        union all
        select *
          from (select cash.routeid orgid,
                       cash.routename orgname,
                       to_char(cash.jzdate, 'yyyy-MM') ymonth,
                       nvl(sum(cash.totalincome), 0) income,
                       nvl(sum(cash.passengerflow), 0) flow,
                       cash.storageorgtype
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.storageorgtype = forggrade
                   and cash.sourcefrom = '1'
                   and cash.ticketsort = '2'
                   and cash.datasavelevel = '3'
                   and ((cash.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       cash.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by cash.routeid,
                          cash.routename,
                          cash.storageorgtype,
                          to_char(cash.jzdate, 'yyyy-MM')
                 order by cash.storageorgtype,
                          cash.routename,
                          to_char(cash.jzdate, 'yyyy-MM'));
    END IF;
  END;
  PROCEDURE ConsumeCard_Change_GETTABLE(orgids    VARCHAR2,
                                        orggrade  VARCHAR2,
                                        forggrade VARCHAR2,
                                        startdate VARCHAR2,
                                        enddate   VARCHAR2,
                                        MYTAB     OUT MYTABLE) AS
  BEGIN
    OPEN MYTAB FOR
      select *
        from (select cash.orgid,
                     cash.orgname,
                     cash.storageorgtype,
                     cash.routeid,
                     cash.routename,
                     to_char(cash.jzdate, 'yyyy-MM-dd') datetime,
                     nvl(sum(cash.totalincome), 0) income,
                     nvl(sum(cash.passengerflow), 0) flow
                from jz_cashincome cash
               where cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                 and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 and cash.orgid = orgids
                 and cash.storageorgtype = orggrade
                 and cash.datasavelevel = '3'
                 and cash.ticketsort = '2'
                 and cash.sourcefrom = '1'
               group by cash.orgid,
                        cash.orgname,
                        cash.storageorgtype,
                        cash.routeid,
                        cash.routename,
                        cash.jzdate
               order by cash.storageorgtype, cash.orgname, cash.routename)
      union all
      select *
        from (select cash.orgid,
                     cash.orgname,
                     cash.storageorgtype,
                     cash.routeid,
                     cash.routename,
                     to_char(cash.jzdate, 'yyyy-MM-dd') datetime,
                     nvl(sum(cash.totalincome), 0) income,
                     nvl(sum(cash.passengerflow), 0) flow
                from jz_cashincome cash
               where cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                 and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 and cash.storageorgtype = forggrade
                 and cash.datasavelevel = '3'
                 and cash.ticketsort = '2'
                 and cash.sourcefrom = '1'
                 and cash.orgid in
                     (SELECT orgid
                        FROM (SELECT O.PARENTORGID,
                                     o.orgtype,
                                     O.ORGID,
                                     O.ORGNAME
                                FROM MCORGINFOGS O
                               WHERE PARENTORGID <> '-1'
                              UNION ALL
                              SELECT O.ORGID PARENTORGID,
                                     o.orgtype,
                                     O.ORGID,
                                     O.ORGNAME
                                FROM MCORGINFOGS O
                               WHERE NOT EXISTS
                               (SELECT 1
                                        FROM MCORGINFOGS
                                       WHERE PARENTORGID = O.ORGID))
                       WHERE parentorgid = orgids
                         and orgtype = '1')
               group by cash.orgid,
                        cash.orgname,
                        cash.storageorgtype,
                        cash.routeid,
                        cash.routename,
                        cash.jzdate
               order by cash.storageorgtype, cash.orgname, cash.routename);
  END;
  PROCEDURE DailyMileage_GETTABLE(orgids    VARCHAR2,
                                  orggrade  VARCHAR2,
                                  startdate VARCHAR2,
                                  enddate   VARCHAR2,
                                  MYTAB     OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
        select *
          from (select t.COMPANYID orgid,
                       t.companyname orgname,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avggps,
                       round(nvl(sum(t.GPSMILES), 0) /
                             (decode(sum(t.GPSMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.COMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.COMPANYID, t.jzdate))),
                             2) sumgps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgrun,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.COMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.COMPANYID, t.jzdate))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.UNRUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.COMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.COMPANYID, t.jzdate))),
                             2) sumunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.UNRUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.COMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.COMPANYID, t.jzdate))),
                             2) +
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.COMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.COMPANYID, t.jzdate))),
                             2) sumdrive
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.COMPANYID, t.companyname)

        union all

        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avggps,
                       round(nvl(sum(t.GPSMILES), 0) /
                             (decode(sum(t.GPSMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.COMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.COMPANYID, t.jzdate))),
                             2) sumgps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgrun,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.COMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.COMPANYID, t.jzdate))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.UNRUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.COMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.COMPANYID, t.jzdate))),
                             2) sumunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.UNRUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.COMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.COMPANYID, t.jzdate))),
                             2) +
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.COMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.COMPANYID, t.jzdate))),
                             2) sumdrive
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname
                 order by t.subcompanyname);
      --车队
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avggps,
                       round(nvl(sum(t.GPSMILES), 0) /
                             (decode(sum(t.GPSMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.SUBCOMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.SUBCOMPANYID, t.jzdate))),
                             2) sumgps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgrun,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.SUBCOMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.SUBCOMPANYID, t.jzdate))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.SUBCOMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.SUBCOMPANYID, t.jzdate))),
                             2) sumunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.UNRUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.SUBCOMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.SUBCOMPANYID, t.jzdate))),
                             2) +
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.SUBCOMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.SUBCOMPANYID, t.jzdate))),
                             2) sumdrive
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname)

        union all

        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avggps,
                       round(nvl(sum(t.GPSMILES), 0) /
                             (decode(sum(t.GPSMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.SUBCOMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.SUBCOMPANYID, t.jzdate))),
                             2) sumgps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgrun,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.SUBCOMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.SUBCOMPANYID, t.jzdate))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.UNRUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.SUBCOMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.SUBCOMPANYID, t.jzdate))),
                             2) sumunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.UNRUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.SUBCOMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.SUBCOMPANYID, t.jzdate))),
                             2) +
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.SUBCOMPANYID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.SUBCOMPANYID, t.jzdate))),
                             2) sumdrive
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname
                 order by t.orgname);
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avggps,
                       round(nvl(sum(t.GPSMILES), 0) /
                             (decode(sum(t.GPSMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.ORGID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.ORGID, t.jzdate))),
                             2) sumgps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgrun,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.ORGID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.ORGID, t.jzdate))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.UNRUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.ORGID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.ORGID, t.jzdate))),
                             2) sumunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.UNRUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.ORGID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.ORGID, t.jzdate))),
                             2) +
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.ORGID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.ORGID, t.jzdate))),
                             2) sumdrive
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname)
        union all
        select *
          from (select t.ROUTEID orgid,
                       t.ROUTENAME orgname,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avggps,
                       round(nvl(sum(t.GPSMILES), 0) /
                             (decode(sum(t.GPSMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.ORGID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.ORGID, t.jzdate))),
                             2) sumgps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgrun,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.ORGID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.ORGID, t.jzdate))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) avgunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.UNRUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.ORGID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.ORGID, t.jzdate))),
                             2) sumunrun,
                       round(nvl(sum(t.UNRUNMILES), 0) /
                             (decode(sum(t.UNRUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.ORGID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.ORGID, t.jzdate))),
                             2) +
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and t.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and t.ORGID = orgids
                                         and t.datasavelevel = '3'
                                       group by t.ORGID, t.jzdate))),
                             2) sumdrive
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ROUTEID, t.ROUTENAME
                 order by t.ROUTENAME);

    END IF;
  END;
  PROCEDURE DailyMileage_Change_GETTABLE(orgids    VARCHAR2,
                                         orggrade  VARCHAR2,
                                         startdate VARCHAR2,
                                         enddate   VARCHAR2,
                                         MYTAB     OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
        select *
          from (select t.COMPANYID orgid,
                       t.companyname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       nvl(sum(t.UNRUNMILES), 0) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.COMPANYID, t.companyname, t.JZDATE
                 order by t.companyname, t.JZDATE)
        union all
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       nvl(sum(t.UNRUNMILES), 0) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname, t.JZDATE
                 order by t.subcompanyname, t.JZDATE);
      --车队
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       nvl(sum(t.UNRUNMILES), 0) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname, t.JZDATE
                 order by t.subcompanyname, t.JZDATE)
        union all
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       nvl(sum(t.UNRUNMILES), 0) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname, t.JZDATE
                 order by t.orgname, t.JZDATE);
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       nvl(sum(t.UNRUNMILES), 0) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname, t.JZDATE
                 order by t.orgname, t.JZDATE)
        union all
        select *
          from (select t.ROUTEID orgid,
                       t.ROUTENAME orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       nvl(sum(t.UNRUNMILES), 0) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ROUTEID, t.ROUTENAME, t.JZDATE
                 order by t.ROUTENAME, t.JZDATE);
    END IF;
  END;
  PROCEDURE DailyMileage_Analyse_GETTABLE(orgids   VARCHAR2,
                                          orggrade VARCHAR2,
                                          ymonth   VARCHAR2,
                                          MYTAB    OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
        select *
          from (select t.COMPANYID orgid,
                       t.companyname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.COMPANYID = orgids
                                         and t.orgtype = '1'
                                         and t.DATASAVELEVEL = '3'
                                         and t.JZDATE >=
                                             to_date(ymonth, 'yyyy-MM-dd')
                                         and t.JZDATE <=
                                             add_months(to_date(ymonth,
                                                                'yyyy-MM-dd'),
                                                        1)
                                       group by t.COMPANYID, t.JZDATE))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.SUBCOMPANYID in
                       (select org.orgid
                          from mcorginfogs org
                         where org.parentorgid = orgids
                           and org.orgtype = '1'
                           and org.orggrade = '2')
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.COMPANYID,
                          t.companyname,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.companyname, to_char(t.jzdate, 'yyyy-MM'))
        union all
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.COMPANYID = orgids
                                         and t.orgtype = '1'
                                         and t.DATASAVELEVEL = '3'
                                         and t.JZDATE >=
                                             to_date(ymonth, 'yyyy-MM-dd')
                                         and t.JZDATE <=
                                             add_months(to_date(ymonth,
                                                                'yyyy-MM-dd'),
                                                        1)
                                       group by t.COMPANYID, t.JZDATE))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.SUBCOMPANYID in
                       (select org.orgid
                          from mcorginfogs org
                         where org.parentorgid = orgids
                           and org.orgtype = '1'
                           and org.orggrade = '2')
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.SUBCOMPANYID,
                          t.subcompanyname,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.subcompanyname, to_char(t.jzdate, 'yyyy-MM'));
      --车队
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.SUBCOMPANYID = orgids
                                         and t.orgtype = '1'
                                         and t.DATASAVELEVEL = '3'
                                         and t.JZDATE >=
                                             to_date(ymonth, 'yyyy-MM-dd')
                                         and t.JZDATE <=
                                             add_months(to_date(ymonth,
                                                                'yyyy-MM-dd'),
                                                        1)
                                       group by t.SUBCOMPANYID, t.JZDATE))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.ORGID in (select org.orgid
                                     from mcorginfogs org
                                    where org.parentorgid = orgids
                                      and org.orggrade = 3
                                      and org.orgtype = '1')
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.SUBCOMPANYID,
                          t.subcompanyname,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.subcompanyname, to_char(t.jzdate, 'yyyy-MM'))
        union all
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.SUBCOMPANYID = orgids
                                         and t.orgtype = '1'
                                         and t.DATASAVELEVEL = '3'
                                         and t.JZDATE >=
                                             to_date(ymonth, 'yyyy-MM-dd')
                                         and t.JZDATE <=
                                             add_months(to_date(ymonth,
                                                                'yyyy-MM-dd'),
                                                        1)
                                       group by t.SUBCOMPANYID, t.JZDATE))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.ORGID in (select org.orgid
                                     from mcorginfogs org
                                    where org.parentorgid = orgids
                                      and org.orggrade = 3
                                      and org.orgtype = '1')
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.ORGID, t.orgname, to_char(t.jzdate, 'yyyy-MM')
                 order by t.orgname, to_char(t.jzdate, 'yyyy-MM'));
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.ORGID = orgids
                                         and t.orgtype = '1'
                                         and t.DATASAVELEVEL = '3'
                                         and t.JZDATE >=
                                             to_date(ymonth, 'yyyy-MM-dd')
                                         and t.JZDATE <=
                                             add_months(to_date(ymonth,
                                                                'yyyy-MM-dd'),
                                                        1)
                                       group by t.ORGID, t.JZDATE))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.ORGID, t.orgname, to_char(t.jzdate, 'yyyy-MM')
                 order by t.orgname, to_char(t.jzdate, 'yyyy-MM'))
        union all
        select *
          from (select t.ROUTEID orgid,
                       t.ROUTENAME orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.GPSMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) gps,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.RUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) run,
                       round(nvl(sum(t.RUNMILES), 0) /
                             (decode(sum(t.RUNMILES),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from routedaystoragevw t
                                       where t.ORGID = orgids
                                         and t.orgtype = '1'
                                         and t.DATASAVELEVEL = '3'
                                         and t.JZDATE >=
                                             to_date(ymonth, 'yyyy-MM-dd')
                                         and t.JZDATE <=
                                             add_months(to_date(ymonth,
                                                                'yyyy-MM-dd'),
                                                        1)
                                       group by t.ORGID, t.JZDATE))),
                             2) sumrun,
                       round(decode(nvl(sum(t.DEVOTIONBUSCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.UNRUNMILES), 0) /
                                    nvl(sum(t.DEVOTIONBUSCOUNT), 0)),
                             2) unrun
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.ROUTEID,
                          t.ROUTENAME,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.ROUTENAME, to_char(t.jzdate, 'yyyy-MM'));
    END IF;
  END;
  PROCEDURE Privilege_GETTABLE(orgids    VARCHAR2,
                               orggrade  VARCHAR2,
                               startdate VARCHAR2,
                               enddate   VARCHAR2,
                               MYTAB     OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
        select *
          from (select t.COMPANYID orgid,
                       t.companyname orgname,
                       N'全部' iccardname,
                       round(nvl(sum(t.FAVORABLE_INCOME), 0) /
                             (decode(sum(t.FAVORABLE_INCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) favormoney,
                       round(nvl(sum(t.TOTALINCOME), 0) /
                             (decode(sum(t.TOTALINCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) income,
                       round(nvl(sum(t.FAVORABLE_FLOW), 0) /
                             (decode(sum(t.FAVORABLE_FLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) favorflow,
                       round(nvl(sum(t.PASSENGERFLOW), 0) /
                             (decode(sum(t.PASSENGERFLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) flow
                  from cashincomedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.COMPANYID, t.companyname
                 order by t.companyname)
        union all
        select *
          from (select t.COMPANYID orgid,
                       t.companyname orgname,
                       t.ICCARDNAME,
                       round(nvl(sum(t.FAVORABLE_INCOME), 0) /
                             (decode(sum(t.FAVORABLE_INCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) favormoney,
                       round(nvl(sum(t.TOTALINCOME), 0) /
                             (decode(sum(t.TOTALINCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) income,
                       round(nvl(sum(t.FAVORABLE_FLOW), 0) /
                             (decode(sum(t.FAVORABLE_FLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) favorflow,
                       round(nvl(sum(t.PASSENGERFLOW), 0) /
                             (decode(sum(t.PASSENGERFLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) flow
                  from cashincomedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.COMPANYID, t.companyname, t.ICCARDNAME
                 order by t.companyname, t.ICCARDNAME)
        union all
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       N'全部',
                       round(nvl(sum(t.FAVORABLE_INCOME), 0) /
                             (decode(sum(t.FAVORABLE_INCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) favormoney,
                       round(nvl(sum(t.TOTALINCOME), 0) /
                             (decode(sum(t.TOTALINCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) income,
                       round(nvl(sum(t.FAVORABLE_FLOW), 0) /
                             (decode(sum(t.FAVORABLE_FLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) favorflow,
                       round(nvl(sum(t.PASSENGERFLOW), 0) /
                             (decode(sum(t.PASSENGERFLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) flow
                  from cashincomedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname
                 order by t.subcompanyname);
      --车队
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       N'全部' iccardname,
                       round(nvl(sum(t.FAVORABLE_INCOME), 0) /
                             (decode(sum(t.FAVORABLE_INCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) favormoney,
                       round(nvl(sum(t.TOTALINCOME), 0) /
                             (decode(sum(t.TOTALINCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) income,
                       round(nvl(sum(t.FAVORABLE_FLOW), 0) /
                             (decode(sum(t.FAVORABLE_FLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) favorflow,
                       round(nvl(sum(t.PASSENGERFLOW), 0) /
                             (decode(sum(t.PASSENGERFLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) flow
                  from cashincomedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname
                 order by t.subcompanyname)
        union all
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       t.ICCARDNAME,
                       round(nvl(sum(t.FAVORABLE_INCOME), 0) /
                             (decode(sum(t.FAVORABLE_INCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) favormoney,
                       round(nvl(sum(t.TOTALINCOME), 0) /
                             (decode(sum(t.TOTALINCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) income,
                       round(nvl(sum(t.FAVORABLE_FLOW), 0) /
                             (decode(sum(t.FAVORABLE_FLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) favorflow,
                       round(nvl(sum(t.PASSENGERFLOW), 0) /
                             (decode(sum(t.PASSENGERFLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) flow
                  from cashincomedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname, t.ICCARDNAME
                 order by t.subcompanyname, t.ICCARDNAME)
        union all
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       N'全部',
                       round(nvl(sum(t.FAVORABLE_INCOME), 0) /
                             (decode(sum(t.FAVORABLE_INCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) favormoney,
                       round(nvl(sum(t.TOTALINCOME), 0) /
                             (decode(sum(t.TOTALINCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) income,
                       round(nvl(sum(t.FAVORABLE_FLOW), 0) /
                             (decode(sum(t.FAVORABLE_FLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) favorflow,
                       round(nvl(sum(t.PASSENGERFLOW), 0) /
                             (decode(sum(t.PASSENGERFLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) flow
                  from cashincomedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname
                 order by t.orgname);
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       N'全部' iccardname,
                       round(nvl(sum(t.FAVORABLE_INCOME), 0) /
                             (decode(sum(t.FAVORABLE_INCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) favormoney,
                       round(nvl(sum(t.TOTALINCOME), 0) /
                             (decode(sum(t.TOTALINCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) income,
                       round(nvl(sum(t.FAVORABLE_FLOW), 0) /
                             (decode(sum(t.FAVORABLE_FLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) favorflow,
                       round(nvl(sum(t.PASSENGERFLOW), 0) /
                             (decode(sum(t.PASSENGERFLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) flow
                  from cashincomedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname
                 order by t.orgname)
        union all
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       t.ICCARDNAME,
                       round(nvl(sum(t.FAVORABLE_INCOME), 0) /
                             (decode(sum(t.FAVORABLE_INCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) favormoney,
                       round(nvl(sum(t.TOTALINCOME), 0) /
                             (decode(sum(t.TOTALINCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) income,
                       round(nvl(sum(t.FAVORABLE_FLOW), 0) /
                             (decode(sum(t.FAVORABLE_FLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) favorflow,
                       round(nvl(sum(t.PASSENGERFLOW), 0) /
                             (decode(sum(t.PASSENGERFLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) flow
                  from cashincomedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname, t.ICCARDNAME
                 order by t.orgname, t.ICCARDNAME)
        union all
        select *
          from (select t.ROUTEID orgid,
                       t.ROUTENAME orgname,
                       N'全部',
                       round(nvl(sum(t.FAVORABLE_INCOME), 0) /
                             (decode(sum(t.FAVORABLE_INCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) favormoney,
                       round(nvl(sum(t.TOTALINCOME), 0) /
                             (decode(sum(t.TOTALINCOME),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             2) income,
                       round(nvl(sum(t.FAVORABLE_FLOW), 0) /
                             (decode(sum(t.FAVORABLE_FLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) favorflow,
                       round(nvl(sum(t.PASSENGERFLOW), 0) /
                             (decode(sum(t.PASSENGERFLOW),
                                     0,
                                     1,
                                     (select count(count(*))
                                        from jz_cashincome cash
                                       where cash.jzdate >=
                                             to_date(startdate, 'yyyy-MM-dd')
                                         and cash.jzdate <=
                                             to_date(enddate, 'yyyy-MM-dd')
                                         and cash.orgid = orgids
                                         and cash.datasavelevel = '3'
                                       group by cash.orgid, cash.jzdate))),
                             0) flow
                  from cashincomedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ROUTEID, t.ROUTENAME
                 order by t.ROUTENAME);
    END IF;
  END;
  PROCEDURE Privilege_Change_GETTABLE(orgids    VARCHAR2,
                                      orggrade  VARCHAR2,
                                      startdate VARCHAR2,
                                      enddate   VARCHAR2,
                                      MYTAB     OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
        select *
          from (select t.COMPANYID orgid,
                       t.companyname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.COMPANYID, t.companyname, t.JZDATE
                 order by t.companyname, t.JZDATE)
        union all
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname, t.JZDATE
                 order by t.subcompanyname, t.JZDATE);
      --车队
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname, t.JZDATE
                 order by t.subcompanyname, t.JZDATE)
        union all
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname, t.JZDATE
                 order by t.orgname, t.JZDATE);
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname, t.JZDATE
                 order by t.orgname, t.JZDATE)
        union all
        select *
          from (select t.ROUTEID orgid,
                       t.ROUTENAME orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ROUTEID, t.ROUTENAME, t.JZDATE
                 order by t.ROUTENAME, t.JZDATE);

    END IF;
  END;
  PROCEDURE Privilege_Analyse_GETTABLE(orgids   VARCHAR2,
                                       orggrade VARCHAR2,
                                       ymonth   VARCHAR2,
                                       MYTAB    OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
        select *
          from (select t.COMPANYID orgid,
                       t.companyname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.COMPANYID,
                          t.companyname,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.companyname, to_char(t.jzdate, 'yyyy-MM'))
        union all
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.SUBCOMPANYID,
                          t.subcompanyname,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.SUBCOMPANYID,
                          t.subcompanyname,
                          to_char(t.jzdate, 'yyyy-MM'));
      --车队
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.SUBCOMPANYID,
                          t.subcompanyname,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.subcompanyname, to_char(t.jzdate, 'yyyy-MM'))
        union all
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.ORGID, t.orgname, to_char(t.jzdate, 'yyyy-MM')
                 order by t.orgname, to_char(t.jzdate, 'yyyy-MM'));
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.ORGID, t.orgname, to_char(t.jzdate, 'yyyy-MM')
                 order by t.orgname, to_char(t.jzdate, 'yyyy-MM'))
        union all
        select *
          from (select t.ROUTEID orgid,
                       t.ROUTENAME orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       sum(t.FAVORABLE_INCOME) favormoney,
                       round(decode(nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0),
                                    0,
                                    0,
                                    sum(t.FAVORABLE_INCOME) /
                                    nvl((sum(t.TOTALINCOME) +
                                        sum(t.FAVORABLE_INCOME)),
                                        0)),
                             4) moneyrate,
                       sum(t.FAVORABLE_FLOW) favorflow,
                       round(decode(nvl(sum(t.PASSENGERFLOW), 0),
                                    0,
                                    0,
                                    nvl(sum(t.FAVORABLE_FLOW), 0) /
                                    nvl(sum(t.PASSENGERFLOW), 0)),
                             4) flowrate
                  from cashincomedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.DATASAVELEVEL = '3'
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.ROUTEID,
                          t.ROUTENAME,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.ROUTENAME, to_char(t.jzdate, 'yyyy-MM'));
    END IF;
  END;
  PROCEDURE DriverWorkingHours_GETTABLE(orgids    VARCHAR2,
                                        orggrade  VARCHAR2,
                                        startdate VARCHAR2,
                                        enddate   VARCHAR2,
                                        MYTAB     OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
        select *
          from (select t.COMPANYID orgid,
                       t.companyname orgname,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgworktime
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.COMPANYID, t.companyname)
        union all
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgworktime
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname
                 order by t.subcompanyname);
      --车队
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgworktime
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname)

        union all

        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgworktime
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname
                 order by t.orgname);
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgworktime
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname)

        union all

        select *
          from (select t.ROUTEID orgid,
                       t.ROUTENAME orgname,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) avgworktime
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ROUTEID, t.ROUTENAME
                 order by t.ROUTENAME);

    END IF;
  END;
  PROCEDURE WorkingHours_Change_GETTABLE(orgids    VARCHAR2,
                                         orggrade  VARCHAR2,
                                         startdate VARCHAR2,
                                         enddate   VARCHAR2,
                                         MYTAB     OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
        select *
          from (select t.COMPANYID orgid,
                       t.companyname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumworktime
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.COMPANYID, t.companyname, t.JZDATE
                 order by t.COMPANYID, t.companyname, t.JZDATE)
        union all
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumworktime
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname, t.JZDATE
                 order by t.subcompanyname, t.JZDATE);
      --车队
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumworktime
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname, t.JZDATE
                 order by t.subcompanyname, t.JZDATE)

        union all

        select *
          from (

                select t.ORGID orgid,
                        t.orgname orgname,
                        to_char(t.JZDATE, 'yyyy-MM-dd') days,
                        round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                     0,
                                     0,
                                     nvl(sum(t.DRIVERDRIVETIME *
                                             t.DEVOTIONEMPCOUNT),
                                         0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                              2) sumdrivetime,
                        round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                     0,
                                     0,
                                     nvl(sum(t.DRIVERONWORKTIME *
                                             t.DEVOTIONEMPCOUNT),
                                         0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                              2) sumworktime
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname, t.JZDATE
                 order by t.orgname, t.JZDATE);
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumworktime
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname, t.JZDATE
                 order by t.orgname, t.JZDATE)
        union all
        select *
          from (select t.ROUTEID orgid,
                       t.ROUTENAME orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       nvl(t.DRIVERDRIVETIME, 0) sumdrivetime,
                       nvl(t.DRIVERONWORKTIME, 0) sumworktime
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 order by t.ROUTENAME, t.JZDATE);
    END IF;
  END;
  PROCEDURE WorkingHours_Analyse_GETTABLE(orgids   VARCHAR2,
                                          orggrade VARCHAR2,
                                          ymonth   VARCHAR2,
                                          MYTAB    OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
        select *
          from (select t.COMPANYID orgid,
                       t.companyname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumworktime
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.COMPANYID,
                          t.companyname,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.companyname, to_char(t.jzdate, 'yyyy-MM'))
        union all
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumworktime
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.SUBCOMPANYID in
                       (select org.orgid
                          from mcorginfogs org
                         where org.parentorgid = orgids
                           and org.orgtype = '1'
                           and org.orggrade = '2')
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.SUBCOMPANYID,
                          t.subcompanyname,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.subcompanyname, to_char(t.jzdate, 'yyyy-MM'));
      --车队
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select *
          from (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumworktime
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.SUBCOMPANYID,
                          t.subcompanyname,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.subcompanyname, to_char(t.jzdate, 'yyyy-MM'))
        union all
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumworktime
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.ORGID in (select org.orgid
                                     from mcorginfogs org
                                    where org.parentorgid = orgids
                                      and org.orggrade = 3
                                      and org.orgtype = '1')
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.ORGID, t.orgname, to_char(t.jzdate, 'yyyy-MM')
                 order by t.orgname, to_char(t.jzdate, 'yyyy-MM'));
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERDRIVETIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumdrivetime,
                       round(decode(nvl(sum(t.DEVOTIONEMPCOUNT), 0),
                                    0,
                                    0,
                                    nvl(sum(t.DRIVERONWORKTIME *
                                            t.DEVOTIONEMPCOUNT),
                                        0) / nvl(sum(t.DEVOTIONEMPCOUNT), 0)),
                             2) sumworktime
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.ORGID, t.orgname, to_char(t.jzdate, 'yyyy-MM')
                 order by t.orgname, to_char(t.jzdate, 'yyyy-MM'))
        union all
        select *
          from (select t.ROUTEID orgid,
                       t.ROUTENAME orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       round(nvl(sum(t.DRIVERDRIVETIME), 0) /
                             (add_months(to_date(ymonth, 'yyyy-MM-dd'), 1) -
                              to_date(ymonth, 'yyyy-MM-dd') + 1),
                             2) sumdrivetime,
                       round(nvl(sum(t.DRIVERONWORKTIME), 0) /
                             (add_months(to_date(ymonth, 'yyyy-MM-dd'), 1) -
                              to_date(ymonth, 'yyyy-MM-dd') + 1),
                             2) sumworktime
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and t.ROUTEID in
                       (select route.routeid
                          from mcrouteinfogs route
                         where route.orgid = orgids
                           and route.routetype = 1)
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.ROUTEID,
                          t.ROUTENAME,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.ROUTENAME, to_char(t.jzdate, 'yyyy-MM'));
    END IF;
  END;

  PROCEDURE ICIncome_GETTABLE(orgids    VARCHAR2,
                              orggrade  VARCHAR2,
                              forggrade VARCHAR2,
                              startdate VARCHAR2,
                              enddate   VARCHAR2,
                              MYTAB     OUT MYTABLE) AS
  BEGIN
    IF (orggrade = '1' or orggrade = '2') THEN
      OPEN MYTAB FOR
      --公司、车队刷卡金额及人次
        select cash.orgid orgid,
               cash.orgname orgname,
               cash.storageorgtype,
               round(nvl(sum(cash.totalincome), 0) /
                     decode(sum(cash.totalincome),
                            0,
                            1,
                            (select count(count(*))
                               from jz_cashincome cash
                              where cash.jzdate >=
                                    to_date(startdate, 'yyyy-MM-dd')
                                and cash.jzdate <=
                                    to_date(enddate, 'yyyy-MM-dd')
                                and cash.orgid = orgids
                                and cash.datasavelevel = '3'
                              group by cash.orgid, cash.jzdate)),
                     2) ICincome,
               round(nvl(sum(cash.passengerflow), 0) /
                     decode(sum(cash.passengerflow),
                            0,
                            1,
                            (select count(count(*))
                               from jz_cashincome cash
                              where cash.jzdate >=
                                    to_date(startdate, 'yyyy-MM-dd')
                                and cash.jzdate <=
                                    to_date(enddate, 'yyyy-MM-dd')
                                and cash.orgid = orgids
                                and cash.datasavelevel = '3'
                              group by cash.orgid, cash.jzdate)),
                     0) ICflow
          from jz_cashincome cash
         where ((cash.orgid = orgids and cash.storageorgtype = orggrade) or
               (cash.orgid in
               (SELECT orgid
                    FROM (SELECT O.PARENTORGID, o.orgtype, O.ORGID, O.ORGNAME
                            FROM MCORGINFOGS O
                           WHERE PARENTORGID <> '-1'
                          UNION ALL
                          SELECT O.ORGID PARENTORGID,
                                 o.orgtype,
                                 O.ORGID,
                                 O.ORGNAME
                            FROM MCORGINFOGS O
                           WHERE NOT EXISTS
                           (SELECT 1
                                    FROM MCORGINFOGS
                                   WHERE PARENTORGID = O.ORGID))
                   WHERE parentorgid = orgids
                     and orgtype = '1') and
               cash.storageorgtype = forggrade))
           and cash.sourcefrom = '1'
           and cash.ticketsort = '2'
           and cash.datasavelevel = '3'
           and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
           and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
         group by cash.orgid, cash.orgname, cash.storageorgtype
         order by cash.storageorgtype, cash.orgname;
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select cash.orgid orgid,
                       cash.orgname orgname,
                       round(nvl(sum(cash.totalincome), 0) /
                             decode(sum(cash.totalincome),
                                    0,
                                    1,
                                    (select count(count(*))
                                       from jz_cashincome cash
                                      where cash.jzdate >=
                                            to_date(startdate, 'yyyy-MM-dd')
                                        and cash.jzdate <=
                                            to_date(enddate, 'yyyy-MM-dd')
                                        and cash.orgid = orgids
                                        and cash.datasavelevel = '3'
                                      group by cash.orgid, cash.jzdate)),
                             2) ICincome,
                       round(nvl(sum(cash.passengerflow), 0) /
                             decode(sum(cash.passengerflow),
                                    0,
                                    1,
                                    (select count(count(*))
                                       from jz_cashincome cash
                                      where cash.jzdate >=
                                            to_date(startdate, 'yyyy-MM-dd')
                                        and cash.jzdate <=
                                            to_date(enddate, 'yyyy-MM-dd')
                                        and cash.orgid = orgids
                                        and cash.datasavelevel = '3'
                                      group by cash.orgid, cash.jzdate)),
                             0) ICflow
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.storageorgtype = 3
                   and cash.sourcefrom = '1'
                   and cash.ticketsort = '2'
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.orgid, cash.orgname
                 order by cash.orgname)
        union all
        select *
          from (select cash.routeid orgid,
                       cash.routename orgname,
                       round(nvl(sum(cash.totalincome), 0) /
                             decode(sum(cash.passengerflow),
                                    0,
                                    1,
                                    (select count(count(*))
                                       from jz_cashincome cash
                                      where cash.jzdate >=
                                            to_date(startdate, 'yyyy-MM-dd')
                                        and cash.jzdate <=
                                            to_date(enddate, 'yyyy-MM-dd')
                                        and cash.orgid = orgids
                                        and cash.datasavelevel = '3'
                                      group by cash.orgid, cash.jzdate)),
                             2) ICincome,
                       round(nvl(sum(cash.passengerflow), 0) /
                             decode(sum(cash.passengerflow),
                                    0,
                                    1,
                                    (select count(count(*))
                                       from jz_cashincome cash
                                      where cash.jzdate >=
                                            to_date(startdate, 'yyyy-MM-dd')
                                        and cash.jzdate <=
                                            to_date(enddate, 'yyyy-MM-dd')
                                        and cash.orgid = orgids
                                        and cash.datasavelevel = '3'
                                      group by cash.orgid, cash.jzdate)),
                             0) ICflow
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.storageorgtype = 4
                   and cash.sourcefrom = '1'
                   and cash.ticketsort = '2'
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.routeid, cash.routename
                 order by cash.routename);
    END IF;
  END;

  PROCEDURE CashIncome_GETTABLE(orgids    VARCHAR2,
                                orggrade  VARCHAR2,
                                forggrade VARCHAR2,
                                startdate VARCHAR2,
                                enddate   VARCHAR2,
                                MYTAB     OUT MYTABLE) AS
  BEGIN
    IF (orggrade = '1' or orggrade = '2') THEN
      OPEN MYTAB FOR
      --公司、车队投币金额及人次
        select cash.orgid orgid,
               cash.orgname orgname,
               cash.storageorgtype,
               round(nvl(sum(cash.totalincome), 0) /
                     decode(sum(cash.totalincome),
                            0,
                            1,
                            (select count(count(*))
                               from jz_cashincome cash
                              where cash.jzdate >=
                                    to_date(startdate, 'yyyy-MM-dd')
                                and cash.jzdate <=
                                    to_date(enddate, 'yyyy-MM-dd')
                                and cash.orgid = orgids
                                and cash.datasavelevel = '3'
                              group by cash.orgid, cash.jzdate)),
                     2) Cashincome,
               round(nvl(sum(cash.passengerflow), 0) /
                     decode(sum(cash.passengerflow),
                            0,
                            1,
                            (select count(count(*))
                               from jz_cashincome cash
                              where cash.jzdate >=
                                    to_date(startdate, 'yyyy-MM-dd')
                                and cash.jzdate <=
                                    to_date(enddate, 'yyyy-MM-dd')
                                and cash.orgid = orgids
                                and cash.datasavelevel = '3'
                              group by cash.orgid, cash.jzdate)),
                     0) Cashflow
          from jz_cashincome cash
         where ((cash.orgid = orgids and cash.storageorgtype = orggrade) or
               (cash.orgid in
               (SELECT orgid
                    FROM (SELECT O.PARENTORGID, o.orgtype, O.ORGID, O.ORGNAME
                            FROM MCORGINFOGS O
                           WHERE PARENTORGID <> '-1'
                          UNION ALL
                          SELECT O.ORGID PARENTORGID,
                                 o.orgtype,
                                 O.ORGID,
                                 O.ORGNAME
                            FROM MCORGINFOGS O
                           WHERE NOT EXISTS
                           (SELECT 1
                                    FROM MCORGINFOGS
                                   WHERE PARENTORGID = O.ORGID))
                   WHERE parentorgid = orgids
                     and orgtype = '1') and
               cash.storageorgtype = forggrade))
           and cash.sourcefrom = '1'
           and cash.ticketsort = '1'
           and cash.datasavelevel = '3'
           and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
           and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
         group by cash.orgid, cash.orgname, cash.storageorgtype
         order by cash.storageorgtype, cash.orgname;
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select cash.orgid orgid,
                       cash.orgname orgname,
                       round(nvl(sum(cash.totalincome), 0) /
                             decode(sum(cash.totalincome),
                                    0,
                                    1,
                                    (select count(count(*))
                                       from jz_cashincome cash
                                      where cash.jzdate >=
                                            to_date(startdate, 'yyyy-MM-dd')
                                        and cash.jzdate <=
                                            to_date(enddate, 'yyyy-MM-dd')
                                        and cash.orgid = orgids
                                        and cash.datasavelevel = '3'
                                      group by cash.orgid, cash.jzdate)),
                             2) Cashincome,
                       round(nvl(sum(cash.passengerflow), 0) /
                             decode(sum(cash.passengerflow),
                                    0,
                                    1,
                                    (select count(count(*))
                                       from jz_cashincome cash
                                      where cash.jzdate >=
                                            to_date(startdate, 'yyyy-MM-dd')
                                        and cash.jzdate <=
                                            to_date(enddate, 'yyyy-MM-dd')
                                        and cash.orgid = orgids
                                        and cash.datasavelevel = '3'
                                      group by cash.orgid, cash.jzdate)),
                             0) Cashflow
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.storageorgtype = 3
                   and cash.sourcefrom = '1'
                   and cash.ticketsort = '1'
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.orgid, cash.orgname
                 order by cash.orgname)
        union all
        select *
          from (select cash.routeid orgid,
                       cash.routename orgname,
                       round(nvl(sum(cash.totalincome), 0) /
                             decode(sum(cash.passengerflow),
                                    0,
                                    1,
                                    (select count(count(*))
                                       from jz_cashincome cash
                                      where cash.jzdate >=
                                            to_date(startdate, 'yyyy-MM-dd')
                                        and cash.jzdate <=
                                            to_date(enddate, 'yyyy-MM-dd')
                                        and cash.orgid = orgids
                                        and cash.datasavelevel = '3'
                                      group by cash.orgid, cash.jzdate)),
                             2) Cashincome,
                       round(nvl(sum(cash.passengerflow), 0) /
                             decode(sum(cash.passengerflow),
                                    0,
                                    1,
                                    (select count(count(*))
                                       from jz_cashincome cash
                                      where cash.jzdate >=
                                            to_date(startdate, 'yyyy-MM-dd')
                                        and cash.jzdate <=
                                            to_date(enddate, 'yyyy-MM-dd')
                                        and cash.orgid = orgids
                                        and cash.datasavelevel = '3'
                                      group by cash.orgid, cash.jzdate)),
                             0) Cashflow
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.storageorgtype = 4
                   and cash.sourcefrom = '1'
                   and cash.ticketsort = '1'
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.routeid, cash.routename
                 order by cash.routename);
    END IF;
  END;

  PROCEDURE OtherIncome_GETTABLE(orgids    VARCHAR2,
                                 orggrade  VARCHAR2,
                                 forggrade VARCHAR2,
                                 startdate VARCHAR2,
                                 enddate   VARCHAR2,
                                 MYTAB     OUT MYTABLE) AS
  BEGIN
    IF (orggrade = '1' or orggrade = '2') THEN
      OPEN MYTAB FOR
      --公司、车队其他收入金额
        select cash.orgid orgid,
               cash.orgname orgname,
               cash.storageorgtype,
               round(nvl(sum(cash.totalincome), 0) /
                     decode(sum(cash.totalincome),
                            0,
                            1,
                            (select count(count(*))
                               from jz_cashincome cash
                              where cash.jzdate >=
                                    to_date(startdate, 'yyyy-MM-dd')
                                and cash.jzdate <=
                                    to_date(enddate, 'yyyy-MM-dd')
                                and cash.orgid = orgids
                                and cash.datasavelevel = '3'
                              group by cash.orgid, cash.jzdate)),
                     2) carincome
          from jz_cashincome cash
         where ((cash.orgid = orgids and cash.storageorgtype = orggrade) or
               (cash.orgid in
               (SELECT orgid
                    FROM (SELECT O.PARENTORGID, o.orgtype, O.ORGID, O.ORGNAME
                            FROM MCORGINFOGS O
                           WHERE PARENTORGID <> '-1'
                          UNION ALL
                          SELECT O.ORGID PARENTORGID,
                                 o.orgtype,
                                 O.ORGID,
                                 O.ORGNAME
                            FROM MCORGINFOGS O
                           WHERE NOT EXISTS
                           (SELECT 1
                                    FROM MCORGINFOGS
                                   WHERE PARENTORGID = O.ORGID))
                   WHERE parentorgid = orgids
                     and orgtype = '1') and
               cash.storageorgtype = forggrade))
           and cash.sourcefrom = '3'
           and cash.datasavelevel = '3'
           and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
           and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
         group by cash.orgid, cash.orgname, cash.storageorgtype
         order by cash.storageorgtype, cash.orgname;
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select *
          from (select cash.orgid orgid,
                       cash.orgname orgname,
                       round(nvl(sum(cash.totalincome), 0) /
                             decode(sum(cash.totalincome),
                                    0,
                                    1,
                                    (select count(count(*))
                                       from jz_cashincome cash
                                      where cash.jzdate >=
                                            to_date(startdate, 'yyyy-MM-dd')
                                        and cash.jzdate <=
                                            to_date(enddate, 'yyyy-MM-dd')
                                        and cash.orgid = orgids
                                        and cash.datasavelevel = '3'
                                      group by cash.orgid, cash.jzdate)),
                             2) carincome
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.storageorgtype = 3
                   and cash.sourcefrom = '3'
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.orgid, cash.orgname
                 order by cash.orgname)
        union all
        select *
          from (select cash.routeid orgid,
                       cash.routename orgname,
                       round(nvl(sum(cash.totalincome), 0) /
                             decode(sum(cash.passengerflow),
                                    0,
                                    1,
                                    (select count(count(*))
                                       from jz_cashincome cash
                                      where cash.jzdate >=
                                            to_date(startdate, 'yyyy-MM-dd')
                                        and cash.jzdate <=
                                            to_date(enddate, 'yyyy-MM-dd')
                                        and cash.orgid = orgids
                                        and cash.datasavelevel = '3'
                                      group by cash.orgid, cash.jzdate)),
                             2) carincome
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.storageorgtype = 4
                   and cash.sourcefrom = '3'
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.routeid, cash.routename
                 order by cash.routename);
    END IF;
  END;

  PROCEDURE KMileIncome_GETTABLE(orgids    VARCHAR2,
                                 orggrade  VARCHAR2,
                                 forggrade VARCHAR2,
                                 startdate VARCHAR2,
                                 enddate   VARCHAR2,
                                 MYTAB     OUT MYTABLE) AS
  BEGIN
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
      --分公司千车公里收入
        select income.orgid orgid,
               income.orgname orgname,
               income.storageorgtype,
               income.ICcashincome,
               miles.runmiles runmiles,
               round(decode(miles.runmiles,
                            0,
                            0,
                            (income.ICcashincome / miles.runmiles) * 1000),
                     2) kmileincome
          from --总公司及分公司IC卡、投币收入
               (select cash.orgid orgid,
                       cash.orgname orgname,
                       cash.storageorgtype,
                       nvl(sum(cash.totalincome), 0) ICcashincome
                  from jz_cashincome cash
                 where ((cash.orgid = orgids and
                       cash.storageorgtype = orggrade) or
                       (cash.orgid in
                       (select org.orgid
                            from mcorginfogs org
                           where org.parentorgid = orgids
                             and org.orgtype = '1') and
                       cash.storageorgtype = forggrade))
                   and cash.sourcefrom = '1'
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.orgid, cash.orgname, cash.storageorgtype
                 order by cash.storageorgtype, cash.orgname) income,
               --总公司及分公司营运里程
               (select *
                  from (select t.SUBCOMPANYID orgid,
                               t.subcompanyname orgname,
                               nvl(sum(t.RUNMILES), 0) runmiles
                          from routedaystoragevw t
                         where t.COMPANYID = orgids
                           and t.orgtype = '1'
                           and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                           and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                         group by t.SUBCOMPANYID, t.subcompanyname
                         order by t.subcompanyname)
                union all
                select *
                  from (select t.COMPANYID orgid,
                               t.companyname orgname,
                               nvl(sum(t.RUNMILES), 0) runmiles
                          from routedaystoragevw t
                         where t.COMPANYID = orgids
                           and t.orgtype = '1'
                           and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                           and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                         group by t.COMPANYID, t.companyname
                         order by t.companyname)) miles
         where income.orgid = miles.orgid(+)
         order by storageorgtype, orgname;
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select income.orgid orgid,
               income.orgname orgname,
               income.ICcashincome,
               income.storageorgtype,
               miles.runmiles runmiles,
               round(decode(miles.runmiles,
                            0,
                            0,
                            (income.ICcashincome / miles.runmiles) * 1000),
                     2) kmileincome
          from --分公司及车队IC卡、投币收入
               (select cash.orgid orgid,
                       cash.orgname orgname,
                       cash.storageorgtype,
                       nvl(sum(cash.totalincome), 0) ICcashincome
                  from jz_cashincome cash
                 where ((cash.orgid = orgids and
                       cash.storageorgtype = orggrade) or
                       (cash.orgid in
                       (select org.orgid
                            from mcorginfogs org
                           where org.parentorgid = orgids
                             and org.orgtype = '1') and
                       cash.storageorgtype = forggrade))
                   and cash.sourcefrom = '1'
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.orgid, cash.orgname, cash.storageorgtype
                 order by cash.orgname) income,
               --分公司及车队营运里程
               (select *
                  from (select t.ORGID orgid,
                               t.orgname orgname,
                               nvl(sum(t.RUNMILES), 0) runmiles
                          from routedaystoragevw t
                         where t.SUBCOMPANYID = orgids
                           and t.orgtype = '1'
                           and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                           and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                         group by t.ORGID, t.orgname
                         order by t.ORGID)
                union all
                select *
                  from (select t.SUBCOMPANYID orgid,
                               t.subcompanyname orgname,
                               nvl(sum(t.RUNMILES), 0) runmiles
                          from routedaystoragevw t
                         where t.SUBCOMPANYID = orgids
                           and t.orgtype = '1'
                           and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                           and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                         group by t.SUBCOMPANYID, t.subcompanyname
                         order by t.subcompanyname)) miles
         where income.orgid = miles.orgid(+)
         order by storageorgtype, orgname;
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
        select income.orgid orgid,
               income.orgname orgname,
               income.storageorgtype,
               income.ICcashincome,
               miles.runmiles runmiles,
               round(decode(miles.runmiles,
                            0,
                            0,
                            (income.ICcashincome / miles.runmiles) * 1000),
                     2) kmileincome
          from --车队及线路IC卡、投币收入
               (select *
                  from (select cash.orgid orgid,
                               cash.orgname orgname,
                               cash.storageorgtype,
                               nvl(sum(cash.totalincome), 0) ICcashincome
                          from jz_cashincome cash
                         where cash.orgid = orgids
                           and cash.storageorgtype = orggrade
                           and cash.sourcefrom = '1'
                           and cash.datasavelevel = '3'
                           and cash.jzdate >=
                               to_date(startdate, 'yyyy-MM-dd')
                           and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                         group by cash.orgid,
                                  cash.orgname,
                                  cash.storageorgtype
                         order by cash.orgname)
                union all
                select *
                  from (select cash.routeid orgid,
                               cash.routename orgname,
                               cash.storageorgtype,
                               nvl(sum(cash.totalincome), 0) ICcashincome
                          from jz_cashincome cash
                         where cash.orgid = orgids
                           and cash.storageorgtype = forggrade
                           and cash.sourcefrom = '1'
                           and cash.datasavelevel = '3'
                           and cash.jzdate >=
                               to_date(startdate, 'yyyy-MM-dd')
                           and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                         group by cash.routeid,
                                  cash.routename,
                                  cash.storageorgtype
                         order by cash.routename)) income,
               --车队及线路营运里程
               (select *
                  from (select t.ROUTEID orgid,
                               t.ROUTENAME orgname,
                               nvl(sum(t.RUNMILES), 0) runmiles
                          from routedaystoragevw t
                         where t.ORGID = orgids
                           and t.orgtype = '1'
                           and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                           and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                         group by t.ROUTEID, t.ROUTENAME
                         order by t.ROUTENAME)
                union all
                select *
                  from (select t.ORGID orgid,
                               t.orgname orgname,
                               nvl(sum(t.RUNMILES), 0) runmiles
                          from routedaystoragevw t
                         where t.ORGID = orgids
                           and t.orgtype = '1'
                           and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                           and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                         group by t.ORGID, t.orgname
                         order by t.orgname)) miles
         where income.orgid = miles.orgid(+)
         order by storageorgtype, orgname;
    END IF;
  END;

  PROCEDURE Income_Change_GETTABLE(orgids    VARCHAR2,
                                   orggrade  VARCHAR2,
                                   forggrade VARCHAR2,
                                   startdate VARCHAR2,
                                   enddate   VARCHAR2,
                                   MYTAB     OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
      --分公司千车公里收入、营运收入
        select jzcash.orgid,
               jzcash.orgname,
               jzcash.days,
               runincome.income runincome,
               runincome.flow flow,
               jzcash.income income,
               daymiles.runmiles runmiles,
               round(decode(daymiles.runmiles,
                            0,
                            0,
                            (jzcash.income / daymiles.runmiles) * 1000),
                     2) kmileincome
          from (
                --营运收入
                select cash.orgid orgid,
                        cash.orgname orgname,
                        to_char(cash.JZDATE, 'yyyy-MM-dd') days,
                        nvl(sum(cash.totalincome), 0) income,
                        nvl(sum(cash.passengerflow), 0) flow
                  from jz_cashincome cash
                 where cash.orgid in (select org.orgid
                                        from mcorginfogs org
                                       where org.parentorgid = orgids
                                         and org.orgtype = '1')
                   and cash.storageorgtype = forggrade
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.orgid, cash.orgname, cash.jzdate
                 order by cash.orgname, cash.jzdate) runincome,
               --分公司收入(IC卡、投币)
               (select cash.orgid orgid,
                       cash.orgname orgname,
                       to_char(cash.JZDATE, 'yyyy-MM-dd') days,
                       nvl(sum(cash.totalincome), 0) income
                  from jz_cashincome cash
                 where cash.orgid in
                       (select org.orgid
                          from mcorginfogs org
                         where org.parentorgid = orgids
                           and org.orgtype = '1')
                   and cash.storageorgtype = forggrade
                   and cash.datasavelevel = '3'
                   and cash.sourcefrom = '1'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.orgid, cash.orgname, cash.jzdate
                 order by cash.orgname, cash.jzdate) jzcash,
               --分公司营运里程
               (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       nvl(sum(t.RUNMILES), 0) runmiles
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.SUBCOMPANYID, t.subcompanyname, t.JZDATE
                 order by t.subcompanyname, t.JZDATE) daymiles
         where jzcash.orgid = daymiles.orgid
           and jzcash.orgid = runincome.orgid
           and jzcash.days = daymiles.days
           and jzcash.days = runincome.days;
      --车队
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select jzcash.orgid,
               jzcash.orgname,
               jzcash.days,
               runincome.income runincome,
               runincome.flow flow,
               jzcash.income income,
               daymiles.runmiles runmiles,
               round(decode(daymiles.runmiles,
                            0,
                            0,
                            (jzcash.income / daymiles.runmiles) * 1000),
                     2) kmileincome
          from --营运收入
               (select cash.orgid orgid,
                       cash.orgname orgname,
                       to_char(cash.JZDATE, 'yyyy-MM-dd') days,
                       nvl(sum(cash.totalincome), 0) income,
                       nvl(sum(cash.passengerflow), 0) flow
                  from jz_cashincome cash
                 where cash.orgid in
                       (select org.orgid
                          from mcorginfogs org
                         where org.parentorgid = orgids
                           and org.orgtype = '1')
                   and cash.storageorgtype = forggrade
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.orgid, cash.orgname, cash.jzdate
                 order by cash.orgname, cash.jzdate) runincome,
               --车队收入（IC卡、投币）
               (select cash.orgid orgid,
                       cash.orgname orgname,
                       to_char(cash.JZDATE, 'yyyy-MM-dd') days,
                       nvl(sum(cash.totalincome), 0) income
                  from jz_cashincome cash
                 where cash.orgid in
                       (select org.orgid
                          from mcorginfogs org
                         where org.parentorgid = orgids
                           and org.orgtype = '1')
                   and cash.storageorgtype = forggrade
                   and cash.datasavelevel = '3'
                   and cash.sourcefrom = '1'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.orgid, cash.orgname, cash.jzdate
                 order by cash.orgname, cash.jzdate) jzcash,
               --车队营运里程
               (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       nvl(sum(t.RUNMILES), 0) runmiles
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ORGID, t.orgname, t.JZDATE
                 order by t.orgname, t.JZDATE) daymiles
         where jzcash.orgid = daymiles.orgid
           and jzcash.orgid = runincome.orgid
           and jzcash.days = daymiles.days
           and jzcash.days = runincome.days;
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
      --线路千车公里收入
        select jzcash.orgid,
               jzcash.orgname,
               jzcash.days,
               runincome.income runincome,
               runincome.flow flow,
               jzcash.income income,
               daymiles.runmiles runmiles,
               round(decode(daymiles.runmiles,
                            0,
                            0,
                            (jzcash.income / daymiles.runmiles) * 1000),
                     2) kmileincome
          from --线路营运收入
               (select cash.routeid orgid,
                       cash.routename orgname,
                       to_char(cash.JZDATE, 'yyyy-MM-dd') days,
                       nvl(sum(cash.totalincome), 0) income,
                       nvl(sum(cash.passengerflow), 0) flow
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.storageorgtype = forggrade
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.routeid, cash.routename, cash.jzdate
                 order by cash.routename, cash.jzdate) runincome,
               --线路收入（IC卡、投币）
               (select cash.routeid orgid,
                       cash.routename orgname,
                       to_char(cash.JZDATE, 'yyyy-MM-dd') days,
                       nvl(sum(cash.totalincome), 0) income
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.storageorgtype = forggrade
                   and cash.sourcefrom = '1'
                   and cash.datasavelevel = '3'
                   and cash.jzdate >= to_date(startdate, 'yyyy-MM-dd')
                   and cash.jzdate <= to_date(enddate, 'yyyy-MM-dd')
                 group by cash.routeid, cash.routename, cash.jzdate
                 order by cash.routename, cash.jzdate) jzcash,
               --线路营运里程
               (select t.ROUTEID orgid,
                       t.ROUTENAME orgname,
                       to_char(t.JZDATE, 'yyyy-MM-dd') days,
                       nvl(sum(t.RUNMILES), 0) runmiles
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and t.JZDATE >= to_date(startdate, 'yyyy-MM-dd')
                   and t.JZDATE <= to_date(enddate, 'yyyy-MM-dd')
                 group by t.ROUTEID, t.ROUTENAME, t.JZDATE
                 order by t.ROUTENAME, t.JZDATE) daymiles
         where jzcash.orgid = daymiles.orgid
           and jzcash.orgid = runincome.orgid
           and jzcash.days = daymiles.days
           and jzcash.days = runincome.days;
    END IF;
  END;
  PROCEDURE Income_Analyse_GETTABLE(orgids    VARCHAR2,
                                    orggrade  VARCHAR2,
                                    forggrade VARCHAR2,
                                    ymonth    VARCHAR2,
                                    MYTAB     OUT MYTABLE) AS
  BEGIN
    --分公司
    IF (orggrade = '1') THEN
      OPEN MYTAB FOR
      --分公司千车公里收入、营运收入
        select jzcash.orgid,
               jzcash.orgname,
               runincome.months months,
               runincome.income runincome,
               runincome.flow flow,
               jzcash.income income,
               daymiles.runmiles runmiles,
               round(decode(daymiles.runmiles,
                            0,
                            0,
                            (jzcash.income / daymiles.runmiles) * 1000),
                     2) kmileincome
          from (
                --营运收入
                select cash.orgid orgid,
                        cash.orgname orgname,
                        to_char(cash.jzdate, 'yyyy-MM') months,
                        nvl(sum(cash.totalincome), 0) income,
                        nvl(sum(cash.passengerflow), 0) flow
                  from jz_cashincome cash
                 where cash.orgid in (select org.orgid
                                        from mcorginfogs org
                                       where org.parentorgid = orgids
                                         and org.orgtype = '1')
                   and cash.storageorgtype = forggrade
                   and cash.datasavelevel = '3'
                   and ((cash.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       cash.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by cash.orgid,
                           cash.orgname,
                           to_char(cash.jzdate, 'yyyy-MM')
                 order by cash.orgname, to_char(cash.jzdate, 'yyyy-MM')) runincome,
               --分公司收入(IC卡、投币)
               (select cash.orgid orgid,
                       cash.orgname orgname,
                       to_char(cash.jzdate, 'yyyy-MM') months,
                       nvl(sum(cash.totalincome), 0) income
                  from jz_cashincome cash
                 where cash.orgid in
                       (select org.orgid
                          from mcorginfogs org
                         where org.parentorgid = orgids
                           and org.orgtype = '1')
                   and cash.storageorgtype = forggrade
                   and cash.datasavelevel = '3'
                   and cash.sourcefrom = '1'
                   and ((cash.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       cash.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by cash.orgid,
                          cash.orgname,
                          to_char(cash.jzdate, 'yyyy-MM')
                 order by cash.orgname, to_char(cash.jzdate, 'yyyy-MM')) jzcash,
               --分公司营运里程
               (select t.SUBCOMPANYID orgid,
                       t.subcompanyname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       nvl(sum(t.RUNMILES), 0) runmiles
                  from routedaystoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = '1'
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.SUBCOMPANYID,
                          t.subcompanyname,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.subcompanyname, to_char(t.jzdate, 'yyyy-MM')) daymiles
         where jzcash.orgid = daymiles.orgid
           and jzcash.orgid = runincome.orgid
           and jzcash.months = daymiles.months
           and jzcash.months = runincome.months;
      --车队
    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR
        select jzcash.orgid,
               jzcash.orgname,
               runincome.months months,
               runincome.income runincome,
               runincome.flow flow,
               jzcash.income income,
               daymiles.runmiles runmiles,
               round(decode(daymiles.runmiles,
                            0,
                            0,
                            (jzcash.income / daymiles.runmiles) * 1000),
                     2) kmileincome
          from --营运收入
               (select cash.orgid orgid,
                       cash.orgname orgname,
                       to_char(cash.jzdate, 'yyyy-MM') months,
                       nvl(sum(cash.totalincome), 0) income,
                       nvl(sum(cash.passengerflow), 0) flow
                  from jz_cashincome cash
                 where cash.orgid in
                       (select org.orgid
                          from mcorginfogs org
                         where org.parentorgid = orgids
                           and org.orgtype = '1')
                   and cash.storageorgtype = forggrade
                   and cash.datasavelevel = '3'
                   and ((cash.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       cash.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by cash.orgid,
                          cash.orgname,
                          to_char(cash.jzdate, 'yyyy-MM')
                 order by cash.orgname, to_char(cash.jzdate, 'yyyy-MM')) runincome,
               --车队收入（IC卡、投币）
               (select cash.orgid orgid,
                       cash.orgname orgname,
                       to_char(cash.jzdate, 'yyyy-MM') months,
                       nvl(sum(cash.totalincome), 0) income
                  from jz_cashincome cash
                 where cash.orgid in
                       (select org.orgid
                          from mcorginfogs org
                         where org.parentorgid = orgids
                           and org.orgtype = '1')
                   and cash.storageorgtype = forggrade
                   and cash.datasavelevel = '3'
                   and cash.sourcefrom = '1'
                   and ((cash.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       cash.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by cash.orgid,
                          cash.orgname,
                          to_char(cash.jzdate, 'yyyy-MM')
                 order by cash.orgname, to_char(cash.jzdate, 'yyyy-MM')) jzcash,
               --车队营运里程
               (select t.ORGID orgid,
                       t.orgname orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       nvl(sum(t.RUNMILES), 0) runmiles
                  from routedaystoragevw t
                 where t.SUBCOMPANYID = orgids
                   and t.orgtype = '1'
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.ORGID, t.orgname, to_char(t.jzdate, 'yyyy-MM')
                 order by t.orgname, to_char(t.jzdate, 'yyyy-MM')) daymiles
         where jzcash.orgid = daymiles.orgid
           and jzcash.orgid = runincome.orgid
           and jzcash.months = daymiles.months
           and jzcash.months = runincome.months;
      --线路
    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR
      --线路千车公里收入
        select jzcash.orgid,
               jzcash.orgname,
               runincome.months months,
               runincome.income runincome,
               runincome.flow flow,
               jzcash.income income,
               daymiles.runmiles runmiles,
               round(decode(daymiles.runmiles,
                            0,
                            0,
                            (jzcash.income / daymiles.runmiles) * 1000),
                     2) kmileincome
          from --线路营运收入
               (select cash.routeid orgid,
                       cash.routename orgname,
                       to_char(cash.jzdate, 'yyyy-MM') months,
                       nvl(sum(cash.totalincome), 0) income,
                       nvl(sum(cash.passengerflow), 0) flow
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.datasavelevel = '3'
                   and cash.storageorgtype = forggrade
                   and ((cash.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       cash.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by cash.routeid,
                          cash.routename,
                          to_char(cash.jzdate, 'yyyy-MM')
                 order by cash.routename, to_char(cash.jzdate, 'yyyy-MM')) runincome,
               --线路收入（IC卡、投币）
               (select cash.routeid orgid,
                       cash.routename orgname,
                       to_char(cash.jzdate, 'yyyy-MM') months,
                       nvl(sum(cash.totalincome), 0) income
                  from jz_cashincome cash
                 where cash.orgid = orgids
                   and cash.storageorgtype = forggrade
                   and cash.sourcefrom = '1'
                   and cash.datasavelevel = '3'
                   and ((cash.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       cash.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (cash.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       cash.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by cash.routeid,
                          cash.routename,
                          to_char(cash.jzdate, 'yyyy-MM')
                 order by cash.routename, to_char(cash.jzdate, 'yyyy-MM')) jzcash,
               --线路营运里程
               (select t.ROUTEID orgid,
                       t.ROUTENAME orgname,
                       to_char(t.jzdate, 'yyyy-MM') months,
                       nvl(sum(t.RUNMILES), 0) runmiles
                  from routedaystoragevw t
                 where t.ORGID = orgids
                   and t.orgtype = '1'
                   and ((t.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                       t.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                       (t.jzdate >=
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                       t.jzdate <
                       add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))
                 group by t.ROUTEID,
                          t.ROUTENAME,
                          to_char(t.jzdate, 'yyyy-MM')
                 order by t.ROUTENAME, to_char(t.jzdate, 'yyyy-MM')) daymiles
         where jzcash.orgid = daymiles.orgid
           and jzcash.orgid = runincome.orgid
           and jzcash.months = daymiles.months
           and jzcash.months = runincome.months;
    END IF;
  END;
  PROCEDURE StaffCondition_GETTABLE(orgids    VARCHAR2,
                                    orggrade  VARCHAR2,
                                    forggrade VARCHAR2,
                                    ymonth    VARCHAR2,
                                    MYTAB     OUT MYTABLE) AS
  BEGIN
    OPEN MYTAB FOR
      select emp.orgid orgid,
             emp.orgname orgname,
             emp.storageorgtype,
             emp.months months,
             emp.totalcount empcount,
             manager.manager managercount,
             staff.staff staffcount,
             empbus.buscount buscount,
             empbus.empbusrate rate
        from (
              --总人数
              select emp.orgid,
                      emp.orgname,
                      emp.storageorgtype,
                      to_char(emp.jzdate, 'yyyy-MM') months,
                      nvl(emp.empcount, 0) totalcount
                from jz_employeephasestorage emp
               where ((emp.orgid = orgids and emp.storageorgtype = orggrade) or
                     (emp.orgid in
                     (SELECT orgid
                          FROM (SELECT O.PARENTORGID,
                                       o.orgtype,
                                       O.ORGID,
                                       O.ORGNAME
                                  FROM MCORGINFOGS O
                                 WHERE PARENTORGID <> '-1'
                                UNION ALL
                                SELECT O.ORGID PARENTORGID,
                                       o.orgtype,
                                       O.ORGID,
                                       O.ORGNAME
                                  FROM MCORGINFOGS O
                                 WHERE NOT EXISTS
                                 (SELECT 1
                                          FROM MCORGINFOGS
                                         WHERE PARENTORGID = O.ORGID))
                         WHERE parentorgid = orgids
                           and orgtype = '1') and
                     emp.storageorgtype = forggrade))
                 and emp.storageempfsttype = '0'
                 and emp.datasavelevel = '2'
                 and emp.jzdate >= to_date(ymonth, 'yyyy-MM-dd')
                 and emp.jzdate <
                     add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) emp,
             --管理者人数
             (select emp.orgid,
                     emp.orgname,
                     to_char(emp.jzdate, 'yyyy-MM') months,
                     nvl(sum(emp.empcount), 0) manager
                from jz_employeephasestorage emp
               where ((emp.orgid = orgids and emp.storageorgtype = orggrade) or
                     (emp.orgid in
                     (SELECT orgid
                          FROM (SELECT O.PARENTORGID,
                                       o.orgtype,
                                       O.ORGID,
                                       O.ORGNAME
                                  FROM MCORGINFOGS O
                                 WHERE PARENTORGID <> '-1'
                                UNION ALL
                                SELECT O.ORGID PARENTORGID,
                                       o.orgtype,
                                       O.ORGID,
                                       O.ORGNAME
                                  FROM MCORGINFOGS O
                                 WHERE NOT EXISTS
                                 (SELECT 1
                                          FROM MCORGINFOGS
                                         WHERE PARENTORGID = O.ORGID))
                         WHERE parentorgid = orgids
                           and orgtype = '1') and
                     emp.storageorgtype = forggrade))
                 and emp.storageempfsttype = '1'
                 and emp.storageempscdtype = '1'
                 and emp.datasavelevel = '2'
                 and emp.jzdate >= to_date(ymonth, 'yyyy-MM-dd')
                 and emp.jzdate <
                     add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)
               group by emp.orgid,
                        emp.orgname,
                        to_char(emp.jzdate, 'yyyy-MM')) manager,
             --非管理者人数
             (select emp.orgid,
                     emp.orgname,
                     to_char(emp.jzdate, 'yyyy-MM') months,
                     nvl(sum(emp.empcount), 0) staff
                from jz_employeephasestorage emp
               where ((emp.orgid = orgids and emp.storageorgtype = orggrade) or
                     (emp.orgid in
                     (SELECT orgid
                          FROM (SELECT O.PARENTORGID,
                                       o.orgtype,
                                       O.ORGID,
                                       O.ORGNAME
                                  FROM MCORGINFOGS O
                                 WHERE PARENTORGID <> '-1'
                                UNION ALL
                                SELECT O.ORGID PARENTORGID,
                                       o.orgtype,
                                       O.ORGID,
                                       O.ORGNAME
                                  FROM MCORGINFOGS O
                                 WHERE NOT EXISTS
                                 (SELECT 1
                                          FROM MCORGINFOGS
                                         WHERE PARENTORGID = O.ORGID))
                         WHERE parentorgid = orgids
                           and orgtype = '1') and
                     emp.storageorgtype = forggrade))
                 and emp.storageempfsttype = '1'
                 and emp.storageempscdtype = '2'
                 and emp.datasavelevel = '2'
                 and emp.jzdate >= to_date(ymonth, 'yyyy-MM-dd')
                 and emp.jzdate <
                     add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)
               group by emp.orgid,
                        emp.orgname,
                        to_char(emp.jzdate, 'yyyy-MM')) staff,
             --人车比
             (select emp.orgid orgid,
                     emp.orgname orgname,
                     emp.months months,
                     emp.totalcount totalcount,
                     bus.buscount buscount,
                     round(decode(bus.buscount,
                                  0,
                                  0,
                                  emp.totalcount / bus.buscount),
                           2) empbusrate
                from (
                      --总人数
                      select emp.orgid orgid,
                              emp.orgname orgname,
                              to_char(emp.jzdate, 'yyyy-MM') months,
                              nvl(emp.empcount, 0) totalcount
                        from jz_employeephasestorage emp
                       where ((emp.orgid = orgids and
                             emp.storageorgtype = orggrade) or
                             (emp.orgid in
                             (SELECT orgid
                                  FROM (SELECT O.PARENTORGID,
                                               o.orgtype,
                                               O.ORGID,
                                               O.ORGNAME
                                          FROM MCORGINFOGS O
                                         WHERE PARENTORGID <> '-1'
                                        UNION ALL
                                        SELECT O.ORGID PARENTORGID,
                                               o.orgtype,
                                               O.ORGID,
                                               O.ORGNAME
                                          FROM MCORGINFOGS O
                                         WHERE NOT EXISTS
                                         (SELECT 1
                                                  FROM MCORGINFOGS
                                                 WHERE PARENTORGID = O.ORGID))
                                 WHERE parentorgid = orgids
                                   and orgtype = '1') and
                             emp.storageorgtype = forggrade))
                         and emp.storageempfsttype = '0'
                         and emp.jzdate >= to_date(ymonth, 'yyyy-MM-dd')
                         and emp.jzdate <
                             add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) emp,
                     --车数
                     (select bus.orgid orgid,
                             bus.orgname orgname,
                             to_char(bus.jzdate, 'yyyy-MM') months,
                             nvl(max(bus.buscount), 0) buscount
                        from jz_busphasestorage bus
                       where ((bus.orgid = orgids and
                             bus.storageorgtype = orggrade) or
                             (bus.orgid in
                             (SELECT orgid
                                  FROM (SELECT O.PARENTORGID,
                                               o.orgtype,
                                               O.ORGID,
                                               O.ORGNAME
                                          FROM MCORGINFOGS O
                                         WHERE PARENTORGID <> '-1'
                                        UNION ALL
                                        SELECT O.ORGID PARENTORGID,
                                               o.orgtype,
                                               O.ORGID,
                                               O.ORGNAME
                                          FROM MCORGINFOGS O
                                         WHERE NOT EXISTS
                                         (SELECT 1
                                                  FROM MCORGINFOGS
                                                 WHERE PARENTORGID = O.ORGID))
                                 WHERE parentorgid = orgids
                                   and orgtype = '1') and
                             bus.storageorgtype = forggrade and
                             bus.storageorgtype != '4'))
                         and bus.storagebusfirsttype = '0'
                         and bus.jzdate >= to_date(ymonth, 'yyyy-MM-dd')
                         and bus.jzdate <
                             add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)
                       group by bus.orgid,
                                bus.orgname,
                                to_char(bus.jzdate, 'yyyy-MM')
                       order by bus.orgid, to_char(bus.jzdate, 'yyyy-MM')) bus
               where emp.orgid = bus.orgid(+)
                 and emp.months = bus.months(+)) empbus
       where emp.orgid = manager.orgid(+)
         and emp.orgid = staff.orgid(+)
         and emp.orgid = empbus.orgid(+)
         and emp.months = manager.months(+)
         and emp.months = staff.months(+)
         and emp.months = empbus.months(+)
       order by storageorgtype, orgname;

  END;
  PROCEDURE Staff_Analyse_GETTABLE(orgids    VARCHAR2,
                                   orggrade  VARCHAR2,
                                   forggrade VARCHAR2,
                                   ymonth    VARCHAR2,
                                   MYTAB     OUT MYTABLE) AS
  BEGIN
    OPEN MYTAB FOR
      select emp.orgid orgid,
             emp.orgname orgname,
             emp.months months,
             emp.totalcount totalcount,
             bus.buscount buscount,
             round(decode(bus.buscount, 0, 0, emp.totalcount / bus.buscount),
                   2) empbusrate
        from (
              --总人数
              select emp.orgid orgid,
                      emp.orgname orgname,
                      to_char(emp.jzdate, 'yyyy-MM') months,
                      nvl(emp.empcount, 0) totalcount
                from jz_employeephasestorage emp
               where ((emp.orgid = orgids and emp.storageorgtype = orggrade) or
                     (emp.orgid in
                     (SELECT orgid
                          FROM (SELECT O.PARENTORGID,
                                       o.orgtype,
                                       O.ORGID,
                                       O.ORGNAME
                                  FROM MCORGINFOGS O
                                 WHERE PARENTORGID <> '-1'
                                UNION ALL
                                SELECT O.ORGID PARENTORGID,
                                       o.orgtype,
                                       O.ORGID,
                                       O.ORGNAME
                                  FROM MCORGINFOGS O
                                 WHERE NOT EXISTS
                                 (SELECT 1
                                          FROM MCORGINFOGS
                                         WHERE PARENTORGID = O.ORGID))
                         WHERE parentorgid = orgids
                           and orgtype = '1') and
                     emp.storageorgtype = forggrade))
                 and emp.storageempfsttype = '0'
                 and ((emp.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                     emp.jzdate <
                     add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                     (emp.jzdate >=
                     add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                     emp.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                     (emp.jzdate >=
                     add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                     emp.jzdate <
                     add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))) emp,
             --车数
             (select bus.orgid orgid,
                     bus.orgname orgname,
                     to_char(bus.jzdate, 'yyyy-MM') months,
                     nvl(bus.buscount, 0) buscount
                from jz_busphasestorage bus
               where ((bus.orgid = orgids and bus.storageorgtype = orggrade) or
                     (bus.orgid in
                     (SELECT orgid
                          FROM (SELECT O.PARENTORGID,
                                       o.orgtype,
                                       O.ORGID,
                                       O.ORGNAME
                                  FROM MCORGINFOGS O
                                 WHERE PARENTORGID <> '-1'
                                UNION ALL
                                SELECT O.ORGID PARENTORGID,
                                       o.orgtype,
                                       O.ORGID,
                                       O.ORGNAME
                                  FROM MCORGINFOGS O
                                 WHERE NOT EXISTS
                                 (SELECT 1
                                          FROM MCORGINFOGS
                                         WHERE PARENTORGID = O.ORGID))
                         WHERE parentorgid = orgids
                           and orgtype = '1') and
                     bus.storageorgtype = forggrade and
                     bus.storageorgtype != '4'))
                 and bus.storagebusfirsttype = '0'
                 and ((bus.jzdate >= to_date(ymonth, 'yyyy-MM-dd') and
                     bus.jzdate <
                     add_months(to_date(ymonth, 'yyyy-MM-dd'), 1)) or
                     (bus.jzdate >=
                     add_months(to_date(ymonth, 'yyyy-MM-dd'), -1) and
                     bus.jzdate < to_date(ymonth, 'yyyy-MM-dd')) or
                     (bus.jzdate >=
                     add_months(to_date(ymonth, 'yyyy-MM-dd'), -12) and
                     bus.jzdate <
                     add_months(to_date(ymonth, 'yyyy-MM-dd'), -11)))) bus
       where emp.orgid = bus.orgid(+)
         and emp.months = bus.months(+)
       order by orgname, months;
  END;

  PROCEDURE StandardBus_GETTABLE(yearstart VARCHAR2,
                                 yearend   VARCHAR2,
                                 MYTAB     OUT MYTABLE) AS
  BEGIN
    OPEN MYTAB FOR
      SELECT t.years,
             jz.indicatorvalue busstandardcount,
             jz.regioncode regionid,
             jz.regioncodename regionname,
             popu.populationcount,
             popu.populationcount2
        FROM jz_regionpopulationld popu,
             jz_regionstorage jz,
             (SELECT years, MAX(jzdate) jzd
                FROM (SELECT to_char(t.jzdate, 'yyyy') years, t.*
                        FROM jz_regionstorage t
                       WHERE t.regiontype = '2'
                         AND t.indicator = '1')
               GROUP BY years) t
       WHERE t.years = popu.years
            --AND popu.years = t.years
         AND t.years between yearstart and yearend
         AND jz.regiontype = '2'
         AND jz.indicator = '1'
         AND jz.regioncode = popu.regionarea
       order by regioncode, years;

  END;


  PROCEDURE Line_Analyse_GETTABLE(orgids   VARCHAR2,
                                  dates    VARCHAR2,
                                  orggrade VARCHAR2,
                                  MYTAB    OUT MYTABLE) AS
  BEGIN

    IF (orggrade = '1') THEN
      OPEN MYTAB FOR

        select *
          from (select t.COMPANYID ORGID,
                       t.companyname ORGNAME,
                       sum(nvl(t.routelength, 0)) RouteLength,
                       count(*) ROUTECOUNT,
                       round(decode(count(*),
                                    0,
                                    0,
                                    sum(nvl(t.ISAPTS, 0)) / count(*)),
                             4) ISAPTS,
                       to_char(t.JZDATE, 'yyyy-mm') dates
                  from routebasicdataphasestoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = 1
                   and t.DATASAVELEVEL = 2
                   and ((t.jzdate >= to_date(dates, 'yyyy-mm') and
                       t.jzdate < add_months(to_date(dates, 'yyyy-mm'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(dates, 'yyyy-mm'), -1) and
                       t.jzdate < to_date(dates, 'yyyy-mm')) or
                       (t.jzdate >=
                       add_months(to_date(dates, 'yyyy-mm'), -12) and
                       t.jzdate <
                       add_months(to_date(dates, 'yyyy-mm'), -11)))
                 group by to_char(t.JZDATE, 'yyyy-mm'),
                          COMPANYID,
                          companyname
                 order by t.companyname,
                          COMPANYID,
                          to_char(t.JZDATE, 'yyyy-mm'))

        union all

        select *
          from (select t.SUBCOMPANYID ORGID,
                       t.subcompanyname ORGNAME,
                       sum(nvl(t.routelength, 0)) RouteLength,
                       count(*) ROUTECOUNT,
                       round(decode(count(*),
                                    0,
                                    0,
                                    sum(nvl(t.ISAPTS, 0)) / count(*)),
                             4) ISAPTS,
                       to_char(t.JZDATE, 'yyyy-mm') dates
                  from routebasicdataphasestoragevw t
                 where t.COMPANYID = orgids
                   and t.orgtype = 1
                   and t.DATASAVELEVEL = 2
                   and ((t.jzdate >= to_date(dates, 'yyyy-mm') and
                       t.jzdate < add_months(to_date(dates, 'yyyy-mm'), 1)) or
                       (t.jzdate >=
                       add_months(to_date(dates, 'yyyy-mm'), -1) and
                       t.jzdate < to_date(dates, 'yyyy-mm')) or
                       (t.jzdate >=
                       add_months(to_date(dates, 'yyyy-mm'), -12) and
                       t.jzdate <
                       add_months(to_date(dates, 'yyyy-mm'), -11)))
                 group by to_char(t.JZDATE, 'yyyy-mm'),
                          SUBCOMPANYID,
                          subcompanyname
                 order by t.subcompanyname,
                          SUBCOMPANYID,
                          to_char(t.JZDATE, 'yyyy-mm'));

    ELSIF (orggrade = '2') THEN
      OPEN MYTAB FOR

        select t.ORGID,
               t.orgname,
               sum(nvl(t.routelength, 0)) RouteLength,
               count(*) ROUTECOUNT,
               round(decode(count(*),
                            0,
                            0,
                            sum(nvl(t.ISAPTS, 0)) / count(*)),
                     4) ISAPTS,
               to_char(t.JZDATE, 'yyyy-mm') dates
          from routebasicdataphasestoragevw t
         where t.SUBCOMPANYID = orgids
           and t.orgtype = 1
           and t.DATASAVELEVEL = 2
           and ((t.jzdate >= to_date(dates, 'yyyy-mm') and
               t.jzdate < add_months(to_date(dates, 'yyyy-mm'), 1)) or
               (t.jzdate >= add_months(to_date(dates, 'yyyy-mm'), -1) and
               t.jzdate < to_date(dates, 'yyyy-mm')) or
               (t.jzdate >= add_months(to_date(dates, 'yyyy-mm'), -12) and
               t.jzdate < add_months(to_date(dates, 'yyyy-mm'), -11)))
         group by t.JZDATE, ORGID, orgname
         order by t.orgname, t.ORGID, t.JZDATE;

    ELSIF (orggrade = '3') THEN
      OPEN MYTAB FOR

        select t.ORGID,
               t.orgname,
               sum(nvl(t.routelength, 0)) RouteLength,
               count(*) ROUTECOUNT,
               round(decode(count(*),
                            0,
                            0,
                            sum(nvl(t.ISAPTS, 0)) / count(*)),
                     4) ISAPTS,
               to_char(t.JZDATE, 'yyyy-mm') dates
          from routebasicdataphasestoragevw t
         where t.ORGID = orgids
           and t.orgtype = 1
           and t.DATASAVELEVEL = 2
           and ((t.jzdate >= to_date(dates, 'yyyy-mm') and
               t.jzdate < add_months(to_date(dates, 'yyyy-mm'), 1)) or
               (t.jzdate >= add_months(to_date(dates, 'yyyy-mm'), -1) and
               t.jzdate < to_date(dates, 'yyyy-mm')) or
               (t.jzdate >= add_months(to_date(dates, 'yyyy-mm'), -12) and
               t.jzdate < add_months(to_date(dates, 'yyyy-mm'), -11)))
         group by to_char(t.JZDATE, 'yyyy-mm'), ORGID, orgname
         order by t.orgname, ORGID, to_char(t.JZDATE, 'yyyy-mm');

    END IF;

  END;

 PROCEDURE LineNetwork_Analyse_GETTABLE(areatype VARCHAR2,
                                         dates    VARCHAR2,
                                         MYTAB    OUT MYTABLE) AS
  BEGIN
    OPEN MYTAB FOR

      select t.areatypefirsttype,
             t.areatypefirstname,
             t.areatypesecondtype,
             t.areatypesecondname,
             to_char(t.jzdate, 'yyyy-mm') dates,
             t.routelength,
             t.routenetlength,
             t.routecount
        from jz_routenetstorage t
       where t.areatypefirsttype = areatype
         and t.datasavelevel = 2
         and ((t.jzdate >= to_date(dates, 'yyyy-mm') and
             t.jzdate < add_months(to_date(dates, 'yyyy-mm'), 1)) or
             (t.jzdate >= add_months(to_date(dates, 'yyyy-mm'), -1) and
             t.jzdate < to_date(dates, 'yyyy-mm')) or
             (t.jzdate >= add_months(to_date(dates, 'yyyy-mm'), -12) and
             t.jzdate < add_months(to_date(dates, 'yyyy-mm'), -11)))
       order by t.areatypesecondtype, t.jzdate;

  END;

  PROCEDURE LineNetwork_Change_GETTABLE(areatype  VARCHAR2,
                                        startdate VARCHAR2,
                                        enddate   VARCHAR2,
                                        MYTAB     OUT MYTABLE) AS
  BEGIN
    OPEN MYTAB FOR

      select t.areatypefirsttype,
             t.areatypefirstname,
             t.areatypesecondtype,
             t.areatypesecondname,
             to_char(t.jzdate, 'yyyy-mm') dates,
             t.routelength,
             t.routenetlength,
             t.routecount
        from jz_routenetstorage t
       where t.areatypefirsttype = areatype
         and t.datasavelevel = 2
         and t.jzdate >= to_date(startdate, 'yyyy-mm')
         and t.jzdate < add_months(to_date(enddate, 'yyyy-mm'), 1)

       order by t.areatypesecondtype, t.jzdate;

  END;


END PKG_OSE_GetData;
/

prompt
prompt Creating package body PKG_OSE_GIS
prompt =================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_GIS IS
  /***************************************************************************************
  *    名称：WRITE_LOG                                                                   *
  *                                                                                      *
  *    功能：写入日志                                                                    *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2,
                      FUNC_DESC     VARCHAR2,
                      V_DATE        DATE,
                      LOGINFO       VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := SUBSTR(LOGINFO, 1, 250);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '1',
       V_DATE,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /****************************************************************************************
  *    名称：WRITE_EXCEPTION                                                             *
  *                                                                                      *
  *    功能：写入异常日志                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_EXCEPTION(PROCEDURENAME VARCHAR2,
                            FUNC_DESC     VARCHAR2,
                            V_DATE        DATE,
                            ERRORCODE     NUMBER,
                            ERRORTEXT     VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := ERRORCODE || '-' || SUBSTR(ERRORTEXT, 1, 200);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '0',
       V_DATE,
       SYSDATE,
       V_INFO);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

  /****************************************************************************************
  *    名称：TreateGIS                                                                   *
  *                                                                                      *
  *    功能：GIS数据处理                                                                 *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2012-05-16                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATEGIS(V_DATE DATE) AS
    SQLSTR        VARCHAR2(6000); --Query string(查询字符串)
    RES           VARCHAR2(1000);
    CLOBVAR       CLOB := EMPTY_CLOB;
    TMPREADLENGTH NUMBER;
    TOTAL_LENGTH  NUMBER;
    IND           NUMBER;
    I             NUMBER;
    J             NUMBER;
    LINECOUNT     NUMBER;
    P_DELIMITER   VARCHAR2(1);
    STATIONID     VARCHAR2(10);
    ACCOMMID      VARCHAR2(10);
    STR           VARCHAR2(1024);
    REGION_LEVEL  VARCHAR2(10);
  
    TYPE IDARR IS VARRAY(10000) OF VARCHAR(20);
    ARR     IDARR := IDARR();
    ARRID   IDARR := IDARR();
    ARRLEN  IDARR := IDARR();
    V_COUNT NUMBER;
  
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    WRITE_LOG('空间指标处理', 'TreateGIS', SYSDATE, '开始');
  
    FOR CUR IN (SELECT DISTINCT T.REGIONTYPE
                  FROM JZ_LINENETSTORAGE2 T
                 WHERE T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
                   AND T.JZDATE <= LAST_DAY(V_DATE_IN)) LOOP
      SELECT COUNT(*)
        INTO V_COUNT
        FROM JZ_LINENETSTORAGE2 T
       WHERE T.REGIONTYPE = CUR.REGIONTYPE
         AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
         AND T.JZDATE <= LAST_DAY(V_DATE_IN);
      IF (V_COUNT > 0) THEN
        BEGIN
          IF (CUR.REGIONTYPE = '2') THEN
            --行政区域特殊处理
            DELETE JZ_LINENETSTORAGE T
             WHERE T.REGIONTYPE = CUR.REGIONTYPE
               AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
               AND T.JZDATE <= LAST_DAY(V_DATE_IN);
            INSERT INTO JZ_LINENETSTORAGE
              (SELECT *
                 FROM JZ_LINENETSTORAGE2 T
                WHERE T.REGIONTYPE = CUR.REGIONTYPE
                  AND T.REGIONCODE < '510110'
                  AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
                  AND T.JZDATE <= LAST_DAY(V_DATE_IN));
          ELSE
            DELETE JZ_LINENETSTORAGE T
             WHERE T.REGIONTYPE = CUR.REGIONTYPE
               AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
               AND T.JZDATE <= LAST_DAY(V_DATE_IN);
            INSERT INTO JZ_LINENETSTORAGE
              (SELECT *
                 FROM JZ_LINENETSTORAGE2 T
                WHERE T.REGIONTYPE = CUR.REGIONTYPE
                  AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
                  AND T.JZDATE <= LAST_DAY(V_DATE_IN));
          END IF;
          WRITE_LOG('空间指标处理', 'TreateGIS', SYSDATE, '数据复制结束');
          COMMIT;
        EXCEPTION
          WHEN OTHERS THEN
            ROLLBACK; --回滚
            WRITE_EXCEPTION('TreateGIS',
                            '更新线网指标',
                            V_DATE_IN,
                            SQLCODE,
                            SQLERRM);
        END;
      END IF;
    END LOOP;
  
    --更新站点所属环行
    BEGIN
     -- UPDATE MCSTATIONINFOGS T SET T.REGIONLEVEL = '3';
      FOR CUR IN (SELECT T.RECORDID,
                         T.REGIONTYPE,
                         T.REGIONCODE,
                         T.REGIONNAME
                    FROM JZ_LINENETSTORAGE T
                   WHERE T.REGIONTYPE = '1'
                     AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
                     AND T.JZDATE <= LAST_DAY(V_DATE_IN)) LOOP
        IF (CUR.REGIONCODE = 474) THEN
          REGION_LEVEL := '1';
        ELSIF (CUR.REGIONCODE = 475) OR ((CUR.REGIONCODE = 476)) THEN
          REGION_LEVEL := '2';
        ELSE
          REGION_LEVEL := '3';
        END IF;
        SQLSTR := 'SELECT stationids FROM jz_linenetstorage  WHERE recordid = ''' ||
                  CUR.RECORDID || '''';
        DBMS_LOB.CREATETEMPORARY(CLOBVAR, TRUE);
        DBMS_LOB.OPEN(CLOBVAR, DBMS_LOB.LOB_READWRITE);
        EXECUTE IMMEDIATE TRIM(SQLSTR)
          INTO CLOBVAR; --执行查询
      
        TOTAL_LENGTH  := DBMS_LOB.GETLENGTH(CLOBVAR);
        TMPREADLENGTH := 500;
        IND           := 1;
        P_DELIMITER   := ',';
        V_COUNT       := 0;
        ARR           := IDARR();
        STR           := '';
        --获取ID
        WHILE (IND < TOTAL_LENGTH) LOOP
          DBMS_LOB.READ(CLOBVAR, TMPREADLENGTH, IND, RES); --读取数据
        
          STR := STR || RES;
          WHILE (INSTR(STR, ',', 1) > 0) AND (V_COUNT < 10000) LOOP
            J         := INSTR(STR, ',', 1);
            STATIONID := SUBSTR(STR, 1, J - 1);
          
            V_COUNT := V_COUNT + 1;
            ARR.EXTEND;
            ARR(V_COUNT) := STATIONID;
          
            STR := SUBSTR(STR, J + 1, LENGTH(STR));
          END LOOP;
        
          IND := IND + TMPREADLENGTH;
        END LOOP;
      
        IF (STR IS NOT NULL) AND (LENGTH(STR) > 0) THEN
          V_COUNT := V_COUNT + 1;
          ARR.EXTEND;
          ARR(V_COUNT) := STR;
        END IF;
      
        IF DBMS_LOB.ISOPEN(CLOBVAR) = 1 THEN
          DBMS_LOB.CLOSE(CLOBVAR);
        END IF;
        --更新站点
        /*BEGIN
          FOR I IN 1 .. ARR.COUNT LOOP
            UPDATE MCSTATIONINFOGS T
               SET T.REGIONLEVEL = REGION_LEVEL
             WHERE T.STATIONNO = ARR(I);
          END LOOP;
        END;*/
      
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TreateGIS',
                        '计算站点（环行）',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --更新站点所属行政区域
    BEGIN
      FOR CUR IN (SELECT T.RECORDID,
                         T.REGIONTYPE,
                         T.REGIONCODE,
                         T.REGIONNAME
                    FROM JZ_LINENETSTORAGE T
                   WHERE T.REGIONTYPE = '2'
                     AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
                     AND T.JZDATE <= LAST_DAY(V_DATE_IN)) LOOP
      
        REGION_LEVEL := CUR.REGIONCODE;
      
        SQLSTR := 'SELECT stationids FROM jz_linenetstorage  WHERE recordid = ''' ||
                  CUR.RECORDID || ''''; --组查询字符串
        DBMS_LOB.CREATETEMPORARY(CLOBVAR, TRUE);
        DBMS_LOB.OPEN(CLOBVAR, DBMS_LOB.LOB_READWRITE);
        EXECUTE IMMEDIATE TRIM(SQLSTR)
          INTO CLOBVAR; --执行查询
      
        TOTAL_LENGTH  := DBMS_LOB.GETLENGTH(CLOBVAR);
        TMPREADLENGTH := 500;
        IND           := 1;
        P_DELIMITER   := ',';
        V_COUNT       := 0;
        ARR           := IDARR();
        STR           := '';
        WHILE (IND < TOTAL_LENGTH) LOOP
          DBMS_LOB.READ(CLOBVAR, TMPREADLENGTH, IND, RES); --读取数据
        
          STR := STR || RES;
          WHILE (INSTR(STR, ',', 1) > 0) AND (V_COUNT < 10000) LOOP
            J         := INSTR(STR, ',', 1);
            STATIONID := SUBSTR(STR, 1, J - 1);
          
            V_COUNT := V_COUNT + 1;
            ARR.EXTEND;
            ARR(V_COUNT) := STATIONID;
          
            STR := SUBSTR(STR, J + 1, LENGTH(STR));
          END LOOP;
        
          IND := IND + TMPREADLENGTH;
        END LOOP;
      
        IF (STR IS NOT NULL) AND (LENGTH(STR) > 0) THEN
          V_COUNT := V_COUNT + 1;
          ARR.EXTEND;
          ARR(V_COUNT) := STR;
        END IF;
      
        IF (CLOBVAR IS NOT NULL) AND (DBMS_LOB.ISOPEN(CLOBVAR) = 1) THEN
          DBMS_LOB.CLOSE(CLOBVAR);
        END IF;
      
        BEGIN
          FOR I IN 1 .. ARR.COUNT LOOP
            UPDATE MCSTATIONINFOGS T
               SET T.REGIONAREA = REGION_LEVEL
             WHERE T.STATIONNO = ARR(I);
          END LOOP;
          COMMIT;
        END;
      END LOOP;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TreateGIS',
                        '计算站点（行政区域）',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
  
    --更新线网指标
    BEGIN
      --计算线路、线网密度
      UPDATE JZ_LINENETSTORAGE T
         SET T.LINENETDENSITY = ROUND(T.LINENETLENGTH / T.REGIONAREA, 4),
             T.LINEDENSITY    = ROUND(T.LINELENGTH / T.REGIONAREA, 4)
       WHERE T.REGIONAREA > 0
         AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
         AND T.JZDATE <= LAST_DAY(V_DATE_IN);
      --计算全市平均
      SELECT COUNT(*)
        INTO V_COUNT
        FROM JZ_LINENETSTORAGE T
       WHERE T.REGIONTYPE = '0'
         AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
         AND T.JZDATE <= LAST_DAY(V_DATE_IN);
      IF (V_COUNT = 0) THEN
        INSERT INTO JZ_LINENETSTORAGE
          (RECORDID,
           REGIONTYPE,
           REGIONNAME,
           LINELENGTH,
           LINELENGTH1,
           LINECOUNT,
           LINECOUNT1,
           AVGLINELENGHT,
           LINEDENSITY,
           LINENETDENSITY,
           UNSTRAIGHTFACTOR,
           REGIONAREA,
           COVERAREA,
           STATIONCOUNT,
           STATIONCOUNT1,
           AVGDISTANCE,
           SITECOUNT,
           SITECOUNT1,
           JZDATE,
           LINENETLENGTH,
           COVERAREA2,
           REGIONCODE,
           RECDATE)
        VALUES
          (S_ROUTENETSTORAGE.NEXTVAL,
           '0',
           '全市',
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           0,
           V_DATE_IN,
           0,
           0,
           '000000',
           SYSDATE);
      END IF;
      --更新线路条数、站点数、场站数
      UPDATE JZ_LINENETSTORAGE T
         SET T.LINECOUNT    = NVL((SELECT COUNT(*)
                                    FROM MCROUTEINFOGS R
                                   WHERE R.ISACTIVE = '1'),
                                  0),
             T.STATIONCOUNT = NVL((SELECT COUNT(*)
                                    FROM MCSTATIONINFOGS S
                                   WHERE S.ISACTIVE = '1'),
                                  0),
             T.SITECOUNT    = NVL((SELECT COUNT(*)
                                    FROM MCSITEINFOGS SS
                                   WHERE SS.ISACTIVE = '1'),
                                  0),
             T.JZDATE       = TRUNC(V_DATE_IN)
       WHERE T.REGIONTYPE = '0'
         AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
         AND T.JZDATE <= LAST_DAY(V_DATE_IN);
      --更新线路长度、线网长度、区域面积、站点覆盖面积、道路长度、专用道长度
      UPDATE JZ_LINENETSTORAGE T
         SET (LINELENGTH, LINENETLENGTH, REGIONAREA, COVERAREA, COVERAREA2, ACCOMMROADLENGTH, ACCOMMLENGTH) = (SELECT SUM(LINELENGTH),
                                                                                                                      SUM(LINENETLENGTH),
                                                                                                                      SUM(REGIONAREA),
                                                                                                                      SUM(COVERAREA),
                                                                                                                      SUM(COVERAREA2),
                                                                                                                      SUM(ACCOMMROADLENGTH),
                                                                                                                      SUM(ACCOMMLENGTH)
                                                                                                                 FROM JZ_LINENETSTORAGE
                                                                                                                WHERE REGIONTYPE = '2'
                                                                                                                  AND JZDATE >=
                                                                                                                      ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1,
                                                                                                                                 -1)
                                                                                                                  AND JZDATE <=
                                                                                                                      LAST_DAY(V_DATE_IN))
       WHERE T.REGIONTYPE = '0'
         AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
         AND T.JZDATE <= LAST_DAY(V_DATE_IN);
      --更新平均线路长度、线网密度
      UPDATE JZ_LINENETSTORAGE T
         SET T.AVGLINELENGHT  = ROUND(T.LINELENGTH / T.LINECOUNT, 4),
             T.LINENETDENSITY = ROUND(T.LINENETLENGTH / T.REGIONAREA, 4),
             T.LINEDENSITY    = ROUND(T.LINELENGTH / T.REGIONAREA, 4)
       WHERE T.REGIONTYPE = '0'
         AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
         AND T.JZDATE <= LAST_DAY(V_DATE_IN);
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TreateGIS',
                        '更新线网指标',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
  
    --更新环行专用道长度
    BEGIN
      FOR CUR IN (SELECT T.RECORDID,
                         T.REGIONTYPE,
                         T.REGIONCODE,
                         T.REGIONNAME
                    FROM JZ_LINENETSTORAGE T
                   WHERE T.REGIONTYPE = '1'
                     AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
                     AND T.JZDATE <= LAST_DAY(V_DATE_IN)) LOOP
        IF (CUR.REGIONCODE = 474) THEN
          REGION_LEVEL := '1';
        ELSIF (CUR.REGIONCODE = 475) OR ((CUR.REGIONCODE = 476)) THEN
          REGION_LEVEL := '2';
        ELSE
          REGION_LEVEL := '3';
        END IF;
        SQLSTR := 'SELECT accommids FROM jz_linenetstorage  WHERE recordid = ''' ||
                  CUR.RECORDID || '''';
        DBMS_LOB.CREATETEMPORARY(CLOBVAR, TRUE);
        DBMS_LOB.OPEN(CLOBVAR, DBMS_LOB.LOB_READWRITE);
        EXECUTE IMMEDIATE TRIM(SQLSTR)
          INTO CLOBVAR; --执行查询
      
        IF (CLOBVAR IS NOT NULL) THEN
          TOTAL_LENGTH  := DBMS_LOB.GETLENGTH(CLOBVAR);
          TMPREADLENGTH := 500;
          IND           := 1;
          P_DELIMITER   := ',';
          V_COUNT       := 0;
          ARRID         := IDARR();
          ARRLEN        := IDARR();
          STR           := '';
          --获取ID
          WHILE (IND < TOTAL_LENGTH) LOOP
            DBMS_LOB.READ(CLOBVAR, TMPREADLENGTH, IND, RES); --读取数据
          
            STR := STR || RES;
            WHILE (INSTR(STR, ',', 1) > 0) AND (V_COUNT < 10000) LOOP
              J        := INSTR(STR, ',', 1);
              ACCOMMID := SUBSTR(STR, 1, J - 1);
              STR      := SUBSTR(STR, J + 1, LENGTH(STR));
            
              J       := INSTR(ACCOMMID, '_', 1);
              V_COUNT := V_COUNT + 1;
              ARRID.EXTEND;
              ARRID(V_COUNT) := SUBSTR(ACCOMMID, 1, J - 1);
            
              ARRLEN.EXTEND;
              ARRLEN(V_COUNT) := SUBSTR(ACCOMMID, J + 1, LENGTH(ACCOMMID));
            END LOOP;
          
            IND := IND + TMPREADLENGTH;
          END LOOP;
        
          IF (STR IS NOT NULL) AND (LENGTH(STR) > 0) THEN
            ACCOMMID := STR;
            J        := INSTR(ACCOMMID, '_', 1);
            V_COUNT  := V_COUNT + 1;
            ARRID.EXTEND;
            ARRID(V_COUNT) := SUBSTR(ACCOMMID, 1, J - 1);
          
            ARRLEN.EXTEND;
            ARRLEN(V_COUNT) := SUBSTR(ACCOMMID, J + 1, LENGTH(ACCOMMID));
          END IF;
        
          IF DBMS_LOB.ISOPEN(CLOBVAR) = 1 THEN
            DBMS_LOB.CLOSE(CLOBVAR);
          END IF;
          BEGIN
            TOTAL_LENGTH := 0;
            FOR I IN 1 .. ARRLEN.COUNT LOOP
              --车道数
              LINECOUNT := 0;
              FOR CUR2 IN (SELECT T.LINECOUNT
                             FROM MCACCOMMODATIONROADINFOGS T
                            WHERE T.ACCOMMODATIONROADID = ARRID(I)) LOOP
                LINECOUNT := CUR2.LINECOUNT;
              END LOOP;
              IF (LINECOUNT = 0) THEN
                LINECOUNT := 2; --默认为2
              END IF;
            
              SELECT TO_NUMBER(ARRLEN(I)) INTO IND FROM DUAL;
            
              TOTAL_LENGTH := TOTAL_LENGTH + IND * LINECOUNT;
            END LOOP;
          
            UPDATE JZ_LINENETSTORAGE T
               SET T.ACCOMMLENGTH = ROUND(TOTAL_LENGTH, 4)
             WHERE T.RECORDID = CUR.RECORDID;
          END;
        ELSE
          UPDATE JZ_LINENETSTORAGE T
             SET T.ACCOMMLENGTH = 0
           WHERE T.RECORDID = CUR.RECORDID;
        END IF;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TreateGIS',
                        '计算站点（环行）',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --更新行政区域专用道长度
    BEGIN
      FOR CUR IN (SELECT T.RECORDID,
                         T.REGIONTYPE,
                         T.REGIONCODE,
                         T.REGIONNAME
                    FROM JZ_LINENETSTORAGE T
                   WHERE T.REGIONTYPE = '2'
                     AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
                     AND T.JZDATE <= LAST_DAY(V_DATE_IN)) LOOP
      
        REGION_LEVEL := CUR.REGIONCODE;
      
        SQLSTR := 'SELECT accommids FROM jz_linenetstorage  WHERE recordid = ''' ||
                  CUR.RECORDID || '''';
        DBMS_LOB.CREATETEMPORARY(CLOBVAR, TRUE);
        DBMS_LOB.OPEN(CLOBVAR, DBMS_LOB.LOB_READWRITE);
        EXECUTE IMMEDIATE TRIM(SQLSTR)
          INTO CLOBVAR; --执行查询
      
        IF (CLOBVAR IS NOT NULL) THEN
          TOTAL_LENGTH  := DBMS_LOB.GETLENGTH(CLOBVAR);
          TMPREADLENGTH := 500;
          IND           := 1;
          P_DELIMITER   := ',';
          V_COUNT       := 0;
          ARRID         := IDARR();
          ARRLEN        := IDARR();
          STR           := '';
          --获取ID
          WHILE (IND < TOTAL_LENGTH) LOOP
            DBMS_LOB.READ(CLOBVAR, TMPREADLENGTH, IND, RES); --读取数据
          
            STR := STR || RES;
            WHILE (INSTR(STR, ',', 1) > 0) AND (V_COUNT < 10000) LOOP
              J        := INSTR(STR, ',', 1);
              ACCOMMID := SUBSTR(STR, 1, J - 1);
              STR      := SUBSTR(STR, J + 1, LENGTH(STR));
            
              J       := INSTR(ACCOMMID, '_', 1);
              V_COUNT := V_COUNT + 1;
              ARRID.EXTEND;
              ARRID(V_COUNT) := SUBSTR(ACCOMMID, 1, J - 1);
            
              ARRLEN.EXTEND;
              ARRLEN(V_COUNT) := SUBSTR(ACCOMMID, J + 1, LENGTH(ACCOMMID));
            END LOOP;
          
            IND := IND + TMPREADLENGTH;
          END LOOP;
        
          IF (STR IS NOT NULL) AND (LENGTH(STR) > 0) THEN
            ACCOMMID := STR;
            J        := INSTR(ACCOMMID, '_', 1);
            V_COUNT  := V_COUNT + 1;
            ARRID.EXTEND;
            ARRID(V_COUNT) := SUBSTR(ACCOMMID, 1, J - 1);
          
            ARRLEN.EXTEND;
            ARRLEN(V_COUNT) := SUBSTR(ACCOMMID, J + 1, LENGTH(ACCOMMID));
          END IF;
        
          IF DBMS_LOB.ISOPEN(CLOBVAR) = 1 THEN
            DBMS_LOB.CLOSE(CLOBVAR);
          END IF;
          BEGIN
            TOTAL_LENGTH := 0;
            FOR I IN 1 .. ARRLEN.COUNT LOOP
              --车道数
              LINECOUNT := 0;
              FOR CUR2 IN (SELECT T.LINECOUNT
                             FROM MCACCOMMODATIONROADINFOGS T
                            WHERE T.ACCOMMODATIONROADID = ARRID(I)) LOOP
                LINECOUNT := CUR2.LINECOUNT;
              END LOOP;
              IF (LINECOUNT = 0) THEN
                LINECOUNT := 2; --默认为2
              END IF;
            
              SELECT TO_NUMBER(ARRLEN(I)) INTO IND FROM DUAL;
            
              TOTAL_LENGTH := TOTAL_LENGTH + IND * LINECOUNT;
            END LOOP;
          
            UPDATE JZ_LINENETSTORAGE T
               SET T.ACCOMMLENGTH = ROUND(TOTAL_LENGTH, 4)
             WHERE T.RECORDID = CUR.RECORDID;
          END;
        ELSE
          UPDATE JZ_LINENETSTORAGE T
             SET T.ACCOMMLENGTH = 0
           WHERE T.RECORDID = CUR.RECORDID;
        END IF;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TreateGIS',
                        '计算站点（行政区域）',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
  
    --更新线网结存
    --整个城市  0
    BEGIN
      --删除历史
      DELETE JZ_ROUTENETSTORAGE T
       WHERE T.AREATYPEFIRSTTYPE = '0'
         AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
         AND T.JZDATE <= LAST_DAY(V_DATE_IN);
    
      INSERT INTO JZ_ROUTENETSTORAGE
        (RECORDID,
         JZDATE,
         AREATYPEFIRSTTYPE,
         AREATYPEFIRSTNAME,
         AREATYPESECONDTYPE,
         AREATYPESECONDNAME,
         AREAACREAGE,
         ROUTELENGTH,
         ROUTENETLENGTH,
         THREEHDSTSHCOVERRATE,
         THREEHDPEOPLECOVERRATE,
         FIVEHDSTSHCOVERRATE,
         FIVEHDPEOPLECOVERRATE,
         HINGECOUNT,
         ACCOMMODATIONLENGTH,
         AVERAGESTATIONDISTANCE,
         DATASAVELEVEL,
         RECDATE,
         FIRSTCROSSCOUNT,
         ROUTECOUNT)
        SELECT S_ROUTENETSTORAGE.NEXTVAL AS RECORDID, --记录编号';
               T.JZDATE, --结存日期';
               T.REGIONTYPE AS AREATYPEFIRSTTYPE, --地区类型一级字典';
               '全市' AS AREATYPEFIRSTNAME, --字典名称';
               T.REGIONCODE AS AREATYPESECONDTYPE, --'地区类型二级字典';
               T.REGIONNAME AS AREATYPESECONDNAME, --字典名称';
               T.REGIONAREA AS AREAACREAGE, --区域面积(平方公里)';
               T.LINELENGTH AS ROUTELENGTH, --线路长度(公里)';
               T.LINENETLENGTH AS ROUTENETLENGTH, --线网长度(公里)';
               ROUND(DECODE(T.REGIONAREA, 0, 0, T.COVERAREA / T.REGIONAREA),
                     2) AS THREEHDSTSHCOVERRATE, --300米站点覆盖率';
               0 AS THREEHDPEOPLECOVERRATE, --300米站点人口覆盖率';
               ROUND(DECODE(T.REGIONAREA, 0, 0, T.COVERAREA2 / T.REGIONAREA),
                     2) AS FIVEHDSTSHCOVERRATE, --500米站点面积覆盖率';
               0 AS FIVEHDPEOPLECOVERRATE, --'500米站点人口覆盖率';
               0 AS HINGECOUNT, --'交通枢纽个数';
               T.ACCOMMLENGTH AS ACCOMMODATIONLENGTH, --'公交专用道长度(公里)';
               0 AS AVERAGESTATIONDISTANCE, --'公交站点平均站距(米)';
               '2' AS DATASAVELEVEL, --'数据结存级别';
               SYSDATE AS RECDATE,
               0 AS FIRSTCROSSCOUNT, --'优先路口个数';
               T.LINECOUNT AS ROUTECOUNT -- '线路数量';
          FROM JZ_LINENETSTORAGE T
         WHERE T.REGIONTYPE = '0'
           AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
           AND T.JZDATE <= LAST_DAY(V_DATE_IN);
      --更新专用道(调整为直接从GIS中计算，不是从录入数据中产生)
      /*UPDATE jz_routenetstorage t
        SET t.accommodationlength = NVL((SELECT SUM(a.miles)
                                          FROM mcaccommodationroadinfogs a),
                                        0)
      WHERE t.areatypefirsttype = '0'
        AND t.jzdate >= add_months(last_day(v_date_in) + 1, -1)
        AND t.jzdate <= last_day(v_date_in); */
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TreateGIS',
                        '线网指标结存-环行区域',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --城市区域  1 不用
  
    --环行区域  1  
    BEGIN
      --删除历史
      DELETE JZ_ROUTENETSTORAGE T
       WHERE T.AREATYPEFIRSTTYPE = '1'
         AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
         AND T.JZDATE <= LAST_DAY(V_DATE_IN);
    
      INSERT INTO JZ_ROUTENETSTORAGE
        (RECORDID,
         JZDATE,
         AREATYPEFIRSTTYPE,
         AREATYPEFIRSTNAME,
         AREATYPESECONDTYPE,
         AREATYPESECONDNAME,
         AREAACREAGE,
         ROUTELENGTH,
         ROUTENETLENGTH,
         THREEHDSTSHCOVERRATE,
         THREEHDPEOPLECOVERRATE,
         FIVEHDSTSHCOVERRATE,
         FIVEHDPEOPLECOVERRATE,
         HINGECOUNT,
         ACCOMMODATIONLENGTH,
         AVERAGESTATIONDISTANCE,
         DATASAVELEVEL,
         RECDATE,
         FIRSTCROSSCOUNT,
         ROUTECOUNT)
        SELECT S_ROUTENETSTORAGE.NEXTVAL AS RECORDID, --记录编号';
               T.JZDATE, --结存日期';
               T.REGIONTYPE AS AREATYPEFIRSTTYPE, --地区类型一级字典';
               '环行区域' AS AREATYPEFIRSTNAME, --字典名称';
               T.REGIONCODE AS AREATYPESECONDTYPE, --'地区类型二级字典';
               T.REGIONNAME AS AREATYPESECONDNAME, --字典名称';
               T.REGIONAREA AS AREAACREAGE, --区域面积(平方公里)';
               T.LINELENGTH AS ROUTELENGTH, --线路长度(公里)';
               T.LINENETLENGTH AS ROUTENETLENGTH, --线网长度(公里)';
               ROUND(DECODE(T.REGIONAREA, 0, 0, T.COVERAREA / T.REGIONAREA),
                     2) AS THREEHDSTSHCOVERRATE, --300米站点覆盖率';
               0 AS THREEHDPEOPLECOVERRATE, --300米站点人口覆盖率';
               ROUND(DECODE(T.REGIONAREA, 0, 0, T.COVERAREA2 / T.REGIONAREA),
                     2) AS FIVEHDSTSHCOVERRATE, --500米站点面积覆盖率';
               0 AS FIVEHDPEOPLECOVERRATE, --'500米站点人口覆盖率';
               0 AS HINGECOUNT, --'交通枢纽个数';
               T.ACCOMMLENGTH AS ACCOMMODATIONLENGTH, --'公交专用道长度(公里)';
               0 AS AVERAGESTATIONDISTANCE, --'公交站点平均站距(米)';
               '2' AS DATASAVELEVEL, --'数据结存级别';
               SYSDATE AS RECDATE,
               0 AS FIRSTCROSSCOUNT, --'优先路口个数';
               T.LINECOUNT AS ROUTECOUNT -- '线路数量';
          FROM JZ_LINENETSTORAGE T
         WHERE T.REGIONTYPE = '1'
           AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
           AND T.JZDATE <= LAST_DAY(V_DATE_IN);
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TreateGIS',
                        '线网指标结存-环行区域',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --行政区域  2
    BEGIN
      --删除历史
      DELETE JZ_ROUTENETSTORAGE T
       WHERE T.AREATYPEFIRSTTYPE = '2'
         AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
         AND T.JZDATE <= LAST_DAY(V_DATE_IN);
    
      INSERT INTO JZ_ROUTENETSTORAGE
        (RECORDID,
         JZDATE,
         AREATYPEFIRSTTYPE,
         AREATYPEFIRSTNAME,
         AREATYPESECONDTYPE,
         AREATYPESECONDNAME,
         AREAACREAGE,
         ROUTELENGTH,
         ROUTENETLENGTH,
         THREEHDSTSHCOVERRATE,
         THREEHDPEOPLECOVERRATE,
         FIVEHDSTSHCOVERRATE,
         FIVEHDPEOPLECOVERRATE,
         HINGECOUNT,
         ACCOMMODATIONLENGTH,
         AVERAGESTATIONDISTANCE,
         DATASAVELEVEL,
         RECDATE,
         FIRSTCROSSCOUNT,
         ROUTECOUNT)
        SELECT S_ROUTENETSTORAGE.NEXTVAL AS RECORDID, --记录编号';
               T.JZDATE, --结存日期';
               T.REGIONTYPE AS AREATYPEFIRSTTYPE, --地区类型一级字典';
               '行政区域' AS AREATYPEFIRSTNAME, --字典名称';
               T.REGIONCODE AS AREATYPESECONDTYPE, --'地区类型二级字典';
               T.REGIONNAME AS AREATYPESECONDNAME, --字典名称';
               T.REGIONAREA AS AREAACREAGE, --区域面积(平方公里)';
               T.LINELENGTH AS ROUTELENGTH, --线路长度(公里)';
               T.LINENETLENGTH AS ROUTENETLENGTH, --线网长度(公里)';
               ROUND(DECODE(T.REGIONAREA, 0, 0, T.COVERAREA / T.REGIONAREA),
                     2) AS THREEHDSTSHCOVERRATE, --300米站点覆盖率';
               0 AS THREEHDPEOPLECOVERRATE, --300米站点人口覆盖率';
               ROUND(DECODE(T.REGIONAREA, 0, 0, T.COVERAREA2 / T.REGIONAREA),
                     2) AS FIVEHDSTSHCOVERRATE, --500米站点面积覆盖率';
               0 AS FIVEHDPEOPLECOVERRATE, --'500米站点人口覆盖率';
               0 AS HINGECOUNT, --'交通枢纽个数';
               T.ACCOMMLENGTH AS ACCOMMODATIONLENGTH, --'公交专用道长度(公里)';
               0 AS AVERAGESTATIONDISTANCE, --'公交站点平均站距(米)';
               '2' AS DATASAVELEVEL, --'数据结存级别';
               SYSDATE AS RECDATE,
               0 AS FIRSTCROSSCOUNT, --'优先路口个数';
               T.LINECOUNT AS ROUTECOUNT -- '线路数量';
          FROM JZ_LINENETSTORAGE T
         WHERE T.REGIONTYPE = '2'
           AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
           AND T.JZDATE <= LAST_DAY(V_DATE_IN);
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TreateGIS',
                        '线网指标结存-行政区域',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --乡镇街道办  3
    BEGIN
      --删除历史
      DELETE JZ_ROUTENETSTORAGE T
       WHERE T.AREATYPEFIRSTTYPE = '3'
         AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
         AND T.JZDATE <= LAST_DAY(V_DATE_IN);
    
      INSERT INTO JZ_ROUTENETSTORAGE
        (RECORDID,
         JZDATE,
         AREATYPEFIRSTTYPE,
         AREATYPEFIRSTNAME,
         AREATYPESECONDTYPE,
         AREATYPESECONDNAME,
         AREAACREAGE,
         ROUTELENGTH,
         ROUTENETLENGTH,
         THREEHDSTSHCOVERRATE,
         THREEHDPEOPLECOVERRATE,
         FIVEHDSTSHCOVERRATE,
         FIVEHDPEOPLECOVERRATE,
         HINGECOUNT,
         ACCOMMODATIONLENGTH,
         AVERAGESTATIONDISTANCE,
         DATASAVELEVEL,
         RECDATE,
         FIRSTCROSSCOUNT,
         ROUTECOUNT)
        SELECT S_ROUTENETSTORAGE.NEXTVAL AS RECORDID, --记录编号';
               T.JZDATE, --结存日期';
               T.REGIONTYPE AS AREATYPEFIRSTTYPE, --地区类型一级字典';
               '乡镇街道办' AS AREATYPEFIRSTNAME, --字典名称';
               T.REGIONCODE AS AREATYPESECONDTYPE, --'地区类型二级字典';
               T.REGIONNAME AS AREATYPESECONDNAME, --字典名称';
               T.REGIONAREA AS AREAACREAGE, --区域面积(平方公里)';
               T.LINELENGTH AS ROUTELENGTH, --线路长度(公里)';
               T.LINENETLENGTH AS ROUTENETLENGTH, --线网长度(公里)';
               ROUND(DECODE(T.REGIONAREA, 0, 0, T.COVERAREA / T.REGIONAREA),
                     2) AS THREEHDSTSHCOVERRATE, --300米站点覆盖率';
               0 AS THREEHDPEOPLECOVERRATE, --300米站点人口覆盖率';
               ROUND(DECODE(T.REGIONAREA, 0, 0, T.COVERAREA2 / T.REGIONAREA),
                     2) AS FIVEHDSTSHCOVERRATE, --500米站点面积覆盖率';
               0 AS FIVEHDPEOPLECOVERRATE, --'500米站点人口覆盖率';
               0 AS HINGECOUNT, --'交通枢纽个数';
               T.ACCOMMLENGTH AS ACCOMMODATIONLENGTH, --'公交专用道长度(公里)';
               0 AS AVERAGESTATIONDISTANCE, --'公交站点平均站距(米)';
               '2' AS DATASAVELEVEL, --'数据结存级别';
               SYSDATE AS RECDATE,
               0 AS FIRSTCROSSCOUNT, --'优先路口个数';
               T.LINECOUNT AS ROUTECOUNT -- '线路数量';
          FROM JZ_LINENETSTORAGE T
         WHERE T.REGIONTYPE = '3'
           AND T.JZDATE >= ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1)
           AND T.JZDATE <= LAST_DAY(V_DATE_IN);
    
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TreateGIS',
                        '线网指标结存-乡镇街道办',
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    WRITE_LOG('空间指标处理', 'TreateGIS', SYSDATE, '结束');
  
    PKG_OSE_BASICDATA.TREATE_STATIONPHASESTORAGE(V_DATE_IN);
    PKG_OSE_BASICDATA.TREATE_SITEPHASESTORAGE(V_DATE_IN);
    WRITE_LOG('空间指标处理', 'TreateGIS', SYSDATE, '结束重新结存场站');
  END;

  PROCEDURE TREATEGIS AS
  BEGIN
    TREATEGIS(SYSDATE);
  END;

END PKG_OSE_GIS;
/

prompt
prompt Creating package body PKG_OSE_GPSICDATA
prompt =======================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_GPSICDATA IS
  /***************************************************************************************
  *    名称：WRITE_LOG                                                                   *
  *                                                                                      *
  *    功能：写入日志                                                                    *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2,
                      FUNC_DESC     VARCHAR2,
                      V_DATE        DATE,
                      LOGINFO       VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := SUBSTR(LOGINFO, 1, 250);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '1',
       V_DATE,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /****************************************************************************************
  *    名称：WRITE_EXCEPTION                                                             *
  *                                                                                      *
  *    功能：写入异常日志                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_EXCEPTION(PROCEDURENAME VARCHAR2,
                            FUNC_DESC     VARCHAR2,
                            V_DATE        DATE,
                            ERRORCODE     NUMBER,
                            ERRORTEXT     VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := ERRORCODE || '-' || SUBSTR(ERRORTEXT, 1, 200);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '0',
       V_DATE,
       SYSDATE,
       V_INFO);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /***************************************************************************************
  *    名称：GET_LASTTIME                                                                *
  *                                                                                      *
  *    功能：获取站点时间                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  FUNCTION GET_LASTTIME(V_ARRLFT ARRLFT, V_DEFALTTIME DATE) RETURN DATE AS
    V_LAST DATE;
  BEGIN
    V_LAST := V_DEFALTTIME;
    IF ((V_ARRLFT.ARR.ROUTEID = 0 OR V_ARRLFT.ARR.ROUTEID IS NULL) AND
       (V_ARRLFT.LFT.ROUTEID = 0 OR V_ARRLFT.LFT.ROUTEID IS NULL)) THEN
      --都为空,则取最小值
      V_LAST := V_DEFALTTIME;
    ELSE
      IF (V_ARRLFT.ARR.ROUTEID = 0 OR V_ARRLFT.ARR.ROUTEID IS NULL) THEN
        V_LAST := V_ARRLFT.LFT.ACTDATETIME - G_MAX_STOPSTATION;
      ELSE
        V_LAST := V_ARRLFT.ARR.ACTDATETIME;
      END IF;
    END IF;
    RETURN V_LAST;
  END;
  /***************************************************************************************
  *    名称：Get_MainSubRoute                                                            *
  *                                                                                      *
  *    功能：获取线路主子线                                                              *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE GET_MAINSUBROUTE(V_DATE         DATE,
                             V_USEDATE      DATE,
                             V_ROUTEID      VARCHAR2,
                             V_SUBROUTEID   OUT VARCHAR2,
                             V_SUBROUTENAME OUT VARCHAR2) AS
  BEGIN
    V_SUBROUTEID   := 0;
    V_SUBROUTENAME := NULL;
    --取主子线ID
    FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                  FROM MCSUBROUTEINFOGS SUB
                 WHERE SUB.ROUTEID = V_ROUTEID
                   AND SUB.ISMAINSUB = '1'
                   AND SUB.ISACTIVE = '1'
                   AND SUB.BEGINDATE <= V_DATE
                   AND SUB.ENDDATE >= V_DATE) LOOP
      V_SUBROUTEID   := CUR.SUBROUTEID;
      V_SUBROUTENAME := CUR.SUBROUTENAME;
    END LOOP;
    --没有结存日期的主子线,则取当前有效的主子线
    IF (V_SUBROUTEID = 0) THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISMAINSUB = '1'
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_USEDATE
                             AND SUB.ENDDATE >= V_USEDATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
    --没有主子线,则取非主子线最小的ID
    IF (V_SUBROUTEID = 0) THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_DATE
                             AND SUB.ENDDATE >= V_DATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
    IF (V_SUBROUTEID = 0) THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_USEDATE
                             AND SUB.ENDDATE >= V_USEDATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('GetMainSubRoute',
                      '获取线路主子线',
                      V_DATE,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：Get_OverspeedCount                                                          *
  *                                                                                      *
  *    功能：超速违规次数                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE GET_OVERSPEEDCOUNT(V_ROUTEID   VARCHAR2,
                               V_BEGINTIME DATE,
                               V_ENDTIME   DATE,
                               V_PECCCOUNT OUT NUMBER) AS
  BEGIN
    V_PECCCOUNT := 0;
    FOR CUR IN (SELECT COUNT(*) AS OVERSPEEDCOUNT
                  FROM BSVCBUSARRLFTLD5TEMP T --超速次数';
                 WHERE T.ROUTEID = V_ROUTEID
                   AND T.DATATYPE = '55'
                   AND T.PECCANCYTYPE = '1'
                   AND T.ACTDATETIME >= V_BEGINTIME
                   AND T.ACTDATETIME < V_ENDTIME
                 GROUP BY T.ROUTEID) LOOP
      V_PECCCOUNT := CUR.OVERSPEEDCOUNT;
    END LOOP;
  END;
  /***************************************************************************************
  *    名称：Get_UnrulestopCount                                                         *
  *                                                                                      *
  *    功能：不规范停车次数                                                              *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE GET_UNRULESTOPCOUNT(V_ROUTEID   VARCHAR2,
                                V_BEGINTIME DATE,
                                V_ENDTIME   DATE,
                                V_PECCCOUNT OUT NUMBER) AS
  BEGIN
    V_PECCCOUNT := 0;
    FOR CUR IN (SELECT COUNT(*) AS UNRULESTOPCOUNT
                  FROM BSVCBUSARRLFTLD5TEMP T --不规范停车次数';
                 WHERE T.ROUTEID = V_ROUTEID
                   AND T.DATATYPE = '55'
                   AND T.PECCANCYTYPE IN ('3', '4', '23')
                   AND T.ACTDATETIME >= V_BEGINTIME
                   AND T.ACTDATETIME < V_ENDTIME) LOOP
      V_PECCCOUNT := CUR.UNRULESTOPCOUNT;
    END LOOP;
  END;
  /***************************************************************************************
  *    名称：Get_MdlOpendoorCount                                                        *
  *                                                                                      *
  *    功能：中途开关门次数                                                              *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE GET_MDLOPENDOORCOUNT(V_ROUTEID   VARCHAR2,
                                 V_BEGINTIME DATE,
                                 V_ENDTIME   DATE,
                                 V_PECCCOUNT OUT NUMBER) AS
  BEGIN
    V_PECCCOUNT := 0;
    FOR CUR IN (SELECT COUNT(*) AS MDLOPENDOORCOUNT
                  FROM BSVCBUSARRLFTLD5TEMP T --中途开关门次数'
                 WHERE T.ROUTEID = V_ROUTEID
                   AND T.DATATYPE = '55'
                   AND T.PECCANCYTYPE IN ('17', '24')
                   AND T.ACTDATETIME >= V_BEGINTIME
                   AND T.ACTDATETIME < V_ENDTIME) LOOP
      V_PECCCOUNT := CUR.MDLOPENDOORCOUNT;
    END LOOP;
  END;
  /***************************************************************************************
  *    名称：LoadTypeEntry                                                               *
  *                                                                                      *
  *    功能：加载字典类型                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2013-01-09                                                                  *
  ****************************************************************************************/
  PROCEDURE LOADTYPEENTRY AS
    CURSOR CUR_TYPE(V_TYPENAME VARCHAR2) IS
      SELECT TYPENAME, ITEMKEY, ITEMVALUE, ISDEFAULT, SEQUENCE, ISACTIVE
        FROM TYPEENTRY
       WHERE ISACTIVE = '1'
         AND UPPER(TYPENAME) = UPPER(V_TYPENAME)
       ORDER BY SEQUENCE;
  
    CURSOR CUR_TRANS IS
      SELECT ID,
             CARDTYPE_SRC,
             CARDNAME_SRC,
             CARDTYPE_DES,
             CARDNAME_DES,
             CARD_PRICE,
             CARD_DISCOUNT
        FROM TRANSFORM_ICCARD
       ORDER BY CARDTYPE_SRC;
  
    V_ENTRY TYPE_ENTRY;
    V_TRANS TYPE_CONSUME;
  BEGIN
  
    --加载ICCARDTYPE类型
    FOR CUR IN CUR_TYPE('ICCARDTYPE') LOOP
      V_ENTRY.TYPENAME  := CUR.TYPENAME;
      V_ENTRY.ITEMKEY   := CUR.ITEMKEY;
      V_ENTRY.ITEMVALUE := CUR.ITEMVALUE;
      IF NOT G_CARDTYPELIST.EXISTS(CUR.ITEMVALUE) THEN
        G_CARDTYPELIST(CUR.ITEMVALUE) := V_ENTRY;
      END IF;
    END LOOP;
  
    --加载IC卡类型转换列表
    FOR CUR IN CUR_TRANS LOOP
      V_TRANS.CARDTYPE_SRC  := CUR.CARDTYPE_SRC;
      V_TRANS.CARDNAME_SRC  := CUR.CARDNAME_SRC;
      V_TRANS.CARDTYPE_DES  := CUR.CARDTYPE_DES;
      V_TRANS.CARDNAME_DES  := CUR.CARDNAME_DES;
      V_TRANS.CARD_PRICE    := CUR.CARD_PRICE;
      V_TRANS.CARD_DISCOUNT := CUR.CARD_DISCOUNT;
      IF NOT G_COMSUMETYPELIST.EXISTS(CUR.CARDTYPE_SRC) THEN
        G_COMSUMETYPELIST(CUR.CARDTYPE_SRC) := V_TRANS;
      END IF;
    END LOOP;
  END;

  /***************************************************************************************
  *    名称：FUN_CalcICConsumeType                                                       *
  *                                                                                      *
  *    功能：计算IC卡类型                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  FUNCTION FUN_CALCICCONSUMETYPE(V_CONSUMETYPE NUMBER) RETURN NUMBER AS
    RET_CONSUMETYPE NUMBER;
  BEGIN
    RET_CONSUMETYPE := V_CONSUMETYPE;
    IF G_COMSUMETYPELIST.EXISTS(V_CONSUMETYPE) THEN
      RET_CONSUMETYPE := G_COMSUMETYPELIST(V_CONSUMETYPE).CARDTYPE_DES;
    ELSE
      RET_CONSUMETYPE := 99; --未知  
    END IF;
    RETURN RET_CONSUMETYPE;
  END;
  /***************************************************************************************
  *    名称：FUN_CalcICIncome                                                            *
  *                                                                                      *
  *    功能：计算IC卡收入                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  FUNCTION FUN_CALCICINCOME(V_CONSUMETYPE NUMBER,
                            V_REMAINTIMES NUMBER) RETURN NUMBER AS
    RET_CONSUME NUMBER;
    --CONSUME_TYPE   NUMBER;
    V_CONSUMEENTRY TYPE_CONSUME;
  BEGIN
    RET_CONSUME := 0;
  
    IF G_COMSUMETYPELIST.EXISTS(V_CONSUMETYPE) THEN
      V_CONSUMEENTRY := G_COMSUMETYPELIST(V_CONSUMETYPE);
        RET_CONSUME := V_CONSUMEENTRY.CARD_PRICE * V_CONSUMEENTRY.CARD_DISCOUNT;
    END IF;
  
    RETURN RET_CONSUME;
  END;
  /***************************************************************************************
  *    名称：FUN_CalcICFavorable                                                         *
  *                                                                                      *
  *    功能：计算IC卡优惠                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  FUNCTION FUN_CALCICFAVORABLE(V_CONSUMETYPE NUMBER,
                               V_REMAINTIMES NUMBER) RETURN NUMBER AS
    RET_FAVORABLE NUMBER;
    --CONSUME_TYPE   NUMBER;
    V_CONSUMEENTRY TYPE_CONSUME;
  BEGIN
  
    RET_FAVORABLE := 0;
  
    IF G_COMSUMETYPELIST.EXISTS(V_CONSUMETYPE) THEN
      V_CONSUMEENTRY := G_COMSUMETYPELIST(V_CONSUMETYPE);
        --有次数,则需要折扣
        RET_FAVORABLE := V_CONSUMEENTRY.CARD_PRICE * (1 - V_CONSUMEENTRY.CARD_DISCOUNT);
    END IF;
  
    RETURN RET_FAVORABLE;
  END;
  /****************************************************************************************
  *    名称：TREATE_GPSICDATA                                                              *
  *                                                                                       *
  *    功能：GPS、IC相关数据结存(JOB调用接口)                                               *
  *                                                                                       *
  *    作者：huhuimin                                                                      *
  *    日期：2014-02-24                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_GPSICDATA AS
  BEGIN
    TREATE_GPSICDATASTORAGE(TRUNC(SYSDATE) - G_GPSICDATA,
                            TRUNC(SYSDATE) - G_GPSICDATA);
  END;
  /****************************************************************************************
  *    名称：TREATE_GPSICDATASTORAGE                                                      *
  *                                                                                       *
  *    功能：GPS、IC相关数据结存(调用接口)                                                  *
  *                                                                                       *
  *    作者：huhuimin                                                                      *
  *    日期：2014-02-24                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_GPSICDATASTORAGE(V_BEGINDATE DATE, V_ENDDATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_BEGINDATE);
  BEGIN
    WHILE (V_DATE_IN <= TRUNC(V_ENDDATE)) LOOP
      --导入到离站、IC卡数据 
      P_IMPORT_BUSARRLFTDATA(V_DATE_IN);
      P_IMPORT_MONTHCONSUME(V_DATE_IN);
      COMPUTING_HOURSPEED(V_DATE_IN);
      COMPUTING_STAINTERSPEED(V_DATE_IN);
      --TREATE_GPSDATA(V_DATE_IN);
      TREATE_ICDATA(V_DATE_IN);
      V_DATE_IN := V_DATE_IN + 1;
    END LOOP;
  END;
  /****************************************************************************************
  *    名称：COMPUTING_HOURSPEED                                                      *
  *                                                                                       *
  *    功能：线路时段速度结存                                                  *
  *                                                                                       *
  *    作者：WCX                                                                      *
  *    日期：2014-02-24                                                                   *
  ****************************************************************************************/
  PROCEDURE COMPUTING_HOURSPEED(V_DATE DATE) AS
    V_BEGINTIME DATE;
    V_ENDTIME   DATE;
    V_EXECTIMES FLOAT;
    V_CNT       INT;
  BEGIN
    DELETE FROM JZ_HOURSPEEDSTORAGE T WHERE T.JZDATE = TRUNC(V_DATE);
    COMMIT;
    V_EXECTIMES := 0;
    V_BEGINTIME := TRUNC(V_DATE) - G_INTERVAL / 24;
    V_CNT       := 0;
    WHILE (V_EXECTIMES < 24) LOOP
      BEGIN
        V_BEGINTIME := V_BEGINTIME + G_INTERVAL / 24;
        V_ENDTIME   := V_BEGINTIME + G_INTERVAL / 24;
        INSERT INTO JZ_HOURSPEEDSTORAGE
          (RECORDID,
           ROUTEID,
           STARTTIME,
           ENDTIME,
           BUSSID,
           GPSRUNMILE,
           RUNTIME,
           STOPTIME,
           DATASAVELEVEL,
           DATASAVETYPE,
           JZDATE)
        --第一个表,将需要提取的数据全部提取到内存中,并按照车载机编号、到离站时间排序,将序号保留,用作下一步的联表条件
        --假设1:到离站是连续的,即一个到站后面紧接着是一个离站,若到站后面不是离站,或者离站前面不是到站,此数据将视为无效。
        --假设2:车辆在到离站之间也存在里程,若无里程,则为无效数据（有一些数据,跨越多个站点,时间在增长,但里程未变,严重影响整体计算）。对于到离站之间距离较大的数据,也舍去,此处采用300米。
        --假设3:如果整条线路的有效运行时间小于5分钟,则不具有统计价值,舍去。
        --备注：此表中,已将里程数单位转化为千米/公里
        WITH ACENTERTABLE AS
          (SELECT ROW_NUMBER() OVER(ORDER BY PRODUCTID, ACTDATETIME ASC) AS ROWNO,
                  ROUTEID,
                  SUBROUTEID,
                  PRODUCTID,
                  STATIONSEQNUM,
                  BUSSID,
                  ISARRLFT,
                  ACTDATETIME,
                  GPSMILE AS GPSMILE
             FROM BSVCBUSARRLFTLD5TEMP
            WHERE ACTDATETIME >= V_BEGINTIME
              AND ACTDATETIME < V_ENDTIME
              AND DATATYPE = '4'), BCENTERTABLE AS
          (
           --第二个表,数据取自第一个表。
           --1.它首先将第一个表分拆为两个表,即到站时间表和离站时间。
           --2.然后,根据假设1,用表一中的排序序号连接到站表和离站表,连接条件：离站序号=到站序号+1,若此条件 不满足,则连接失败,视为无效数据
           --3.连接的全部条件：线路号,子线路号码,车载机编号,车站序列号以及表一中的排序序号
           --4.查询后的结果,为各数据以及取自两表的联合
           --5.上下行属性属于线路,未添加
           SELECT A.ROUTEID,
                   A.SUBROUTEID,
                   A.PRODUCTID,
                   A.STATIONSEQNUM,
                   A.BUSSID,
                   A.ACTDATETIME AS ARRDATETIME,
                   B.ACTDATETIME AS LFTDATETIME,
                   A.GPSMILE AS ARRGPSMILE,
                   B.GPSMILE AS LFTGPSMILE
             FROM (SELECT * FROM ACENTERTABLE WHERE ISARRLFT = '1') A
            INNER JOIN (SELECT * FROM ACENTERTABLE WHERE ISARRLFT = '2') B ON A.ROUTEID =
                                                                              B.ROUTEID
                                                                          AND A.SUBROUTEID =
                                                                              B.SUBROUTEID
                                                                          AND A.PRODUCTID =
                                                                              B.PRODUCTID
                                                                          AND A.STATIONSEQNUM =
                                                                              B.STATIONSEQNUM
                                                                          AND A.ROWNO =
                                                                              B.ROWNO - 1), CCENTERTABLE AS
          (
           --第三个表,是关于车辆的数据统计。
           --1.查询条件lftgpsmile>arrgpsmile and lftgpsmile<arrgpsmile+0.3,根据假设2,认为这样的数据是无效数据,舍去
           --2.分组条件：trunc(arrgpsmile/100,0),trunc(lftgpsmile/100,0),在数据中存在这样情况,以百万千万计的里程数,突然被清零,
           -- 预测是设备升级或更换,根据此分组,将变化过大的数据分开计算。
           --3.各查询结果：
           --   a. totaltime,单位：分钟,为全部的有效运行时间,取自有效数据的最大到离站时间与最小到离站时间之差
           --   b. stoptime,单位：分钟,为全部的候车时间,取自各站点离站、到站时间之差
           --   c. totalmile,单位：米 ,为车辆运行的全长,取自最大gps数据与最小gps数据之差
           --   d. stopmile,单位：米,为车辆候车期间,运行的距离。
           SELECT ROUTEID,
                   PRODUCTID,
                   BUSSID,
                   TO_NUMBER((CASE
                               WHEN MAX(ARRDATETIME) > MAX(LFTDATETIME) THEN
                                MAX(ARRDATETIME)
                               ELSE
                                MAX(LFTDATETIME)
                             END) - (CASE
                               WHEN MIN(LFTDATETIME) > MIN(ARRDATETIME) THEN
                                MIN(ARRDATETIME)
                               ELSE
                                MIN(LFTDATETIME)
                             END)) * 24 * 60 AS TOTALTIME,
                   TO_NUMBER(SUM(LFTDATETIME - ARRDATETIME)) * 24 * 60 AS STOPTIME,
                   (CASE
                     WHEN MAX(ARRGPSMILE) > MAX(LFTGPSMILE) THEN
                      MAX(ARRGPSMILE)
                     ELSE
                      MAX(LFTGPSMILE)
                   END) - (CASE
                     WHEN MIN(LFTGPSMILE) > MIN(ARRGPSMILE) THEN
                      MIN(ARRGPSMILE)
                     ELSE
                      MIN(LFTGPSMILE)
                   END) AS TOTALMILE,
                   SUM(LFTGPSMILE - ARRGPSMILE) AS STOPMILE
             FROM BCENTERTABLE
            WHERE LFTGPSMILE > ARRGPSMILE
              AND LFTGPSMILE < ARRGPSMILE + 300
            GROUP BY ROUTEID,
                      BUSSID,
                      PRODUCTID,
                      TRUNC(ARRGPSMILE / 100000, 0),
                      TRUNC(LFTGPSMILE / 100000, 0)), DCENTERTABLE AS
          (
           --计算结果,关于线路的数据统计
           --  1.查询条件,根据假设3得来。
           --  2.totaltime,stoptime,totalmile,stopmile,意义同上,只不过为整条线路的统计结果。
           SELECT ROUTEID,
                   BUSSID,
                   SUM(TOTALTIME) AS TOTALTIME,
                   SUM(STOPTIME) AS STOPTIME,
                   SUM(TOTALMILE) AS TOTALMILE,
                   (SUM(TOTALMILE - STOPMILE)) AS RUNMILE
             FROM CCENTERTABLE
            WHERE TOTALTIME > STOPTIME + 5
            GROUP BY ROUTEID, BUSSID)
        --查询结果,关于线路的数据统计
        --1.trunc(totalmile/totaltime,2),运营速度,全部里程除以全部时间
        --2.trunc(runmile/(totaltime-stoptime),2),运送速度,站点之间的距离除以站点之间的运行时间（都不包括停站）
          SELECT S_ROUTESTORAGE.NEXTVAL,
                 ROUTEID,
                 V_EXECTIMES * 60, --时间段起点
                 V_EXECTIMES * 60 + G_INTERVAL * 60, --时间段终点
                 BUSSID, --上下行
                 TOTALMILE, --GPS运营里程
                 TRUNC(TOTALTIME, 2), --运营时间（包含中间站停站时间）单位：分
                 TRUNC(STOPTIME, 2), --停站时间,单位：分
                 '3', --'数据结存级别：1-年,2-月,3-日';
                 '1', --'数据结存类型：1-线路,2-线网';
                 TRUNC(V_DATE) --结存日期
            FROM DCENTERTABLE;
        V_CNT := SQL%ROWCOUNT;
        WRITE_LOG('Computing_HourSpeed',
                  '数据结存-平均速度计算',
                  V_BEGINTIME,
                  V_CNT);
        COMMIT;
        V_EXECTIMES := V_EXECTIMES + G_INTERVAL;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          WRITE_EXCEPTION('Computing_HourSpeed',
                          '数据结存-平均速度计算',
                          V_BEGINTIME,
                          SQLCODE,
                          SQLERRM);
          COMMIT;
      END;
    END LOOP;
    COMPUTING_HOURSPEED_LINENET(V_DATE);
  END;
  /****************************************************************************************
  *    名称：COMPUTING_HOURSPEED_LINENET                                                      *
  *                                                                                       *
  *    功能：线网时段速度结存                                                  *
  *                                                                                       *
  *    作者：hhm                                                                      *
  *    日期：2014-02-24                                                                   *
  ****************************************************************************************/
  PROCEDURE COMPUTING_HOURSPEED_LINENET(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
    V_CNT     NUMBER := 0;
  BEGIN
    WRITE_LOG('COMPUTING_HOURSPEED_LINENET',
              '数据结存-线网时段平均速度计算',
              V_DATE_IN,
              '开始');
    --删除重复数据
    DELETE FROM JZ_HOURSPEEDSTORAGE T
     WHERE T.JZDATE = V_DATE_IN
       AND T.DATASAVETYPE = '2';
    COMMIT;
    --插入新数据
    INSERT INTO JZ_HOURSPEEDSTORAGE
      (RECORDID,
       ROUTEID,
       STARTTIME,
       ENDTIME,
       BUSSID,
       GPSRUNMILE,
       RUNTIME,
       STOPTIME,
       DATASAVELEVEL,
       DATASAVETYPE,
       JZDATE)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             NULL AS ROUTEID,
             TT.STARTTIME,
             TT.ENDTIME,
             NULL AS BUSSID,
             TT.GPSRUNMILE,
             TT.RUNTIME,
             TT.STOPTIME,
             '3' AS DATASAVELEVEL,
             '2' AS DATASAVETYPE,
             V_DATE_IN AS JZDATE
        FROM (SELECT T.STARTTIME,
                     T.ENDTIME,
                     SUM(T.GPSRUNMILE) AS GPSRUNMILE,
                     SUM(T.RUNTIME) AS RUNTIME,
                     SUM(T.STOPTIME) AS STOPTIME
                FROM JZ_HOURSPEEDSTORAGE T
               WHERE T.JZDATE = V_DATE_IN
                 AND T.DATASAVETYPE = '1'
                 AND T.DATASAVELEVEL = '3'
               GROUP BY T.STARTTIME, T.ENDTIME) TT;
    COMMIT;
    V_CNT := SQL%ROWCOUNT;
    WRITE_LOG('COMPUTING_HOURSPEED_LINENET',
              '数据结存-线网时段平均速度计算',
              V_DATE_IN,
              V_CNT);
    COMMIT;
    COMPUTING_HOURSPEED_PHASE(V_DATE_IN);
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      WRITE_EXCEPTION('COMPUTING_HOURSPEED_LINENET',
                      '数据结存-线网时段平均速度计算',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
      COMMIT;
  END;
  /****************************************************************************************
  *    名称：COMPUTING_HOURSPEED_PHASE                                                      *
  *                                                                                       *
  *    功能：时段速度月年结存                                                  *
  *                                                                                       *
  *    作者：hhm                                                                      *
  *    日期：2014-02-24                                                                   *
  ****************************************************************************************/
  PROCEDURE COMPUTING_HOURSPEED_PHASE(V_DATE DATE) AS
    V_DATE_IN    DATE := TRUNC(V_DATE);
    V_MONTHBEGIN DATE := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1); --月初
    V_MONTHEND   DATE := LAST_DAY(V_DATE_IN); --月末
    V_YEARBEGIN  DATE := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                                 'YYYY-MM-DD'); --年初
    V_YEAREND    DATE := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                            '-01-01',
                                            'YYYY-MM-DD'),
                                    12) - 1; --年末
  
    V_CNT NUMBER := 0;
  BEGIN
    --月结
    BEGIN
      WRITE_LOG('COMPUTING_HOURSPEED_PHASE',
                '数据结存-时段平均速度计算月结存',
                V_DATE_IN,
                '开始');
      --删除重复数据
      DELETE FROM JZ_HOURSPEEDSTORAGE T
       WHERE T.JZDATE >= V_MONTHBEGIN
         AND T.JZDATE <= V_MONTHEND
         AND T.DATASAVELEVEL = '2';
      COMMIT;
      --插入新数据
      INSERT INTO JZ_HOURSPEEDSTORAGE
        (RECORDID,
         ROUTEID,
         STARTTIME,
         ENDTIME,
         BUSSID,
         GPSRUNMILE,
         RUNTIME,
         STOPTIME,
         DATASAVELEVEL,
         DATASAVETYPE,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ROUTEID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.BUSSID,
               TT.GPSRUNMILE,
               TT.RUNTIME,
               TT.STOPTIME,
               '2' AS DATASAVELEVEL,
               TT.DATASAVETYPE,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ROUTEID,
                       T.STARTTIME,
                       T.ENDTIME,
                       T.BUSSID,
                       T.DATASAVETYPE,
                       SUM(T.GPSRUNMILE) AS GPSRUNMILE,
                       SUM(T.RUNTIME) AS RUNTIME,
                       SUM(T.STOPTIME) AS STOPTIME
                  FROM JZ_HOURSPEEDSTORAGE T
                 WHERE T.JZDATE >= V_MONTHBEGIN
                   AND T.JZDATE <= V_MONTHEND
                   AND T.DATASAVELEVEL = '3'
                 GROUP BY T.ROUTEID,
                          T.STARTTIME,
                          T.ENDTIME,
                          T.BUSSID,
                          T.DATASAVETYPE) TT;
      COMMIT;
      V_CNT := SQL%ROWCOUNT;
      WRITE_LOG('COMPUTING_HOURSPEED_PHASE',
                '数据结存-时段平均速度计算月结存',
                V_DATE_IN,
                V_CNT);
      COMMIT;
    END;
    --年结
    BEGIN
      WRITE_LOG('COMPUTING_HOURSPEED_PHASE',
                '数据结存-时段平均速度计算年结存',
                V_DATE_IN,
                '开始');
      --删除重复数据
      DELETE FROM JZ_HOURSPEEDSTORAGE T
       WHERE T.JZDATE >= V_YEARBEGIN
         AND T.JZDATE <= V_YEAREND
         AND T.DATASAVELEVEL = '1';
      COMMIT;
      --插入新数据
      INSERT INTO JZ_HOURSPEEDSTORAGE
        (RECORDID,
         ROUTEID,
         STARTTIME,
         ENDTIME,
         BUSSID,
         GPSRUNMILE,
         RUNTIME,
         STOPTIME,
         DATASAVELEVEL,
         DATASAVETYPE,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ROUTEID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.BUSSID,
               TT.GPSRUNMILE,
               TT.RUNTIME,
               TT.STOPTIME,
               '1' AS DATASAVELEVEL,
               TT.DATASAVETYPE,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ROUTEID,
                       T.STARTTIME,
                       T.ENDTIME,
                       T.BUSSID,
                       T.DATASAVETYPE,
                       SUM(T.GPSRUNMILE) AS GPSRUNMILE,
                       SUM(T.RUNTIME) AS RUNTIME,
                       SUM(T.STOPTIME) AS STOPTIME
                  FROM JZ_HOURSPEEDSTORAGE T
                 WHERE T.JZDATE >= V_YEARBEGIN
                   AND T.JZDATE <= V_YEAREND
                   AND T.DATASAVELEVEL = '3'
                 GROUP BY T.ROUTEID,
                          T.STARTTIME,
                          T.ENDTIME,
                          T.BUSSID,
                          T.DATASAVETYPE) TT;
      COMMIT;
      V_CNT := SQL%ROWCOUNT;
      WRITE_LOG('COMPUTING_HOURSPEED_PHASE',
                '数据结存-时段平均速度计算年结存',
                V_DATE_IN,
                V_CNT);
      COMMIT;
    END;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      WRITE_EXCEPTION('COMPUTING_HOURSPEED_PHASE',
                      '数据结存-时段平均速度计算年结存',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
      COMMIT;
  END;
  /****************************************************************************************
  *    名称：COMPUTING_STAINTERSPEED                                                      *
  *                                                                                       *
  *    功能：站间时段速度结存                                                  *
  *                                                                                       *
  *    作者：WCX                                                                      *
  *    日期：2014-02-24                                                                   *
  ****************************************************************************************/
  PROCEDURE COMPUTING_STAINTERSPEED(V_DATE DATE) AS
    V_BEGINTIME DATE;
    V_ENDTIME   DATE;
    V_EXECTIMES FLOAT;
    V_CNT       INT;
  BEGIN
    DELETE FROM JZ_STAINTERSPEED T WHERE T.JZDATE = TRUNC(V_DATE);
    V_EXECTIMES := 0;
    V_BEGINTIME := TRUNC(V_DATE);
    V_ENDTIME   := V_BEGINTIME + G_INTERVAL / 24;
    V_CNT       := 0;
    WHILE (V_EXECTIMES < 24) LOOP
      BEGIN
        INSERT INTO JZ_STAINTERSPEED
          (RECORDID,
           ROUTEID,
           BUSSID,
           STATIONNO,
           NEXTSTANO,
           STARTTIME,
           ENDTIME,
           RUNTIMES,
           RUNMILES,
           DATASAVELEVEL,
           JZDATE) WITH ACENTERTABLE AS
          (
           /*所需数据过滤*/
           SELECT ROW_NUMBER() OVER(ORDER BY PRODUCTID, ACTDATETIME ASC) AS ROWNO,
                   ROUTEID,
                   SUBROUTEID,
                   BUSSID,
                   PRODUCTID,
                   STATIONNUM,
                   ISARRLFT,
                   GPSMILE,
                   ROUND((ACTDATETIME - TRUNC(V_DATE)) * 24 * 60, 2) AS ACTDATETIME
             FROM BSVCBUSARRLFTLD5TEMP
            WHERE ACTDATETIME >= V_BEGINTIME
              AND ACTDATETIME < V_ENDTIME
              AND DATATYPE = '4'),
        /*统计数据,根据线路、上下行、到离站点*/
        BCENTERTABLE AS
          (SELECT A.ROUTEID,
                  A.SUBROUTEID,
                  A.BUSSID,
                  B.STATIONNUM AS STATIONNO,
                  A.STATIONNUM AS NEXTSTANO,
                  SUM(A.ACTDATETIME - B.ACTDATETIME) AS RUNTIME,
                  SUM(A.GPSMILE - B.GPSMILE) AS RUNMILE
             FROM (SELECT * FROM ACENTERTABLE WHERE ISARRLFT = '1') A
            INNER JOIN (SELECT * FROM ACENTERTABLE WHERE ISARRLFT = '2') B ON A.ROUTEID =
                                                                              B.ROUTEID
                                                                          AND A.SUBROUTEID =
                                                                              B.SUBROUTEID
                                                                          AND A.PRODUCTID =
                                                                              B.PRODUCTID
                                                                          AND A.ROWNO =
                                                                              B.ROWNO + 1
            WHERE A.ACTDATETIME > B.ACTDATETIME
            GROUP BY A.ROUTEID,
                     A.SUBROUTEID,
                     A.BUSSID,
                     B.STATIONNUM,
                     A.STATIONNUM)
        /*查询结果*/
          SELECT S_ROUTESTORAGE.NEXTVAL,
                 ROUTEID,
                 BUSSID,
                 STATIONNO,
                 NEXTSTANO,
                 V_EXECTIMES * 60,
                 V_EXECTIMES * 60 + G_INTERVAL * 60,
                 RUNTIME,
                 RUNMILE,
                 '3',
                 TRUNC(V_DATE)
            FROM BCENTERTABLE;
      
        V_CNT := SQL%ROWCOUNT;
      
        WRITE_LOG('Computing_StainterSpeed',
                  '数据结存-站点间距和运营时间',
                  V_BEGINTIME,
                  V_CNT);
      
        COMMIT;
        V_BEGINTIME := V_BEGINTIME + G_INTERVAL / 24;
        V_ENDTIME   := V_BEGINTIME + G_INTERVAL / 24;
        V_EXECTIMES := V_EXECTIMES + G_INTERVAL;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          WRITE_EXCEPTION('Computing_StainterSpeed',
                          '数据结存-站点间距和运营时间',
                          V_BEGINTIME,
                          SQLCODE,
                          SQLERRM);
          COMMIT;
          --return;--出错,直接结束结存
      END;
    END LOOP;
  END;
  /****************************************************************************************
  *    名称：P_IMPORT_BUSARRLFTDATA                                                       *
  *                                                                                       *
  *    功能：导入到离站数据                                                               *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2011-05-04                                                                   *
  ****************************************************************************************/
  PROCEDURE P_IMPORT_BUSARRLFTDATA(V_DATE DATE) AS
    V_DATE_IN   DATE;
    V_STARTDATE DATE;
    V_SQL       VARCHAR2(500);
  BEGIN
    V_DATE_IN   := TRUNC(V_DATE);
    V_STARTDATE := SYSDATE;
    -------------------------------------------------------------------------------------------------
    -- 清除当天到离站数据
    -------------------------------------------------------------------------------------------------
    SELECT 'TRUNCATE TABLE BSVCBUSARRLFTLD5TEMP' INTO V_SQL FROM DUAL;
    EXECUTE IMMEDIATE V_SQL;
    COMMIT;
    -------------------------------------------------------------------------------------------------
    -- 分时段导入到离站数据
    -------------------------------------------------------------------------------------------------
    FOR CUR IN 1 .. 24 + (G_START_TIME * 24) LOOP
      BEGIN
        INSERT /*+append*/
        INTO BSVCBUSARRLFTLD5TEMP
          (BUSRDID,
           DATATYPE,
           ROUTEID,
           SUBROUTEID,
           PRODUCTID,
           STATIONSEQNUM,
           STATIONNUM,
           ISARRLFT,
           ACTDATETIME,
           RECDATETIME,
           WRITEID,
           ISAPPEND,
           BUSSID,
           LONGITUDE,
           LATITUDE,
           ALTITUDE,
           GPSSPEED,
           SENSORSPEED,
           ROTATIONANGLE,
           STATIONTYPE,
           ISMANULOPT,
           PACKCODE,
           SMCODE,
           ONPNUM,
           OFFPNUM,
           LEFTPNUM,
           TPTDATA,
           DOORSTATE,
           PECCANCYTYPE,
           PECCANCYTIME,
           STANDARDVALUE,
           PECCANCYVALUE,
           GPSMILE,
           CHECKED,
           ASSEDATE,
           ASSESSOR,
           BUSID,
           DRIVERID,
           BUSRRID)
          (SELECT BUSRDID,
                  DATATYPE,
                  ROUTEID,
                  SUBROUTEID,
                  PRODUCTID,
                  STATIONSEQNUM,
                  STATIONNUM,
                  ISARRLFT,
                  ACTDATETIME,
                  RECDATETIME,
                  WRITEID,
                  ISAPPEND,
                  BUSSID,
                  LONGITUDE,
                  LATITUDE,
                  ALTITUDE,
                  GPSSPEED,
                  SENSORSPEED,
                  ROTATIONANGLE,
                  STATIONTYPE,
                  ISMANULOPT,
                  PACKCODE,
                  SMCODE,
                  ONPNUM,
                  OFFPNUM,
                  LEFTPNUM,
                  TPTDATA,
                  DOORSTATE,
                  PECCANCYTYPE,
                  PECCANCYTIME,
                  STANDARDVALUE,
                  PECCANCYVALUE,
                  GPSMILE,
                  CHECKED,
                  ASSEDATE,
                  ASSESSOR,
                  BUSID,
                  DRIVERID,
                  BUSRRID
             FROM BSVCBUSARRLFTLD5 T
            WHERE T.ACTDATETIME >= V_DATE_IN + (CUR - 1) / 24
              AND T.ACTDATETIME < V_DATE_IN + CUR / 24
              AND T.DATATYPE = '4') ORDER BY T.ROUTEID, T.PRODUCTID, T.ACTDATETIME;
        --每cur/24提交一次
        COMMIT;
      END;
    END LOOP;
    WRITE_LOG('P_IMPORT_BUSARRLFTDATA',
              '导入到离站数据',
              V_DATE_IN,
              '时间：' || ROUND((SYSDATE - V_STARTDATE) * 24 * 60 * 60, 2) || '秒');
    -------------------------------------------------------------------------------------------------
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('P_IMPORT_BUSARRLFTDATA',
                      '导入到离站数据',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：P_IMPORT_MONTHCONSUME                                                        *
  *                                                                                       *
  *    功能：导入ic卡刷卡记录数据                                                         *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2011-05-04                                                                   *
  ****************************************************************************************/
  PROCEDURE P_IMPORT_MONTHCONSUME(V_DATE DATE) AS
    V_DATE_IN   DATE;
    V_STARTDATE DATE;
    V_SQL       VARCHAR2(500);
  BEGIN
    V_DATE_IN   := TRUNC(V_DATE);
    V_STARTDATE := SYSDATE;
    -------------------------------------------------------------------------------------------------
    -- 清除当天ic卡刷卡记录数据        
    -------------------------------------------------------------------------------------------------
    SELECT 'TRUNCATE TABLE TB_MONTHCONSUMETMP' INTO V_SQL FROM DUAL;
    EXECUTE IMMEDIATE V_SQL;
    COMMIT;
    -------------------------------------------------------------------------------------------------
    -- 分时段导入ic卡刷卡记录数据
    -------------------------------------------------------------------------------------------------
    FOR CUR IN 1 .. 24 /*+ (G_START_TIME * 24)*/
     LOOP
      BEGIN
        INSERT /*+ append*/
        INTO TB_MONTHCONSUMETMP
          (CARDNO,
           CONSUME,
           REMAINTIMES,
           BALANCE,
           CONSUMEDATE,
           CONSUMETYPE,
           LINENO,
           BUSNO)
          SELECT CARDNO,
                 CONSUME,
                 REMAINTIMES,
                 BALANCE,
                 CONSUMEDATE,
                 CONSUMETYPE,
                 LINENO,
                 BUSNO
            FROM TB_MONTHCONSUME T
           WHERE T.CONSUMEDATE >= V_DATE_IN + (CUR - 1) / 24
             AND T.CONSUMEDATE < V_DATE_IN + CUR / 24
           ORDER BY T.LINENO, T.BUSNO, T.CONSUMEDATE;
        --每cur/24提交一次
        COMMIT;
      END;
    END LOOP;
    WRITE_LOG('P_IMPORT_MONTHCONSUME',
              '导入ic卡刷卡记录数据',
              V_DATE_IN,
              '时间：' || ROUND((SYSDATE - V_STARTDATE) * 24 * 60 * 60, 2) || '秒');
    -------------------------------------------------------------------------------------------------
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('P_IMPORT_MONTHCONSUME',
                      '导入ic卡刷卡记录数据',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：Treate_GPSData                                                              *
  *                                                                                      *
  *    功能：结存到离站数据                                                              *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_GPSDATA(V_DATE DATE) AS
    V_ROUTEID   VARCHAR2(36); --线路编号';
    V_ROUTENAME VARCHAR2(36); --线路名称';
    V_ROUTECODE VARCHAR2(36); --线路编码';  
    V_DATE_IN   DATE := TRUNC(V_DATE);
    --线路
    CURSOR CUR_ROUTE IS
      SELECT T.ROUTEID, T.ROUTENAME, T.ROUTECODE
        FROM MCROUTEINFOGS T
       WHERE T.ISACTIVE = '1'
       ORDER BY T.ROUTEID;
  BEGIN
    WRITE_LOG('TREATE_GPSDATA', 'GPS数据计算', V_DATE_IN, '加载GPS数据');
    WRITE_LOG('TREATE_GPSDATA', 'GPS数据计算', V_DATE_IN, '加载结束');
    FOR CUR_R IN CUR_ROUTE LOOP
      BEGIN
        V_ROUTEID   := CUR_R.ROUTEID;
        V_ROUTENAME := CUR_R.ROUTENAME;
        V_ROUTECODE := CUR_R.ROUTECODE;
        TREATE_GPS(V_ROUTEID, V_DATE_IN);
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('TREATE_GPSDATA',
                          'GPS数据计算_' || V_ROUTEID,
                          V_DATE_IN,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('TREATE_GPSDATA',
                      'GPS数据计算',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_GPS                                                                  *
  *                                                                                      *
  *    功能：GPS数据相关结存                                                             *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_GPS(V_ROUTEID VARCHAR2, V_DATE DATE) AS
    V_DATE_IN      DATE;
    V_STATIONCOUNT NUMBER;
    V_PECCCOUNT    NUMBER;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_GPS', 'GPS数据计算_' || V_ROUTEID, V_DATE_IN, '开始');
    V_STATIONCOUNT := 100;
    --到离站数据
    TREATE_ROUTEARRLFT(V_ROUTEID, V_DATE_IN, V_STATIONCOUNT);
    --违规数据
    TREATE_ROUTEPECCANCY(V_ROUTEID, V_DATE_IN, V_PECCCOUNT);
    IF (V_STATIONCOUNT > 0) THEN
      --峰段速度
      TREATE_TIMEPHASESPEED(V_ROUTEID, V_DATE_IN);
    END IF;
    WRITE_LOG('TREATE_GPS', 'GPS数据计算_' || V_ROUTEID, V_DATE_IN, '结束');
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('TREATE_GPS',
                      'GPS数据计算',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTEARRLFT                                                          *
  *                                                                                      *
  *    功能：按线路结存到离站数据                                                         *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEARRLFT(V_ROUTE_ID VARCHAR2,
                               V_DATE     DATE,
                               V_RET      OUT NUMBER) AS
    V_ROUTEID            VARCHAR2(36); --线路编号';
    V_ROUTENAME          VARCHAR2(36); --线路名称';
    V_ROUTECODE          VARCHAR2(36); --线路编码';
    V_BUSID              VARCHAR2(36);
    V_BUSSELFID          VARCHAR2(36);
    V_CARDID             VARCHAR2(36);
    V_PRODUCTID          NUMBER;
    V_ID                 VARCHAR2(100);
    V_DATE_IN            DATE := TRUNC(V_DATE);
    V_STATION            STATION_INFO;
    G_STATION_LIST       STATION_LIST;
    V_SUBROUTEID_LAST    VARCHAR2(36);
    V_STATIONSEQNUM_LAST NUMBER;
    V_ISARRLFT_LAST      CHAR(1);
    V_STATION_ARRLFT     BUS_RUNDATA;
    V_COUNT              NUMBER;
    V_ARRLFT             ARRLFT;
    V_TIME               DATE; --计算站点客流量(结束时间)
    V_LAST_TIME          DATE; --计算站点客流量(开始时间)  
    --线路
    CURSOR CUR_ROUTE(ROUTE_ID VARCHAR2) IS
      SELECT T.ROUTEID, T.ROUTENAME, T.ROUTECODE
        FROM MCROUTEINFOGS T
       WHERE T.ROUTEID = ROUTE_ID
       ORDER BY T.ROUTEID;
    --车辆
    CURSOR CUR_BUS(ROUTE_ID VARCHAR2, DATE_IN DATE) IS
      SELECT BUS.BUSID, BUS.BUSSELFID, BUS.CARDID, BUS.PRODUCTID
        FROM MCBUSINFOGS BUS, MCRBUSROUTEGS R
       WHERE BUS.BUSID = R.BUSID
         AND R.ROUTEID = V_ROUTEID
         AND BUS.PRODUCTID IS NOT NULL;
    --单程站点
    CURSOR CUR_SEG(ROUTE_ID VARCHAR2) IS
      SELECT T.ROUTEID,
             T.SUBROUTEID,
             T.SEGMENTID,
             T.DUALSERIALID,
             T.SNGSERIALID,
             T.STATIONID
        FROM MCRSEGMENTSTATIONGS T
       WHERE T.ROUTEID = ROUTE_ID
       ORDER BY T.ROUTEID, T.SUBROUTEID, T.SEGMENTID;
    --车辆运行数据
    CURSOR CUR_RUN(ROUTE_ID VARCHAR2, PRODUCT_ID NUMBER, DATE_IN DATE) IS
      SELECT T.ROUTEID,
             T.SUBROUTEID,
             T.PRODUCTID,
             T.STATIONSEQNUM,
             T.STATIONNUM,
             T.STATIONTYPE,
             T.ISARRLFT,
             T.ACTDATETIME,
             T.RECDATETIME,
             T.GPSMILE
        FROM BSVCBUSARRLFTLD5TEMP T
       WHERE T.ROUTEID = ROUTE_ID
         AND T.PRODUCTID = PRODUCT_ID
         AND T.DATATYPE = '4'
       ORDER BY T.ACTDATETIME;
  BEGIN
    V_RET := 0;
    FOR CUR_R IN CUR_ROUTE(V_ROUTE_ID) LOOP
      BEGIN
        V_ROUTEID   := CUR_R.ROUTEID;
        V_ROUTENAME := CUR_R.ROUTENAME;
        V_ROUTECODE := CUR_R.ROUTECODE;
        WRITE_LOG('TREATE_ROUTEARRLFT',
                  '计算站点数据_' || V_ROUTE_ID,
                  V_DATE_IN,
                  '开始计算');
        V_ARRLFT.ROUTENAME := CUR_R.ROUTENAME;
        V_ARRLFT.ROUTECODE := CUR_R.ROUTECODE;
        --加载站点
        IF (G_STATION_LIST.COUNT > 0) THEN
          G_STATION_LIST.DELETE();
        END IF;
        FOR CUR_S IN CUR_SEG(V_ROUTEID) LOOP
          V_STATION.ROUTE_ID := CUR_S.ROUTEID;
          V_STATION.SUBROUTE_ID := CUR_S.SUBROUTEID;
          V_STATION.SEGMENT_ID := CUR_S.SEGMENTID;
          V_STATION.STATION_ID := CUR_S.STATIONID;
          V_STATION.SNGSERIAL_ID := CUR_S.SNGSERIALID;
          V_STATION.DUALSERIAL_ID := CUR_S.DUALSERIALID;
          V_ID := V_STATION.ROUTE_ID || '_' || V_STATION.SUBROUTE_ID || '_' ||
                  V_STATION.DUALSERIAL_ID;
          G_STATION_LIST(V_ID) := V_STATION;
        END LOOP;
        V_COUNT              := G_STATION_LIST.COUNT;
        V_SUBROUTEID_LAST    := -1;
        V_STATIONSEQNUM_LAST := -1;
        V_ISARRLFT_LAST      := '9';
        V_DATE_IN            := TRUNC(V_DATE);
        --删除此线路当日数据
        DELETE BSVCBUSARRLFTDATALD T
         WHERE T.ROUTEID = V_ROUTEID
           AND T.ACTDATETIME >=
               V_DATE_IN + G_START_TIME - G_MAX_STOPSTATION / (24 * 60)
           AND T.ACTDATETIME <
               V_DATE_IN + 1 + G_START_TIME + G_MAX_STOPSTATION / (24 * 60);
        --加载车辆（当日有GPS数据的）
        FOR CUR_BR IN CUR_BUS(V_ROUTEID, V_DATE_IN) LOOP
          BEGIN
            V_RET              := V_RET + 1; --返回站点个数          
            V_BUSID            := CUR_BR.BUSID;
            V_BUSSELFID        := CUR_BR.BUSSELFID;
            V_CARDID           := CUR_BR.CARDID;
            V_PRODUCTID        := CUR_BR.PRODUCTID;
            V_ARRLFT.BUSID     := CUR_BR.BUSID;
            V_ARRLFT.BUSSELFID := CUR_BR.BUSSELFID;
            V_ARRLFT.CARDID    := CUR_BR.CARDID;
            V_LAST_TIME        := V_DATE_IN + G_START_TIME; --从最早开始计算          
            --加载车辆运行数据
            FOR CUR_RS IN CUR_RUN(V_ROUTEID, V_PRODUCTID, V_DATE_IN) LOOP
              V_STATION_ARRLFT.ROUTEID       := CUR_RS.ROUTEID;
              V_STATION_ARRLFT.SUBROUTEID    := CUR_RS.SUBROUTEID;
              V_STATION_ARRLFT.PRODUCTID     := CUR_RS.PRODUCTID;
              V_STATION_ARRLFT.STATIONSEQNUM := CUR_RS.STATIONSEQNUM;
              V_STATION_ARRLFT.STATIONNUM    := CUR_RS.STATIONNUM;
              V_STATION_ARRLFT.STATIONTYPE   := CUR_RS.STATIONTYPE;
              V_STATION_ARRLFT.ISARRLFT      := CUR_RS.ISARRLFT;
              V_STATION_ARRLFT.ACTDATETIME   := CUR_RS.ACTDATETIME;
              V_STATION_ARRLFT.RECDATETIME   := CUR_RS.RECDATETIME;
              V_STATION_ARRLFT.GPSMILE       := CUR_RS.GPSMILE;
              --子线不相同,则写库
              IF (CUR_RS.SUBROUTEID <> V_SUBROUTEID_LAST) THEN
                V_LAST_TIME := GET_LASTTIME(V_ARRLFT,
                                            TRUNC(V_LAST_TIME) +
                                            G_START_TIME); --取当前时间
                V_TIME      := V_STATION_ARRLFT.ACTDATETIME;
                TREATE_WRITESTATIONDATA(V_ARRLFT,
                                        G_STATION_LIST,
                                        V_LAST_TIME,
                                        V_TIME);
                V_SUBROUTEID_LAST    := CUR_RS.SUBROUTEID;
                V_STATIONSEQNUM_LAST := CUR_RS.STATIONSEQNUM;
                V_ISARRLFT_LAST      := CUR_RS.ISARRLFT;
                IF (CUR_RS.ISARRLFT = '1') THEN
                  V_ARRLFT.ARR         := V_STATION_ARRLFT;
                  V_ARRLFT.LFT.ROUTEID := 0;
                ELSE
                  V_ARRLFT.ARR.ROUTEID := 0;
                  V_ARRLFT.LFT         := V_STATION_ARRLFT;
                END IF;
                --子线相同
              ELSE
                --站点编号不相同,则写库
                IF (CUR_RS.STATIONSEQNUM <> V_STATIONSEQNUM_LAST) THEN
                  V_LAST_TIME := GET_LASTTIME(V_ARRLFT,
                                              TRUNC(V_LAST_TIME) +
                                              G_START_TIME); --取当前时间
                  V_TIME      := V_STATION_ARRLFT.ACTDATETIME;
                  TREATE_WRITESTATIONDATA(V_ARRLFT,
                                          G_STATION_LIST,
                                          V_LAST_TIME,
                                          V_TIME);
                  V_STATIONSEQNUM_LAST := CUR_RS.STATIONSEQNUM;
                  V_ISARRLFT_LAST      := CUR_RS.ISARRLFT;
                  IF (CUR_RS.ISARRLFT = '1') THEN
                    V_ARRLFT.ARR         := V_STATION_ARRLFT;
                    V_ARRLFT.LFT.ROUTEID := 0;
                  ELSE
                    V_ARRLFT.ARR.ROUTEID := 0;
                    V_ARRLFT.LFT         := V_STATION_ARRLFT;
                  END IF;
                  --站点编号一样
                ELSE
                  -- 到站
                  IF (CUR_RS.ISARRLFT = '1') THEN
                    CASE (V_ISARRLFT_LAST)
                    --上一个为到站,本站还是到站
                      WHEN '1' THEN
                        IF ((V_STATION_ARRLFT.ACTDATETIME -
                           V_ARRLFT.ARR.ACTDATETIME) * 24 * 60 >
                           G_MAX_STOPSTATION) THEN
                          V_LAST_TIME := GET_LASTTIME(V_ARRLFT,
                                                      TRUNC(V_LAST_TIME) +
                                                      G_START_TIME); --取当前时间
                          V_TIME      := V_STATION_ARRLFT.ACTDATETIME;
                          TREATE_WRITESTATIONDATA(V_ARRLFT,
                                                  G_STATION_LIST,
                                                  V_LAST_TIME,
                                                  V_TIME);
                          V_ISARRLFT_LAST := CUR_RS.ISARRLFT;
                        
                          V_ARRLFT.ARR         := V_STATION_ARRLFT;
                          V_ARRLFT.LFT.ROUTEID := 0;
                        ELSE
                          NULL; --以第一个到站时间为准
                        END IF;
                        --上一个为离站,本站是到站,
                      WHEN '2' THEN
                        --不一定重复报站,可能是早报上,下午开始运营时又报站了
                        IF ((V_STATION_ARRLFT.ACTDATETIME -
                           V_ARRLFT.ARR.ACTDATETIME) * 24 * 60 >
                           G_MAX_STOPSTATION * 2) THEN
                          V_LAST_TIME := GET_LASTTIME(V_ARRLFT,
                                                      TRUNC(V_LAST_TIME) +
                                                      G_START_TIME); --取当前时间
                          V_TIME      := V_STATION_ARRLFT.ACTDATETIME;
                          TREATE_WRITESTATIONDATA(V_ARRLFT,
                                                  G_STATION_LIST,
                                                  V_LAST_TIME,
                                                  V_TIME);
                          V_ISARRLFT_LAST := CUR_RS.ISARRLFT;
                        
                          V_ARRLFT.ARR         := V_STATION_ARRLFT;
                          V_ARRLFT.LFT.ROUTEID := 0;
                        ELSE
                          NULL; --以第一个到站时间为准
                        END IF;
                      ELSE
                        V_ARRLFT.ARR := V_STATION_ARRLFT;
                    END CASE;
                  --离站
                  ELSE
                    CASE (V_ISARRLFT_LAST)
                      WHEN '1' THEN
                        --上一个为到站,本站是离站
                        --如果时间相关较大,则写库
                        IF ((V_ARRLFT.ARR.ACTDATETIME -
                           V_ARRLFT.ARR.ACTDATETIME) * 24 * 60 >
                           G_MAX_STOPSTATION) THEN
                          --写库
                          V_LAST_TIME := GET_LASTTIME(V_ARRLFT,
                                                      TRUNC(V_LAST_TIME) +
                                                      G_START_TIME); --取当前时间
                          V_TIME      := V_STATION_ARRLFT.ACTDATETIME;
                          TREATE_WRITESTATIONDATA(V_ARRLFT,
                                                  G_STATION_LIST,
                                                  V_LAST_TIME,
                                                  V_TIME);
                        
                          V_ARRLFT.ARR.ROUTEID := 0;
                          V_ARRLFT.LFT         := V_STATION_ARRLFT;
                        
                          V_ISARRLFT_LAST := CUR_RS.ISARRLFT;
                        ELSE
                          --NULL; --下次站点编号变化时自动写库
                          V_ARRLFT.LFT    := V_STATION_ARRLFT;
                          V_ISARRLFT_LAST := CUR_RS.ISARRLFT;
                        END IF;
                      WHEN '2' THEN
                        --上一个为离站,本站是离站,
                        V_ARRLFT.LFT    := V_STATION_ARRLFT;
                        V_ISARRLFT_LAST := CUR_RS.ISARRLFT;
                      ELSE
                        V_ARRLFT.LFT    := V_STATION_ARRLFT;
                        V_ISARRLFT_LAST := CUR_RS.ISARRLFT;
                    END CASE; END IF;
                END IF;
              END IF;
            END LOOP;
          EXCEPTION
            WHEN OTHERS THEN
              WRITE_EXCEPTION('TREATE_ROUTEARRLFT',
                              '计算站点数据_车辆' || V_BUSSELFID,
                              V_DATE_IN,
                              SQLCODE,
                              SQLERRM);
          END;
        END LOOP;
      
        WRITE_LOG('TREATE_ROUTEARRLFT',
                  '计算站点数据_' || V_ROUTE_ID,
                  V_DATE_IN,
                  '计算结束');
        V_DATE_IN := V_DATE_IN + 1;
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('TREATE_ROUTEARRLFT',
                          '计算站点数据_' || V_ROUTE_ID,
                          V_DATE_IN,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP;
  END;
  /***************************************************************************************
  *    名称：TREATE_WRITESTATIONDATA                                                           *
  *                                                                                      *
  *    功能：写入站点数据                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_WRITESTATIONDATA(V_ARRLFT       ARRLFT,
                                    G_STATION_LIST STATION_LIST,
                                    V_LAST_TIME    DATE,
                                    V_TIME         DATE) AS
    V_ROUTEID        VARCHAR2(36); --线路编号';
    V_ROUTENAME      VARCHAR2(36); --线路名称';
    V_ROUTECODE      VARCHAR2(36); --线路编码';
    V_BUSID          VARCHAR2(36);
    V_BUSSELFID      VARCHAR2(36);
    V_CARDID         VARCHAR2(36);
    V_PRODUCTID      NUMBER;
    V_STATIONID      VARCHAR2(36);
    V_SUBROUTEID     VARCHAR2(36);
    V_STATIONSEQNUM  NUMBER;
    V_SEGMENTID      VARCHAR2(36);
    V_STATIONNUM     VARCHAR2(12);
    V_SNGSERIALID    NUMBER;
    V_ACTDATETIME    DATE;
    V_ARRACTDATETIME DATE;
    V_ARRRECDATETIME DATE;
    V_LFTACTDATETIME DATE;
    V_LFTRECDATETIME DATE;
    V_ARRGPSMILE     NUMBER;
    V_LFTGPSMILE     NUMBER;
    V_ONPNUM         NUMBER;
    OFFPNUM          NUMBER;
    LEFTPNUM         NUMBER;
    V_FLAG           NUMBER;
    V_ID             VARCHAR2(100);
    V_STATION        STATION_INFO;
  BEGIN
    IF ((V_ARRLFT.ARR.ROUTEID = 0 OR V_ARRLFT.ARR.ROUTEID IS NULL) AND
       (V_ARRLFT.LFT.ROUTEID = 0 OR V_ARRLFT.LFT.ROUTEID IS NULL)) THEN
      RETURN;
    END IF;
    V_ARRACTDATETIME := NULL;
    V_ARRRECDATETIME := NULL;
    V_LFTACTDATETIME := NULL;
    V_LFTRECDATETIME := NULL;
    V_ARRGPSMILE     := NULL;
    V_LFTGPSMILE     := NULL;
    V_ONPNUM         := 0;
    OFFPNUM          := 0;
    LEFTPNUM         := 0;
    V_ROUTENAME      := V_ARRLFT.ROUTENAME;
    V_ROUTECODE      := V_ARRLFT.ROUTECODE;
    V_BUSID          := V_ARRLFT.BUSID;
    V_CARDID         := V_ARRLFT.CARDID;
    V_BUSSELFID      := V_ARRLFT.BUSSELFID;
    V_FLAG           := 0;
    IF NOT (V_ARRLFT.ARR.ROUTEID = 0 OR V_ARRLFT.ARR.ROUTEID IS NULL) THEN
      V_ROUTEID        := V_ARRLFT.ARR.ROUTEID;
      V_SUBROUTEID     := V_ARRLFT.ARR.SUBROUTEID;
      V_PRODUCTID      := V_ARRLFT.ARR.PRODUCTID;
      V_STATIONSEQNUM  := V_ARRLFT.ARR.STATIONSEQNUM;
      V_STATIONNUM     := V_ARRLFT.ARR.STATIONNUM;
      V_ARRACTDATETIME := V_ARRLFT.ARR.ACTDATETIME;
      V_ARRRECDATETIME := V_ARRLFT.ARR.RECDATETIME;
      V_ARRGPSMILE     := V_ARRLFT.ARR.GPSMILE;
      V_ACTDATETIME    := V_ARRACTDATETIME +
                          G_MAX_STOPSTATION / 2 / (24 * 60);
      V_FLAG           := V_FLAG + 1;
    END IF;
    IF NOT (V_ARRLFT.LFT.ROUTEID = 0 OR V_ARRLFT.LFT.ROUTEID IS NULL) THEN
      V_ROUTEID        := V_ARRLFT.LFT.ROUTEID;
      V_SUBROUTEID     := V_ARRLFT.LFT.SUBROUTEID;
      V_PRODUCTID      := V_ARRLFT.LFT.PRODUCTID;
      V_STATIONSEQNUM  := V_ARRLFT.LFT.STATIONSEQNUM;
      V_STATIONNUM     := V_ARRLFT.LFT.STATIONNUM;
      V_LFTACTDATETIME := V_ARRLFT.LFT.ACTDATETIME;
      V_LFTRECDATETIME := V_ARRLFT.LFT.RECDATETIME;
      V_LFTGPSMILE     := V_ARRLFT.LFT.GPSMILE;
      V_ACTDATETIME    := V_LFTACTDATETIME -
                          G_MAX_STOPSTATION / 2 / (24 * 60);
      V_FLAG           := V_FLAG + 1;
    END IF;
    IF (V_FLAG = 2) THEN
      V_ACTDATETIME := V_ARRACTDATETIME +
                       (V_LFTACTDATETIME - V_ARRACTDATETIME) / 2;
    END IF;
    V_ID := V_ROUTEID || '_' || V_SUBROUTEID || '_' || V_STATIONSEQNUM;
    IF (G_STATION_LIST.EXISTS(V_ID)) THEN
      V_STATION     := G_STATION_LIST(V_ID);
      V_SEGMENTID   := V_STATION.SEGMENT_ID;
      V_STATIONID   := V_STATION.STATION_ID;
      V_SNGSERIALID := V_STATION.SNGSERIAL_ID;
    ELSE
      V_SEGMENTID   := NULL;
      V_STATIONID   := NULL;
      V_SNGSERIALID := NULL;
    END IF;
    IF (G_CALC_PSG) THEN
      FOR CUR_R IN (SELECT COUNT(*) AS ONPNUM
                      FROM TB_MONTHCONSUMETMP T
                     WHERE CONSUMETYPE < G_IC_MANAGE
                       AND T.LINENO = V_ROUTECODE
                       AND T.BUSNO = V_BUSSELFID
                       AND T.CONSUMEDATE >= V_LAST_TIME
                       AND T.CONSUMEDATE < V_TIME) LOOP
        V_ONPNUM := CUR_R.ONPNUM;
      END LOOP;
    END IF;
    INSERT INTO BSVCBUSARRLFTDATALD
      (BUSRDID,
       DATATYPE,
       ROUTEID,
       ROUTENAME,
       ROUTECODE,
       SUBROUTEID,
       SEGMENTID,
       BUSID,
       CARDID,
       BUSSELFID,
       PRODUCTID,
       STATIONID,
       SNGSERIALID,
       STATIONSEQNUM,
       STATIONNUM,
       ACTDATETIME,
       ARRACTDATETIME,
       ARRRECDATETIME,
       LFTACTDATETIME,
       LFTRECDATETIME,
       ARRGPSMILE,
       LFTGPSMILE,
       ONPNUM,
       OFFPNUM,
       LEFTPNUM,
       BEGINTIME,
       ENDTIME)
    VALUES
      (S_BUSRUNSTORAGE.NEXTVAL,
       '4',
       V_ROUTEID,
       V_ROUTENAME,
       V_ROUTECODE,
       V_SUBROUTEID,
       V_SEGMENTID,
       V_BUSID,
       V_CARDID,
       V_BUSSELFID,
       V_PRODUCTID,
       V_STATIONID,
       V_SNGSERIALID,
       V_STATIONSEQNUM,
       V_STATIONNUM,
       V_ACTDATETIME,
       V_ARRACTDATETIME,
       V_ARRRECDATETIME,
       V_LFTACTDATETIME,
       V_LFTRECDATETIME,
       V_ARRGPSMILE,
       V_LFTGPSMILE,
       V_ONPNUM,
       OFFPNUM,
       LEFTPNUM,
       V_LAST_TIME,
       V_TIME);
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('TREATE_WRITESTATIONDATA',
                      '写入站点数据',
                      SYSDATE,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：Treate_RoutePeccancy                                                        *
  *                                                                                      *
  *    功能：结存违规数据                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEPECCANCY(V_ROUTEID VARCHAR2,
                                 V_DATE    DATE,
                                 V_RET     OUT NUMBER) AS
    V_DATE_IN          DATE := TRUNC(V_DATE);
    V_OVERSPEEDCOUNT   NUMBER;
    V_UNRULESTOPCOUNT  NUMBER;
    V_MDLOPENDOORCOUNT NUMBER;
  
    V_ORGID              VARCHAR2(36); --jz_timephasedatastorage.orgid%TYPE; --组织id'
    V_ROUTENAME          VARCHAR2(36); --jz_timephasedatastorage.routename%TYPE; --线路名称';
    V_ROUTECODE          VARCHAR2(36); --jz_timephasedatastorage.routecode%TYPE; --线路编码';
    V_TIMEPHASETYPE      VARCHAR2(2); --jz_timephasedatastorage.timephasetype%TYPE; --峰段类型
    V_TIMEPHASEVALUE     VARCHAR2(40); --jz_timephasedatastorage.timephasevalue%TYPE; --峰段名称
    V_STARTTIME          NUMBER; --峰段开始时间(相对0点的小时数)
    V_ENDTIME            NUMBER; --峰段结束时间(相对0点的小时数)
    V_TIMEPHASESTARTTIME DATE; --峰段开始时间
    V_TIMEPHASEENDTIME   DATE; --峰段结束时间
    V_COUNT              NUMBER; --违规次数  
    --线路峰段(注意：如果没有配置峰段,则全天按平峰计算)
    CURSOR CUR_ROUTE(ROUTE_ID VARCHAR2, DATE_IN DATE) IS
      SELECT ROUTE.ORGID,
             ROUTE.ROUTEID,
             ROUTE.ROUTENAME,
             ROUTE.ROUTECODE,
             NVL(T.TIMEPHASEKEY, '2') TIMEPHASETYPE,
             NVL(T.TIMEPHASENAME, '平峰') TIMEPHASEVALUE,
             TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
             TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
             ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
             ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME,
             NVL(T.TIMEPHASEINTERVAL, 0) TIMEPHASEINTERVAL,
             NVL(T.TIMEPHASECIRCLETIME, 0) TIMEPHASECIRCLETIME,
             NVL(T.PLANSEQS, 0) PLANSEQS
        FROM MCROUTEINFOGS ROUTE,
             (SELECT *
                FROM MCROUTETIMEPHASEGS T
               WHERE T.BEGINDATE <= DATE_IN
                 AND T.ENDDATE >= DATE_IN
                 AND T.BEGINWEEK <=
                     (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)
                 AND T.ENDWEEK >=
                     (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)) T
       WHERE ROUTE.ROUTEID = T.ROUTEID(+)
         AND ROUTE.ROUTEID = ROUTE_ID
       ORDER BY T.ROUTEID, T.STARTTIME;
    --五峰段(注意：如果没有配置峰段,则全天按平峰计算)
    CURSOR CUR_PHASE(ROUTE_ID VARCHAR2, DATE_IN DATE) IS
      SELECT ROUTE.ORGID,
             ROUTE.ROUTEID,
             ROUTE.ROUTENAME,
             ROUTE.ROUTECODE,
             NVL(T.TIMEPHASEKEY, '3') TIMEPHASETYPE,
             NVL(T.TIMEPHASENAME, '平峰') TIMEPHASEVALUE,
             TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
             TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
             ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
             ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME
        FROM MCROUTEINFOGS ROUTE, MCROUTETIMEPHASEGS2 T
       WHERE ROUTE.ROUTEID = ROUTE_ID
       ORDER BY ROUTE.ROUTEID, T.STARTTIME;
  BEGIN
    V_RET := 0;
    WRITE_LOG('TREATE_ROUTEPECCANCY',
              '统计违规数据_' || V_ROUTEID,
              V_DATE_IN,
              '线路日结违规数据');
    BEGIN
      --线路日结
      V_COUNT := 0;
      GET_OVERSPEEDCOUNT(V_ROUTEID,
                         V_DATE_IN + G_START_TIME,
                         V_DATE_IN + 1 + G_START_TIME,
                         V_OVERSPEEDCOUNT);
      GET_UNRULESTOPCOUNT(V_ROUTEID,
                          V_DATE_IN + G_START_TIME,
                          V_DATE_IN + 1 + G_START_TIME,
                          V_UNRULESTOPCOUNT);
      GET_MDLOPENDOORCOUNT(V_ROUTEID,
                           V_DATE_IN + G_START_TIME,
                           V_DATE_IN + 1 + G_START_TIME,
                           V_MDLOPENDOORCOUNT);
    
      V_COUNT := V_OVERSPEEDCOUNT + V_UNRULESTOPCOUNT + V_MDLOPENDOORCOUNT;
      V_RET   := V_RET + V_COUNT;
    
      IF (V_COUNT > 0) THEN
        UPDATE JZ_ROUTEDAYSTORAGE T
           SET T.OVERSPEEDCOUNT   = V_OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT  = V_UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT = V_MDLOPENDOORCOUNT
         WHERE T.ROUTEID = V_ROUTEID
           AND T.JZDATE = V_DATE_IN;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        WRITE_EXCEPTION('TREATE_ROUTEPECCANCY',
                        '统计违规数据_日结' || V_ROUTEID,
                        V_DATE_IN,
                        SQLCODE,
                        SQLERRM);
    END;
    --全天有违规,则计算峰段数据
    IF (V_RET > 0) THEN
      WRITE_LOG('TREATE_ROUTEPECCANCY',
                '统计违规数据_' || V_ROUTEID,
                V_DATE_IN,
                '线路峰段日结违规数据');
      BEGIN
        --线路峰段日结
        FOR CUR_R IN CUR_ROUTE(V_ROUTEID, V_DATE_IN) LOOP
          BEGIN
            V_ORGID              := CUR_R.ORGID; --组织id'
            V_ROUTENAME          := CUR_R.ROUTENAME; --线路名称';
            V_ROUTECODE          := CUR_R.ROUTECODE; --线路编码
            V_TIMEPHASETYPE      := CUR_R.TIMEPHASETYPE; --峰段类型
            V_TIMEPHASEVALUE     := CUR_R.TIMEPHASEVALUE; --峰段名称
            V_TIMEPHASESTARTTIME := CUR_R.TIMEPHASESTARTTIME; --峰段开始时间
            V_TIMEPHASEENDTIME   := CUR_R.TIMEPHASEENDTIME; --峰段结束时间
            V_STARTTIME          := CUR_R.STARTTIME; --峰段开始时间(相对0点的小时数)
            V_ENDTIME            := CUR_R.ENDTIME; --峰段结束时间(相对0点的小时数)          
            GET_OVERSPEEDCOUNT(V_ROUTEID,
                               V_TIMEPHASESTARTTIME,
                               V_TIMEPHASEENDTIME,
                               V_OVERSPEEDCOUNT);
            GET_UNRULESTOPCOUNT(V_ROUTEID,
                                V_TIMEPHASESTARTTIME,
                                V_TIMEPHASEENDTIME,
                                V_UNRULESTOPCOUNT);
            GET_MDLOPENDOORCOUNT(V_ROUTEID,
                                 V_TIMEPHASESTARTTIME,
                                 V_TIMEPHASEENDTIME,
                                 V_MDLOPENDOORCOUNT);
            V_COUNT := V_OVERSPEEDCOUNT + V_UNRULESTOPCOUNT +
                       V_MDLOPENDOORCOUNT;
            IF (V_COUNT > 0) THEN
              UPDATE JZ_TIMEPHASEDATASTORAGE T
                 SET T.OVERSPEEDCOUNT   = V_OVERSPEEDCOUNT,
                     T.UNRULESTOPCOUNT  = V_UNRULESTOPCOUNT,
                     T.MDLOPENDOORCOUNT = V_MDLOPENDOORCOUNT
               WHERE T.ROUTEID = V_ROUTEID
                 AND T.TIMEPHASETYPE = V_TIMEPHASETYPE
                 AND T.TIMEPHASESTARTTIME = V_STARTTIME
                 AND T.JZDATE = V_DATE_IN;
            END IF;
          END;
        END LOOP;
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('TREATE_ROUTEPECCANCY',
                          '统计违规数据_峰段日结' || V_ROUTEID,
                          V_DATE_IN,
                          SQLCODE,
                          SQLERRM);
      END;
      WRITE_LOG('TREATE_ROUTEPECCANCY',
                '统计违规数据_' || V_ROUTEID,
                V_DATE_IN,
                '线路五峰段日结违规数据');
      BEGIN
        --线路五峰段日结
        FOR CUR_R IN CUR_PHASE(V_ROUTEID, V_DATE_IN) LOOP
          BEGIN
            V_ORGID              := CUR_R.ORGID; --组织id'
            V_ROUTENAME          := CUR_R.ROUTENAME; --线路名称';
            V_ROUTECODE          := CUR_R.ROUTECODE; --线路编码
            V_TIMEPHASETYPE      := CUR_R.TIMEPHASETYPE; --峰段类型
            V_TIMEPHASEVALUE     := CUR_R.TIMEPHASEVALUE; --峰段名称
            V_TIMEPHASESTARTTIME := CUR_R.TIMEPHASESTARTTIME; --峰段开始时间
            V_TIMEPHASEENDTIME   := CUR_R.TIMEPHASEENDTIME; --峰段结束时间
            V_STARTTIME          := CUR_R.STARTTIME; --峰段开始时间(相对0点的小时数)
            V_ENDTIME            := CUR_R.ENDTIME; --峰段结束时间(相对0点的小时数)          
            GET_OVERSPEEDCOUNT(V_ROUTEID,
                               V_TIMEPHASESTARTTIME,
                               V_TIMEPHASEENDTIME,
                               V_OVERSPEEDCOUNT);
            GET_UNRULESTOPCOUNT(V_ROUTEID,
                                V_TIMEPHASESTARTTIME,
                                V_TIMEPHASEENDTIME,
                                V_UNRULESTOPCOUNT);
            GET_MDLOPENDOORCOUNT(V_ROUTEID,
                                 V_TIMEPHASESTARTTIME,
                                 V_TIMEPHASEENDTIME,
                                 V_MDLOPENDOORCOUNT);
            V_COUNT := V_OVERSPEEDCOUNT + V_UNRULESTOPCOUNT +
                       V_MDLOPENDOORCOUNT;
            IF (V_COUNT > 0) THEN
              UPDATE JZ_TIMEPHASEDATASTORAGE2 T
                 SET T.OVERSPEEDCOUNT   = V_OVERSPEEDCOUNT,
                     T.UNRULESTOPCOUNT  = V_UNRULESTOPCOUNT,
                     T.MDLOPENDOORCOUNT = V_MDLOPENDOORCOUNT
               WHERE T.ROUTEID = V_ROUTEID
                 AND T.TIMEPHASETYPE = V_TIMEPHASETYPE
                 AND T.TIMEPHASESTARTTIME = V_STARTTIME
                 AND T.JZDATE = V_DATE_IN;
            END IF;
          END;
        END LOOP;
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('TREATE_ROUTEPECCANCY',
                          '统计违规数据_五峰段日结' || V_ROUTEID,
                          V_DATE_IN,
                          SQLCODE,
                          SQLERRM);
      END;
    END IF;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('TREATE_ROUTEPECCANCY',
                      '统计违规数据_日结' || V_ROUTEID,
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：Treate_TimePhaseSpeed                                                       *
  *                                                                                      *
  *    功能：计算峰段运行速度                                                            *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-28                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_TIMEPHASESPEED(V_ROUTEID VARCHAR2, V_DATE DATE) AS
    V_DATE_IN          DATE;
    V_BUNSENDSPEED     NUMBER; --车辆运送速度
    V_BUSRUNSPEED      NUMBER; --车辆运行速度
    V_ROUTESTOPTIME    NUMBER; --线路停站时间
    V_RUNCIRCLETIME    NUMBER; --线路周转时间
    V_ROUTERUNTIME     NUMBER; --线路行驶时间
    V_SEQS             NUMBER; --发送班次数
    V_ROUTETIME        NUMBER; --标准线路周转时间
    V_ROUTENUM         NUMBER; --线路站点数
    V_SEGS             NUMBER; --线路单程数  
    V_SUMROUTESTOPTIME NUMBER; --线路停站时间s
    V_SUMRUNCIRCLETIME NUMBER; --线路周转时间s
    V_SUMROUTERUNTIME  NUMBER; --线路行驶时间s
    V_SUMSEQS          NUMBER; --车次数s  
    V_SUBROUTEID       VARCHAR2(36);
    V_SUBROUTENAME     VARCHAR2(36);
    CURSOR CUR_PHASE(ROUTE_ID VARCHAR2, DATE_IN DATE) IS
      SELECT *
        FROM JZ_TIMEPHASEDATASTORAGE
       WHERE ROUTEID = ROUTE_ID
         AND JZDATE = DATE_IN;
    CURSOR CUR_PHASE2(ROUTE_ID VARCHAR2, DATE_IN DATE) IS
      SELECT *
        FROM JZ_TIMEPHASEDATASTORAGE2
       WHERE ROUTEID = ROUTE_ID
         AND JZDATE = DATE_IN;
    CURSOR CUR_SPEED(ROUTE_ID VARCHAR2, DATE_IN DATE, BEGINTIME DATE, ENDTIME DATE) IS
      SELECT ROUND(DECODE(SUMTIME, 0, 0, SUMMILE / SUMTIME), 2) BUSRUNSPEED, --运营速度
             DECODE(SUMTIME - STOPTIME,
                    0,
                    0,
                    SUMMILE / (SUMTIME - STOPTIME)) BUNSENDSPEED --运送速度
        FROM (SELECT SUM(NVL(BZ.MILENUM, 0)) SUMMILE,
                     SUM(BZ.ARRIVETIME - BZ.LEAVETIME) * 24 SUMTIME,
                     SUM(NVL(BZ.STOPTIME, 0) + (CASE
                                                  WHEN (NVL(BZ.STATIONNUM, 0) - NVL(BZ.STOPNUM, 0) - 2) <= 0 THEN
                                                   0
                                                  ELSE
                                                   (NVL(BZ.STATIONNUM, 0) - NVL(BZ.STOPNUM, 0) - 2) *
                                                   G_MIN_STOPSTATION
                                                END)) / 60 STOPTIME
                FROM BZ_BUSRUNRECORDLD BZ
               WHERE BZ.ROUTEID = ROUTE_ID
                 AND BZ.RECTYPE = '1'
                 AND BZ.RUNDATADATE = DATE_IN
                 AND BZ.LEAVETIME >= BEGINTIME
                 AND BZ.LEAVETIME < ENDTIME
                 AND BZ.ARRIVETIME IS NOT NULL
                 AND BZ.LEAVETIME IS NOT NULL);
  
    CURSOR CUR_TIME(ROUTE_ID VARCHAR2, DATE_IN DATE, BEGINTIME DATE, ENDTIME DATE) IS
      SELECT ROUND(DECODE(SEQS, 0, 0, STOPTIME / SEQS) * 60, 2) ROUTESTOPTIME,
             ROUND(DECODE(SEQS, 0, 0, SUMTIME / SEQS) * 60, 2) RUNCIRCLETIME,
             ROUND(DECODE(SEQS, 0, 0, (SUMTIME - STOPTIME) / SEQS) * 60, 2) ROUTERUNTIME,
             SEQS
        FROM (SELECT COUNT(*) AS SEQS,
                     SUM(BZ.ARRIVETIME - BZ.LEAVETIME) * 24 SUMTIME,
                     SUM(NVL(BZ.STOPTIME, 0) + (CASE
                                                  WHEN (NVL(BZ.STATIONNUM, 0) - NVL(BZ.STOPNUM, 0) - 2) <= 0 THEN
                                                   0
                                                  ELSE
                                                   (NVL(BZ.STATIONNUM, 0) - NVL(BZ.STOPNUM, 0) - 2) *
                                                   G_MIN_STOPSTATION
                                                END)) / 60 STOPTIME
                FROM BZ_BUSRUNRECORDLD BZ
               WHERE BZ.ROUTEID = ROUTE_ID
                 AND BZ.RECTYPE = '1'
                 AND BZ.RUNDATADATE = DATE_IN
                 AND BZ.LEAVETIME >= BEGINTIME
                 AND BZ.LEAVETIME < ENDTIME
                 AND BZ.ARRIVETIME IS NOT NULL
                 AND BZ.LEAVETIME IS NOT NULL);
    --取线路长度、标准周转时间、单程个数
    CURSOR CUR_SEG(ROUTE_ID VARCHAR2, DATE_IN DATE) IS
      SELECT SEG.ROUTEID,
             SEG.SUBROUTEID,
             SUM(SEG.SNGMILE) ROUTETIME,
             SUM(SEG.STATIONNUM) ROUTENUM,
             COUNT(*) SEGS
        FROM MCSEGMENTINFOGS SEG,
             (SELECT *
                FROM BZ_BUSRUNRECORDLD BZ
               WHERE BZ.ROUTEID = ROUTE_ID
                 AND BZ.RUNDATADATE = DATE_IN
                 AND BZ.ARRIVETIME IS NOT NULL
                 AND BZ.LEAVETIME IS NOT NULL
                 AND BZ.RECTYPE = '1'
                 AND ROWNUM <= 1) T
       WHERE SEG.ROUTEID = T.ROUTEID
         AND SEG.SUBROUTEID = T.SUBROUTEID
       GROUP BY SEG.ROUTEID, SEG.SUBROUTEID;
    CURSOR CUR_SEG2(ROUTE_ID VARCHAR2, SUBROUTE_ID VARCHAR2) IS
      SELECT SEG.ROUTEID,
             SEG.SUBROUTEID,
             SUM(SEG.SNGMILE) ROUTETIME,
             SUM(SEG.STATIONNUM) ROUTENUM,
             COUNT(*) SEGS
        FROM MCSEGMENTINFOGS SEG
       WHERE SEG.ROUTEID = ROUTE_ID
         AND SEG.SUBROUTEID = SUBROUTE_ID
       GROUP BY SEG.ROUTEID, SEG.SUBROUTEID;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('Treate_TimePhaseSpeed',
              '计算峰段运行速度_' || V_ROUTEID,
              V_DATE_IN,
              '开始');
    --更新单程站点个数
    UPDATE MCSEGMENTINFOGS T
       SET T.STATIONNUM = (SELECT COUNT(*)
                             FROM MCRSEGMENTSTATIONGS
                            WHERE SEGMENTID = T.SEGMENTID)
     WHERE T.ROUTEID = V_ROUTEID;
    --更新车次站点个数
    UPDATE BZ_BUSRUNRECORDLD T
       SET T.STATIONNUM = (SELECT COUNT(*)
                             FROM MCRSEGMENTSTATIONGS M
                            WHERE M.ROUTEID = T.ROUTEID
                              AND M.SUBROUTEID = T.SUBROUTEID
                              AND M.SEGMENTID = T.SEGMENTID)
     WHERE T.ROUTEID = V_ROUTEID
       AND T.RECTYPE = '1'
       AND T.RUNDATADATE = V_DATE_IN;
    COMMIT;
    ---------------------------------------------------------------------------------------
    --更新车次停站个数
    UPDATE BZ_BUSRUNRECORDLD T
       SET T.STOPNUM = (SELECT COUNT(DISTINCT STATIONSEQNUM) STOPNUM
                          FROM BSVCBUSARRLFTDATALD B
                         WHERE B.ROUTEID = V_ROUTEID
                           AND B.ROUTEID = T.ROUTEID
                           AND B.BUSID = T.BUSID
                           AND B.ARRACTDATETIME IS NOT NULL
                           AND B.LFTACTDATETIME IS NOT NULL
                           AND B.ACTDATETIME >=
                               T.LEAVETIME - G_MAX_STOPSTATION / (24 * 60)
                           AND B.ACTDATETIME <=
                               T.ARRIVETIME + G_MAX_STOPSTATION / (24 * 60))
     WHERE T.RUNDATADATE = V_DATE_IN
       AND T.ROUTEID = V_ROUTEID
       AND T.RECTYPE = '1';
    COMMIT;
    WRITE_LOG('Treate_TimePhaseSpeed',
              '计算峰段运行速度_' || V_ROUTEID,
              V_DATE_IN,
              '开始1');
    UPDATE BZ_BUSRUNRECORDLD T
       SET STOPTIME = (SELECT ROUND(SUM(CASE
                                          WHEN NVL(B.LFTACTDATETIME - B.ARRACTDATETIME,
                                                   0) < 0 THEN
                                           0
                                          ELSE
                                           CASE
                                          WHEN NVL(B.LFTACTDATETIME - B.ARRACTDATETIME,
                                                   0) >
                                               2 * G_MAX_STOPSTATION / (24 * 60) THEN
                                           0
                                          ELSE
                                           NVL(B.LFTACTDATETIME - B.ARRACTDATETIME, 0)
                                        END END) * 24 * 60,
                                    2) STOPTIME
                         FROM BSVCBUSARRLFTDATALD B
                        WHERE B.ROUTEID = V_ROUTEID
                          AND B.ROUTEID = T.ROUTEID
                          AND B.BUSID = T.BUSID
                          AND B.ARRACTDATETIME IS NOT NULL
                          AND B.LFTACTDATETIME IS NOT NULL
                          AND B.ACTDATETIME >=
                              T.LEAVETIME - G_MAX_STOPSTATION / (24 * 60)
                          AND B.ACTDATETIME <=
                              T.ARRIVETIME + G_MAX_STOPSTATION / (24 * 60))
     WHERE T.RUNDATADATE = V_DATE_IN
       AND T.ROUTEID = V_ROUTEID
       AND T.RECTYPE = '1';
    COMMIT;
    WRITE_LOG('Treate_TimePhaseSpeed',
              '计算峰段运行速度_' || V_ROUTEID,
              V_DATE_IN,
              '开始2');
    V_SEGS := 0;
    FOR CUR IN CUR_SEG(V_ROUTEID, V_DATE_IN) LOOP
      V_ROUTETIME := ROUND(CUR.ROUTETIME, 2);
      V_ROUTENUM  := CUR.ROUTENUM;
      V_SEGS      := CUR.SEGS;
    END LOOP;
    IF (V_SEGS = 0) THEN
      --只考虑主子线,其它子线不考虑
      GET_MAINSUBROUTE(V_DATE_IN,
                       TRUNC(SYSDATE),
                       V_ROUTEID,
                       V_SUBROUTEID,
                       V_SUBROUTENAME);
    
      FOR CUR IN CUR_SEG2(V_ROUTEID, V_SUBROUTEID) LOOP
        V_ROUTETIME := ROUND(CUR.ROUTETIME, 2);
        V_ROUTENUM  := CUR.ROUTENUM;
        V_SEGS      := CUR.SEGS;
      END LOOP;
    END IF;
    -------------------------------------------------------------------------------------
    V_SUMROUTESTOPTIME := 0; --线路停站时间s
    V_SUMRUNCIRCLETIME := 0; --线路周转时间s
    V_SUMROUTERUNTIME  := 0; --线路行驶时间s
    V_SUMSEQS          := 0; --车次数
    FOR CUR_R IN CUR_PHASE(V_ROUTEID, V_DATE_IN) LOOP
      V_BUSRUNSPEED   := 0;
      V_BUNSENDSPEED  := 0;
      V_ROUTESTOPTIME := 0;
      V_RUNCIRCLETIME := 0;
      V_ROUTERUNTIME  := 0;
      V_SEQS          := 0;
      --峰段运行速度
      FOR CUR IN CUR_SPEED(V_ROUTEID,
                           V_DATE_IN,
                           V_DATE_IN + CUR_R.TIMEPHASESTARTTIME,
                           V_DATE_IN + CUR_R.TIMEPHASEENDTIME) LOOP
        V_BUSRUNSPEED  := ROUND(CUR.BUSRUNSPEED, 2);
        V_BUNSENDSPEED := ROUND(CUR.BUNSENDSPEED, 2);
      END LOOP;
      --峰段运行时间
      FOR CUR IN CUR_TIME(V_ROUTEID,
                          V_DATE_IN,
                          V_DATE_IN + CUR_R.TIMEPHASESTARTTIME,
                          V_DATE_IN + CUR_R.TIMEPHASEENDTIME) LOOP
        V_ROUTESTOPTIME := ROUND(CUR.ROUTESTOPTIME, 2);
        V_RUNCIRCLETIME := ROUND(CUR.RUNCIRCLETIME, 2);
        V_ROUTERUNTIME  := ROUND(CUR.ROUTERUNTIME, 2);
        V_SEQS          := CUR.SEQS;
      END LOOP;
      --累计加权时间(此处可能不考虑上下行线路)
      V_SUMROUTESTOPTIME := V_SUMROUTESTOPTIME + V_ROUTESTOPTIME * V_SEQS;
      V_SUMRUNCIRCLETIME := V_SUMRUNCIRCLETIME + V_RUNCIRCLETIME * V_SEQS;
      V_SUMROUTERUNTIME  := V_SUMROUTERUNTIME + V_ROUTERUNTIME * V_SEQS;
      V_SUMSEQS          := V_SUMSEQS + V_SEQS;
      --上下行线路
      IF (V_SEGS = 2) THEN
        V_ROUTESTOPTIME := 2 * V_ROUTESTOPTIME;
        V_RUNCIRCLETIME := 2 * V_RUNCIRCLETIME;
        V_ROUTERUNTIME  := 2 * V_ROUTERUNTIME;
        V_SEQS          := 2 * V_SEQS;
      END IF;
      --更新
      UPDATE JZ_TIMEPHASEDATASTORAGE T
         SET T.BUSSENDSPEED  = V_BUNSENDSPEED,
             T.BUSRUNSPEED   = V_BUSRUNSPEED,
             T.ROUTESTOPTIME = V_ROUTESTOPTIME,
             T.RUNCIRCLETIME = V_RUNCIRCLETIME,
             T.ROUTERUNTIME  = V_ROUTERUNTIME
       WHERE T.ROUTEID = V_ROUTEID
         AND T.JZDATE = V_DATE_IN
         AND T.TIMEPHASESTARTTIME = CUR_R.TIMEPHASESTARTTIME
         AND T.TIMEPHASEENDTIME = CUR_R.TIMEPHASEENDTIME;
    END LOOP;
    FOR CUR_R IN CUR_PHASE2(V_ROUTEID, V_DATE_IN) LOOP
      V_BUSRUNSPEED   := 0;
      V_BUNSENDSPEED  := 0;
      V_ROUTESTOPTIME := 0;
      V_RUNCIRCLETIME := 0;
      V_ROUTERUNTIME  := 0;
      --峰段运行速度
      FOR CUR IN CUR_SPEED(V_ROUTEID,
                           V_DATE_IN,
                           V_DATE_IN + CUR_R.TIMEPHASESTARTTIME,
                           V_DATE_IN + CUR_R.TIMEPHASEENDTIME) LOOP
        V_BUSRUNSPEED  := ROUND(CUR.BUSRUNSPEED, 2);
        V_BUNSENDSPEED := ROUND(CUR.BUNSENDSPEED, 2);
      END LOOP;
      --峰段运行时间
      FOR CUR IN CUR_TIME(V_ROUTEID,
                          V_DATE_IN,
                          V_DATE_IN + CUR_R.TIMEPHASESTARTTIME,
                          V_DATE_IN + CUR_R.TIMEPHASEENDTIME) LOOP
        V_ROUTESTOPTIME := ROUND(CUR.ROUTESTOPTIME, 2);
        V_RUNCIRCLETIME := ROUND(CUR.RUNCIRCLETIME, 2);
        V_ROUTERUNTIME  := ROUND(CUR.ROUTERUNTIME, 2);
      END LOOP;
      --上下行线路
      IF (V_SEGS = 2) THEN
        V_ROUTESTOPTIME := 2 * V_ROUTESTOPTIME;
        V_RUNCIRCLETIME := 2 * V_RUNCIRCLETIME;
        V_ROUTERUNTIME  := 2 * V_ROUTERUNTIME;
      END IF;
      --更新
      UPDATE JZ_TIMEPHASEDATASTORAGE2 T
         SET T.BUSSENDSPEED  = V_BUNSENDSPEED,
             T.BUSRUNSPEED   = V_BUSRUNSPEED,
             T.ROUTESTOPTIME = V_ROUTESTOPTIME,
             T.RUNCIRCLETIME = V_RUNCIRCLETIME,
             T.ROUTERUNTIME  = V_ROUTERUNTIME
       WHERE T.ROUTEID = V_ROUTEID
         AND T.JZDATE = V_DATE_IN
         AND T.TIMEPHASESTARTTIME = CUR_R.TIMEPHASESTARTTIME
         AND T.TIMEPHASEENDTIME = CUR_R.TIMEPHASEENDTIME;
    END LOOP;
    --计算平均值
    IF (V_SUMSEQS = 0) THEN
      V_ROUTESTOPTIME := 0;
      V_RUNCIRCLETIME := 0;
      V_ROUTERUNTIME  := 0;
    ELSE
      V_ROUTESTOPTIME := ROUND(V_SUMROUTESTOPTIME / V_SUMSEQS, 2);
      V_RUNCIRCLETIME := ROUND(V_SUMRUNCIRCLETIME / V_SUMSEQS, 2);
      V_ROUTERUNTIME  := ROUND(V_SUMROUTERUNTIME / V_SUMSEQS, 2);
    END IF;
    --上下行线路
    IF (V_SEGS = 2) THEN
      V_ROUTESTOPTIME := 2 * V_ROUTESTOPTIME;
      V_RUNCIRCLETIME := 2 * V_RUNCIRCLETIME;
      V_ROUTERUNTIME  := 2 * V_ROUTERUNTIME;
    END IF;
    --更新线路日结存数据
    UPDATE JZ_ROUTEDAYSTORAGE T
       SET T.RUNCIRCLETIME = V_RUNCIRCLETIME,
           T.ROUTERUNTIME  = V_ROUTERUNTIME,
           T.ROUTESTOPTIME = V_ROUTESTOPTIME
     WHERE T.ROUTEID = V_ROUTEID
       AND T.JZDATE = V_DATE_IN;
    COMMIT;
    WRITE_LOG('Treate_TimePhaseSpeed',
              '计算峰段运行速度' || V_ROUTEID,
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('Treate_TimePhaseSpeed',
                      '计算峰段运行速度_' || V_ROUTEID,
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ICDATA                                                                 *
  *                                                                                      *
  *    功能：结存到IC卡数据(手工调用接口)                                                     *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ICDATA(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    WRITE_LOG('TREATE_ICDATA', 'IC数据计算', V_DATE_IN, '开始计算');
    LOADTYPEENTRY;
    --IC卡数据
    TREATE_CASHINCOMEIC(V_DATE_IN);
    TREATE_CASHINCOMECASH(V_DATE_IN);
    TREATE_CONSUMECARDTYPE(V_DATE_IN);
    TREATE_CONSUMECARDTYPE2(V_DATE_IN);
    --组织客流数据
    TREATE_ORGDAYPSG(V_DATE_IN);
    --峰段客流数据
    TREATE_TIMEPHASEPSG(V_DATE_IN);
    TREATE_DAYTAKEPSG(V_DATE_IN, V_DATE_IN + 1);
    TREATE_BRTICSTORAGE(V_DATE_IN);
    TREATE_STATIONCONSUME(V_DATE_IN);
    TREATE_HOURPHASEICNUM(V_DATE_IN);
    TREATE_FSTANDLSTCONSUME(V_DATE_IN);
    WRITE_LOG('TREATE_ICDATA', 'IC数据计算', V_DATE_IN, '计算结束');
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('TREATE_ICDATA',
                      'IC数据计算',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  PROCEDURE TREATE_ICDATA1(V_BEGIN_DATE DATE, V_END_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_BEGIN_DATE);
  BEGIN
    WHILE V_DATE_IN <= V_END_DATE LOOP
      P_IMPORT_MONTHCONSUME(V_DATE_IN);
      LOADTYPEENTRY;
      --IC卡数据
     TREATE_CASHINCOMEIC(V_DATE_IN);
      TREATE_CASHINCOMECASH(V_DATE_IN);
     /* TREATE_CONSUMECARDTYPE(V_DATE_IN);
      TREATE_CONSUMECARDTYPE2(V_DATE_IN);
      --组织客流数据
      TREATE_ORGDAYPSG(V_DATE_IN);
      --峰段客流数据
      TREATE_TIMEPHASEPSG(V_DATE_IN);
      TREATE_DAYTAKEPSG(V_DATE_IN, V_DATE_IN + 1);
      TREATE_BRTICSTORAGE(V_DATE_IN); 
      TREATE_FSTANDLSTCONSUME(V_DATE_IN);*/
      --TREATE_STATIONCONSUME(V_DATE_IN);
      --TREATE_HOURPHASEICNUM(V_DATE_IN);
      V_DATE_IN := V_DATE_IN + 1;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('TREATE_ICDATA',
                      'IC数据计算',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_CASHINCOME_ORG                                                       *
  *                                                                                      *
  *    功能：收入日结存(组织)                                                            *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26      
  --存在问题：如果某线路无对应组织,可能出现结存数据不一致
  --          如果字典项名称或值调整,可能会出现多个数据                                                              *
  ****************************************************************************************/
  PROCEDURE TREATE_CASHINCOME_ORG(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    BEGIN
      WRITE_LOG('TREATE_CASHINCOME_ORG',
                '收入结存表-组织',
                V_DATE_IN,
                '开始');
      --删除日结数据
      DELETE JZ_CASHINCOME
       WHERE JZDATE = V_DATE_IN
         AND DATASAVELEVEL = '3'
         AND STORAGEORGTYPE != '4'; --日结
      --插入新数据项
      INSERT INTO JZ_CASHINCOME
        (RECORDID,
         JZDATE,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         BUSID,
         BUSCARDID,
         STATIONID,
         SOURCEFROM,
         SOURCEFROMNAME,
         TICKETSORT,
         TICKETSORTNAME,
         ICCARDTYPE,
         ICCARDNAME,
         TOTALINCOME,
         PASSENGERFLOW,
         FAVORABLE_INCOME,
         FAVORABLE_FLOW,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               V_DATE_IN AS JZDATE,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               NULL AS BUSID,
               NULL AS BUSCARDID,
               NULL AS STATIONID,
               T.SOURCEFROM AS SOURCEFROM,
               T.SOURCEFROMNAME AS SOURCEFROMNAME,
               T.TICKETSORT AS TICKETSORT,
               T.TICKETSORTNAME AS TICKETSORTNAME,
               T.ICCARDTYPE AS ICCARDTYPE,
               T.ICCARDNAME AS ICCARDNAME,
               NVL(T.TOTALINCOME, 0) AS TOTALINCOME,
               NVL(T.TOTALFLOW, 0) AS PASSENGERFLOW,
               NVL(T.FCONSUME, 0) AS FAVORABLE_INCOME,
               NVL(T.FPSG, 0) AS FAVORABLE_FLOW,
               '3' AS DATASAVELEVEL, --日
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM MCORGINFOGS ORG,
               (SELECT ORGTREE.PARENTORGID AS ORGID,
                       T.SOURCEFROM,
                       T.SOURCEFROMNAME,
                       T.TICKETSORT,
                       T.TICKETSORTNAME,
                       T.ICCARDTYPE,
                       T.ICCARDNAME,
                       SUM(NVL(T.TOTALINCOME, 0)) AS TOTALINCOME,
                       SUM(NVL(T.PASSENGERFLOW, 0)) AS TOTALFLOW,
                       SUM(NVL(T.FAVORABLE_INCOME, 0)) AS FCONSUME,
                       SUM(NVL(T.FAVORABLE_FLOW, 0)) AS FPSG
                  FROM JZ_CASHINCOME T, JZ_ORGGRADETREE ORGTREE
                 WHERE T.ORGID = ORGTREE.ORGID
                   AND T.JZDATE = V_DATE_IN
                   AND T.DATASAVELEVEL = '3' --日
                   AND T.STORAGEORGTYPE = '4' --线路
                 GROUP BY ORGTREE.PARENTORGID,
                          T.SOURCEFROM,
                          T.SOURCEFROMNAME,
                          T.TICKETSORT,
                          T.TICKETSORTNAME,
                          T.ICCARDTYPE,
                          T.ICCARDNAME) T
         WHERE ORG.ORGID = T.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_CASHINCOME_ORG',
                '收入结存表-组织',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_CASHINCOME_ORG',
                        '收入结存表－组织',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：TREATE_CASHINCOME_PHASE                                                     *
  *                                                                                      *
  *    功能：收入月/年结存(组织、线路)                                                   *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_CASHINCOME_PHASE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_DATE  DATE;
    V_END_DATE    DATE;
    V_BEGIN_DATE2 DATE;
    V_END_DATE2   DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_DATE  := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_DATE    := LAST_DAY(V_DATE_IN) + 1;
    V_BEGIN_DATE2 := TO_DATE(TO_CHAR(V_DATE, 'yyyy') || '-01-01',
                             'yyyy-mm-dd');
    V_END_DATE2   := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE, 'yyyy') || '-01-01',
                                        'yyyy-mm-dd'),
                                12);
    -- 月结
    BEGIN
      WRITE_LOG('TREATE_CASHINCOME_PHASE',
                '收入结存表－月结',
                V_DATE_IN,
                '开始');
      --删除月结数据
      DELETE JZ_CASHINCOME
       WHERE JZDATE >= V_BEGIN_DATE
         AND JZDATE < V_END_DATE
         AND DATASAVELEVEL = '2'; --月
      --线路 --
      INSERT INTO JZ_CASHINCOME
        (RECORDID,
         JZDATE,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         BUSID,
         BUSCARDID,
         STATIONID,
         SOURCEFROM,
         SOURCEFROMNAME,
         TICKETSORT,
         TICKETSORTNAME,
         ICCARDTYPE,
         ICCARDNAME,
         TOTALINCOME,
         PASSENGERFLOW,
         FAVORABLE_INCOME,
         FAVORABLE_FLOW,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               V_DATE_IN AS JZDATE,
               T.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               T.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               NULL AS BUSID,
               NULL AS BUSCARDID,
               NULL AS STATIONID,
               T.SOURCEFROM AS SOURCEFROM,
               T.SOURCEFROMNAME AS SOURCEFROMNAME,
               T.TICKETSORT AS TICKETSORT,
               T.TICKETSORTNAME AS TICKETSORTNAME,
               T.ICCARDTYPE AS ICCARDTYPE,
               T.ICCARDNAME AS ICCARDNAME,
               NVL(T.TOTALINCOME, 0) AS TOTALINCOME,
               NVL(T.TOTALFLOW, 0) AS PASSENGERFLOW,
               NVL(T.FCONSUME, 0) AS FAVORABLE_INCOME,
               NVL(T.FPSG, 0) AS FAVORABLE_FLOW,
               '2' AS DATASAVELEVEL, --月
               '4' AS STORAGEORGTYPE --线路
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROUTE,
               (SELECT T.ORGID,
                       T.ROUTEID,
                       T.SOURCEFROM,
                       T.SOURCEFROMNAME,
                       T.TICKETSORT,
                       T.TICKETSORTNAME,
                       T.ICCARDTYPE,
                       T.ICCARDNAME,
                       SUM(NVL(T.TOTALINCOME, 0)) AS TOTALINCOME,
                       SUM(NVL(T.PASSENGERFLOW, 0)) AS TOTALFLOW,
                       SUM(NVL(T.FAVORABLE_INCOME, 0)) AS FCONSUME,
                       SUM(NVL(T.FAVORABLE_FLOW, 0)) AS FPSG
                  FROM JZ_CASHINCOME T
                 WHERE T.JZDATE >= V_BEGIN_DATE
                   AND T.JZDATE <= V_END_DATE
                   AND T.DATASAVELEVEL = '3' --天
                   AND T.STORAGEORGTYPE = '4' --线路
                 GROUP BY T.ORGID,
                          T.ROUTEID,
                          T.SOURCEFROM,
                          T.SOURCEFROMNAME,
                          T.TICKETSORT,
                          T.TICKETSORTNAME,
                          T.ICCARDTYPE,
                          T.ICCARDNAME) T
         WHERE T.ROUTEID = ROUTE.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织--
      INSERT INTO JZ_CASHINCOME
        (RECORDID,
         JZDATE,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         BUSID,
         BUSCARDID,
         STATIONID,
         SOURCEFROM,
         SOURCEFROMNAME,
         TICKETSORT,
         TICKETSORTNAME,
         ICCARDTYPE,
         ICCARDNAME,
         TOTALINCOME,
         PASSENGERFLOW,
         FAVORABLE_INCOME,
         FAVORABLE_FLOW,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               V_DATE_IN AS JZDATE,
               ORG.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               NULL AS BUSID,
               NULL AS BUSCARDID,
               NULL AS STATIONID,
               T.SOURCEFROM AS SOURCEFROM,
               T.SOURCEFROMNAME AS SOURCEFROMNAME,
               T.TICKETSORT AS TICKETSORT,
               T.TICKETSORTNAME AS TICKETSORTNAME,
               T.ICCARDTYPE AS ICCARDTYPE,
               T.ICCARDNAME AS ICCARDNAME,
               NVL(T.TOTALINCOME, 0) AS TOTALINCOME,
               NVL(T.TOTALFLOW, 0) AS PASSENGERFLOW,
               NVL(T.FCONSUME, 0) AS FAVORABLE_INCOME,
               NVL(T.FPSG, 0) AS FAVORABLE_FLOW,
               '2' AS DATASAVELEVEL, --月
               ORG.ORGGRADE AS STORAGEORGTYPE
          FROM MCORGINFOGS ORG,
               (SELECT ORGTREE.PARENTORGID AS ORGID,
                       T.SOURCEFROM,
                       T.SOURCEFROMNAME,
                       T.TICKETSORT,
                       T.TICKETSORTNAME,
                       T.ICCARDTYPE,
                       T.ICCARDNAME,
                       SUM(NVL(T.TOTALINCOME, 0)) AS TOTALINCOME,
                       SUM(NVL(T.PASSENGERFLOW, 0)) AS TOTALFLOW,
                       SUM(NVL(T.FAVORABLE_INCOME, 0)) AS FCONSUME,
                       SUM(NVL(T.FAVORABLE_FLOW, 0)) AS FPSG
                  FROM JZ_CASHINCOME T, JZ_ORGGRADETREE ORGTREE
                 WHERE T.ORGID = ORGTREE.ORGID
                   AND T.JZDATE >= V_BEGIN_DATE
                   AND T.JZDATE <= V_END_DATE
                   AND T.DATASAVELEVEL = '3' --天
                   AND T.STORAGEORGTYPE != '4'
                 GROUP BY ORGTREE.PARENTORGID,
                          T.SOURCEFROM,
                          T.SOURCEFROMNAME,
                          T.TICKETSORT,
                          T.TICKETSORTNAME,
                          T.ICCARDTYPE,
                          T.ICCARDNAME) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_CASHINCOME_PHASE',
                '收入结存表－月结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_CASHINCOME_PHASE',
                        '收入结存表－月结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
    -- 年结
    BEGIN
      WRITE_LOG('TREATE_CASHINCOME_PHASE',
                '收入结存表－年结',
                V_DATE_IN,
                '开始');
      --删除年结数据
      DELETE JZ_CASHINCOME
       WHERE JZDATE >= V_BEGIN_DATE2
         AND JZDATE < V_END_DATE2
         AND DATASAVELEVEL = '1'; --年
      --线路 --
      INSERT INTO JZ_CASHINCOME
        (RECORDID,
         JZDATE,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         BUSID,
         BUSCARDID,
         STATIONID,
         SOURCEFROM,
         SOURCEFROMNAME,
         TICKETSORT,
         TICKETSORTNAME,
         ICCARDTYPE,
         ICCARDNAME,
         TOTALINCOME,
         PASSENGERFLOW,
         FAVORABLE_INCOME,
         FAVORABLE_FLOW,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               V_DATE_IN AS JZDATE,
               T.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               T.ROUTEID AS ROUTEID,
               ROUTE.ROUTENAME AS ROUTENAME,
               NULL AS BUSID,
               NULL AS BUSCARDID,
               NULL AS STATIONID,
               T.SOURCEFROM AS SOURCEFROM,
               T.SOURCEFROMNAME AS SOURCEFROMNAME,
               T.TICKETSORT AS TICKETSORT,
               T.TICKETSORTNAME AS TICKETSORTNAME,
               T.ICCARDTYPE AS ICCARDTYPE,
               T.ICCARDNAME AS ICCARDNAME,
               NVL(T.TOTALINCOME, 0) AS TOTALINCOME,
               NVL(T.TOTALFLOW, 0) AS PASSENGERFLOW,
               NVL(T.FCONSUME, 0) AS FAVORABLE_INCOME,
               NVL(T.FPSG, 0) AS FAVORABLE_FLOW,
               '1' AS DATASAVELEVEL, --年
               '4' AS STORAGEORGTYPE --线路
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROUTE,
               (SELECT T.ORGID,
                       T.ROUTEID,
                       T.SOURCEFROM,
                       T.SOURCEFROMNAME,
                       T.TICKETSORT,
                       T.TICKETSORTNAME,
                       T.ICCARDTYPE,
                       T.ICCARDNAME,
                       SUM(NVL(T.TOTALINCOME, 0)) AS TOTALINCOME,
                       SUM(NVL(T.PASSENGERFLOW, 0)) AS TOTALFLOW,
                       SUM(NVL(T.FAVORABLE_INCOME, 0)) AS FCONSUME,
                       SUM(NVL(T.FAVORABLE_FLOW, 0)) AS FPSG
                  FROM JZ_CASHINCOME T
                 WHERE T.JZDATE >= V_BEGIN_DATE2
                   AND T.JZDATE <= V_END_DATE2
                   AND T.DATASAVELEVEL = '2' --月
                   AND T.STORAGEORGTYPE = '4' --线路
                 GROUP BY T.ORGID,
                          T.ROUTEID,
                          T.SOURCEFROM,
                          T.SOURCEFROMNAME,
                          T.TICKETSORT,
                          T.TICKETSORTNAME,
                          T.ICCARDTYPE,
                          T.ICCARDNAME) T
         WHERE T.ROUTEID = ROUTE.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织--
      INSERT INTO JZ_CASHINCOME
        (RECORDID,
         JZDATE,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         BUSID,
         BUSCARDID,
         STATIONID,
         SOURCEFROM,
         SOURCEFROMNAME,
         TICKETSORT,
         TICKETSORTNAME,
         ICCARDTYPE,
         ICCARDNAME,
         TOTALINCOME,
         PASSENGERFLOW,
         FAVORABLE_INCOME,
         FAVORABLE_FLOW,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               V_DATE_IN AS JZDATE,
               T.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               NULL AS BUSID,
               NULL AS BUSCARDID,
               NULL AS STATIONID,
               T.SOURCEFROM AS SOURCEFROM,
               T.SOURCEFROMNAME AS SOURCEFROMNAME,
               T.TICKETSORT AS TICKETSORT,
               T.TICKETSORTNAME AS TICKETSORTNAME,
               T.ICCARDTYPE AS ICCARDTYPE,
               T.ICCARDNAME AS ICCARDNAME,
               NVL(T.TOTALINCOME, 0) AS TOTALINCOME,
               NVL(T.TOTALFLOW, 0) AS PASSENGERFLOW,
               NVL(T.FCONSUME, 0) AS FAVORABLE_INCOME,
               NVL(T.FPSG, 0) AS FAVORABLE_FLOW,
               '1' AS DATASAVELEVEL, --年
               ORG.ORGGRADE AS STORAGEORGTYPE --车队
          FROM MCORGINFOGS ORG,
               (SELECT ORGTREE.PARENTORGID AS ORGID,
                       T.SOURCEFROM,
                       T.SOURCEFROMNAME,
                       T.TICKETSORT,
                       T.TICKETSORTNAME,
                       T.ICCARDTYPE,
                       T.ICCARDNAME,
                       SUM(NVL(T.TOTALINCOME, 0)) AS TOTALINCOME,
                       SUM(NVL(T.PASSENGERFLOW, 0)) AS TOTALFLOW,
                       SUM(NVL(T.FAVORABLE_INCOME, 0)) AS FCONSUME,
                       SUM(NVL(T.FAVORABLE_FLOW, 0)) AS FPSG
                  FROM JZ_CASHINCOME T, JZ_ORGGRADETREE ORGTREE
                 WHERE T.ORGID = ORGTREE.ORGID
                   AND T.JZDATE >= V_BEGIN_DATE2
                   AND T.JZDATE <= V_END_DATE2
                   AND T.DATASAVELEVEL = '2' --月
                   AND T.STORAGEORGTYPE != '4'
                 GROUP BY ORGTREE.PARENTORGID,
                          T.SOURCEFROM,
                          T.SOURCEFROMNAME,
                          T.TICKETSORT,
                          T.TICKETSORTNAME,
                          T.ICCARDTYPE,
                          T.ICCARDNAME) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_CASHINCOME_PHASE',
                '收入结存表－年结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_CASHINCOME_PHASE',
                        '收入结存表－年结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：Treate_BusCashIncome                                                        *
  *                                                                                      *
  *    功能：车辆IC收入日结存(线路)                                                      *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_CASHINCOMEIC(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    LOADTYPEENTRY;
    V_DATE_IN := TRUNC(V_DATE);
    -- 日结
    BEGIN
      WRITE_LOG('TREATE_CASHINCOME',
                '收入结存表(IC卡数据)-日结',
                V_DATE_IN,
                '开始');
      --删除全部日结数据
      DELETE JZ_CASHINCOME
       WHERE JZDATE = V_DATE_IN
         AND SOURCEFROM = '1' --车辆
         AND STORAGEORGTYPE = '4' --线路
         AND DATASAVELEVEL = '3' --日结
         AND TICKETSORT = '2';
      --线路 --IC卡数据
      INSERT INTO JZ_CASHINCOME
        (RECORDID,
         JZDATE,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         BUSID,
         BUSCARDID,
         STATIONID,
         SOURCEFROM,
         SOURCEFROMNAME,
         TICKETSORT,
         TICKETSORTNAME,
         ICCARDTYPE,
         ICCARDNAME,
         TOTALINCOME,
         PASSENGERFLOW,
         FAVORABLE_INCOME,
         FAVORABLE_FLOW,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               V_DATE_IN AS JZDATE,
               T.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               T.ROUTEID AS ROUTEID,
               T.ROUTENAME AS ROUTENAME,
               NULL AS BUSID,
               NULL AS BUSCARDID,
               NULL AS STATIONID,
               '1' AS SOURCEFROM,
               '车辆' AS SOURCEFROMNAME,
               '2' AS TICKETSORT,
               'IC卡' AS TICKETSORTNAME,
               T.CONSUMETYPE AS ICCARDTYPE,
               P.ITEMKEY AS ICCARDNAME,
               NVL(T.CONSUME, 0) AS TOTALINCOME,
               NVL(T.PSG, 0) AS PASSENGERFLOW,
               NVL(T.FCONSUME, 0) AS FAVORABLE_INCOME,
               NVL(T.FPSG, 0) AS FAVORABLE_FLOW,
               '3' AS DATASAVELEVEL,
               '4' AS STORAGEORGTYPE
          FROM MCORGINFOGS ORG,
               (SELECT TB.*,
                       NVL(R.ROUTEID, TB.LINENO) ROUTEID,
                       NVL(R.ROUTENAME, '--' || TB.LINENO || '--') ROUTENAME,
                       R.ORGID
                  FROM MCROUTEINFOGS R,
                       (SELECT T.LINENO,
                               T.CONSUMETYPE,
                               SUM(T.ACTCONSUME) CONSUME,
                               COUNT(*) PSG,
                               SUM(T.FAVCONSUME) FCONSUME,
                               SUM(CASE
                                     WHEN (FAVCONSUME = 0) THEN --未优惠
                                      0
                                     ELSE
                                      1
                                   END) FPSG
                          FROM (SELECT TB.LINENO,
                                       FUN_CALCICCONSUMETYPE(CONSUMETYPE) AS CONSUMETYPE,
                                       FUN_CALCICINCOME(CONSUMETYPE,
                                                        REMAINTIMES) AS ACTCONSUME,
                                       FUN_CALCICFAVORABLE(CONSUMETYPE,
                                                           REMAINTIMES) AS FAVCONSUME
                                  FROM TB_MONTHCONSUME TB --,transform_iccard ti
                                 WHERE TB.CONSUMETYPE < G_IC_MANAGE -- AND lineno IN ('86','104','108','12','120')
                                   AND TB.CONSUMEDATE >=
                                       V_DATE_IN + G_START_TIME
                                   AND TB.CONSUMEDATE <
                                       V_DATE_IN + 1 + G_START_TIME) T
                         GROUP BY T.LINENO, T.CONSUMETYPE) TB
                 WHERE TB.LINENO = R.ROUTECODE(+)) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'ICCARDTYPE') P
         WHERE T.ORGID = ORG.ORGID(+)
           AND T.CONSUMETYPE = P.ITEMVALUE(+);
      COMMIT;
      WRITE_LOG('TREATE_CASHINCOME',
                '收入结存表(IC卡数据)-日结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_CASHINCOME',
                        '收入结存表(IC卡数据)－日结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
    TREATE_CASHINCOME_ORG(V_DATE_IN); --重新结存组织收入
    TREATE_CASHINCOME_PHASE(V_DATE_IN); --重新进行月结、年结
  END;
  PROCEDURE TREATE_CASHINCOMECASH(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    LOADTYPEENTRY;
    V_DATE_IN := TRUNC(V_DATE);
    -- 日结
    BEGIN
      WRITE_LOG('TREATE_CASHINCOME',
                '收入结存表(投币数据)-日结',
                V_DATE_IN,
                '开始');
      --删除全部日结数据
      DELETE JZ_CASHINCOME
       WHERE JZDATE = V_DATE_IN
         AND SOURCEFROM = '1' --车辆
         AND STORAGEORGTYPE = '4' --线路
         AND DATASAVELEVEL = '3' --日结
         AND TICKETSORT = '1';
      --线路 --投币数据(无人售票) 20130109 add by  hujihuo 
      INSERT INTO JZ_CASHINCOME
        (RECORDID,
         JZDATE,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         BUSID,
         BUSCARDID,
         STATIONID,
         SOURCEFROM,
         SOURCEFROMNAME,
         TICKETSORT,
         TICKETSORTNAME,
         ICCARDTYPE,
         ICCARDNAME,
         TOTALINCOME,
         PASSENGERFLOW,
         FAVORABLE_INCOME,
         FAVORABLE_FLOW,
         DATASAVELEVEL,
         STORAGEORGTYPE)
        SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
               V_DATE_IN AS JZDATE,
               T.ORGID AS ORGID,
               ORG.ORGNAME AS ORGNAME,
               T.ROUTEID AS ROUTEID,
               T.ROUTENAME AS ROUTENAME,
               NULL AS BUSID,
               NULL AS BUSCARDID,
               NULL AS STATIONID,
               '1' AS SOURCEFROM,
               '车辆' AS SOURCEFROMNAME,
               '1' AS TICKETSORT,
               '现金' AS TICKETSORTNAME,
               T.CONSUMETYPE AS ICCARDTYPE,
               P.ITEMKEY AS ICCARDNAME,
               NVL(T.CONSUME, 0) AS TOTALINCOME,
               NVL(T.PSG, 0) AS PASSENGERFLOW,
               NVL(T.FCONSUME, 0) AS FAVORABLE_INCOME,
               NVL(T.FPSG, 0) AS FAVORABLE_FLOW,
               '3' AS DATASAVELEVEL,
               '4' AS STORAGEORGTYPE
          FROM MCORGINFOGS ORG,
               (SELECT TB.*,
                       NVL(R.ROUTEID, TB.LINENO) ROUTEID,
                       NVL(R.ROUTENAME, '--' || TB.LINENO || '--') ROUTENAME,
                       R.ORGID
                  FROM MCROUTEINFOGS R,
                       (SELECT CASH.ROUTEID LINENO,
                               NVL((SELECT ITEMVALUE
                                     FROM TYPEENTRY
                                    WHERE TYPENAME = 'ICCARDTYPE'
                                      AND ITEMKEY LIKE '%无人%'),
                                   2) AS CONSUMETYPE,
                               SUM(NVL(CASH.TOTALINCOME, 0)) CONSUME,
                               SUM(NVL(CASH.PASSENGERFLOW, 0)) PSG,
                               0 FCONSUME,
                               0 FPSG
                          FROM BZ_CASHINCOME CASH
                         WHERE CASH.RUNDATE = V_DATE_IN --AND cash.routeid IN ('86','104','108','12','120')
                         GROUP BY CASH.ROUTEID) TB
                 WHERE TB.LINENO = R.ROUTEID(+)) T,
               (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'ICCARDTYPE') P
         WHERE T.ORGID = ORG.ORGID(+)
           AND T.CONSUMETYPE = P.ITEMVALUE(+);
      COMMIT;
      WRITE_LOG('TREATE_CASHINCOME',
                '收入结存表(投币数据)-日结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_CASHINCOME',
                        '收入结存表(投币数据)－日结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
    TREATE_CASHINCOME_ORG(V_DATE_IN); --重新结存组织收入
    TREATE_CASHINCOME_PHASE(V_DATE_IN); --重新进行月结、年结
  END;
  /***************************************************************************************
  *    名称：TREATE_CONSUMECARDTYPE                                                 *
  *                                                                                      *
  *    功能：刷卡人次分类统计日结存表                                                    *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_CONSUMECARDTYPE(V_DATE DATE) AS
    V_DATE_IN   DATE;
    V_ROUTEID   VARCHAR2(20);
    V_ROUTECODE VARCHAR2(20);
    CURSOR CUR_ROUTE(DATE_IN DATE) IS
      SELECT ROUTE.ORGID,
             T.ROUTEID,
             T.ROUTENAME,
             ROUTE.ROUTECODE,
             T.TIMEPHASEKEY,
             T.TIMEPHASENAME,
             TRUNC(DATE_IN) + T.STARTTIME / 24 AS TIMEPHASESTARTTIME,
             TRUNC(DATE_IN) + T.ENDTIME / 24 AS TIMEPHASEENDTIME,
             T.STARTTIME AS STARTTIME,
             T.ENDTIME AS ENDTIME,
             T.TIMEPHASEINTERVAL,
             T.TIMEPHASECIRCLETIME,
             T.PLANSEQS
        FROM MCROUTETIMEPHASEGS T, MCROUTEINFOGS ROUTE
       WHERE T.ROUTEID = ROUTE.ROUTEID
         AND T.BEGINDATE <= DATE_IN
         AND T.ENDDATE >= DATE_IN
         AND T.BEGINWEEK <=
             (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)
         AND T.ENDWEEK >=
             (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)
       ORDER BY T.ROUTEID, T.STARTTIME;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_CONSUMECARDTYPE',
              '刷卡人次分类统计日结存表',
              V_DATE_IN,
              '开始');
    --删除全部数据
    DELETE JZ_CONSUMECARDTYPE WHERE JZDATE = V_DATE_IN;
    --日结
    FOR CUR_R IN CUR_ROUTE(V_DATE_IN) LOOP
      BEGIN
        V_ROUTEID   := CUR_R.ROUTEID;
        V_ROUTECODE := CUR_R.ROUTECODE;
        IF (V_ROUTECODE IS NULL) THEN
          V_ROUTECODE := V_ROUTEID;
        END IF;
        INSERT INTO JZ_CONSUMECARDTYPE
          (RECORDID,
           ORGID,
           ORGNAME,
           ROUTEID,
           ROUTENAME,
           JZDATE,
           TIMEPHASETYPE,
           TIMEPHASEVALUE,
           TIMEPHASESTARTTIME,
           TIMEPHASEENDTIME,
           CARDTYPE,
           CARDNAME,
           CARDTYPECOUNT,
           DATASAVELEVEL)
          SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
                 ROUTE.ORGID,
                 ORG.ORGNAME,
                 ROUTE.ROUTEID,
                 ROUTE.ROUTENAME,
                 V_DATE_IN AS JZDATE,
                 CUR_R.TIMEPHASEKEY AS TIMEPHASETYPE,
                 CUR_R.TIMEPHASENAME AS TIMEPHASEVALUE,
                 ROUND(CUR_R.STARTTIME / 24, 6) AS TIMEPHASESTARTTIME,
                 ROUND(CUR_R.ENDTIME / 24, 6) AS TIMEPHASEENDTIME,
                 T.CONSUMETYPE AS CARDTYPE,
                 P.ITEMKEY AS CARDNAME,
                 NVL(T.PSG, 0) AS CARDTYPECOUNT,
                 '3' AS DATASAVELEVEL
            FROM MCROUTEINFOGS ROUTE,
                 MCORGINFOGS ORG,
                 (SELECT LINENO, CONSUMETYPE, COUNT(*) PSG
                    FROM (SELECT LINENO,
                                 FUN_CALCICCONSUMETYPE(CONSUMETYPE) AS CONSUMETYPE
                            FROM TB_MONTHCONSUMETMP
                           WHERE CONSUMETYPE < G_IC_MANAGE
                             AND LINENO = V_ROUTECODE
                             AND CONSUMEDATE > CUR_R.TIMEPHASESTARTTIME
                             AND CONSUMEDATE < CUR_R.TIMEPHASEENDTIME)
                   GROUP BY LINENO, CONSUMETYPE) T,
                 (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'ICCARDTYPE') P
           WHERE ROUTE.ROUTECODE = T.LINENO
             AND ROUTE.ROUTEID = V_ROUTEID
             AND ROUTE.ORGID = ORG.ORGID(+)
             AND T.CONSUMETYPE = P.ITEMVALUE(+);
        COMMIT;
        WRITE_LOG('TREATE_CONSUMECARDTYPE',
                  '刷卡人次分类统计日结存表_' || V_ROUTEID,
                  V_DATE_IN,
                  '');
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('TREATE_CONSUMECARDTYPE',
                          '刷卡人次分类统计日结存表',
                          NULL,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP;
    WRITE_LOG('TREATE_CONSUMECARDTYPE',
              '刷卡人次分类统计日结存表',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_CONSUMECARDTYPE',
                      '刷卡人次分类统计日结存表',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_CONSUMECARDTYPE2                                                     *
  *                                                                                      *
  *    功能：刷卡人次分类统计日结存表(五峰结存)                                            *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_CONSUMECARDTYPE2(V_DATE DATE) AS
    V_DATE_IN            DATE;
    V_ORGID              VARCHAR2(36); --jz_timephasedatastorage.orgid%TYPE; --组织id'
    V_ROUTEID            VARCHAR2(36); --jz_timephasedatastorage.routeid%TYPE; --线路编号';
    V_ROUTENAME          VARCHAR2(36); --jz_timephasedatastorage.routename%TYPE; --线路名称';
    V_ROUTECODE          VARCHAR2(36); --jz_timephasedatastorage.routecode%TYPE; --线路编码';
    V_TIMEPHASETYPE      VARCHAR2(2); --jz_timephasedatastorage.timephasetype%TYPE; --峰段类型
    V_TIMEPHASEVALUE     VARCHAR2(40); --jz_timephasedatastorage.timephasevalue%TYPE; --峰段名称
    V_STARTTIME          NUMBER; --峰段开始时间(相对0点的小时数)
    V_ENDTIME            NUMBER; --峰段结束时间(相对0点的小时数)
    V_TIMEPHASESTARTTIME DATE; --峰段开始时间
    V_TIMEPHASEENDTIME   DATE; --峰段结束时间  
    CURSOR CUR_PHASE(DATE_IN DATE) IS
      SELECT ROUTE.ORGID,
             ROUTE.ROUTEID,
             ROUTE.ROUTENAME,
             ROUTE.ROUTECODE,
             NVL(T.TIMEPHASEKEY, '3') TIMEPHASEKEY,
             NVL(T.TIMEPHASENAME, '平峰') TIMEPHASENAME,
             TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
             TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
             ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
             ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME
        FROM MCROUTEINFOGS ROUTE, MCROUTETIMEPHASEGS2 T
       ORDER BY ROUTE.ROUTEID, T.STARTTIME;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_CONSUMECARDTYPE2',
              '刷卡人次分类统计日结存表',
              V_DATE_IN,
              '开始');
    --删除全部数据
    DELETE JZ_CONSUMECARDTYPE2 WHERE JZDATE = V_DATE_IN;
    --日结
    FOR CUR_R IN CUR_PHASE(V_DATE_IN) LOOP
      BEGIN
        V_ORGID              := CUR_R.ORGID; --组织id'
        V_ROUTEID            := CUR_R.ROUTEID; --线路编号';
        V_ROUTENAME          := CUR_R.ROUTENAME; --线路名称';
        V_ROUTECODE          := CUR_R.ROUTECODE; --线路编码
        V_TIMEPHASETYPE      := CUR_R.TIMEPHASEKEY; --峰段类型
        V_TIMEPHASEVALUE     := CUR_R.TIMEPHASENAME; --峰段名称
        V_TIMEPHASESTARTTIME := CUR_R.TIMEPHASESTARTTIME; --峰段开始时间
        V_TIMEPHASEENDTIME   := CUR_R.TIMEPHASEENDTIME; --峰段结束时间
        V_STARTTIME          := CUR_R.STARTTIME; --峰段开始时间(相对0点的小时数)
        V_ENDTIME            := CUR_R.ENDTIME; --峰段结束时间(相对0点的小时数)      
        INSERT INTO JZ_CONSUMECARDTYPE2
          (RECORDID,
           ORGID,
           ORGNAME,
           ROUTEID,
           ROUTENAME,
           JZDATE,
           TIMEPHASETYPE,
           TIMEPHASEVALUE,
           TIMEPHASESTARTTIME,
           TIMEPHASEENDTIME,
           CARDTYPE,
           CARDNAME,
           CARDTYPECOUNT,
           DATASAVELEVEL)
          SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
                 ROUTE.ORGID,
                 ORG.ORGNAME,
                 ROUTE.ROUTEID,
                 ROUTE.ROUTENAME,
                 V_DATE_IN AS JZDATE,
                 V_TIMEPHASETYPE AS TIMEPHASETYPE,
                 V_TIMEPHASEVALUE AS TIMEPHASEVALUE,
                 V_STARTTIME AS TIMEPHASESTARTTIME,
                 V_ENDTIME AS TIMEPHASEENDTIME,
                 T.CONSUMETYPE AS CARDTYPE,
                 P.ITEMKEY AS CARDNAME,
                 NVL(T.PSG, 0) AS CARDTYPECOUNT,
                 '3' AS DATASAVELEVEL
            FROM MCROUTEINFOGS ROUTE,
                 MCORGINFOGS ORG,
                 (SELECT LINENO, CONSUMETYPE, COUNT(*) PSG
                    FROM (SELECT LINENO,
                                 FUN_CALCICCONSUMETYPE(CONSUMETYPE) AS CONSUMETYPE
                            FROM TB_MONTHCONSUMETMP
                           WHERE CONSUMETYPE < G_IC_MANAGE
                             AND LINENO = V_ROUTECODE
                             AND CONSUMEDATE > V_TIMEPHASESTARTTIME
                             AND CONSUMEDATE < V_TIMEPHASEENDTIME)
                   GROUP BY LINENO, CONSUMETYPE) T,
                 (SELECT * FROM TYPEENTRY WHERE TYPENAME = 'ICCARDTYPE') P
           WHERE ROUTE.ROUTECODE = T.LINENO
             AND ROUTE.ORGID = ORG.ORGID(+)
             AND T.CONSUMETYPE = P.ITEMVALUE(+);
        COMMIT;
        WRITE_LOG('TREATE_CONSUMECARDTYPE2',
                  '刷卡人次分类统计日结存表_' || V_ROUTEID,
                  V_DATE_IN,
                  '');
      
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('TREATE_CONSUMECARDTYPE2',
                          '刷卡人次分类统计日结存表',
                          NULL,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP;
    WRITE_LOG('TREATE_CONSUMECARDTYPE2',
              '刷卡人次分类统计日结存表',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_CONSUMECARDTYPE2',
                      '刷卡人次分类统计日结存表',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ORGDAYPSG                                                            *
  *                                                                                      *
  *    功能：组织日/月/年客流量                                                          *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2012-06-03                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ORGDAYPSG(V_DATE DATE) AS
    V_DATE_IN    DATE := TRUNC(V_DATE);
    V_MONTHBEGIN DATE; --月初
    V_MONTHEND   DATE; --月末
    V_YEARBEGIN  DATE; --年初
    V_YEAREND    DATE; --年末
  BEGIN
    V_MONTHBEGIN := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_MONTHEND   := LAST_DAY(V_DATE_IN) + 1;
    V_YEARBEGIN  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                            'YYYY-MM-DD');
    V_YEAREND    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                       '-01-01',
                                       'YYYY-MM-DD'),
                               12);
    WRITE_LOG('TREATE_ORGDAYPSG',
              '组织日/月/年客流量结存',
              V_DATE_IN,
              '开始');
    BEGIN
      --线路（日）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ROUTEID = Z.ROUTEID
                                    AND T.JZDATE = Z.JZDATE
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '4'; --线路
      --线路（月）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ROUTEID = Z.ROUTEID
                                    AND T.JZDATE >= V_MONTHBEGIN
                                    AND T.JZDATE < V_MONTHEND
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '4'; --线路
      --线路（年）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ROUTEID = Z.ROUTEID
                                    AND T.JZDATE >= V_YEARBEGIN
                                    AND T.JZDATE < V_YEAREND
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '4'; --线路
    
      COMMIT;
    END;
    BEGIN
      --车队（日）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ORGID = Z.ORGID
                                    AND T.JZDATE = Z.JZDATE
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '3'; --车队
      --车队（月）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ORGID = Z.ORGID
                                    AND T.JZDATE >= V_MONTHBEGIN
                                    AND T.JZDATE < V_MONTHEND
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '3'; --车队
      --车队（年）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ORGID = Z.ORGID
                                    AND T.JZDATE >= V_YEARBEGIN
                                    AND T.JZDATE < V_YEAREND
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '3'; --车队    
      COMMIT;
    END;
    BEGIN
      --分公司（日）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ORGID = Z.ORGID
                                    AND T.JZDATE = Z.JZDATE
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '2'; --分公司
      --分公司（月）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ORGID = Z.ORGID
                                    AND T.JZDATE >= V_MONTHBEGIN
                                    AND T.JZDATE < V_MONTHEND
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '2'; --分公司
      --分公司（年）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ORGID = Z.ORGID
                                    AND T.JZDATE >= V_YEARBEGIN
                                    AND T.JZDATE < V_YEAREND
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '2'; --分公司    
      COMMIT;
    END;
    BEGIN
      --集团（日）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ORGID = Z.ORGID
                                    AND T.JZDATE = Z.JZDATE
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '1'; --集团
      --集团（月）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ORGID = Z.ORGID
                                    AND T.JZDATE >= V_MONTHBEGIN
                                    AND T.JZDATE < V_MONTHEND
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '1'; --集团
      --集团（年）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.PASSENGERCOUNT = (SELECT SUM(T.PASSENGERFLOW)
                                   FROM JZ_CASHINCOME T
                                  WHERE T.ORGID = Z.ORGID
                                    AND T.JZDATE >= V_YEARBEGIN
                                    AND T.JZDATE < V_YEAREND
                                    AND T.DATASAVELEVEL = Z.DATASAVELEVEL
                                    AND T.STORAGEORGTYPE = Z.STORAGEORGTYPE)
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '1'; --集团    
      COMMIT;
    END;
    WRITE_LOG('TREATE_ORGDAYPSG',
              '组织日/月/年客流量结存',
              V_DATE_IN,
              '结束');
  END;
  /***************************************************************************************
  *    名称：TREATE_TIMEPHASEPSG_ORG                                                     *
  *                                                                                      *
  *    功能：峰段客流计算                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2012-05-31                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_TIMEPHASEPSG_ORG(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    WRITE_LOG('TREATE_TIMEPHASEPSG_ORG',
              '按峰段指标数据结存表-客流(组织)',
              V_DATE_IN,
              '开始');
    --车队
    UPDATE JZ_TIMEPHASEDATASTORAGE2 T
       SET T.PSGCOUNT = (SELECT SUM(A.PSGCOUNT)
                           FROM JZ_TIMEPHASEDATASTORAGE2 A, MCROUTEINFOGS R
                          WHERE A.ROUTEID = R.ROUTEID
                            AND R.ORGID = T.ORGID
                            AND A.JZDATE = T.JZDATE
                            AND A.TIMEPHASETYPE = T.TIMEPHASETYPE --峰段
                            AND A.STORAGEORGTYPE = '4' --线路
                            AND A.DATASAVELEVEL = '3' --日
                         )
     WHERE T.STORAGEORGTYPE = '3'
       AND T.DATASAVELEVEL = '3' --日
          -- AND t.orgid = 2313
       AND T.JZDATE = V_DATE_IN;
    COMMIT; --提交数据  
    --分公司
    UPDATE JZ_TIMEPHASEDATASTORAGE2 T
       SET T.PSGCOUNT = (SELECT SUM(A.PSGCOUNT)
                           FROM JZ_TIMEPHASEDATASTORAGE2 A, MCORGINFOGS O
                          WHERE A.ORGID = O.ORGID
                            AND O.PARENTORGID = T.ORGID
                            AND A.JZDATE = T.JZDATE
                            AND A.TIMEPHASETYPE = T.TIMEPHASETYPE --峰段
                            AND A.STORAGEORGTYPE = '3' --车队
                            AND A.DATASAVELEVEL = '3' --日
                         )
     WHERE T.STORAGEORGTYPE = '2'
       AND T.DATASAVELEVEL = '3' --日
       AND T.JZDATE = V_DATE_IN;
    COMMIT; --提交数据
  
    --集团
    UPDATE JZ_TIMEPHASEDATASTORAGE2 T
       SET T.PSGCOUNT = (SELECT SUM(A.PSGCOUNT)
                           FROM JZ_TIMEPHASEDATASTORAGE2 A, MCORGINFOGS O
                          WHERE A.ORGID = O.ORGID
                            AND O.PARENTORGID = T.ORGID
                            AND A.JZDATE = T.JZDATE
                            AND A.TIMEPHASETYPE = T.TIMEPHASETYPE --峰段
                            AND A.STORAGEORGTYPE = '2' --分公司
                            AND A.DATASAVELEVEL = '3' --日
                         )
     WHERE T.STORAGEORGTYPE = '1'
       AND T.DATASAVELEVEL = '3' --日
       AND T.JZDATE = V_DATE_IN;
    COMMIT; --提交数据  
    --车队
    UPDATE JZ_TIMEPHASEDATASTORAGE T
       SET T.PSGCOUNT = (SELECT SUM(A.PSGCOUNT)
                           FROM JZ_TIMEPHASEDATASTORAGE A, MCROUTEINFOGS R
                          WHERE A.ROUTEID = R.ROUTEID
                            AND R.ORGID = T.ORGID
                            AND A.JZDATE = T.JZDATE
                            AND A.TIMEPHASETYPE = T.TIMEPHASETYPE --峰段
                            AND A.STORAGEORGTYPE = '4' --线路
                            AND A.DATASAVELEVEL = '3' --日
                         )
     WHERE T.STORAGEORGTYPE = '3'
       AND T.DATASAVELEVEL = '3' --日
          -- AND t.orgid = 2313
       AND T.JZDATE = V_DATE_IN;
    COMMIT; --提交数据  
    --分公司
    UPDATE JZ_TIMEPHASEDATASTORAGE T
       SET T.PSGCOUNT = (SELECT SUM(A.PSGCOUNT)
                           FROM JZ_TIMEPHASEDATASTORAGE A, MCORGINFOGS O
                          WHERE A.ORGID = O.ORGID
                            AND O.PARENTORGID = T.ORGID
                            AND A.JZDATE = T.JZDATE
                            AND A.TIMEPHASETYPE = T.TIMEPHASETYPE --峰段
                            AND A.STORAGEORGTYPE = '3' --车队
                            AND A.DATASAVELEVEL = '3' --日
                         )
     WHERE T.STORAGEORGTYPE = '2'
       AND T.DATASAVELEVEL = '3' --日
       AND T.JZDATE = V_DATE_IN;
    COMMIT; --提交数据  
    --集团
    UPDATE JZ_TIMEPHASEDATASTORAGE T
       SET T.PSGCOUNT = (SELECT SUM(A.PSGCOUNT)
                           FROM JZ_TIMEPHASEDATASTORAGE A, MCORGINFOGS O
                          WHERE A.ORGID = O.ORGID
                            AND O.PARENTORGID = T.ORGID
                            AND A.JZDATE = T.JZDATE
                            AND A.TIMEPHASETYPE = T.TIMEPHASETYPE --峰段
                            AND A.STORAGEORGTYPE = '2' --分公司
                            AND A.DATASAVELEVEL = '3' --日
                         )
     WHERE T.STORAGEORGTYPE = '1'
       AND T.DATASAVELEVEL = '3' --日
       AND T.JZDATE = V_DATE_IN;
    COMMIT; --提交数据  
    WRITE_LOG('TREATE_TIMEPHASEPSG_ORG',
              '按峰段指标数据结存表-客流',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('TREATE_TIMEPHASEPSG_ORG',
                      '按峰段指标数据结存表',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_TIMEPHASEPSG_PHASE                                                   *
  *                                                                                      *
  *    功能：峰段客流计算                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2012-05-31                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_TIMEPHASEPSG_PHASE(V_DATE DATE) AS
    V_DATE_IN    DATE := TRUNC(V_DATE);
    V_MONTHBEGIN DATE; --月初
    V_MONTHEND   DATE; --月末
    V_YEARBEGIN  DATE; --年初
    V_YEAREND    DATE; --年末
  BEGIN
    V_MONTHBEGIN := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_MONTHEND   := LAST_DAY(V_DATE_IN) + 1;
    V_YEARBEGIN  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                            'YYYY-MM-DD');
    V_YEAREND    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                       '-01-01',
                                       'YYYY-MM-DD'),
                               12);
    WRITE_LOG('TREATE_TIMEPHASEPSG_PHASE',
              '按峰段指标数据结存表-客流(阶段)',
              V_DATE_IN,
              '开始');
    --月
    BEGIN
      --线路
      UPDATE JZ_TIMEPHASEDATASTORAGE T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE P
                            WHERE P.ROUTEID = T.ROUTEID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '4' --线路
                              AND P.DATASAVELEVEL = '3' --日
                              AND P.JZDATE >= V_MONTHBEGIN
                              AND P.JZDATE < V_MONTHEND)
       WHERE T.STORAGEORGTYPE = '4' --线路
         AND T.DATASAVELEVEL = '2' --月
         AND T.JZDATE >= V_MONTHBEGIN
         AND T.JZDATE < V_MONTHEND;
      --车队
      UPDATE JZ_TIMEPHASEDATASTORAGE T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '3' --车队
                              AND P.DATASAVELEVEL = '3' --日
                              AND P.JZDATE >= V_MONTHBEGIN
                              AND P.JZDATE < V_MONTHEND)
       WHERE T.STORAGEORGTYPE = '3'
         AND T.DATASAVELEVEL = '2' --月
         AND T.JZDATE >= V_MONTHBEGIN
         AND T.JZDATE < V_MONTHEND;
      --分公司
      UPDATE JZ_TIMEPHASEDATASTORAGE T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '2' --分公司
                              AND P.DATASAVELEVEL = '3' --日
                              AND P.JZDATE >= V_MONTHBEGIN
                              AND P.JZDATE < V_MONTHEND)
       WHERE T.STORAGEORGTYPE = '2'
         AND T.DATASAVELEVEL = '2' --月
         AND T.JZDATE >= V_MONTHBEGIN
         AND T.JZDATE < V_MONTHEND;
      --集团
      UPDATE JZ_TIMEPHASEDATASTORAGE T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '1' --集团
                              AND P.DATASAVELEVEL = '3' --日
                              AND P.JZDATE >= V_MONTHBEGIN
                              AND P.JZDATE < V_MONTHEND)
       WHERE T.STORAGEORGTYPE = '1'
         AND T.DATASAVELEVEL = '2' --月
         AND T.JZDATE >= V_MONTHBEGIN
         AND T.JZDATE < V_MONTHEND;
      --线路
      UPDATE JZ_TIMEPHASEDATASTORAGE2 T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE2 P
                            WHERE P.ROUTEID = T.ROUTEID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '4' --线路
                              AND P.DATASAVELEVEL = '3' --日
                              AND P.JZDATE >= V_MONTHBEGIN
                              AND P.JZDATE < V_MONTHEND)
       WHERE T.STORAGEORGTYPE = '4' --线路
         AND T.DATASAVELEVEL = '2' --月
         AND T.JZDATE >= V_MONTHBEGIN
         AND T.JZDATE < V_MONTHEND;
      --车队
      UPDATE JZ_TIMEPHASEDATASTORAGE2 T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE2 P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '3' --车队
                              AND P.DATASAVELEVEL = '3' --日
                              AND P.JZDATE >= V_MONTHBEGIN
                              AND P.JZDATE < V_MONTHEND)
       WHERE T.STORAGEORGTYPE = '3'
         AND T.DATASAVELEVEL = '2' --月
         AND T.JZDATE >= V_MONTHBEGIN
         AND T.JZDATE < V_MONTHEND;
      --分公司
      UPDATE JZ_TIMEPHASEDATASTORAGE2 T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE2 P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '2' --分公司
                              AND P.DATASAVELEVEL = '3' --日
                              AND P.JZDATE >= V_MONTHBEGIN
                              AND P.JZDATE < V_MONTHEND)
       WHERE T.STORAGEORGTYPE = '2'
         AND T.DATASAVELEVEL = '2' --月
         AND T.JZDATE >= V_MONTHBEGIN
         AND T.JZDATE < V_MONTHEND;
      --集团
      UPDATE JZ_TIMEPHASEDATASTORAGE2 T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE2 P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '1' --集团
                              AND P.DATASAVELEVEL = '3' --日
                              AND P.JZDATE >= V_MONTHBEGIN
                              AND P.JZDATE < V_MONTHEND)
       WHERE T.STORAGEORGTYPE = '1'
         AND T.DATASAVELEVEL = '2' --月
         AND T.JZDATE >= V_MONTHBEGIN
         AND T.JZDATE < V_MONTHEND;
      COMMIT;
    END;
    --年
    BEGIN
      --线路
      UPDATE JZ_TIMEPHASEDATASTORAGE T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE P
                            WHERE P.ROUTEID = T.ROUTEID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '4' --线路
                              AND P.DATASAVELEVEL = '2' --月
                              AND P.JZDATE >= V_YEARBEGIN
                              AND P.JZDATE < V_YEAREND)
       WHERE T.STORAGEORGTYPE = '4' --线路
         AND T.DATASAVELEVEL = '1' --年
         AND T.JZDATE >= V_YEARBEGIN
         AND T.JZDATE < V_YEAREND;
      --车队
      UPDATE JZ_TIMEPHASEDATASTORAGE T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '3' --车队
                              AND P.DATASAVELEVEL = '2' --月
                              AND P.JZDATE >= V_YEARBEGIN
                              AND P.JZDATE < V_YEAREND)
       WHERE T.STORAGEORGTYPE = '3' --车队
         AND T.DATASAVELEVEL = '1' --年
         AND T.JZDATE >= V_YEARBEGIN
         AND T.JZDATE < V_YEAREND;
      --分公司
      UPDATE JZ_TIMEPHASEDATASTORAGE T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '2' --分公司
                              AND P.DATASAVELEVEL = '2' --月
                              AND P.JZDATE >= V_YEARBEGIN
                              AND P.JZDATE < V_YEAREND)
       WHERE T.STORAGEORGTYPE = '2' --分公司
         AND T.DATASAVELEVEL = '1' --年
         AND T.JZDATE >= V_YEARBEGIN
         AND T.JZDATE < V_YEAREND;
      --集团
      UPDATE JZ_TIMEPHASEDATASTORAGE T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '1' --集团
                              AND P.DATASAVELEVEL = '2' --月
                              AND P.JZDATE >= V_YEARBEGIN
                              AND P.JZDATE < V_YEAREND)
       WHERE T.STORAGEORGTYPE = '1' --集团
         AND T.DATASAVELEVEL = '1' --年
         AND T.JZDATE >= V_YEARBEGIN
         AND T.JZDATE < V_YEAREND;
      --线路
      UPDATE JZ_TIMEPHASEDATASTORAGE2 T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE2 P
                            WHERE P.ROUTEID = T.ROUTEID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '4' --线路
                              AND P.DATASAVELEVEL = '2' --月
                              AND P.JZDATE >= V_YEARBEGIN
                              AND P.JZDATE < V_YEAREND)
       WHERE T.STORAGEORGTYPE = '4' --线路
         AND T.DATASAVELEVEL = '1' --年
         AND T.JZDATE >= V_YEARBEGIN
         AND T.JZDATE < V_YEAREND;
      --车队
      UPDATE JZ_TIMEPHASEDATASTORAGE2 T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE2 P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '3' --车队
                              AND P.DATASAVELEVEL = '2' --月
                              AND P.JZDATE >= V_YEARBEGIN
                              AND P.JZDATE < V_YEAREND)
       WHERE T.STORAGEORGTYPE = '3' --车队
         AND T.DATASAVELEVEL = '1' --年
         AND T.JZDATE >= V_YEARBEGIN
         AND T.JZDATE < V_YEAREND;
    
      --分公司
      UPDATE JZ_TIMEPHASEDATASTORAGE2 T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE2 P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '2' --分公司
                              AND P.DATASAVELEVEL = '2' --月
                              AND P.JZDATE >= V_YEARBEGIN
                              AND P.JZDATE < V_YEAREND)
       WHERE T.STORAGEORGTYPE = '2' --分公司
         AND T.DATASAVELEVEL = '1' --年
         AND T.JZDATE >= V_YEARBEGIN
         AND T.JZDATE < V_YEAREND;
      --集团
      UPDATE JZ_TIMEPHASEDATASTORAGE2 T
         SET T.PSGCOUNT = (SELECT SUM(PSGCOUNT)
                             FROM JZ_TIMEPHASEDATASTORAGE2 P
                            WHERE P.ORGID = T.ORGID
                              AND P.TIMEPHASETYPE = T.TIMEPHASETYPE
                              AND P.STORAGEORGTYPE = '1' --集团
                              AND P.DATASAVELEVEL = '2' --月
                              AND P.JZDATE >= V_YEARBEGIN
                              AND P.JZDATE < V_YEAREND)
       WHERE T.STORAGEORGTYPE = '1' --集团
         AND T.DATASAVELEVEL = '1' --年
         AND T.JZDATE >= V_YEARBEGIN
         AND T.JZDATE < V_YEAREND;
      COMMIT;
    END;
    WRITE_LOG('TREATE_TIMEPHASEPSG_PHASE',
              '按峰段指标数据结存表-客流',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      WRITE_EXCEPTION('TREATE_TIMEPHASEPSG_PHASE',
                      '按峰段指标数据结存表',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_TIMEPHASEPSG                                                         *
  *                                                                                      *
  *    功能：峰段客流计算                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_TIMEPHASEPSG(V_DATE DATE) AS
    V_ORGID              VARCHAR2(36); --jz_timephasedatastorage.orgid%TYPE; --组织id'
    V_ROUTEID            VARCHAR2(36); --jz_timephasedatastorage.routeid%TYPE; --线路编号';
    V_ROUTENAME          VARCHAR2(36); --jz_timephasedatastorage.routename%TYPE; --线路名称';
    V_ROUTECODE          VARCHAR2(36); --jz_timephasedatastorage.routecode%TYPE; --线路编码';
    V_TIMEPHASETYPE      VARCHAR2(2); --jz_timephasedatastorage.timephasetype%TYPE; --峰段类型
    V_TIMEPHASEVALUE     VARCHAR2(40); --jz_timephasedatastorage.timephasevalue%TYPE; --峰段名称
    V_STARTTIME          NUMBER; --峰段开始时间(相对0点的小时数)
    V_ENDTIME            NUMBER; --峰段结束时间(相对0点的小时数)
    V_TIMEPHASESTARTTIME DATE; --峰段开始时间
    V_TIMEPHASEENDTIME   DATE; --峰段结束时间
    V_PSGCOUNT           NUMBER; --jz_timephasedatastorage.psgcount%TYPE;--客运量
    V_DATE_IN            DATE := TRUNC(V_DATE);
    --线路五峰段(注意：如果没有配置峰段,则全天按平峰计算)
    CURSOR CUR_PHASE(DATE_IN DATE) IS
      SELECT ROUTE.ORGID,
             ROUTE.ROUTEID,
             ROUTE.ROUTENAME,
             ROUTE.ROUTECODE,
             NVL(T.TIMEPHASEKEY, '3') TIMEPHASEKEY,
             NVL(T.TIMEPHASENAME, '平峰') TIMEPHASENAME,
             TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
             TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
             ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
             ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME
        FROM MCROUTEINFOGS ROUTE, MCROUTETIMEPHASEGS2 T
       ORDER BY ROUTE.ROUTEID, T.STARTTIME;
    --线路峰段(注意：如果没有配置峰段,则全天按平峰计算)
    CURSOR CUR_ROUTE(DATE_IN DATE) IS
      SELECT ROUTE.ORGID,
             ROUTE.ROUTEID,
             ROUTE.ROUTENAME,
             ROUTE.ROUTECODE,
             NVL(T.TIMEPHASEKEY, '2') TIMEPHASEKEY,
             NVL(T.TIMEPHASENAME, '平峰') TIMEPHASENAME,
             TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
             TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
             ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
             ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME,
             NVL(T.TIMEPHASEINTERVAL, 0) TIMEPHASEINTERVAL,
             NVL(T.TIMEPHASECIRCLETIME, 0) TIMEPHASECIRCLETIME,
             NVL(T.PLANSEQS, 0) PLANSEQS
        FROM MCROUTEINFOGS ROUTE,
             (SELECT *
                FROM MCROUTETIMEPHASEGS T
               WHERE T.BEGINDATE <= DATE_IN
                 AND T.ENDDATE >= DATE_IN
                 AND T.BEGINWEEK <=
                     (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)
                 AND T.ENDWEEK >=
                     (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)) T
       WHERE ROUTE.ROUTEID = T.ROUTEID(+)
       ORDER BY T.ROUTEID, T.STARTTIME;
  BEGIN
    --V_PSG := 0;
    WRITE_LOG('TREATE_TIMEPHASEPSG',
              '按峰段指标数据结存表-客流',
              V_DATE_IN,
              '开始');
    --线路五峰段(日)
    FOR CUR_R IN CUR_PHASE(V_DATE_IN) LOOP
      BEGIN
        V_ORGID              := CUR_R.ORGID; --组织id'
        V_ROUTEID            := CUR_R.ROUTEID; --线路编号';
        V_ROUTENAME          := CUR_R.ROUTENAME; --线路名称';
        V_ROUTECODE          := CUR_R.ROUTECODE; --线路编码
        V_TIMEPHASETYPE      := CUR_R.TIMEPHASEKEY; --峰段类型
        V_TIMEPHASEVALUE     := CUR_R.TIMEPHASENAME; --峰段名称
        V_TIMEPHASESTARTTIME := CUR_R.TIMEPHASESTARTTIME; --峰段开始时间
        V_TIMEPHASEENDTIME   := CUR_R.TIMEPHASEENDTIME; --峰段结束时间
        V_STARTTIME          := CUR_R.STARTTIME; --峰段开始时间(相对0点的小时数)
        V_ENDTIME            := CUR_R.ENDTIME; --峰段结束时间(相对0点的小时数)      
        --峰段客流
        IF (V_ROUTECODE IS NULL) THEN
          V_ROUTECODE := V_ROUTEID;
        END IF;
        V_PSGCOUNT := 0;
        IF (V_ROUTECODE IS NOT NULL) THEN
          FOR CUR IN (SELECT COUNT(*) AS PSGCOUNT
                        FROM TB_MONTHCONSUMETMP T
                       WHERE T.CONSUMETYPE < G_IC_MANAGE
                         AND T.CONSUMEDATE >= V_TIMEPHASESTARTTIME
                         AND T.CONSUMEDATE <= V_TIMEPHASEENDTIME
                         AND T.LINENO = V_ROUTECODE) LOOP
            V_PSGCOUNT := CUR.PSGCOUNT;
          END LOOP;
        END IF;
        UPDATE JZ_TIMEPHASEDATASTORAGE2 T
           SET T.PSGCOUNT = V_PSGCOUNT
         WHERE T.ROUTEID = V_ROUTEID
           AND T.TIMEPHASETYPE = V_TIMEPHASETYPE
              --AND t.timephasestarttime = v_starttime
           AND T.STORAGEORGTYPE = '4' --线路 add by hujihuo 2012-05-31
           AND T.DATASAVELEVEL = '3' --日 add by hujihuo 2012-05-31
           AND T.JZDATE = V_DATE_IN;
        COMMIT;
        WRITE_LOG('TREATE_TIMEPHASEPSG',
                  '按峰段指标数据结存表-客流' || V_ROUTECODE,
                  V_DATE_IN,
                  '五峰段');
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('Treate_TimePhasePsg',
                          '按峰段指标数据结存表',
                          V_DATE,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP;
  
    --线路峰段
    FOR CUR_R IN CUR_ROUTE(V_DATE_IN) LOOP
      BEGIN
        V_ORGID              := CUR_R.ORGID; --组织id'
        V_ROUTEID            := CUR_R.ROUTEID; --线路编号';
        V_ROUTENAME          := CUR_R.ROUTENAME; --线路名称';
        V_ROUTECODE          := CUR_R.ROUTECODE; --线路编码
        V_TIMEPHASETYPE      := CUR_R.TIMEPHASEKEY; --峰段类型
        V_TIMEPHASEVALUE     := CUR_R.TIMEPHASENAME; --峰段名称
        V_TIMEPHASESTARTTIME := CUR_R.TIMEPHASESTARTTIME; --峰段开始时间
        V_TIMEPHASEENDTIME   := CUR_R.TIMEPHASEENDTIME; --峰段结束时间
        V_STARTTIME          := CUR_R.STARTTIME; --峰段开始时间(相对0点的小时数)
        V_ENDTIME            := CUR_R.ENDTIME; --峰段结束时间(相对0点的小时数)
      
        --峰段客流
        IF (V_ROUTECODE IS NULL) THEN
          V_ROUTECODE := V_ROUTEID;
        END IF;
      
        V_PSGCOUNT := 0;
        IF (V_ROUTECODE IS NOT NULL) THEN
          FOR CUR IN (SELECT COUNT(*) AS PSGCOUNT
                        FROM TB_MONTHCONSUMETMP T
                       WHERE T.CONSUMETYPE < G_IC_MANAGE
                         AND T.CONSUMEDATE >= V_TIMEPHASESTARTTIME
                         AND T.CONSUMEDATE <= V_TIMEPHASEENDTIME
                         AND T.LINENO = V_ROUTECODE) LOOP
            V_PSGCOUNT := CUR.PSGCOUNT;
          END LOOP;
        END IF;
      
        UPDATE JZ_TIMEPHASEDATASTORAGE T
           SET T.PSGCOUNT = V_PSGCOUNT
         WHERE T.ROUTEID = V_ROUTEID
           AND T.TIMEPHASETYPE = V_TIMEPHASETYPE
           AND T.TIMEPHASESTARTTIME = V_STARTTIME
           AND T.STORAGEORGTYPE = '4' --线路 add by hujihuo 2012-05-31
           AND T.DATASAVELEVEL = '3' --日 add by hujihuo 2012-05-31
           AND T.JZDATE = V_DATE_IN;
      
        COMMIT;
        WRITE_LOG('TREATE_TIMEPHASEPSG',
                  '按峰段指标数据结存表-客流' || V_ROUTECODE,
                  V_DATE_IN,
                  '线路峰段');
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('TREATE_TIMEPHASEPSG',
                          '按峰段指标数据结存表',
                          V_DATE,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP;
  
    WRITE_LOG('TREATE_TIMEPHASEPSG',
              '按峰段指标数据结存表-客流',
              V_DATE_IN,
              '结束');
    TREATE_TIMEPHASEPSG_ORG(V_DATE_IN);
    TREATE_TIMEPHASEPSG_PHASE(V_DATE_IN);
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('TREATE_TIMEPHASEPSG',
                      '按峰段指标数据结存表',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：Treate_DaytakePsg                                                           *
  *                                                                                      *
  *    功能：人均日乘次                                                                  *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_DAYTAKEPSG(V_BEGINDATE DATE, V_ENDDATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_BEGINDATE);
  BEGIN
    WRITE_LOG('TREATE_DAYTAKEPSG', '人均日乘次', V_DATE_IN, '开始');
    BEGIN
      --人均日乘次
      DELETE FROM JZ_DAYTAKEBUSSTORAGE T
       WHERE T.JZDATE >= TRUNC(V_BEGINDATE)
         AND T.JZDATE < TRUNC(V_ENDDATE);
      INSERT INTO JZ_DAYTAKEBUSSTORAGE
        (RECORDID,
         DAYTAKEBUS,
         DATASAVELEVEL,
         RECDATE,
         JZDATE,
         CARDTYPE,
         CARDNAME,
         PSGCOUNT,
         PEOPLECOUNT)
        (SELECT S_ROUTESTORAGE.NEXTVAL,
                ROUND(DECODE(NVL(PEOPLE, 0), 0, 0, PSG / PEOPLE), 2),
                '3',
                SYSDATE,
                CONSUMEDATE,
                '0',
                '0',
                PSG,
                PEOPLE
           FROM (SELECT CONSUMEDATE,
                        COUNT(DISTINCT CARDNO) PEOPLE,
                        COUNT(*) PSG
                   FROM (SELECT T.CARDNO, TRUNC(T.CONSUMEDATE) CONSUMEDATE
                           FROM TB_MONTHCONSUMETMP T
                          WHERE T.CONSUMEDATE >= TRUNC(V_BEGINDATE)
                            AND T.CONSUMEDATE < TRUNC(V_ENDDATE))
                  GROUP BY CONSUMEDATE));
      COMMIT;
    END;
    WRITE_LOG('TREATE_DAYTAKEPSG', '人均日乘次', V_DATE_IN, '开始');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_DAYTAKEPSG',
                      '人均日乘次',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_BRTICSTORAGE                                                                      *
  *                                                                                                   *
  *    功能：BRT刷卡数据结存                                                                            *
  *                                                                                                   *
  *    作者：HUHUIMIN                                                                                  *
  *    日期：2014-12-03                                                                                *
  ****************************************************************************************/
  PROCEDURE TREATE_BRTICSTORAGE(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    WRITE_LOG('TREATE_BRTICSTORAGE', 'BRT刷卡数据结存', V_DATE_IN, '开始');
    --删除已有相同数据
    EXECUTE IMMEDIATE 'TRUNCATE TABLE JZ_BRTICSTORAGETMP';
    DELETE FROM JZ_BRTICSTORAGE T WHERE T.JZDATE = V_DATE_IN;
    COMMIT;
    --开始结存
    INSERT INTO JZ_BRTICSTORAGETMP
      (RECORDID,
       ROUTEID,
       STATIONID,
       STARTTIME,
       ENDTIME,
       JZDATE,
       JCZBZ,
       ICCOUNT)
      SELECT SEQ_OSEID.NEXTVAL AS RECORDID,
             TT.ROUTEID,
             TT.STATIONID,
             TT.MINNUM,
             TT.MAXNUM,
             TT.JZDATE,
             TT.JCZBZ,
             TT.ICCOUNT
        FROM (SELECT '9' || T.XLBHZ AS ROUTEID,
                     T.ZDBHZ AS STATIONID,
                     T.JCZBZ,
                     TO_DATE(T.JYRQZ, 'YYYY-MM-DD') AS JZDATE,
                     SCAL.MINNUM,
                     SCAL.MAXNUM,
                     COUNT(T.KHZZZ) AS ICCOUNT
                FROM BRT_JYM1CPUZ_HIS T, SYS_CALCULATECONFIG SCAL
               WHERE T.JYRQZ = TO_CHAR(V_DATE_IN, 'YYYYMMDD')
                 AND T.JYSJZ >=
                     TO_CHAR(TRUNC(SYSDATE) + SCAL.MINNUM / 60 / 24,
                             'HH24MISS')
                 AND T.JYSJZ <
                     TO_CHAR(TRUNC(SYSDATE) + SCAL.MAXNUM / 60 / 24,
                             'HH24MISS')
                 AND SCAL.CONFIGNAME = 'HALFHOUR'
               GROUP BY T.XLBHZ,
                        T.ZDBHZ,
                        T.JCZBZ,
                        T.JYRQZ,
                        SCAL.MINNUM,
                        SCAL.MAXNUM
              UNION
              SELECT '9' || T.XLBHZ AS ROUTEID,
                     T.ZDBHZ AS STATIONID,
                     T.JCZBZ,
                     TO_DATE(T.JYRQZ, 'YYYY-MM-DD') AS JZDATE,
                     1410 AS MINNUM,
                     1440 AS MAXNUM,
                     COUNT(T.KHZZZ) AS ICCOUNT
                FROM BRT_JYM1CPUZ_HIS T
               WHERE T.JYRQZ = TO_CHAR(V_DATE_IN, 'YYYYMMDD')
                 AND T.JYSJZ >= '233000'
                 AND T.JYSJZ < '240000'
               GROUP BY T.XLBHZ, T.ZDBHZ, T.JCZBZ, T.JYRQZ) TT;
    COMMIT;
    INSERT INTO JZ_BRTICSTORAGE
      (RECORDID,
       ROUTEID,
       STATIONID,
       STARTTIME,
       ENDTIME,
       JZDATE,
       STAINNUM,
       STAOUTNUM,
       TRANSHIPINNUM,
       TRANSHIPOUTNUM,
       SECTIONNUM,
       DATASAVELEVEL)
      SELECT SEQ_OSEID.NEXTVAL AS RECORDID,
             T.ROUTEID,
             T.STATIONID,
             T.STARTTIME,
             T.ENDTIME,
             T.JZDATE,
             T.ICCOUNT AS STAINNUM,
             0 AS STAOUTNUM,
             0 AS TRANSHIPINNUM,
             0 AS TRANSHIPOUTNUM,
             0 AS SECTIONNUM,
             '3' AS DATASAVELEVEL
        FROM JZ_BRTICSTORAGETMP T
       WHERE T.JCZBZ = '0';
    DELETE FROM JZ_BRTICSTORAGETMP T WHERE T.JCZBZ = '0';
    COMMIT;
    MERGE INTO JZ_BRTICSTORAGE O
    USING JZ_BRTICSTORAGETMP N
    ON (O.ROUTEID = N.ROUTEID AND O.STATIONID = N.STATIONID AND O.STARTTIME = N.STARTTIME AND O.ENDTIME = N.ENDTIME AND O.JZDATE = N.JZDATE AND O.JZDATE = V_DATE_IN AND O.DATASAVELEVEL = '3')
    WHEN MATCHED THEN
      UPDATE
         SET O.STAOUTNUM = N.ICCOUNT
       WHERE O.JZDATE = V_DATE_IN
         AND O.DATASAVELEVEL = '3'
    WHEN NOT MATCHED THEN
      INSERT
        (RECORDID,
         ROUTEID,
         STATIONID,
         STARTTIME,
         ENDTIME,
         JZDATE,
         STAINNUM,
         STAOUTNUM,
         TRANSHIPINNUM,
         TRANSHIPOUTNUM,
         SECTIONNUM,
         DATASAVELEVEL)
      VALUES
        (SEQ_OSEID.NEXTVAL,
         N.ROUTEID,
         N.STATIONID,
         N.STARTTIME,
         N.ENDTIME,
         N.JZDATE,
         0,
         N.ICCOUNT,
         0,
         0,
         0,
         '3');
    EXECUTE IMMEDIATE 'TRUNCATE TABLE JZ_BRTICSTORAGETMP';
    COMMIT;
    FOR CUR_TIME IN (SELECT SCAL.MINNUM, SCAL.MAXNUM
                       FROM SYS_CALCULATECONFIG SCAL
                      WHERE SCAL.CONFIGNAME = 'HALFHOUR'
                        AND SCAL.MAXNUM != 1440
                      ORDER BY SCAL.MINNUM) LOOP
      EXECUTE IMMEDIATE 'truncate TABLE JZ_BRTICSTORAGETMP_IC';
      INSERT INTO JZ_BRTICSTORAGETMP_IC
        (CARDNO, CONSUMEDATE)
        SELECT T.CARDNO, T.CONSUMEDATE
          FROM TB_MONTHCONSUMETMP T
         WHERE T.CONSUMEDATE >=
               V_DATE_IN + (CUR_TIME.MINNUM - 20) / 60 / 24
           AND T.CONSUMEDATE < V_DATE_IN + (CUR_TIME.MAXNUM + 20) / 60 / 24;
      COMMIT;
      EXECUTE IMMEDIATE 'truncate TABLE JZ_BRTICSTORAGETMP_BRT';
      INSERT INTO JZ_BRTICSTORAGETMP_BRT
        (ROUTEID, STATIONID, CARDNO, CONSUMEDATE)
        SELECT '9' || T.XLBHZ AS RUOTEID,
               T.ZDBHZ AS STATIONID,
               SUBSTR(T.KHZZZ, 5) AS CARDNO,
               TO_DATE(T.JYRQZ || T.JYSJZ, 'YYYY-MM-DD HH24:MI:SS') AS CONSUMEDATE
          FROM BRT_JYM1CPUZ_HIS T
         WHERE T.JYRQZ = TO_CHAR(V_DATE_IN, 'YYYYMMDD')
           AND T.JYSJZ >=
               TO_CHAR(V_DATE_IN + CUR_TIME.MINNUM / 60 / 24, 'HH24MISS')
           AND T.JYSJZ <
               TO_CHAR(V_DATE_IN + CUR_TIME.MAXNUM / 60 / 24, 'HH24MISS')
           AND T.JCZBZ = '1';
      COMMIT;
      INSERT INTO JZ_BRTICSTORAGETMP
        (RECORDID,
         ROUTEID,
         STATIONID,
         STARTTIME,
         ENDTIME,
         JZDATE,
         JCZBZ,
         ICCOUNT)
        SELECT SEQ_OSEID.NEXTVAL AS RECORDID,
               TT.ROUTEID AS ROUTEID,
               TT.STATIONID AS STATIONID,
               CUR_TIME.MINNUM AS STARTTIME,
               CUR_TIME.MAXNUM AS ENDDTIME,
               V_DATE_IN AS JZDATE,
               '1' AS JCZBZ,
               TT.ICCOUNT AS ICCOUNT
          FROM (SELECT T2.ROUTEID, T2.STATIONID, COUNT(T1.CARDNO) AS ICCOUNT
                  FROM JZ_BRTICSTORAGETMP_IC T1, JZ_BRTICSTORAGETMP_BRT T2
                 WHERE T1.CONSUMEDATE - T2.CONSUMEDATE <= 20 / 60 / 24
                   AND T1.CONSUMEDATE >= T2.CONSUMEDATE
                   AND T1.CARDNO = T2.CARDNO
                 GROUP BY T2.ROUTEID, T2.STATIONID) TT;
      COMMIT;
      EXECUTE IMMEDIATE 'truncate TABLE JZ_BRTICSTORAGETMP_BRT';
      INSERT INTO JZ_BRTICSTORAGETMP_BRT
        (ROUTEID, STATIONID, CARDNO, CONSUMEDATE)
        SELECT '9' || T.XLBHZ AS RUOTEID,
               T.ZDBHZ AS STATIONID,
               SUBSTR(T.KHZZZ, 5) AS CARDNO,
               TO_DATE(T.JYRQZ || T.JYSJZ, 'YYYY-MM-DD HH24:MI:SS') AS CONSUMEDATE
          FROM BRT_JYM1CPUZ_HIS T
         WHERE T.JYRQZ = TO_CHAR(V_DATE_IN, 'YYYYMMDD')
           AND T.JYSJZ >=
               TO_CHAR(V_DATE_IN + CUR_TIME.MINNUM / 60 / 24, 'HH24MISS')
           AND T.JYSJZ <
               TO_CHAR(V_DATE_IN + CUR_TIME.MAXNUM / 60 / 24, 'HH24MISS')
           AND T.JCZBZ = '0';
      COMMIT;
      INSERT INTO JZ_BRTICSTORAGETMP
        (RECORDID,
         ROUTEID,
         STATIONID,
         STARTTIME,
         ENDTIME,
         JZDATE,
         JCZBZ,
         ICCOUNT)
        SELECT SEQ_OSEID.NEXTVAL AS RECORDID,
               TT.ROUTEID AS ROUTEID,
               TT.STATIONID AS STATIONID,
               CUR_TIME.MINNUM AS STARTTIME,
               CUR_TIME.MAXNUM AS ENDDTIME,
               V_DATE_IN AS JZDATE,
               '0' AS JCZBZ,
               TT.ICCOUNT AS ICCOUNT
          FROM (SELECT T2.ROUTEID, T2.STATIONID, COUNT(T1.CARDNO) AS ICCOUNT
                  FROM JZ_BRTICSTORAGETMP_IC T1, JZ_BRTICSTORAGETMP_BRT T2
                 WHERE T2.CONSUMEDATE - T1.CONSUMEDATE <= 20 / 60 / 24
                   AND T2.CONSUMEDATE >= T1.CONSUMEDATE
                   AND T1.CARDNO = T2.CARDNO
                 GROUP BY T2.ROUTEID, T2.STATIONID) TT;
      COMMIT;
    END LOOP;
    EXECUTE IMMEDIATE 'truncate TABLE JZ_BRTICSTORAGETMP_IC';
    INSERT INTO JZ_BRTICSTORAGETMP_IC
      (CARDNO, CONSUMEDATE)
      SELECT T.CARDNO, T.CONSUMEDATE
        FROM TB_MONTHCONSUMETMP T
       WHERE T.CONSUMEDATE >= V_DATE_IN + (1410 - 20) / 60 / 24
         AND T.CONSUMEDATE < V_DATE_IN + (1440 + 20) / 60 / 24;
    COMMIT;
    EXECUTE IMMEDIATE 'truncate TABLE JZ_BRTICSTORAGETMP_BRT';
    INSERT INTO JZ_BRTICSTORAGETMP_BRT
      (ROUTEID, STATIONID, CARDNO, CONSUMEDATE)
      SELECT '9' || T.XLBHZ AS RUOTEID,
             T.ZDBHZ AS STATIONID,
             SUBSTR(T.KHZZZ, 5) AS CARDNO,
             TO_DATE(T.JYRQZ || T.JYSJZ, 'YYYY-MM-DD HH24:MI:SS') AS CONSUMEDATE
        FROM BRT_JYM1CPUZ_HIS T
       WHERE T.JYRQZ = TO_CHAR(V_DATE_IN, 'YYYYMMDD')
         AND T.JYSJZ >= '233000'
         AND T.JYSJZ < '240000'
         AND T.JCZBZ = '1';
    COMMIT;
    INSERT INTO JZ_BRTICSTORAGETMP
      (RECORDID,
       ROUTEID,
       STATIONID,
       STARTTIME,
       ENDTIME,
       JZDATE,
       JCZBZ,
       ICCOUNT)
      SELECT SEQ_OSEID.NEXTVAL AS RECORDID,
             TT.ROUTEID AS ROUTEID,
             TT.STATIONID AS STATIONID,
             1410 AS STARTTIME,
             1440 AS ENDDTIME,
             V_DATE_IN AS JZDATE,
             '1' AS JCZBZ,
             TT.ICCOUNT AS ICCOUNT
        FROM (SELECT T2.ROUTEID, T2.STATIONID, COUNT(T1.CARDNO) AS ICCOUNT
                FROM JZ_BRTICSTORAGETMP_IC T1, JZ_BRTICSTORAGETMP_BRT T2
               WHERE T1.CONSUMEDATE - T2.CONSUMEDATE <= 20 / 60 / 24
                 AND T1.CONSUMEDATE >= T2.CONSUMEDATE
                 AND T1.CARDNO = T2.CARDNO
               GROUP BY T2.ROUTEID, T2.STATIONID) TT;
    COMMIT;
    EXECUTE IMMEDIATE 'truncate TABLE JZ_BRTICSTORAGETMP_BRT';
    INSERT INTO JZ_BRTICSTORAGETMP_BRT
      (ROUTEID, STATIONID, CARDNO, CONSUMEDATE)
      SELECT '9' || T.XLBHZ AS RUOTEID,
             T.ZDBHZ AS STATIONID,
             SUBSTR(T.KHZZZ, 5) AS CARDNO,
             TO_DATE(T.JYRQZ || T.JYSJZ, 'YYYY-MM-DD HH24:MI:SS') AS CONSUMEDATE
        FROM BRT_JYM1CPUZ_HIS T
       WHERE T.JYRQZ = TO_CHAR(V_DATE_IN, 'YYYYMMDD')
         AND T.JYSJZ >= '233000'
         AND T.JYSJZ < '240000'
         AND T.JCZBZ = '0';
    COMMIT;
    INSERT INTO JZ_BRTICSTORAGETMP
      (RECORDID,
       ROUTEID,
       STATIONID,
       STARTTIME,
       ENDTIME,
       JZDATE,
       JCZBZ,
       ICCOUNT)
      SELECT SEQ_OSEID.NEXTVAL AS RECORDID,
             TT.ROUTEID AS ROUTEID,
             TT.STATIONID AS STATIONID,
             1410 AS STARTTIME,
             1440 AS ENDDTIME,
             V_DATE_IN AS JZDATE,
             '0' AS JCZBZ,
             TT.ICCOUNT AS ICCOUNT
        FROM (SELECT T2.ROUTEID, T2.STATIONID, COUNT(T1.CARDNO) AS ICCOUNT
                FROM JZ_BRTICSTORAGETMP_IC T1, JZ_BRTICSTORAGETMP_BRT T2
               WHERE T2.CONSUMEDATE - T1.CONSUMEDATE <= 20 / 60 / 24
                 AND T2.CONSUMEDATE >= T1.CONSUMEDATE
                 AND T1.CARDNO = T2.CARDNO
               GROUP BY T2.ROUTEID, T2.STATIONID) TT;
    COMMIT;
    UPDATE JZ_BRTICSTORAGE T
       SET T.TRANSHIPINNUM = (SELECT TT.ICCOUNT
                                FROM JZ_BRTICSTORAGETMP TT
                               WHERE T.ROUTEID = TT.ROUTEID
                                 AND TT.STATIONID = T.STATIONID
                                 AND TT.STARTTIME = T.STARTTIME
                                 AND TT.ENDTIME = T.ENDTIME
                                 AND TT.JCZBZ = '0')
     WHERE T.JZDATE = V_DATE_IN
       AND T.DATASAVELEVEL = '3';
    COMMIT;
    DELETE FROM JZ_BRTICSTORAGETMP WHERE JCZBZ = '0';
    COMMIT;
    UPDATE JZ_BRTICSTORAGE T
       SET T.TRANSHIPOUTNUM = (SELECT TT.ICCOUNT
                                 FROM JZ_BRTICSTORAGETMP TT
                                WHERE T.ROUTEID = TT.ROUTEID
                                  AND TT.STATIONID = T.STATIONID
                                  AND TT.STARTTIME = T.STARTTIME
                                  AND TT.ENDTIME = T.ENDTIME
                                  AND TT.JCZBZ = '1')
     WHERE T.JZDATE = V_DATE_IN
       AND T.DATASAVELEVEL = '3';
    COMMIT;
    EXECUTE IMMEDIATE 'TRUNCATE TABLE JZ_BRTICSTORAGETMP';
    COMMIT;
    INSERT INTO JZ_BRTICSTORAGE
      (RECORDID,
       ROUTEID,
       STATIONID,
       STARTTIME,
       ENDTIME,
       JZDATE,
       STAINNUM,
       STAOUTNUM,
       TRANSHIPINNUM,
       TRANSHIPOUTNUM,
       SECTIONNUM,
       DATASAVELEVEL)
      SELECT SEQ_OSEID.NEXTVAL AS RECORDID,
             TT.ROUTEID,
             TT.STATIONID,
             0 AS STARTTIME,
             1440 AS ENDTIME,
             V_DATE_IN AS JZDATE,
             TT.STAINNUM,
             TT.STAOUTNUM,
             TT.TRANSHIPINNUM,
             TT.TRANSHIPOUTNUM,
             TT.SECTIONNUM,
             TT.DATASAVELEVEL
        FROM (SELECT T.ROUTEID,
                     T.STATIONID,
                     SUM(T.STAINNUM) AS STAINNUM,
                     SUM(T.STAOUTNUM) AS STAOUTNUM,
                     SUM(T.TRANSHIPINNUM) AS TRANSHIPINNUM,
                     SUM(T.TRANSHIPOUTNUM) AS TRANSHIPOUTNUM,
                     SUM(T.SECTIONNUM) AS SECTIONNUM,
                     T.DATASAVELEVEL
                FROM JZ_BRTICSTORAGE T
               WHERE T.JZDATE = V_DATE_IN
               GROUP BY T.ROUTEID, T.STATIONID, T.DATASAVELEVEL) TT;
    COMMIT;
    UPDATE JZ_BRTICSTORAGE T
       SET T.STATIONID = (SELECT STA.STATIONID
                            FROM MCRBRTSTATIONINFOGS STA
                           WHERE T.ROUTEID = STA.ROUTEID
                             AND T.STATIONID = STA.BRTSTATIONNO)
     WHERE T.JZDATE = V_DATE_IN;
    WRITE_LOG('TREATE_BRTICSTORAGE', 'BRT刷卡数据结存', V_DATE_IN, '结束');
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('TREATE_BRTICSTORAGE',
                      'BRT刷卡数据结存',
                      V_DATE,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_STATIONCONSUME                                                                    *
  *                                                                                                   *
  *    功能：车辆到站刷卡数据结存                                                                         *
  *                                                                                                   *
  *    作者：HUHUIMIN                                                                                  *
  *    日期：2013-03-30                                                                                *
  ****************************************************************************************/
  PROCEDURE TREATE_STATIONCONSUME(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_STATIONCONSUME',
              '车辆到站数据结存',
              V_DATE_IN,
              '开始');
    --删除已有同日数据
    DELETE FROM JZ_STATIONCONSUME T WHERE T.JZDATE = V_DATE_IN;
    --删除已有同日数据
    --DELETE FROM JZ_BUSARRSTATION T WHERE T.JZDATE = V_DATE_IN;
  
    FOR CUR_ROUTE IN (SELECT ROU.ROUTEID, ROU.ROUTENAME
                        FROM MCROUTEINFOGS ROU
                       ORDER BY LPAD(ROUTENAME, 50, '0')) LOOP
    
      WRITE_LOG('TREATE_STATIONCONSUME',
                '车辆到站数据结存 - ' || CUR_ROUTE.ROUTEID,
                V_DATE_IN,
                '开始');
      EXECUTE IMMEDIATE 'truncate table  BSVCBUSARRLFTLD5_ROU';
      INSERT INTO BSVCBUSARRLFTLD5_ROU
        (ROUTEID,
         STATIONNO,
         ACTDATETIME,
         ROUTENAME,
         BUSID,
         CARDID,
         BUSSELFID,
         GPSMILE,
         ISARRLFT)
        SELECT T.ROUTEID,
               T.STATIONNUM,
               T.ACTDATETIME,
               ROU.ROUTENAME,
               BUS.BUSID,
               BUS.CARDID,
               BUS.BUSSELFID,
               T.GPSMILE,
               T.ISARRLFT
          FROM (SELECT T.ROUTEID,
                       T.STATIONNUM,
                       T.ACTDATETIME,
                       T.PRODUCTID,
                       T.GPSMILE,
                       T.ISARRLFT
                  FROM BSVCBUSARRLFTLD5TEMP T
                 WHERE T.ROUTEID = CUR_ROUTE.ROUTEID) T,
               MCBUSINFOGS BUS,
               MCROUTEINFOGS ROU
         WHERE T.PRODUCTID = BUS.PRODUCTID
           AND T.ROUTEID = ROU.ROUTEID;
      COMMIT;
      UPDATE BSVCBUSARRLFTLD5_ROU T
         SET T.NEXTARRTIME = (SELECT NVL(MIN(T2.ACTDATETIME), V_DATE_IN + 1) AS NEXTARRTIME
                                FROM BSVCBUSARRLFTLD5_ROU T2
                               WHERE T2.BUSID = T.BUSID
                                 AND T2.ISARRLFT = 1
                                 AND T2.ACTDATETIME > T.ACTDATETIME)
       WHERE T.ISARRLFT = '1';
      COMMIT;
    
      /*UPDATE BSVCBUSARRLFTLD5_ROU T
         SET T.LASTARRTIME = (SELECT NVL(MAX(T2.ACTDATETIME), V_DATE_IN) AS LASTARRTIME
                                FROM BSVCBUSARRLFTLD5_ROU T2
                               WHERE T2.BUSID = T.BUSID
                                 AND T2.ISARRLFT = 1
                                 AND T2.ACTDATETIME < T.ACTDATETIME)
       WHERE T.ISARRLFT = '1';
      COMMIT;*/
    
      --到站时间数据结存 开始     
    
      /*INSERT INTO JZ_BUSARRSTATION
        (RECORDID,
         ROUTEID,
         ROUTENAME,
         BUSID,
         STATIONID,
         ARRTIME,
         LEATIME,
         JZDATE,
         GPSMILE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ROUTEID,
               CUR_ROUTE.ROUTENAME AS ROUTENAME,
               TT.BUSID,
               TT.STATIONNO,
               TT.ARRTIME AS ARRTIME,
               TT.LEATIME AS LEATIME,
               V_DATE_IN AS JZDATE,
               TT.GPSMILE
          FROM (SELECT T1.ROUTEID,
                       T1.BUSID,
                       T1.STATIONNO,
                       T1.GPSMILE,
                       T1.ACTDATETIME AS ARRTIME,
                       MIN(T2.ACTDATETIME) AS LEATIME
                  FROM BSVCBUSARRLFTLD5_ROU T1, BSVCBUSARRLFTLD5_ROU T2
                 WHERE T1.ROUTEID = T2.ROUTEID
                   AND T1.BUSID = T2.BUSID
                   AND T1.STATIONNO = T2.STATIONNO
                   AND T1.ISARRLFT = '1'
                   AND T2.ISARRLFT = '2'
                   AND T1.ACTDATETIME < T2.ACTDATETIME
                 GROUP BY T1.ROUTEID,
                          T1.BUSID,
                          T1.STATIONNO,
                          T1.ACTDATETIME,
                          T1.GPSMILE) TT;
      COMMIT;
      
      UPDATE JZ_BUSARRSTATION T
         SET T.CARDID = (SELECT BUS.CARDID
                           FROM MCBUSINFOGS BUS
                          WHERE BUS.BUSID = T.BUSID)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;
      
      UPDATE JZ_BUSARRSTATION T
         SET T.STATIONID = (SELECT STA.STATIONID
                              FROM MCSTATIONINFOGS STA
                             WHERE STA.STATIONNO = T.STATIONID)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;
      
      UPDATE JZ_BUSARRSTATION T
         SET T.STATIONNAME = (SELECT STA.STATIONNAME
                                FROM MCSTATIONINFOGS STA
                               WHERE STA.STATIONID = T.STATIONID)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;*/
    
      /*UPDATE JZ_BUSARRSTATION T
         SET T.FSTLEAVETIME = (SELECT MAX(TT.LEAVETIME)
                                 FROM BZ_BUSRUNRECORDLDTEMP TT
                                WHERE TT.ROUTEID = CUR_ROUTE.ROUTEID
                                  AND TT.RUNDATADATE = V_DATE_IN
                                  AND TT.RECTYPE = 1
                                  AND TT.BUSID = T.BUSID
                                  AND TT.LEAVETIME < T.LEATIME + 5 / 24 / 60)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;
      
      UPDATE JZ_BUSARRSTATION T
         SET T.FSTLEAVETIMEGPS = (SELECT MIN(TT.LEATIME)
                                    FROM JZ_BUSARRSTATION TT
                                   WHERE TT.ROUTEID = CUR_ROUTE.ROUTEID
                                     AND TT.FSTLEAVETIME = T.FSTLEAVETIME
                                     AND TT.BUSID = T.BUSID
                                     AND TT.JZDATE = V_DATE_IN)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;
      
      UPDATE JZ_BUSARRSTATION T
         SET T.TIMEFROMFST = ROUND((T.ARRTIME - T.FSTLEAVETIME) * 24 * 60, 2)
       WHERE T.ROUTEID = CUR_ROUTE.ROUTEID
         AND T.JZDATE = V_DATE_IN;
      COMMIT;*/
    
      --到站时间数据结存结束
    
      UPDATE BSVCBUSARRLFTLD5_ROU T
         SET T.ACTDATETIME = V_DATE_IN
       WHERE T.ACTDATETIME = (SELECT MIN(TT.ACTDATETIME)
                                FROM BSVCBUSARRLFTLD5_ROU TT
                               WHERE TT.BUSID = T.BUSID);
      COMMIT;
      INSERT INTO JZ_STATIONCONSUME
        (RECORDID,
         ROUTEID,
         ROUTENAME,
         BUSID,
         CARDID,
         STATIONNO,
         ARRTIME,
         ICCARDNUM,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T2.ROUTEID,
               T2.ROUTENAME,
               T2.BUSID,
               T2.CARDID,
               T2.STATIONNO,
               T2.ACTDATETIME,
               T2.ICCARDNUM AS ICCARDNUM,
               V_DATE_IN AS JZDATE
          FROM (SELECT T1.ROUTEID,
                       T1.BUSID,
                       T1.CARDID,
                       T1.ROUTENAME,
                       T1.STATIONNO,
                       T1.ACTDATETIME,
                       COUNT(TB.CARDNO) AS ICCARDNUM
                  FROM (SELECT DISTINCT T.*
                          FROM BSVCBUSARRLFTLD5_ROU T
                         WHERE T.ISARRLFT = '1') T1,
                       (SELECT *
                          FROM TB_MONTHCONSUMETMP T
                         WHERE LINENO = CUR_ROUTE.ROUTENAME) TB
                 WHERE TB.CONSUMEDATE <= T1.NEXTARRTIME
                   AND T1.BUSSELFID = TB.BUSNO
                   AND TB.CONSUMEDATE > T1.ACTDATETIME
                 GROUP BY T1.ROUTEID,
                          T1.BUSID,
                          T1.CARDID,
                          T1.ROUTENAME,
                          T1.STATIONNO,
                          T1.ACTDATETIME) T2;
      COMMIT;
      WRITE_LOG('TREATE_STATIONCONSUME',
                '车辆到站数据结存 - ' || CUR_ROUTE.ROUTEID,
                V_DATE_IN,
                '结束');
    END LOOP;
    WRITE_LOG('TREATE_STATIONCONSUME',
              '车辆到站数据结存',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_STATIONCONSUME',
                      '车辆到站数据结存',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /**************************************************************************************
  *    名称：TREATE_HOURPHASEICNUM_PHASE                                                *
  *                                                                                     *
  *    功能：时段刷卡数据结存（年、月结）                                               *
  *                                                                                     *
  *    作者：HUHUIMIN                                                                   *
  *    日期：2013-04-19                                                                 *
  ***************************************************************************************/
  PROCEDURE TREATE_HOURPHASEICNUM_ORG(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_HOURPHASEICNUM_ORG',
              '时段刷卡数据结存-组织',
              V_DATE_IN,
              '开始');
    --删除月结数据
    DELETE FROM JZ_HOURDATASTORAGE T
     WHERE T.JZDATE = V_DATE_IN
       AND T.STORAGEORGTYPE IN ('1', '2', '3')
       AND DATASAVELEVEL = '3';
    --车队
    INSERT INTO JZ_HOURDATASTORAGE
      (RECORDID,
       ORGID,
       STARTTIME,
       ENDTIME,
       ICCOUNT,
       STORAGEORGTYPE,
       DATASAVELEVEL,
       JZDATE)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             TT.ORGID,
             TT.STARTTIME,
             TT.ENDTIME,
             TT.ICCOUNT,
             '3' AS STORAGEORGTYPE,
             '3' AS DATASAVELEVEL,
             V_DATE_IN AS JZDATE
        FROM (SELECT ORG.ORGID,
                     T.STARTTIME,
                     T.ENDTIME,
                     SUM(T.ICCOUNT) AS ICCOUNT
                FROM JZ_HOURDATASTORAGE T, MCROUTEINFOGS ORG
               WHERE T.ROUTEID = ORG.ROUTEID
                 AND T.STORAGEORGTYPE = '4'
                 AND T.DATASAVELEVEL = '3'
                 AND T.JZDATE = V_DATE_IN
               GROUP BY ORG.ORGID, T.STARTTIME, T.ENDTIME) TT;
    --分公司
    INSERT INTO JZ_HOURDATASTORAGE
      (RECORDID,
       ORGID,
       STARTTIME,
       ENDTIME,
       ICCOUNT,
       STORAGEORGTYPE,
       DATASAVELEVEL,
       JZDATE)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             TT.ORGID,
             TT.STARTTIME,
             TT.ENDTIME,
             TT.ICCOUNT,
             '2' AS STORAGEORGTYPE,
             '3' AS DATASAVELEVEL,
             V_DATE_IN AS JZDATE
        FROM (SELECT ORG.PARENTORGID AS ORGID,
                     T.STARTTIME,
                     T.ENDTIME,
                     SUM(T.ICCOUNT) AS ICCOUNT
                FROM JZ_HOURDATASTORAGE T, MCORGINFOGS ORG
               WHERE T.ORGID = ORG.ORGID
                 AND ORG.ORGGRADE = '3'
                 AND T.STORAGEORGTYPE = '3'
                 AND T.DATASAVELEVEL = '3'
                 AND T.JZDATE = V_DATE_IN
               GROUP BY ORG.PARENTORGID, T.STARTTIME, T.ENDTIME) TT;
  
    --总公司
    INSERT INTO JZ_HOURDATASTORAGE
      (RECORDID,
       ORGID,
       STARTTIME,
       ENDTIME,
       ICCOUNT,
       STORAGEORGTYPE,
       DATASAVELEVEL,
       JZDATE)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             TT.ORGID,
             TT.STARTTIME,
             TT.ENDTIME,
             TT.ICCOUNT,
             '1' AS STORAGEORGTYPE,
             '3' AS DATASAVELEVEL,
             V_DATE_IN AS JZDATE
        FROM (SELECT ORG.PARENTORGID AS ORGID,
                     T.STARTTIME,
                     T.ENDTIME,
                     SUM(T.ICCOUNT) AS ICCOUNT
                FROM JZ_HOURDATASTORAGE T, MCORGINFOGS ORG
               WHERE T.ORGID = ORG.ORGID
                 AND ORG.ORGGRADE = '2'
                 AND T.STORAGEORGTYPE = '2'
                 AND T.DATASAVELEVEL = '3'
                 AND T.JZDATE = V_DATE_IN
               GROUP BY ORG.PARENTORGID, T.STARTTIME, T.ENDTIME) TT;
    COMMIT;
    WRITE_LOG('TREATE_HOURPHASEICNUM_ORG',
              '时段刷卡数据结存-组织',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_HOURPHASEICNUM_ORG',
                      '时段刷卡数据结存-组织',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;

  /**************************************************************************************
  *    名称：TREATE_HOURPHASEICNUM_PHASE                                                *
  *                                                                                     *
  *    功能：时段刷卡数据结存（年、月结）                                               *
  *                                                                                     *
  *    作者：HUHUIMIN                                                                   *
  *    日期：2013-04-19                                                                 *
  ***************************************************************************************/
  PROCEDURE TREATE_HOURPHASEICNUM_PHASE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
    V_BEGIN_YEAR  DATE;
    V_END_YEAR    DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    V_BEGIN_YEAR  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                             'YYYY-MM-DD');
    V_END_YEAR    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                        '-01-01',
                                        'YYYY-MM-DD'),
                                12) - 1;
    --月结
    BEGIN
      WRITE_LOG('TREATE_HOURPHASEICNUM_PHASE',
                '时段刷卡数据结存-月结',
                V_DATE_IN,
                '开始');
      --删除月结数据
      DELETE FROM JZ_HOURDATASTORAGE T
       WHERE T.JZDATE <= V_END_MONTH
         AND T.JZDATE >= V_BEGIN_MONTH
         AND DATASAVELEVEL = '2';
      --按线路和站点
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ROUTEID,
         STATIONID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ROUTEID,
               TT.STATIONID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '7' AS STORAGEORGTYPE,
               '2' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ROUTEID,
                       T.STATIONID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '7'
                   AND T.DATASAVELEVEL = '3'
                   AND T.JZDATE BETWEEN V_BEGIN_MONTH AND V_END_MONTH
                 GROUP BY T.ROUTEID, T.STATIONID, T.STARTTIME, T.ENDTIME) TT;
      --按站点
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         STATIONID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.STATIONID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '6' AS STORAGEORGTYPE,
               '2' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.STATIONID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '6'
                   AND T.DATASAVELEVEL = '3'
                   AND T.JZDATE BETWEEN V_BEGIN_MONTH AND V_END_MONTH
                 GROUP BY T.STATIONID, T.STARTTIME, T.ENDTIME) TT;
      --按线路
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ROUTEID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ROUTEID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '4' AS STORAGEORGTYPE,
               '2' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ROUTEID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '4'
                   AND T.DATASAVELEVEL = '3'
                   AND T.JZDATE BETWEEN V_BEGIN_MONTH AND V_END_MONTH
                 GROUP BY T.ROUTEID, T.STARTTIME, T.ENDTIME) TT;
      --车队
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ORGID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ORGID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '3' AS STORAGEORGTYPE,
               '2' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ORGID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '3'
                   AND T.DATASAVELEVEL = '3'
                   AND T.JZDATE BETWEEN V_BEGIN_MONTH AND V_END_MONTH
                 GROUP BY T.ORGID, T.STARTTIME, T.ENDTIME) TT;
      --分公司
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ORGID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ORGID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '2' AS STORAGEORGTYPE,
               '2' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ORGID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '2'
                   AND T.DATASAVELEVEL = '3'
                   AND T.JZDATE BETWEEN V_BEGIN_MONTH AND V_END_MONTH
                 GROUP BY T.ORGID, T.STARTTIME, T.ENDTIME) TT;
      --总公司
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ORGID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ORGID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '1' AS STORAGEORGTYPE,
               '2' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ORGID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '1'
                   AND T.DATASAVELEVEL = '3'
                   AND T.JZDATE BETWEEN V_BEGIN_MONTH AND V_END_MONTH
                 GROUP BY T.ORGID, T.STARTTIME, T.ENDTIME) TT;
      COMMIT;
      WRITE_LOG('TREATE_HOURPHASEICNUM_PHASE',
                '时段刷卡数据结存-月结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_HOURPHASEICNUM_PHASE',
                        '时段刷卡数据结存-月结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
    --年结
    BEGIN
      WRITE_LOG('TREATE_HOURPHASEICNUM_PHASE',
                '时段刷卡数据结存-年结',
                V_DATE_IN,
                '开始');
      --删除年结数据
      DELETE FROM JZ_HOURDATASTORAGE T
       WHERE T.JZDATE <= V_END_YEAR
         AND T.JZDATE >= V_BEGIN_YEAR
         AND DATASAVELEVEL = '1';
      --按线路和站点
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ROUTEID,
         STATIONID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ROUTEID,
               TT.STATIONID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '7' AS STORAGEORGTYPE,
               '1' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ROUTEID,
                       T.STATIONID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '7'
                   AND T.DATASAVELEVEL = '2'
                   AND T.JZDATE BETWEEN V_BEGIN_YEAR AND V_END_YEAR
                 GROUP BY T.ROUTEID, T.STATIONID, T.STARTTIME, T.ENDTIME) TT;
      --按站点
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         STATIONID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.STATIONID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '6' AS STORAGEORGTYPE,
               '1' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.STATIONID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '6'
                   AND T.DATASAVELEVEL = '2'
                   AND T.JZDATE BETWEEN V_BEGIN_YEAR AND V_END_YEAR
                 GROUP BY T.STATIONID, T.STARTTIME, T.ENDTIME) TT;
      --按线路
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ROUTEID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ROUTEID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '4' AS STORAGEORGTYPE,
               '1' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ROUTEID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '4'
                   AND T.DATASAVELEVEL = '2'
                   AND T.JZDATE BETWEEN V_BEGIN_YEAR AND V_END_YEAR
                 GROUP BY T.ROUTEID, T.STARTTIME, T.ENDTIME) TT;
      --车队
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ORGID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ORGID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '3' AS STORAGEORGTYPE,
               '1' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ORGID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '3'
                   AND T.DATASAVELEVEL = '2'
                   AND T.JZDATE BETWEEN V_BEGIN_YEAR AND V_END_YEAR
                 GROUP BY T.ORGID, T.STARTTIME, T.ENDTIME) TT;
      --分公司
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ORGID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ORGID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '2' AS STORAGEORGTYPE,
               '1' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ORGID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '2'
                   AND T.DATASAVELEVEL = '2'
                   AND T.JZDATE BETWEEN V_BEGIN_YEAR AND V_END_YEAR
                 GROUP BY T.ORGID, T.STARTTIME, T.ENDTIME) TT;
      --总公司
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ORGID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ORGID,
               TT.STARTTIME,
               TT.ENDTIME,
               TT.ICCOUNT,
               '1' AS STORAGEORGTYPE,
               '1' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ORGID,
                       T.STARTTIME,
                       T.ENDTIME,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '1'
                   AND T.DATASAVELEVEL = '2'
                   AND T.JZDATE BETWEEN V_BEGIN_YEAR AND V_END_YEAR
                 GROUP BY T.ORGID, T.STARTTIME, T.ENDTIME) TT;
      COMMIT;
      WRITE_LOG('TREATE_HOURPHASEICNUM_PHASE',
                '时段刷卡数据结存-年结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_HOURPHASEICNUM_PHASE',
                        '时段刷卡数据结存-年结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
  END;

  /***************************************************************************************
  *    名称：TREATE_HOURPHASEICNUM                                                       *
  *                                                                                      *
  *    功能：时段刷卡数据结存                                                             *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                    *
  *    日期：2013-04-18                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_HOURPHASEICNUM(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_HOURPHASEICNUM',
              '时段刷卡数据结存',
              V_DATE_IN,
              '开始');
    --按线路和站点
    BEGIN
      DELETE FROM JZ_HOURDATASTORAGE T
       WHERE T.JZDATE = V_DATE_IN
         AND T.STORAGEORGTYPE = '7'
         AND T.DATASAVELEVEL = '3';
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ROUTEID,
         STATIONID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ROUTEID,
               T.STATIONID,
               T.MINNUM,
               T.MAXNUM,
               T.ICCOUNT,
               '7' AS STORAGEORGTYPE,
               '3' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ROUTEID,
                       STA.STATIONID,
                       SCAL.MINNUM,
                       SCAL.MAXNUM,
                       SUM(T.ICCARDNUM) AS ICCOUNT
                  FROM JZ_STATIONCONSUME   T,
                       SYS_CALCULATECONFIG SCAL,
                       MCSTATIONINFOGS     STA
                 WHERE T.STATIONNO = STA.STATIONNO
                   AND T.ARRTIME >= V_DATE_IN + SCAL.MINNUM / 60 / 24
                   AND T.ARRTIME < V_DATE_IN + SCAL.MAXNUM / 60 / 24
                   AND SCAL.CONFIGNAME = 'HALFHOUR'
                   AND T.JZDATE = V_DATE_IN
                 GROUP BY T.ROUTEID, STA.STATIONID, SCAL.MINNUM, SCAL.MAXNUM) T;
      COMMIT;
    END;
    --按站点
    BEGIN
      DELETE FROM JZ_HOURDATASTORAGE T
       WHERE T.JZDATE = V_DATE_IN
         AND T.STORAGEORGTYPE = '6'
         AND T.DATASAVELEVEL = '3';
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         STATIONID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.STATIONID,
               T.STARTTIME,
               T.ENDTIME,
               T.ICCOUNT,
               '6' AS STORAGEORGTYPE,
               '3' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.STATIONID,
                       T.STARTTIME,
                       T.ENDTIME,
                       T.JZDATE,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '7'
                   AND T.DATASAVELEVEL = '3'
                   AND T.JZDATE = V_DATE_IN
                 GROUP BY T.STATIONID, T.STARTTIME, T.ENDTIME, T.JZDATE) T;
      COMMIT;
    END;
    --按线路
    BEGIN
      DELETE FROM JZ_HOURDATASTORAGE T
       WHERE T.JZDATE = V_DATE_IN
         AND T.STORAGEORGTYPE = '4'
         AND T.DATASAVELEVEL = '3';
      INSERT INTO JZ_HOURDATASTORAGE
        (RECORDID,
         ROUTEID,
         STARTTIME,
         ENDTIME,
         ICCOUNT,
         STORAGEORGTYPE,
         DATASAVELEVEL,
         JZDATE)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ROUTEID,
               T.STARTTIME,
               T.ENDTIME,
               T.ICCOUNT,
               '4' AS STORAGEORGTYPE,
               '3' AS DATASAVELEVEL,
               V_DATE_IN AS JZDATE
          FROM (SELECT T.ROUTEID,
                       T.STARTTIME,
                       T.ENDTIME,
                       T.JZDATE,
                       SUM(T.ICCOUNT) AS ICCOUNT
                  FROM JZ_HOURDATASTORAGE T
                 WHERE T.STORAGEORGTYPE = '7'
                   AND T.DATASAVELEVEL = '3'
                   AND T.JZDATE = V_DATE_IN
                 GROUP BY T.ROUTEID, T.STARTTIME, T.ENDTIME, T.JZDATE) T;
      COMMIT;
      UPDATE JZ_HOURDATASTORAGE T
         SET T.LOADCONFIG = (SELECT LOADCONFIG.STANDCOUNT +
                                    LOADCONFIG.SEATCOUNT
                               FROM (SELECT T.ROUTEID,
                                            SCAL.MINNUM,
                                            SCAL.MAXNUM,
                                            SUM(NVL(BUS.STANDCOUNT, 64)) AS STANDCOUNT,
                                            SUM(NVL(BUS.SEATCOUNT, 30)) AS SEATCOUNT
                                       FROM BZ_BUSRUNRECORDLD   T,
                                            MCBUSINFOGS         BUS,
                                            SYS_CALCULATECONFIG SCAL
                                      WHERE T.BUSID = BUS.BUSID(+)
                                        AND T.RUNDATADATE >=
                                            V_DATE_IN - 4 / 24
                                        AND T.RUNDATADATE < V_DATE_IN + 4 / 24
                                        AND ((T.LEAVETIME >=
                                            V_DATE_IN +
                                            SCAL.MINNUM / 60 / 24 AND
                                            T.LEAVETIME <
                                            V_DATE_IN +
                                            SCAL.MAXNUM / 60 / 24) OR
                                            (T.ARRIVETIME >=
                                            V_DATE_IN +
                                            SCAL.MINNUM / 60 / 24 AND
                                            T.ARRIVETIME <
                                            V_DATE_IN +
                                            SCAL.MAXNUM / 60 / 24))
                                        AND SCAL.CONFIGNAME = 'HALFHOUR'
                                      GROUP BY T.ROUTEID,
                                               SCAL.MINNUM,
                                               SCAL.MAXNUM
                                      ORDER BY T.ROUTEID,
                                               SCAL.MINNUM,
                                               SCAL.MAXNUM) LOADCONFIG
                              WHERE T.ROUTEID = LOADCONFIG.ROUTEID
                                AND T.JZDATE = V_DATE_IN
                                AND T.STARTTIME = LOADCONFIG.MINNUM
                                AND T.ENDTIME = LOADCONFIG.MAXNUM)
       WHERE T.JZDATE = V_DATE_IN
         AND T.DATASAVELEVEL = '3'
         AND T.STORAGEORGTYPE = '4';
      COMMIT;
      UPDATE JZ_HOURDATASTORAGE T
         SET T.BUSCOUNT = (SELECT BUSCOUNT
                             FROM (SELECT T.ROUTEID,
                                          SCAL.MINNUM,
                                          SCAL.MAXNUM,
                                          COUNT(T.BUSID) AS BUSCOUNT
                                     FROM BZ_BUSRUNRECORDLD   T,
                                          SYS_CALCULATECONFIG SCAL
                                    WHERE T.RUNDATADATE >= V_DATE_IN - 4 / 24
                                      AND T.RUNDATADATE < V_DATE_IN + 4 / 24
                                      AND ((T.LEAVETIME >=
                                          V_DATE_IN + SCAL.MINNUM / 60 / 24 AND
                                          T.LEAVETIME <
                                          V_DATE_IN + SCAL.MAXNUM / 60 / 24) OR
                                          (T.ARRIVETIME >=
                                          V_DATE_IN + SCAL.MINNUM / 60 / 24 AND
                                          T.ARRIVETIME <
                                          V_DATE_IN + SCAL.MAXNUM / 60 / 24))
                                      AND SCAL.CONFIGNAME = 'HALFHOUR'
                                    GROUP BY T.ROUTEID,
                                             SCAL.MINNUM,
                                             SCAL.MAXNUM
                                    ORDER BY T.ROUTEID,
                                             SCAL.MINNUM,
                                             SCAL.MAXNUM) LOADCONFIG
                            WHERE T.ROUTEID = LOADCONFIG.ROUTEID
                              AND T.JZDATE = V_DATE_IN
                              AND T.STARTTIME = LOADCONFIG.MINNUM
                              AND T.ENDTIME = LOADCONFIG.MAXNUM)
       WHERE T.JZDATE = V_DATE_IN
         AND T.DATASAVELEVEL = '3'
         AND T.STORAGEORGTYPE = '4';
      COMMIT;
    END;
    TREATE_HOURPHASEICNUM_PHASE(V_DATE_IN);
    TREATE_HOURPHASEICNUM_ORG(V_DATE_IN);
    WRITE_LOG('TREATE_HOURPHASEICNUM',
              '时段刷卡数据结存',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_HOURPHASEICNUM',
                      '时段刷卡数据结存',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_FSTANDLSTCONSUME                                                     *
  *                                                                                      *
  *    功能：首末班刷卡数据结存                                                          *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                    *
  *    日期：2013-03-01                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_FSTANDLSTCONSUME(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    BEGIN
      WRITE_LOG('TREATE_FSTANDLSTCONSUME',
                '首班刷卡数据结存',
                V_DATE_IN,
                '开始');
      DELETE FROM JZ_FSTANDLSTCONSUME
       WHERE JZDATE = V_DATE_IN
         AND FSTORLST = '1';
      COMMIT;
      INSERT INTO JZ_FSTANDLSTCONSUME
        (RECORDID,
         ROUTEID,
         SEGMENTID,
         BUSID,
         JZDATE,
         LEAVETIME,
         ARRIVETIME,
         FSTORLST,
         SHIFTNUM,
         CARDCOUNT)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ROUTEID,
               TT.SEGMENTID,
               TT.BUSID,
               V_DATE_IN AS JZDATE,
               TT.LEAVETIME,
               TT.ARRIVETIME,
               '1' AS FSTORLST,
               '1' AS SHIFTNUM,
               TT.CARDCOUNT
          FROM (SELECT ROU.ROUTEID,
                       ROU.SEGMENTID,
                       ROU.BUSID,
                       V_DATE_IN AS JZDATE,
                       ROU.LEAVETIME,
                       ROU.ARRIVETIME,
                       COUNT(TB.CARDNO) AS CARDCOUNT
                  FROM (SELECT T.ROUTEID,
                               T.SEGMENTID,
                               BUS.BUSID,
                               BUS.BUSSELFID AS BUSNO,
                               T.LEAVETIME,
                               T.ARRIVETIME
                          FROM (SELECT ROUTEID,
                                       SEGMENTID,
                                       BUSID,
                                       LEAVETIME,
                                       ARRIVETIME,
                                       ROW_NUMBER() OVER(PARTITION BY ROUTEID, SEGMENTID ORDER BY LEAVETIME) LEV
                                  FROM BZ_BUSRUNRECORDLD
                                 WHERE 1 = 1
                                   AND RUNDATADATE = V_DATE_IN
                                   AND RECTYPE = '1') T,
                               MCBUSINFOGS BUS
                         WHERE T.BUSID = BUS.BUSID
                           AND T.LEV = 1) ROU,
                       TB_MONTHCONSUMETMP TB
                 WHERE 1 = 1
                   AND TB.CONSUMEDATE >= TRUNC(ROU.LEAVETIME)
                   AND TB.CONSUMEDATE <= ROU.ARRIVETIME
                   AND TB.BUSNO = ROU.BUSNO
                 GROUP BY ROU.ROUTEID,
                          ROU.SEGMENTID,
                          ROU.BUSID,
                          ROU.LEAVETIME,
                          ROU.ARRIVETIME) TT;
      COMMIT;
      WRITE_LOG('TREATE_FSTANDLSTCONSUME',
                '首班刷卡数据结存',
                V_DATE_IN,
                '结束');
    END;
    BEGIN
      WRITE_LOG('TREATE_FSTANDLSTCONSUME',
                '末班刷卡数据结存',
                V_DATE_IN,
                '开始');
      DELETE FROM JZ_FSTANDLSTCONSUME
       WHERE JZDATE = V_DATE_IN
         AND FSTORLST = '2';
      COMMIT;
      INSERT INTO JZ_FSTANDLSTCONSUME
        (RECORDID,
         ROUTEID,
         SEGMENTID,
         BUSID,
         JZDATE,
         LEAVETIME,
         ARRIVETIME,
         FSTORLST,
         SHIFTNUM,
         CARDCOUNT)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               TT.ROUTEID,
               TT.SEGMENTID,
               TT.BUSID,
               V_DATE_IN AS JZDATE,
               TT.LEAVETIME,
               TT.ARRIVETIME,
               '2' AS FSTORLST,
               '1' AS SHIFTNUM,
               TT.CARDCOUNT
          FROM (SELECT ROU.ROUTEID,
                       ROU.SEGMENTID,
                       ROU.BUSID,
                       V_DATE_IN AS JZDATE,
                       ROU.LEAVETIME,
                       ROU.ARRIVETIME,
                       COUNT(TB.CARDNO) AS CARDCOUNT
                  FROM (SELECT T.ROUTEID,
                               T.SEGMENTID,
                               BUS.BUSID,
                               BUS.BUSSELFID AS BUSNO,
                               T.LEAVETIME,
                               T.ARRIVETIME
                          FROM (SELECT ROUTEID,
                                       SEGMENTID,
                                       BUSID,
                                       LEAVETIME,
                                       ARRIVETIME,
                                       ROW_NUMBER() OVER(PARTITION BY ROUTEID, SEGMENTID ORDER BY LEAVETIME DESC) LEV
                                  FROM BZ_BUSRUNRECORDLD
                                 WHERE 1 = 1
                                   AND RUNDATADATE = V_DATE_IN
                                   AND RECTYPE = '1') T,
                               MCBUSINFOGS BUS
                         WHERE T.BUSID = BUS.BUSID
                           AND T.LEV = 1) ROU,
                       TB_MONTHCONSUMETMP TB
                 WHERE 1 = 1
                   AND TB.CONSUMEDATE >= ROU.LEAVETIME
                   AND TB.CONSUMEDATE <= TRUNC(ROU.ARRIVETIME) + 1
                   AND TB.BUSNO = ROU.BUSNO
                 GROUP BY ROU.ROUTEID,
                          ROU.SEGMENTID,
                          ROU.BUSID,
                          ROU.LEAVETIME,
                          ROU.ARRIVETIME) TT;
      COMMIT;
      WRITE_LOG('TREATE_FSTANDLSTCONSUME',
                '末班刷卡数据结存',
                V_DATE_IN,
                '结束');
    END;
  END;
  PROCEDURE TREATE_FSTANDLST(V_DATESTART DATE, V_DATEEND DATE) AS
    V_DATE DATE;
  BEGIN
    V_DATE := TRUNC(V_DATESTART);
    WHILE (V_DATE <= V_DATEEND) LOOP
      P_IMPORT_MONTHCONSUME(V_DATE);
      TREATE_FSTANDLSTCONSUME(V_DATE);
      V_DATE := V_DATE + 1;
    END LOOP;
  END;
END PKG_OSE_GPSICDATA;
/

prompt
prompt Creating package body PKG_OSE_ONHOUR
prompt ====================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_ONHOUR IS

  /***************************************************************************************
  *    名称：WRITE_LOG                                                                   *
  *                                                                                      *
  *    功能：写入日志                                                                    *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2,
                      func_desc     VARCHAR2,
                      v_date        DATE,
                      loginfo       VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := SUBSTR(loginfo, 1, 250);
    INSERT INTO sys_jzlog
      (ID, procedurename, funcdesc, successflag, execdate, recdate, memos)
    VALUES
      (s_log.nextval,
       procedurename,
       func_desc,
       '1',
       v_date,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /****************************************************************************************
  *    名称：WRITE_EXCEPTION                                                           *
  *                                                                                      *
  *    功能：写入异常日志                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_EXCEPTION(PROCEDURENAME VARCHAR2,
                            func_desc     VARCHAR2,
                            v_date        DATE,
                            ERRORCODE     NUMBER,
                            ERRORTEXT     VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := ERRORCODE || '-' || SUBSTR(ERRORTEXT, 1, 200);
    INSERT INTO sys_jzlog
      (ID, procedurename, funcdesc, successflag, execdate, recdate, memos)
    VALUES
      (s_log.nextval,
       procedurename,
       func_desc,
       '0',
       v_date,
       SYSDATE,
       V_INFO);

    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /****************************************************************************************
  *    名称：load_stand                                                                   *
  *                                                                                       *
  *    功能：加载标准                                                                     *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2012-01-08                                                                   *
  ****************************************************************************************/
  PROCEDURE Load_Stand(v_date IN DATE) IS
    v_date_in DATE;
    v_flag    CHAR(1);

    CURSOR cur_stand(date_in DATE) IS
      SELECT t.routeid,
             t.subrouteid,
             t.segmentid,
             t.starttime,
             t.endtime,
             d.dualserialid,
             d.stationid,
             d.alstationtype,
             d.onhourtime,
             d.offsetpos,
             d.offsetneg,
             d.rowid AS ROWID2
        FROM mconhourstand t, mconhourstanddetail d
       WHERE t.onhourstandid = d.onhourstandid
         AND date_in BETWEEN t.startdate AND t.enddate;

    CURSOR cur_stand2(date_in DATE) IS
      SELECT t.routeid,
             t.subrouteid,
             t.segmentid,
             0 starttime,
             24 endtime,
             t.dualserialid,
             t.sngserialid,
             t.stationid,
             decode(t.sngserialid, 1, '2', '1') alstationtype,
             round(DECODE(nvl(t2.stcount, 0),
                          0,
                          0,
                          seg.sngtime / nvl(t2.stcount, 0)) *
                   (t.sngserialid - 1),
                   0) onhourtime,
             1 AS offsetpos,
             1 AS offsetneg,
             t.routeid || '_' || t.subrouteid || '_' || t.segmentid || '_' ||
             ROWNUM AS ROWID2,
             seg.sngtime
        FROM mcrsegmentstationgs t,
             mcsegmentinfogs seg,
             (SELECT s.routeid, s.subrouteid, s.segmentid, COUNT(*) stcount
                FROM mcrsegmentstationgs s
               GROUP BY s.routeid, s.subrouteid, s.segmentid) t2
       WHERE t.routeid = seg.routeid
         AND t.subrouteid = seg.subrouteid
         AND t.segmentid = seg.segmentid
         AND t.routeid = t2.routeid
         AND t.subrouteid = t2.subrouteid
         AND t.segmentid = t2.segmentid
      --AND t.routeid = 1
       ORDER BY routeid, subrouteid, segmentid, sngserialid;

    v_onhour_stand onhour_stand;
  BEGIN
    v_date_in := trunc(v_date);
    v_flag    := '0';

    g_onhour_stand_list.DELETE;

    FOR cur_rec IN cur_stand(v_date_in) LOOP
      v_onhour_stand.route_id    := cur_rec.routeid;
      v_onhour_stand.subroute_id := cur_rec.subrouteid;
      v_onhour_stand.segment_id  := cur_rec.segmentid;
      v_onhour_stand.start_time  := cur_rec.starttime;
      v_onhour_stand.end_time    := cur_rec.endtime;

      v_onhour_stand.starttime := v_date_in + cur_rec.starttime;
      v_onhour_stand.endtime   := v_date_in + cur_rec.endtime;

      v_onhour_stand.dualserial_id  := cur_rec.dualserialid;
      v_onhour_stand.station_id     := cur_rec.stationid;
      v_onhour_stand.alstation_type := cur_rec.alstationtype;
      v_onhour_stand.onhour_time    := cur_rec.onhourtime;
      v_onhour_stand.offset_pos     := cur_rec.offsetpos;
      v_onhour_stand.offset_neg     := cur_rec.offsetneg;
      v_onhour_stand.row_id         := cur_rec.rowid2;

      g_onhour_stand_list(v_onhour_stand.row_id) := v_onhour_stand;

      v_flag := '1';

    END LOOP;

    IF (v_flag = '0') THEN
      FOR cur_rec IN cur_stand2(v_date_in) LOOP
        v_onhour_stand.route_id    := cur_rec.routeid;
        v_onhour_stand.subroute_id := cur_rec.subrouteid;
        v_onhour_stand.segment_id  := cur_rec.segmentid;
        v_onhour_stand.start_time  := cur_rec.starttime;
        v_onhour_stand.end_time    := cur_rec.endtime;

        v_onhour_stand.starttime := v_date_in + cur_rec.starttime;
        v_onhour_stand.endtime   := v_date_in + cur_rec.endtime;

        v_onhour_stand.dualserial_id  := cur_rec.dualserialid;
        v_onhour_stand.station_id     := cur_rec.stationid;
        v_onhour_stand.alstation_type := cur_rec.alstationtype;
        v_onhour_stand.onhour_time    := cur_rec.onhourtime;
        v_onhour_stand.offset_pos     := cur_rec.offsetpos;
        v_onhour_stand.offset_neg     := cur_rec.offsetneg;
        v_onhour_stand.row_id         := cur_rec.rowid2;

        g_onhour_stand_list(v_onhour_stand.row_id) := v_onhour_stand;
      END LOOP;
    END IF;
  END;
  PROCEDURE Load_Stand(v_routeid VARCHAR2, v_date IN DATE) IS
    v_date_in DATE;
    v_flag    CHAR(1);

    CURSOR cur_stand(route_id VARCHAR2, date_in DATE) IS
      SELECT t.routeid,
             t.subrouteid,
             t.segmentid,
             t.starttime,
             t.endtime,
             d.dualserialid,
             d.stationid,
             d.alstationtype,
             d.onhourtime,
             d.offsetpos,
             d.offsetneg,
             d.rowid AS ROWID2
        FROM mconhourstand t, mconhourstanddetail d
       WHERE t.onhourstandid = d.onhourstandid
         AND t.routeid = route_id
         AND date_in BETWEEN t.startdate AND t.enddate;

    CURSOR cur_stand2(route_id VARCHAR2, date_in DATE) IS
      SELECT t.routeid,
             t.subrouteid,
             t.segmentid,
             0 starttime,
             24 endtime,
             t.dualserialid,
             t.sngserialid,
             t.stationid,
             decode(t.sngserialid, 1, '2', '1') alstationtype,
             round(DECODE(nvl(t2.stcount, 0),
                          0,
                          0,
                          seg.sngtime / nvl(t2.stcount, 0)) *
                   (t.sngserialid - 1),
                   0) onhourtime,
             1 AS offsetpos,
             1 AS offsetneg,
             t.routeid || '_' || t.subrouteid || '_' || t.segmentid || '_' ||
             ROWNUM AS ROWID2,
             seg.sngtime
        FROM mcrsegmentstationgs t,
             mcsegmentinfogs seg,
             (SELECT s.routeid, s.subrouteid, s.segmentid, COUNT(*) stcount
                FROM mcrsegmentstationgs s
               GROUP BY s.routeid, s.subrouteid, s.segmentid) t2
       WHERE t.routeid = route_id
         AND t.routeid = seg.routeid
         AND t.subrouteid = seg.subrouteid
         AND t.segmentid = seg.segmentid
         AND t.routeid = t2.routeid
         AND t.subrouteid = t2.subrouteid
         AND t.segmentid = t2.segmentid
      --AND t.routeid = 1
       ORDER BY routeid, subrouteid, segmentid, sngserialid;

    v_onhour_stand onhour_stand;
  BEGIN
    v_date_in := trunc(v_date);
    v_flag    := '0';

    g_onhour_stand_list.DELETE;

    FOR cur_rec IN cur_stand(v_routeid, v_date_in) LOOP
      v_onhour_stand.route_id    := cur_rec.routeid;
      v_onhour_stand.subroute_id := cur_rec.subrouteid;
      v_onhour_stand.segment_id  := cur_rec.segmentid;
      v_onhour_stand.start_time  := cur_rec.starttime;
      v_onhour_stand.end_time    := cur_rec.endtime;

      v_onhour_stand.starttime := v_date_in + cur_rec.starttime;
      v_onhour_stand.endtime   := v_date_in + cur_rec.endtime;

      v_onhour_stand.dualserial_id  := cur_rec.dualserialid;
      v_onhour_stand.station_id     := cur_rec.stationid;
      v_onhour_stand.alstation_type := cur_rec.alstationtype;
      v_onhour_stand.onhour_time    := cur_rec.onhourtime;
      v_onhour_stand.offset_pos     := cur_rec.offsetpos;
      v_onhour_stand.offset_neg     := cur_rec.offsetneg;
      v_onhour_stand.row_id         := cur_rec.rowid2;

      g_onhour_stand_list(v_onhour_stand.row_id) := v_onhour_stand;

      v_flag := '1';

    END LOOP;

    IF (v_flag = '0') THEN
      FOR cur_rec IN cur_stand2(v_routeid, v_date_in) LOOP
        v_onhour_stand.route_id    := cur_rec.routeid;
        v_onhour_stand.subroute_id := cur_rec.subrouteid;
        v_onhour_stand.segment_id  := cur_rec.segmentid;
        v_onhour_stand.start_time  := cur_rec.starttime;
        v_onhour_stand.end_time    := cur_rec.endtime;

        v_onhour_stand.starttime := v_date_in + cur_rec.starttime;
        v_onhour_stand.endtime   := v_date_in + cur_rec.endtime;

        v_onhour_stand.dualserial_id  := cur_rec.dualserialid;
        v_onhour_stand.station_id     := cur_rec.stationid;
        v_onhour_stand.alstation_type := cur_rec.alstationtype;
        v_onhour_stand.onhour_time    := cur_rec.onhourtime;
        v_onhour_stand.offset_pos     := cur_rec.offsetpos;
        v_onhour_stand.offset_neg     := cur_rec.offsetneg;
        v_onhour_stand.row_id         := cur_rec.rowid2;

        g_onhour_stand_list(v_onhour_stand.row_id) := v_onhour_stand;
      END LOOP;
    END IF;
  END;

  /****************************************************************************************
  *    名称：load_stand                                                                   *
  *                                                                                       *
  *    功能：加载标准                                                                     *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2012-01-08                                                                   *
  ****************************************************************************************/
  PROCEDURE Find_Stand(v_time                IN DATE,
                       v_onhour_stand_detail IN OUT onhour_stand_detail) IS
    v_id           VARCHAR2(60);
    v_onhour_stand onhour_stand;
    v_time_i       DATE;
  BEGIN
    v_time_i := v_time;
    v_id     := g_onhour_stand_list.FIRST;

    WHILE v_id IS NOT NULL AND g_onhour_stand_list.EXISTS(v_id) LOOP
      v_onhour_stand := g_onhour_stand_list(v_id);

      IF v_onhour_stand_detail.route_id = v_onhour_stand.route_id AND
         v_onhour_stand_detail.subroute_id = v_onhour_stand.subroute_id AND
         v_onhour_stand_detail.dualserial_id = v_onhour_stand.dualserial_id AND
         v_time_i BETWEEN v_onhour_stand.starttime AND
         v_onhour_stand.endtime THEN

        v_onhour_stand_detail.onhour_time    := v_onhour_stand.onhour_time;
        v_onhour_stand_detail.offset_pos     := v_onhour_stand.offset_pos;
        v_onhour_stand_detail.offset_neg     := v_onhour_stand.offset_neg;
        v_onhour_stand_detail.alstation_type := v_onhour_stand.alstation_type;

        RETURN;
      END IF;
      v_id := g_onhour_stand_list.NEXT(v_id);
    END LOOP;

  END;
  /****************************************************************************************
  *    名称：load_sequence                                                                *
  *                                                                                       *
  *    功能：加载标准                                                                     *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2012-01-08                                                                   *
  ****************************************************************************************/
  PROCEDURE Load_Sequence(v_date DATE) IS
    v_date_in DATE;
    CURSOR cur_seq(date_in DATE) IS
      SELECT t.routeid,
             t.subrouteid,
             t.segmentid,
             t.busid,
             t.startstationid,
             t.endstationid,
             s1.dualserialid  stationseqnum1,
             s2.dualserialid  stationseqnum2,
             t.leavetime      leavetime,
             t.arrivetime     arrivetime,
             t.leavetime      realleavetime,
             t.arrivetime     realarrivetime,
             m.productid,
             t.rowid,
             t.driverid, --QS 20090901
             t.busrrid --QS 20090904
        FROM bz_busrunrecordld t,
             mcbusinfogs       m,
             mcrsegmentstationgs  s1,
             mcrsegmentstationgs  s2
       WHERE t.busid = m.busid(+)
         AND t.rundatadate = date_in
            --AND t.isactive = '1'
         AND t.startstationid = s1.stationid
         AND t.routeid = s1.routeid
         AND t.subrouteid = s1.subrouteid
         AND t.segmentid = s1.segmentid
         AND t.endstationid = s2.stationid
         AND t.routeid = s2.routeid
         AND t.subrouteid = s2.subrouteid
         AND t.segmentid = s2.segmentid
         AND t.rectype = '1'
       ORDER BY t.routeid, t.busid, t.leavetime;

    v_sequence_info sequence_info;

  BEGIN
    v_date_in := trunc(v_date);
    g_sequence_list.DELETE;
    FOR cur_rec IN cur_seq(v_date_in) LOOP
      v_sequence_info.route_id         := cur_rec.routeid;
      v_sequence_info.subroute_id      := cur_rec.subrouteid;
      v_sequence_info.segment_id       := cur_rec.segmentid;
      v_sequence_info.bus_id           := cur_rec.busid;
      v_sequence_info.product_id       := cur_rec.productid;
      v_sequence_info.startstation_id  := cur_rec.startstationid;
      v_sequence_info.endstation_id    := cur_rec.endstationid;
      v_sequence_info.leave_time       := cur_rec.leavetime;
      v_sequence_info.arrive_time      := cur_rec.arrivetime;
      v_sequence_info.real_leave_time  := cur_rec.realleavetime;
      v_sequence_info.real_arrive_time := cur_rec.realarrivetime;
      v_sequence_info.row_id           := cur_rec.rowid;
      v_sequence_info.startstation_seq := cur_rec.stationseqnum1;
      v_sequence_info.endstation_seq   := cur_rec.stationseqnum2;
      v_sequence_info.driver_id        := cur_rec.driverid;
      v_sequence_info.busrr_id         := cur_rec.busrrid;

      g_sequence_list(v_sequence_info.row_id) := v_sequence_info;

    END LOOP;
  END;

  PROCEDURE Load_Sequence(v_routeid VARCHAR2, v_date DATE) IS
    v_date_in DATE;
    CURSOR cur_seq(route_id VARCHAR2, date_in DATE) IS
      SELECT t.routeid,
             t.subrouteid,
             t.segmentid,
             t.busid,
             t.startstationid,
             t.endstationid,
             s1.dualserialid  stationseqnum1,
             s2.dualserialid  stationseqnum2,
             t.leavetime      leavetime,
             t.arrivetime     arrivetime,
             t.leavetime      realleavetime,
             t.arrivetime     realarrivetime,
             m.productid,
             t.rowid,
             t.driverid,
             t.busrrid
        FROM bz_busrunrecordld t,
             mcbusinfogs       m,
             mcrsegmentstationgs  s1,
             mcrsegmentstationgs  s2
       WHERE t.routeid = route_id
         AND t.busid = m.busid(+)
         AND t.rundatadate = date_in
            --AND t.isactive = '1'
         AND t.startstationid = s1.stationid
         AND t.routeid = s1.routeid
         AND t.subrouteid = s1.subrouteid
         AND t.segmentid = s1.segmentid
         AND t.endstationid = s2.stationid
         AND t.routeid = s2.routeid
         AND t.subrouteid = s2.subrouteid
         AND t.segmentid = s2.segmentid
         AND t.rectype = '1'
       ORDER BY t.routeid, t.busid, t.leavetime;

    v_sequence_info sequence_info;

  BEGIN
    v_date_in := trunc(v_date);
    g_sequence_list.DELETE;
    FOR cur_rec IN cur_seq(v_routeid, v_date_in) LOOP
      v_sequence_info.route_id         := cur_rec.routeid;
      v_sequence_info.subroute_id      := cur_rec.subrouteid;
      v_sequence_info.segment_id       := cur_rec.segmentid;
      v_sequence_info.bus_id           := cur_rec.busid;
      v_sequence_info.product_id       := cur_rec.productid;
      v_sequence_info.startstation_id  := cur_rec.startstationid;
      v_sequence_info.endstation_id    := cur_rec.endstationid;
      v_sequence_info.leave_time       := cur_rec.leavetime;
      v_sequence_info.arrive_time      := cur_rec.arrivetime;
      v_sequence_info.real_leave_time  := cur_rec.realleavetime;
      v_sequence_info.real_arrive_time := cur_rec.realarrivetime;
      v_sequence_info.row_id           := cur_rec.rowid;
      v_sequence_info.startstation_seq := cur_rec.stationseqnum1;
      v_sequence_info.endstation_seq   := cur_rec.stationseqnum2;
      v_sequence_info.driver_id        := cur_rec.driverid;
      v_sequence_info.busrr_id         := cur_rec.busrrid;

      g_sequence_list(v_sequence_info.row_id) := v_sequence_info;

    END LOOP;
  END;
  /****************************************************************************************
  *    名称：load_rep_station                                                             *
  *                                                                                       *
  *    功能：加载标准                                                                     *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2012-01-08                                                                   *
  ****************************************************************************************/
  PROCEDURE Load_Rep_station(v_sequence_info IN sequence_info, v_flag CHAR) IS

    CURSOR cur_sta IS
      SELECT t.routeid,
             t.subrouteid,
             t.stationseqnum,
             t.productid,
             t.actdatetime,
             t.isarrlft,
             t.bussid,
             t.rowid
        FROM bsvcbusarrlftld5 t
       WHERE t.productid = v_sequence_info.product_id
         AND t.routeid = v_sequence_info.route_id
         AND t.actdatetime BETWEEN v_sequence_info.real_leave_time AND
             v_sequence_info.real_arrive_time + INTERVAL '1'
       MINUTE
         AND t.stationseqnum IN
             (SELECT m.dualserialid
                FROM mconhourstanddetail m
               WHERE t.routeid = m.routeid
                 AND t.subrouteid = m.subrouteid)
         AND datatype = '4';

    CURSOR cur_sta2 IS
      SELECT t.routeid,
             t.subrouteid,
             t.stationseqnum,
             t.productid,
             t.actdatetime,
             t.isarrlft,
             t.bussid,
             t.rowid
        FROM bsvcbusarrlftld5 t
       WHERE t.productid = v_sequence_info.product_id
         AND t.actdatetime BETWEEN v_sequence_info.real_leave_time AND
             v_sequence_info.real_arrive_time + INTERVAL '1'
       MINUTE
         AND datatype = '4';

    v_rep_station rep_station;

    s VARCHAR2(200);

  BEGIN
    s := to_char(v_sequence_info.real_leave_time, 'yyyy-mm-dd hh24:mi:ss') || '_' ||         to_char(v_sequence_info.real_arrive_time, 'yyyy-mm-dd hh24:mi:ss');

    g_rep_station_list.DELETE;

    IF (v_flag = '1') THEN
      FOR cur_rec IN cur_sta LOOP
        v_rep_station.route_id       := cur_rec.routeid;
        v_rep_station.subroute_id    := cur_rec.subrouteid;
        v_rep_station.product_id     := cur_rec.productid;
        v_rep_station.stationseq_num := cur_rec.stationseqnum;
        v_rep_station.actdatetime    := cur_rec.actdatetime;
        v_rep_station.isarrlft       := cur_rec.isarrlft;
        v_rep_station.bussid         := cur_rec.bussid;
        v_rep_station.row_id         := cur_rec.rowid;

        g_rep_station_list(v_rep_station.row_id) := v_rep_station;

      END LOOP;
    ELSE
      FOR cur_rec IN cur_sta2 LOOP
        v_rep_station.route_id       := cur_rec.routeid;
        v_rep_station.subroute_id    := cur_rec.subrouteid;
        v_rep_station.product_id     := cur_rec.productid;
        v_rep_station.stationseq_num := cur_rec.stationseqnum;
        v_rep_station.actdatetime    := cur_rec.actdatetime;
        v_rep_station.isarrlft       := cur_rec.isarrlft;
        v_rep_station.bussid         := cur_rec.bussid;
        v_rep_station.row_id         := cur_rec.rowid;

        g_rep_station_list(v_rep_station.row_id) := v_rep_station;

      END LOOP;
    END IF;
  END;
  /****************************************************************************************
  *    名称：compute                                                                      *
  *                                                                                       *
  *    功能：计算早晚点                                                                   *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2012-01-08                                                                   *
  ****************************************************************************************/
  PROCEDURE Compute(v_sequence_info IN sequence_info,
                    v_rep_station   IN rep_station,
                    ret             OUT NUMBER) IS
    v_onhour_stand_detail onhour_stand_detail;
    --v_peccancy_rec        peccancy_rec;
    v_time DATE;

  BEGIN
    v_time                              := v_sequence_info.leave_time;
    v_onhour_stand_detail.route_id      := v_rep_station.route_id;
    v_onhour_stand_detail.subroute_id   := v_rep_station.subroute_id;
    v_onhour_stand_detail.dualserial_id := v_rep_station.stationseq_num;
    /*
    v_peccancy_rec.route_id       := v_rep_station.route_id;
    v_peccancy_rec.subroute_id    := v_rep_station.subroute_id;
    v_peccancy_rec.stationseq_num := v_rep_station.stationseq_num;
    v_peccancy_rec.product_id     := v_rep_station.product_id;
    v_peccancy_rec.bussid         := v_rep_station.bussid;
    v_peccancy_rec.bus_id         := v_sequence_info.bus_id;
    v_peccancy_rec.driver_id      := v_sequence_info.driver_id;
    v_peccancy_rec.busrr_id       := v_sequence_info.busrr_id;
    */
    --查找标准
    Find_Stand(v_time, v_onhour_stand_detail);
    --判断
    IF (v_onhour_stand_detail.alstation_type = v_rep_station.isarrlft) THEN
      IF trunc(v_rep_station.actdatetime, 'mi') <
         trunc(v_time, 'mi') +
         (v_onhour_stand_detail.onhour_time -
          v_onhour_stand_detail.offset_pos) / 1440 THEN
        -- 早点
        ret := 0;
      ELSIF trunc(v_rep_station.actdatetime, 'mi') <=
            trunc(v_time, 'mi') +
            (v_onhour_stand_detail.onhour_time +
             v_onhour_stand_detail.offset_neg) / 1440 THEN
        -- 准点
        ret := 1;
      ELSIF trunc(v_rep_station.actdatetime, 'mi') >
            trunc(v_time, 'mi') +
            (v_onhour_stand_detail.onhour_time +
             v_onhour_stand_detail.offset_neg) / 1440 THEN
        -- 晚点
        ret := 0;
      ELSE
        ret := -1; --不计算
      END IF;
    ELSE
      ret := -1; --不计算
    END IF;

    /*
    IF (v_onhour_stand_detail.alstation_type = v_rep_station.isarrlft AND
       trunc(v_sequence_info.leave_time, 'mi') !=
       trunc(v_rep_station.actdatetime, 'mi') AND
       trunc(v_sequence_info.arrive_time, 'mi') !=
       trunc(v_rep_station.actdatetime, 'mi')) THEN

      IF trunc(v_rep_station.actdatetime, 'mi') <
         trunc(v_time, 'mi') +
         (v_onhour_stand_detail.onhour_time -
          v_onhour_stand_detail.offset_pos) / 1440 THEN

        -- 早点
        v_peccancy_rec.peccancy_type  := '14';
        v_peccancy_rec.peccancy_time  := v_rep_station.actdatetime;
        v_peccancy_rec.standard_value := v_onhour_stand_detail.onhour_time -
                                         v_onhour_stand_detail.offset_pos;
        v_peccancy_rec.peccancy_value := (trunc(v_peccancy_rec.peccancy_time,
                                                'mi') -
                                         trunc(v_time, 'mi')) * 24 * 60;

      ELSIF trunc(v_rep_station.actdatetime, 'mi') <=
            trunc(v_time, 'mi') +
            (v_onhour_stand_detail.onhour_time +
             v_onhour_stand_detail.offset_neg) / 1440 THEN

        -- 准点
        v_peccancy_rec.peccancy_type  := '0';
        v_peccancy_rec.standard_value := v_onhour_stand_detail.onhour_time;

      ELSIF trunc(v_rep_station.actdatetime, 'mi') >
            trunc(v_time, 'mi') +
            (v_onhour_stand_detail.onhour_time +
             v_onhour_stand_detail.offset_neg) / 1440 THEN

        -- 晚点
        v_peccancy_rec.peccancy_type  := '10';
        v_peccancy_rec.peccancy_time  := v_rep_station.actdatetime;
        v_peccancy_rec.standard_value := v_onhour_stand_detail.onhour_time +
                                         v_onhour_stand_detail.offset_neg;
        v_peccancy_rec.peccancy_value := ABS((trunc(v_peccancy_rec.peccancy_time,
                                                    'mi') -
                                             trunc(v_time, 'mi')) * 24 * 60);

      ELSE
        v_peccancy_rec.peccancy_type := '0';
        v_peccancy_rec.peccancy_time := v_rep_station.actdatetime;

      END IF;
    ELSE
      v_peccancy_rec.peccancy_type := '3';
      v_peccancy_rec.peccancy_time := v_rep_station.actdatetime;
    END IF;
    v_peccancy_rec.row_id := v_rep_station.row_id;
    insert_peccancy_rec(v_peccancy_rec);
    */
  END;
  /****************************************************************************************
  *    名称：Update_JZSectRate                                                            *
  *                                                                                       *
  *    功能：更新结存表                                                                   *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2012-01-08                                                                   *
  ****************************************************************************************/
  PROCEDURE Update_JZSectRate(v_date IN DATE) IS
    v_date_in   DATE;
    v_routeid   VARCHAR2(20);
    v_rowid     VARCHAR2(20);
    v_starttime DATE;
    v_endtime   DATE;

    v_rate NUMBER := 0;

    CURSOR cur_route(date_in DATE) IS
      SELECT jz.routeid, jz.rowid
        FROM jz_routedaystorage jz
       WHERE jzdate = date_in;

    CURSOR cur_phase(route_id VARCHAR2, date_in DATE) IS
      SELECT jz.rowid,
             date_in + jz.timephasestarttime starttime,
             date_in + jz.timephaseendtime endtime
        FROM jz_timephasedatastorage jz
       WHERE routeid = route_id
         AND jzdate = date_in;

    CURSOR cur_phase2(route_id VARCHAR2, date_in DATE) IS
      SELECT jz.rowid,
             date_in + jz.timephasestarttime starttime,
             date_in + jz.timephaseendtime endtime
        FROM jz_timephasedatastorage2 jz
       WHERE routeid = route_id
         AND jzdate = date_in;

    CURSOR cur_rate(route_id   VARCHAR2,
                    date_in    DATE,
                    begin_time DATE,
                    end_time   DATE) IS
      SELECT round(Decode(seqcount, 0, 0, sectrate / seqcount), 2) rate
        FROM (SELECT bz.routeid,
                     COUNT(*) seqcount,
                     SUM(NVL(bz.sectrate, 0)) sectrate
                FROM bz_busrunrecordld bz
               WHERE bz.routeid = route_id
                 AND bz.rundatadate = date_in
                 AND bz.leavetime > begin_time
                 AND bz.leavetime < end_time
                 AND bz.rectype = '1'
               GROUP BY bz.routeid);
  BEGIN
    v_date_in := trunc(v_date);
    FOR cur_r IN cur_route(v_date_in) LOOP
      BEGIN
        v_routeid   := cur_r.routeid;
        v_rowid     := cur_r.rowid;
        v_starttime := v_date_in + G_START_TIME;
        v_endtime   := v_date_in + 1 + G_START_TIME;
        --更新线路结存
        BEGIN
          v_rate := 0;
          FOR cur IN cur_rate(v_routeid, v_date_in, v_starttime, v_endtime) LOOP
            v_rate := round(cur.rate, 2);
          END LOOP;

          UPDATE jz_routedaystorage t
             SET t.bigstationontimerate = v_rate
           WHERE t.rowid = v_rowid;
        EXCEPTION
          WHEN OTHERS THEN
            WRITE_EXCEPTION('Update_JZSectRate',
                            '更新结存表' || v_routeid,
                            v_date_in,
                            SQLCODE,
                            SQLERRM);
        END;
        --更新高低峰
        FOR cur_r2 IN cur_phase(v_routeid, v_date_in) LOOP
          BEGIN
            v_rowid     := cur_r2.rowid;
            v_starttime := cur_r2.starttime;
            v_endtime   := cur_r2.endtime;

            v_rate := 0;
            FOR cur IN cur_rate(v_routeid,
                                v_date_in,
                                v_starttime,
                                v_endtime) LOOP
              v_rate := round(cur.rate, 2);
            END LOOP;
            UPDATE jz_timephasedatastorage t
               SET t.bigstationontimerate = v_rate
             WHERE t.rowid = v_rowid;
          EXCEPTION
            WHEN OTHERS THEN
              WRITE_EXCEPTION('Update_JZSectRate',
                              '更新结存表A' || v_routeid,
                              v_date_in,
                              SQLCODE,
                              SQLERRM);
          END;
        END LOOP;
        --更新五峰段
        FOR cur_r2 IN cur_phase2(v_routeid, v_date_in) LOOP
          BEGIN
            v_rowid     := cur_r2.rowid;
            v_starttime := cur_r2.starttime;
            v_endtime   := cur_r2.endtime;

            v_rate := 0;
            FOR cur IN cur_rate(v_routeid,
                                v_date_in,
                                v_starttime,
                                v_endtime) LOOP
              v_rate := round(cur.rate, 2);
            END LOOP;
            UPDATE jz_timephasedatastorage2 t
               SET t.bigstationontimerate = v_rate
             WHERE t.rowid = v_rowid;
          EXCEPTION
            WHEN OTHERS THEN
              WRITE_EXCEPTION('Update_JZSectRate',
                              '更新结存表B' || v_routeid,
                              v_date_in,
                              SQLCODE,
                              SQLERRM);
          END;
        END LOOP;

        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('Update_JZSectRate',
                          '更新结存表2',
                          v_date_in,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP;
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('Update_JZSectRate',
                      '更新结存表',
                      v_date_in,
                      SQLCODE,
                      SQLERRM);
  END;

  /****************************************************************************************
  *    名称：run                                                                          *
  *                                                                                       *
  *    功能：主流程                                                                       *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2012-01-08                                                                   *
  ****************************************************************************************/
  PROCEDURE Run(v_date IN DATE) IS
    v_date_in       DATE;
    v_id            VARCHAR2(20);
    v_sid           VARCHAR2(20);
    v_sequence_info sequence_info;
    v_rep_station   rep_station;
    v_routeid       VARCHAR2(20);
    v_iCount        NUMBER := 0;
    v_i             NUMBER := 0;
    v_s             NUMBER := 0;
    v_s2            NUMBER := 0;
    v_ret           NUMBER;
    --线路
    CURSOR cur_route IS
      SELECT t.routeid, t.routename, t.routecode
        FROM mcrouteinfogs t
      -- WHERE t.routeid = route_id
       ORDER BY t.routeid;

  BEGIN
    v_date_in := trunc(v_date);
    WRITE_LOG('run', '计算区间准点率', v_date_in, '开始');
    FOR cur_r IN cur_route LOOP
      v_routeid := cur_r.routeid;
      WRITE_LOG('run',
                '计算区间准点率_' || v_routeid,
                v_date_in,
                '加载标准');
      -- 加载标准
      load_stand(v_routeid, v_date_in);
      WRITE_LOG('run',
                '计算区间准点率_' || v_routeid,
                v_date_in,
                '加载车次');
      -- 加载车次
      load_sequence(v_routeid, v_date_in);

      v_iCount := g_sequence_list.COUNT;
      WRITE_LOG('run',
                '计算区间准点率_' || v_routeid,
                v_date_in,
                '循环车次' || v_iCount);
      -- 循环车次
      v_id      := g_sequence_list.FIRST();
      v_routeid := '';

      WHILE v_id IS NOT NULL AND g_sequence_list.EXISTS(v_id) LOOP

        v_i             := v_i + 1;
        v_sequence_info := g_sequence_list(v_id);

        -- 加载考核站点
        load_rep_station(v_sequence_info, '2');

        v_sid    := g_rep_station_list.FIRST;
        v_iCount := g_rep_station_list.COUNT;
        v_s      := 0;
        v_s2     := 0;

        WHILE v_sid IS NOT NULL AND g_rep_station_list.EXISTS(v_sid) LOOP
          v_rep_station := g_rep_station_list(v_sid);
          -- 计算准晚点
          compute(v_sequence_info, v_rep_station, v_ret);
          IF (v_ret >= 0) THEN
            --考核站点个数
            v_s := v_s + 1;
            IF (v_ret = 1) THEN
              --准点
              v_s2 := v_s2 + 1;
            END IF;
          END IF;
          v_sid := g_rep_station_list.NEXT(v_sid);
        END LOOP;
        --更新区间准点
        UPDATE bz_busrunrecordld t
           SET t.sectrate = round(decode(v_s, 0, 0, v_s2 / v_s), 2)
         WHERE t.rowid = v_sequence_info.row_id;

        /*COMMIT;
        WRITE_LOG('run',
        '计算区间准点率' ,
        v_date_in,
        v_sequence_info.route_id || '-' ||
        v_sequence_info.subroute_id || '-' ||
        v_sequence_info.segment_id || '-' ||
        v_sequence_info.leave_time || '=' || v_s2 || '/' || v_s); */
        v_id := g_sequence_list.NEXT(v_id);
      END LOOP;
      --write_peccancy_rec;
      COMMIT;
    END LOOP;
    WRITE_LOG('run', '计算区间准点率', v_date_in, '更新结存表');
    Update_JZSectRate(v_date_in);
    COMMIT;
    WRITE_LOG('run', '计算区间准点率', v_date_in, '结束');
  END;
  PROCEDURE Run2(v_date IN DATE) IS
    v_date_in       DATE;
    v_id            VARCHAR2(20);
    v_sid           VARCHAR2(20);
    v_sequence_info sequence_info;
    v_rep_station   rep_station;
    v_routeid       VARCHAR2(20);
    v_iCount        NUMBER := 0;
    v_i             NUMBER := 0;
    v_s             NUMBER := 0;
    v_s2            NUMBER := 0;
    v_ret           NUMBER;
  BEGIN
    v_date_in := trunc(v_date);
    WRITE_LOG('run', '计算区间准点率', v_date_in, '加载标准');
    -- 加载标准
    load_stand(v_date_in);
    WRITE_LOG('run', '计算区间准点率', v_date_in, '加载车次');
    -- 加载车次
    load_sequence(v_date_in);

    v_iCount := g_sequence_list.COUNT;
    WRITE_LOG('run', '计算区间准点率', v_date_in, '循环车次' || v_iCount);
    -- 循环车次
    v_id      := g_sequence_list.FIRST();
    v_routeid := '';

    WHILE v_id IS NOT NULL AND g_sequence_list.EXISTS(v_id) LOOP

      v_i             := v_i + 1;
      v_sequence_info := g_sequence_list(v_id);

      IF (v_routeid <> v_sequence_info.route_id) THEN
        WRITE_LOG('run', '计算区间准点率' || v_routeid, v_date_in, '开始');
        v_routeid := v_sequence_info.route_id;
        COMMIT;
      END IF;

      -- 加载考核站点
      load_rep_station(v_sequence_info, '2');

      v_sid    := g_rep_station_list.FIRST;
      v_iCount := g_rep_station_list.COUNT;
      v_s      := 0;
      v_s2     := 0;

      WHILE v_sid IS NOT NULL AND g_rep_station_list.EXISTS(v_sid) LOOP

        v_rep_station := g_rep_station_list(v_sid);

        -- 计算准晚点
        compute(v_sequence_info, v_rep_station, v_ret);

        IF (v_ret >= 0) THEN
          --考核站点个数
          v_s := v_s + 1;
          IF (v_ret = 1) THEN
            --准点
            v_s2 := v_s2 + 1;
          END IF;
        END IF;

        v_sid := g_rep_station_list.NEXT(v_sid);

      END LOOP;

      --更新区间准点
      UPDATE bz_busrunrecordld t
         SET t.sectrate = round(decode(v_s, 0, 0, v_s2 / v_s), 2)
       WHERE t.rowid = v_sequence_info.row_id;

      /*COMMIT;
      WRITE_LOG('run',
      '计算区间准点率' ,
      v_date_in,
      v_sequence_info.route_id || '-' ||
      v_sequence_info.subroute_id || '-' ||
      v_sequence_info.segment_id || '-' ||
      v_sequence_info.leave_time || '=' || v_s2 || '/' || v_s); */
      v_id := g_sequence_list.NEXT(v_id);

    END LOOP;

    --write_peccancy_rec;
    COMMIT;

    Update_JZSectRate(v_date_in);
    COMMIT;

  END;

  PROCEDURE Run(v_begindate IN DATE, v_enddate IN DATE) IS
    v_date_in DATE;
  BEGIN
    v_date_in := trunc(v_begindate);
    WHILE (v_date_in <= v_enddate) LOOP
      BEGIN
        WRITE_LOG('run', '计算区间准点率', v_date_in, '开始');
        run(v_date_in);
        WRITE_LOG('run', '计算区间准点率', v_date_in, '结束');
        v_date_in := v_date_in + 1;
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('Run',
                          '计算区间准点率',
                          v_date_in,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP;
  END;

  PROCEDURE Run IS
    v_date_in DATE;
  BEGIN
    v_date_in := trunc(SYSDATE);
    Run(v_date_in, v_date_in);
  END;

BEGIN
  dbms_application_info.set_client_info('PKG_OSE_ONHOUR');
END PKG_OSE_ONHOUR;
/

prompt
prompt Creating package body PKG_OSE_ORGTREE
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_ORGTREE IS
  --------------------------------------------------------------------------------------------

  /***************************************************************************************
  *    名称：TREATE_ORGTREESTORAGE                                                  *
  *                                                                                      *
  *    功能：组织级别数据结存表                                                           *
  *    作者：YANGTAO                                                                     *
  *    日期：2015-12-11                                                                  *
  ***************************************************************************************/
  PROCEDURE TREATE_ORGTREESTORAGE AS
    V_ORGID    VARCHAR2(36);
    V_PORGID   VARCHAR2(36);
    V_ORGGRADE VARCHAR2(2);
  BEGIN
    -- 全部
    BEGIN
      --删除全部数据
      DELETE FROM JZ_ORGGRADETREE;

      --插入当前组织
      FOR CUR_BASEORG IN (SELECT ORGID, ORGGRADE FROM MCORGINFOGS WHERE ISACTIVE = '1') LOOP
        V_ORGID    := CUR_BASEORG.ORGID;
        V_ORGGRADE := CUR_BASEORG.ORGGRADE;

        TREATE_CHILDORGTREE(V_ORGID, V_ORGGRADE);

      END LOOP;
      COMMIT;

      --填写组织关系字段
      FOR CUR_RELATION IN (SELECT ORG.ORGID  AS PORGID,
                              CHILDORG.ORGID AS ORGID
                            FROM MCORGINFOGS ORG, MCORGINFOGS CHILDORG
                            WHERE ORG.ORGID = CHILDORG.PARENTORGID) LOOP
        V_ORGID  := CUR_RELATION.ORGID;
        V_PORGID := CUR_RELATION.PORGID;

        UPDATE JZ_ORGGRADETREE
           SET RELATION = '1'
         WHERE PARENTORGID = V_PORGID
           AND ORGID = V_ORGID;
      END LOOP;

    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
    END;
  END;
  /***************************************************************************************
  *    名称：TREATE_CHILDORGTREE                                                         *
  *                                                                                      *
  *    功能：组织界别数据结存表 当前组织所有下级和自身关系                                  *
  *    作者：YANGTAO                                                                     *
  *    日期：2015-12-11                                                                  *
  ***************************************************************************************/
  PROCEDURE TREATE_CHILDORGTREE(V_PORGID    VARCHAR2,
                                V_PORGGRADE VARCHAR2) AS
    V_ORGID    VARCHAR2(36);
    V_ORGGRADE VARCHAR2(2);
    V_RELATION CHAR(1);
  BEGIN

    FOR CURORG IN (SELECT ORG.ORGID, ORG.ORGGRADE
                     FROM MCORGINFOGS ORG
                     WHERE ORG.ISACTIVE = '1'
                    START WITH ORG.ORGID = V_PORGID
                   CONNECT BY PRIOR ORG.ORGID = ORG.PARENTORGID) LOOP
      V_ORGID    := CURORG.ORGID;
      V_ORGGRADE := CURORG.ORGGRADE;

      IF V_ORGID = V_PORGID THEN
        V_RELATION := '0'; --本级
      ELSE
        V_RELATION := '2'; --间隔下级
      END IF;

      INSERT INTO JZ_ORGGRADETREE
        (ORGTREEID,
         ORGID,
         PARENTORGID,
         ORGGRADE,
         RELATION,
         JZDATE,
         RECDATE)
      VALUES
        (SEQ_OSEID.NEXTVAL,
         V_ORGID,
         V_PORGID,
         V_PORGGRADE,
         V_RELATION,
         TRUNC(SYSDATE),
         SYSDATE);
    END LOOP;
  END;

 END PKG_OSE_ORGTREE;
/

prompt
prompt Creating package body PKG_OSE_REPLICATION
prompt =========================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_REPLICATION IS

  /***************************************************************************************
  *    名称：WRITE_LOG                                                                   *
  *                                                                                      *
  *    功能：写入日志                                                                    *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2,
                      FUNC_DESC     VARCHAR2,
                      FLAG          VARCHAR2,
                      V_DATE        DATE,
                      LOGINFO       VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := SUBSTR(LOGINFO, 1, 250);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       FLAG,
       V_DATE,
       SYSDATE,
       V_INFO);
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /****************************************************************************************
  *    名称：WRITE_EXCEPTION                                                             *
  *                                                                                      *
  *    功能：写入异常日志                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_EXCEPTION(PROCEDURENAME VARCHAR2,
                            FUNC_DESC     VARCHAR2,
                            V_DATE        DATE,
                            ERRORCODE     NUMBER,
                            ERRORTEXT     VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := ERRORCODE || '-' || SUBSTR(ERRORTEXT, 1, 200);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '0',
       V_DATE,
       SYSDATE,
       V_INFO);
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /***************************************************************************************
  *    名称：ExecuteSQL                                                                  *
  *                                                                                      *
  *    功能：执行SQL语句                                                                 *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-28                                                                  *
  ****************************************************************************************/
  PROCEDURE EXECUTE_SQL(V_SQL VARCHAR2) AS
  BEGIN
    WRITE_LOG('ExecuteSQL', '执行SQL语句', '2', NULL, '开始 ' || V_SQL);
    EXECUTE IMMEDIATE V_SQL;
    WRITE_LOG('ExecuteSQL', '执行SQL语句', '2', NULL, '结束');
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('ExecuteSQL',
                      '执行SQL语句' || V_SQL,
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  --基础数据复制
  PROCEDURE REPLICATION_BASEDATA AS
  BEGIN
    DELETE FROM MCORGINFOGS;
    INSERT INTO MCORGINFOGS
      (ORGID,
       ORGCODE,
       ORGNAME,
       ORGGRADE,
       ORGTYPE,
       PARENTORGID,
       REGIONAREA,
       REGIONLEVEL,
       PRINCIPAL,
       LINKMAN,
       ADDRESS,
       TELEPHONE,
       POST,
       FAX,
       REGISTERDATE,
       ISACTIVE,
       MEMOS,
       UPDATED,
       UPDATEDBY,
       CREATED,
       CREATEDBY)
      SELECT ORGID,
             ORGCODE,
             ORGNAME,
             ORGGRADE,
             ORGTYPE,
             PARENTORGID,
             REGIONAREA,
             REGIONLEVEL,
             PRINCIPAL,
             LINKMAN,
             ADDRESS,
             TELEPHONE,
             POST,
             FAX,
             REGISTERDATE,
             ISACTIVE,
             MEMOS,
             UPDATED,
             UPDATEDBY,
             CREATED,
             CREATEDBY
        FROM MCORGINFOGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCORGINFOGS同步成功！');
    COMMIT;
    DELETE FROM MCROUTEINFOGS;
    INSERT INTO MCROUTEINFOGS
      (ROUTEID,
       ROUTENAME,
       ROUTECODE,
       ORGID,
       ROUTESTYLE,
       ROUTETYPE,
       ROUTEGRADE,
       PRINCIPAL,
       BEGINDATE,
       ENDDATE,
       ISCONDUCTOR,
       ISAPTS,
       ISEXISTSACCOMMODATIONROAD,
       DISPATCHTYPE,
       ISACTIVE,
       MEMOS,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY,
       ISTWOLOOPROUTE)
      SELECT ROUTEID,
             ROUTENAME,
             ROUTECODE,
             ORGID,
             ROUTESTYLE,
             ROUTETYPE,
             ROUTEGRADE,
             PRINCIPAL,
             BEGINDATE,
             ENDDATE,
             ISCONDUCTOR,
             ISAPTS,
             ISEXISTSACCOMMODATIONROAD,
             DISPATCHTYPE,
             ISACTIVE,
             MEMOS,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY,
             ISTWOLOOPROUTE
        FROM MCROUTEINFOGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCROUTEINFOGS同步成功！');
    COMMIT;
    DELETE FROM MCSUBROUTEINFOGS;
    INSERT INTO MCSUBROUTEINFOGS
      (SUBROUTEID,
       SUBROUTENAME,
       ROUTEID,
       ISMAINSUB,
       BEGINDATE,
       ENDDATE,
       ISACTIVE,
       MEMOS,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY)
      SELECT SUBROUTEID,
             SUBROUTENAME,
             ROUTEID,
             ISMAINSUB,
             BEGINDATE,
             ENDDATE,
             ISACTIVE,
             MEMOS,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY
        FROM MCSUBROUTEINFOGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCSUBROUTEINFOGS同步成功！');
    COMMIT;
    DELETE FROM MCSTATIONINFOGS;
    INSERT INTO MCSTATIONINFOGS
      (STATIONID,
       STATIONNO,
       STATIONNAME,
       ALIASNAME,
       LONGITUDE,
       LATITUDE,
       STATIONPOSITION,
       REGIONLEVEL,
       REGIONAREA,
       HASELEBOARD,
       HASWAITINGBOISK,
       ISHANGESTATION,
       ISFLEETSTATION,
       FLEETSTATIONBUSCOUNT,
       ISMAINFLEETSTATION,
       STATIONLENGTH,
       ISACTIVE,
       MEMOS,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY)
      SELECT STATIONID,
             STATIONNO,
             STATIONNAME,
             ALIASNAME,
             LONGITUDE,
             LATITUDE,
             STATIONPOSITION,
             REGIONLEVEL,
             REGIONAREA,
             HASELEBOARD,
             HASWAITINGBOISK,
             ISHANGESTATION,
             ISFLEETSTATION,
             FLEETSTATIONBUSCOUNT,
             ISMAINFLEETSTATION,
             STATIONLENGTH,
             ISACTIVE,
             MEMOS,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY
        FROM MCSTATIONINFOGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCSTATIONINFOGS同步成功！');
    COMMIT;
    DELETE FROM MCSITEINFOGS;
    INSERT INTO MCSITEINFOGS
      (ID,
       SITEID,
       SITENAME,
       ALIASNAME,
       SITETYPE,
       SITELEVEL,
       REGIONLEVEL,
       ISUSEROAD,
       LONGITUDE,
       LATITUDE,
       REGIONAREA,
       ORGID,
       HASVADIO,
       SITEPOSITION,
       SITEUSERDFOR,
       SITECAPIBILITY,
       ACTUALBUSCOUNT,
       ACREAGE,
       SITEFROM,
       ISACTIVE,
       USEDATE,
       STOPDATE,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY)
      SELECT ID,
             SITEID,
             SITENAME,
             ALIASNAME,
             SITETYPE,
             SITELEVEL,
             REGIONLEVEL,
             ISUSEROAD,
             LONGITUDE,
             LATITUDE,
             REGIONAREA,
             ORGID,
             HASVADIO,
             SITEPOSITION,
             SITEUSERDFOR,
             SITECAPIBILITY,
             ACTUALBUSCOUNT,
             ACREAGE,
             SITEFROM,
             ISACTIVE,
             USEDATE,
             STOPDATE,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY
        FROM MCSITEINFOGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCSITEINFOGS同步成功！');
    COMMIT;
    DELETE FROM MCBUSINFOGS_BUS;
    INSERT INTO MCBUSINFOGS_BUS
      (BUSID,
       ORGID,
       CARDID,
       BUSSELFID,
       BUYDATE,
       USEDATE,
       USEDFOR,
       USELESSCYC,
       REALUSELESSDATE,
       USELESSMILES,
       USELESSFLAG,
       STDCOEFFICIENT,
       HASICCARDEQMT,
       BUSINVIDEOCOUNT,
       BUSOUTVIDEOCOUNT,
       HASINBUSLED,
       HASHEADBUSLED,
       HASCONDITION,
       ISLOWFLOOR,
       BUSGRADE,
       FUELTYPE,
       MILECOEFFICIENT,
       SEATCOUNT,
       STANDCOUNT,
       BUSMACHINEID,
       PRODUCTID,
       ISACTIVE,
       MEMOS,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY,
       STANDARDOILNUM,
       BUSLENGTH,
       BUSTYPE,
       OILTYPE,
       UPSZBUSID,
       TOTALMILE,
       UPSZBUSIDTMP,
       VEHICLETYPE,
       BUSLENGTHTYPE,
       BUSOPERATETYPE,
       BUSSTATUS)
      SELECT BUSID,
             ORGID,
             CARDID,
             BUSSELFID,
             BUYDATE,
             USEDATE,
             USEDFOR,
             USELESSCYC,
             REALUSELESSDATE,
             USELESSMILES,
             USELESSFLAG,
             STDCOEFFICIENT,
             HASICCARDEQMT,
             BUSINVIDEOCOUNT,
             BUSOUTVIDEOCOUNT,
             HASINBUSLED,
             HASHEADBUSLED,
             HASCONDITION,
             ISLOWFLOOR,
             BUSGRADE,
             FUELTYPE,
             MILECOEFFICIENT,
             SEATCOUNT,
             STANDCOUNT,
             BUSMACHINEID,
             PRODUCTID,
             ISACTIVE,
             MEMOS,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY,
             STANDARDOILNUM,
             BUSLENGTH,
             BUSTYPE,
             OILTYPE,
             UPSZBUSID,
             TOTALMILE,
             UPSZBUSIDTMP,
             VEHICLETYPE,
             BUSLENGTHTYPE,
             BUSOPERATETYPE,
             BUSSTATUS
        FROM MCBUSINFOGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCBUSINFOGS同步成功！');
    COMMIT;
    DELETE FROM MCEMPLOYEEINFOGS;
    INSERT INTO MCEMPLOYEEINFOGS
      (EMPID,
       ORGID,
       EMPNAME,
       CARDID,
       POSITIONTYPE,
       TECHNICALPOST,
       SEX,
       DIPLOMA,
       BIRTHDATE,
       DRIVETYPE,
       GETDRIVEDATE,
       STARTDATE,
       ENDDATE,
       IDCARD,
       OPSERVICEID,
       ICCARDID,
       ONCECARDID,
       ISACTIVE,
       MEMOS,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY)
      SELECT EMPID,
             ORGID,
             EMPNAME,
             CARDID,
             POSITIONTYPE,
             TECHNICALPOST,
             SEX,
             DIPLOMA,
             BIRTHDATE,
             DRIVETYPE,
             GETDRIVEDATE,
             STARTDATE,
             ENDDATE,
             IDCARD,
             OPSERVICEID,
             ICCARDID,
             ONCECARDID,
             ISACTIVE,
             MEMOS,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY
        FROM MCEMPLOYEEINFOGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCEMPLOYEEINFOGS同步成功！');
    COMMIT;
    DELETE FROM MCRBUSROUTEGS;
    INSERT INTO MCRBUSROUTEGS
      (RBUSRID, BUSID, ROUTEID, RECDATE)
      SELECT RBUSRID, BUSID, ROUTEID, RECDATE FROM MCRBUSROUTEGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCRBUSROUTEGS同步成功！');
    COMMIT;
    DELETE FROM MCREMPROUTEGS;
    INSERT INTO MCREMPROUTEGS
      (REMPRID, EMPID, ROUTEID, RECDATE)
      SELECT REMPRID, EMPID, ROUTEID, RECDATE FROM MCREMPROUTEGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCREMPROUTEGS同步成功！');
    COMMIT;
    DELETE FROM MCRROUTESTATIONGS;
    INSERT INTO MCRROUTESTATIONGS
      (RROUTESID, ROUTEID, STATIONID, DUALSERIALID)
      SELECT RROUTESID, ROUTEID, STATIONID, DUALSERIALID
        FROM MCRROUTESTATIONGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCRROUTESTATIONGS同步成功！');
    COMMIT;
    DELETE FROM MCRSITEROUTEGS;
    INSERT INTO MCRSITEROUTEGS
      (RSITEROUTEID,
       SITEID,
       ROUTEID,
       MAINOILEMILE,
       SUBOILEMILE,
       MAINGARAGEMILE,
       SUBGARAGEMILE,
       MAINMAINTAINMILE,
       SUBMAINTAINMILE,
       SITETYPE,
       SITEIDSTR)
      SELECT RSITEROUTEID,
             SITEID,
             ROUTEID,
             MAINOILEMILE,
             SUBOILEMILE,
             MAINGARAGEMILE,
             SUBGARAGEMILE,
             MAINMAINTAINMILE,
             SUBMAINTAINMILE,
             SITETYPE,
             SITEIDSTR
        FROM MCRSITEROUTEGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCRSITEROUTEGS同步成功！');
    COMMIT;
    DELETE FROM MCRSEGMENTSTATIONGS;
    INSERT INTO MCRSEGMENTSTATIONGS
      (RSEGMENTSID,
       ROUTEID,
       SUBROUTEID,
       SEGMENTID,
       STATIONID,
       SNGSERIALID,
       STATIONTYPE,
       DUALSERIALID,
       DISTANCE,
       ISACTIVE,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY)
      SELECT RSEGMENTSID,
             ROUTEID,
             SUBROUTEID,
             SEGMENTID,
             STATIONID,
             SNGSERIALID,
             STATIONTYPE,
             DUALSERIALID,
             DISTANCE,
             ISACTIVE,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY
        FROM MCRSEGMENTSTATIONGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCRSEGMENTSTATIONGS同步成功！');
    COMMIT;
    DELETE FROM MCROUTETIMEPHASEGS;
    INSERT INTO MCROUTETIMEPHASEGS
      (RECORDID,
       ROUTEID,
       ROUTENAME,
       TIMEPHASEKEY,
       TIMEPHASENAME,
       BEGINDATE,
       ENDDATE,
       BEGINWEEK,
       ENDWEEK,
       STARTTIME,
       ENDTIME,
       PLANSEQS,
       TIMEPHASEINTERVAL,
       TIMEPHASECIRCLETIME,
       ISACTIVE)
      SELECT RECORDID,
             ROUTEID,
             ROUTENAME,
             TIMEPHASEKEY,
             TIMEPHASENAME,
             BEGINDATE,
             ENDDATE,
             BEGINWEEK,
             ENDWEEK,
             STARTTIME,
             ENDTIME,
             PLANSEQS,
             TIMEPHASEINTERVAL,
             TIMEPHASECIRCLETIME,
             ISACTIVE
        FROM MCROUTETIMEPHASEGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCROUTETIMEPHASEGS同步成功！');
    COMMIT;
    DELETE FROM MCROUTEFSTANDLSTSEQTIMEGS;
    INSERT INTO MCROUTEFSTANDLSTSEQTIMEGS
      (RECORDID,
       ROUTEID,
       STARTDATE,
       ENDDATE,
       STARTWEEK,
       ENDWEEK,
       MAINSTATIONFSTTIME,
       MAINSTATIONLSTTIME,
       SECONDSTATIONFSTTIME,
       SECONDSTATIONLSTTIME)
      SELECT RECORDID,
             ROUTEID,
             STARTDATE,
             ENDDATE,
             STARTWEEK,
             ENDWEEK,
             MAINSTATIONFSTTIME,
             MAINSTATIONLSTTIME,
             SECONDSTATIONFSTTIME,
             SECONDSTATIONLSTTIME
        FROM MCROUTEFSTANDLSTSEQTIMEGS@GJ;
    WRITE_LOG('REPLICATION_BASEDATA',
              'REPLICATION_BASEDATA',
              '1',
              SYSDATE,
              'MCROUTEFSTANDLSTSEQTIMEGS同步成功！');
    COMMIT;
  END;
  --基础数据的数据清理
  PROCEDURE TREATE_DATA AS
    V_SQL VARCHAR2(1024);
  BEGIN
    --异常数据处理  
    BEGIN
      --处理组织数据（非营运单位）
      V_SQL := 'UPDATE mcorginfogs' || G_DEST_DB || ' t ' ||
               '    SET t.orgtype = 0 ' ||
               '  WHERE t.orgname LIKE ''%机关%''' ||
               '     OR t.orgname LIKE ''%管理%''' ||
               '     OR t.orgname LIKE ''%保修%''' ||
               '     OR t.orgname LIKE ''%物资%''' ||
               '     OR t.orgname LIKE ''%票务%''' ||
               '     OR t.orgname LIKE ''%旅游%''' ||
               '     OR t.orgname LIKE ''%旅行%''' ||
               '     OR t.orgname LIKE ''%公务%''' ||
               '     OR t.orgname LIKE ''%广告%''';
      EXECUTE_SQL(V_SQL);
    
      --集团公司为运营单位
      V_SQL := 'UPDATE mcorginfogs' || G_DEST_DB || ' t ' ||
               '  SET t.orgtype=1 ' || '  WHERE t.parentorgid=''-1''';
      EXECUTE_SQL(V_SQL);
    
      --单程最后站点间距为0
      V_SQL := 'UPDATE mcrsegmentstationgs' || G_DEST_DB || ' t ' ||
               '  SET t.distance = 0 ' ||
               ' WHERE t.sngserialid = (SELECT MAX(a.sngserialid) ' ||
               '                         FROM mcrsegmentstationgs a ' ||
               '                        WHERE a.routeid = t.routeid ' ||
               '                          AND a.segmentid = t.segmentid ' ||
               '                          AND a.subrouteid = t.subrouteid)';
      EXECUTE_SQL(V_SQL);
      COMMIT;
    
      UPDATE MCORGINFOGS SET ORGTYPE = '1' WHERE ORGGRADE = '1';
      COMMIT;
    
      UPDATE MCORGINFOGS ORG SET ORG.REGIONLEVEL = '';
      UPDATE MCORGINFOGS ORG
         SET ORG.REGIONLEVEL = (SELECT ORG1.REGIONLEVEL
                                  FROM MCORGTYPEINFOGS ORG1
                                 WHERE ORG.ORGID = ORG1.ORGID)
       WHERE ORG.ORGID IN (SELECT ORG1.ORGID FROM MCORGTYPEINFOGS ORG1);
      COMMIT;
    
      UPDATE MCORGINFOGS ORG
         SET ORG.REGIONLEVEL = (SELECT REGIONLEVEL
                                  FROM (SELECT ORGID, REGIONLEVEL
                                          FROM MCORGINFOGS
                                         WHERE REGIONLEVEL IS NOT NULL) T
                                 WHERE ORG.PARENTORGID = T.ORGID)
       WHERE ORG.REGIONLEVEL IS NULL;
      COMMIT;
      UPDATE MCORGINFOGS ORG SET ORG.ORGTYPE = '1' WHERE ORGGRADE = '1';
      COMMIT;
      /*UPDATE MCBUSINFOGS BUS
         SET BUS.SEATCOUNT  = 11,
             BUS.STANDCOUNT = 4 *
                              (SELECT NVL(T.MINNUM, 8)
                                 FROM SYS_CALCULATECONFIG T
                                WHERE T.CONFIGNAME = 'BUSLOADCONFIG')
       WHERE BUS.BUSLENGTH <= 7;
      UPDATE MCBUSINFOGS BUS
         SET BUS.SEATCOUNT  = 30,
             BUS.STANDCOUNT = 8 *
                              (SELECT NVL(T.MINNUM, 8)
                                 FROM SYS_CALCULATECONFIG T
                                WHERE T.CONFIGNAME = 'BUSLOADCONFIG')
       WHERE BUS.BUSLENGTH > 7
         AND BUS.BUSLENGTH <= 10;
      UPDATE MCBUSINFOGS BUS
         SET BUS.SEATCOUNT  = 32,
             BUS.STANDCOUNT = 10 *
                              (SELECT NVL(T.MINNUM, 8)
                                 FROM SYS_CALCULATECONFIG T
                                WHERE T.CONFIGNAME = 'BUSLOADCONFIG')
       WHERE BUS.BUSLENGTH > 10
         AND BUS.BUSLENGTH <= 12;
      UPDATE MCBUSINFOGS BUS
         SET BUS.SEATCOUNT  = 40,
             BUS.STANDCOUNT = 16 *
                              (SELECT NVL(T.MINNUM, 8)
                                 FROM SYS_CALCULATECONFIG T
                                WHERE T.CONFIGNAME = 'BUSLOADCONFIG')
       WHERE BUS.BUSLENGTH > 12
         AND BUS.BUSLENGTH <= 18;
      COMMIT;*/
    
      UPDATE MCROUTEINFOGS ROU
         SET ROU.ROUTETYPE = '1'
       WHERE ROU.ROUTEID IN
             (SELECT ROUTEID
                FROM MCROUTEINFOGS
               WHERE ORGID IN
                     (SELECT ORGID
                        FROM JZ_ORGGRADETREE T
                       WHERE T.PARENTORGID IN ('2101', '2102', '2103', '2104',
                              '2105', '2106', '2108')));
      COMMIT;
    
      UPDATE MCROUTEINFOGS ROU
         SET ROU.ROUTETYPE = '2'
       WHERE ROU.ROUTEID NOT IN
             (SELECT ROUTEID
                FROM MCROUTEINFOGS
               WHERE ORGID IN
                     (SELECT ORGID
                        FROM JZ_ORGGRADETREE T
                       WHERE T.PARENTORGID IN ('2101', '2102', '2103', '2104',
                              '2105', '2106', '2108')));
      COMMIT;
    
      UPDATE MCROUTEINFOGS ROU
         SET ROU.ROUTETYPE = (SELECT ROU1.ROUTETYPE
                                FROM MCROUTETYPEINFOGS ROU1
                               WHERE ROU.ROUTEID = ROU1.ROUTEID
                                 AND ROU1.ROUTETYPE != '0')
       WHERE ROU.ROUTEID IN (SELECT ROU1.ROUTEID
                               FROM MCROUTETYPEINFOGS ROU1
                              WHERE ROU1.ROUTETYPE != '0');
      COMMIT;
      UPDATE MCROUTEINFOGS ROU
         SET ROU.ISTWOLOOPROUTE = (SELECT ROU1.ISTWOLOOPROUTE
                                     FROM MCROUTETYPEINFOGS ROU1
                                    WHERE ROU.ROUTEID = ROU1.ROUTEID
                                      AND ROU1.ISTWOLOOPROUTE != '0')
       WHERE ROU.ROUTEID IN
             (SELECT ROU1.ROUTEID
                FROM MCROUTETYPEINFOGS ROU1
               WHERE ROU1.ISTWOLOOPROUTE != '0');
      COMMIT;
      UPDATE MCSTATIONINFOGS STA
         SET STA.REGIONLEVEL = (SELECT STA1.REGIONLEVEL
                                  FROM MCSTATIONTYPEINFOGS STA1
                                 WHERE STA.STATIONNO = STA1.STATIONNO
                                   AND STA1.REGIONLEVEL != '0')
       WHERE STA.STATIONNO IN
             (SELECT STA1.STATIONNO
                FROM MCSTATIONTYPEINFOGS STA1
               WHERE STA1.REGIONLEVEL != '0');
      COMMIT;
      UPDATE MCSITEINFOGS SITE
         SET SITE.REGIONLEVEL = (SELECT SITE1.REGIONLEVEL
                                   FROM MCSITETYPEINFOGS SITE1
                                  WHERE SITE.SITEID = SITE1.SITEID
                                    AND SITE1.REGIONLEVEL != '0')
       WHERE SITE.SITEID IN
             (SELECT SITE1.SITEID
                FROM MCSITETYPEINFOGS SITE1
               WHERE SITE1.REGIONLEVEL != '0');
      COMMIT;
    
      UPDATE MCROUTETIMEPHASEGS T
         SET T.TIMEPHASEINTERVAL = 6
       WHERE T.ROUTEID IN
             (SELECT ROUTEID FROM MCROUTEINFOGS WHERE ROUTEGRADE = '1')
         AND T.TIMEPHASEKEY = '1';
      UPDATE MCROUTETIMEPHASEGS T
         SET T.TIMEPHASEINTERVAL = 9
       WHERE T.ROUTEID IN
             (SELECT ROUTEID FROM MCROUTEINFOGS WHERE ROUTEGRADE = '1')
         AND T.TIMEPHASEKEY = '2';
    
      UPDATE MCROUTETIMEPHASEGS T
         SET T.TIMEPHASEINTERVAL = 8
       WHERE T.ROUTEID IN
             (SELECT ROUTEID FROM MCROUTEINFOGS WHERE ROUTEGRADE = '2')
         AND T.TIMEPHASEKEY = '1';
      UPDATE MCROUTETIMEPHASEGS T
         SET T.TIMEPHASEINTERVAL = 12
       WHERE T.ROUTEID IN
             (SELECT ROUTEID FROM MCROUTEINFOGS WHERE ROUTEGRADE = '2')
         AND T.TIMEPHASEKEY = '2';
    
      UPDATE MCROUTETIMEPHASEGS T
         SET T.TIMEPHASEINTERVAL = 10
       WHERE T.ROUTEID IN
             (SELECT ROUTEID FROM MCROUTEINFOGS WHERE ROUTEGRADE = '3')
         AND T.TIMEPHASEKEY = '1';
      UPDATE MCROUTETIMEPHASEGS T
         SET T.TIMEPHASEINTERVAL = 15
       WHERE T.ROUTEID IN
             (SELECT ROUTEID FROM MCROUTEINFOGS WHERE ROUTEGRADE = '3')
         AND T.TIMEPHASEKEY = '2';
    
      UPDATE MCROUTETIMEPHASEGS T
         SET T.TIMEPHASEINTERVAL = 5
       WHERE T.ROUTEID IN
             (SELECT ROUTEID FROM MCROUTEINFOGS WHERE ROUTEGRADE = '4')
         AND T.TIMEPHASEKEY = '1';
      UPDATE MCROUTETIMEPHASEGS T
         SET T.TIMEPHASEINTERVAL = 8
       WHERE T.ROUTEID IN
             (SELECT ROUTEID FROM MCROUTEINFOGS WHERE ROUTEGRADE = '4')
         AND T.TIMEPHASEKEY = '2';
    
      COMMIT;
      DELETE FROM MCBUSINFOGS;
      INSERT INTO MCBUSINFOGS
        (BUSID,
         ORGID,
         CARDID,
         BUSSELFID,
         BUYDATE,
         USEDATE,
         USEDFOR,
         USELESSCYC,
         REALUSELESSDATE,
         USELESSMILES,
         USELESSFLAG,
         STDCOEFFICIENT,
         HASICCARDEQMT,
         BUSINVIDEOCOUNT,
         BUSOUTVIDEOCOUNT,
         HASINBUSLED,
         HASHEADBUSLED,
         HASCONDITION,
         ISLOWFLOOR,
         BUSGRADE,
         FUELTYPE,
         MILECOEFFICIENT,
         SEATCOUNT,
         STANDCOUNT,
         BUSMACHINEID,
         PRODUCTID,
         ISACTIVE,
         MEMOS,
         CREATED,
         CREATEDBY,
         UPDATED,
         UPDATEDBY,
         STANDARDOILNUM,
         BUSLENGTH,
         BUSTYPE,
         OILTYPE,
         UPSZBUSID,
         TOTALMILE,
         UPSZBUSIDTMP,
         VEHICLETYPE,
         BUSLENGTHTYPE,
         BUSOPERATETYPE,
         BUSSTATUS,
         ORGIDFROM)
        SELECT BUS.BUSID,
               BUS.ORGID,
               BUS.CARDID,
               T.BUSSELFID,
               T.BUYDATE,
               T.USEDATE,
               BUS.USEDFOR,
               BUS.USELESSCYC,
               BUS.REALUSELESSDATE,
               BUS.USELESSMILES,
               T.USELESSFLAG,
               T.STDCOEFFICIENT,
               BUS.HASICCARDEQMT,
               BUS.BUSINVIDEOCOUNT,
               BUS.BUSOUTVIDEOCOUNT,
               BUS.HASINBUSLED,
               BUS.HASHEADBUSLED,
               T.HASCONDITION,
               BUS. ISLOWFLOOR,
               BUS.BUSGRADE,
               BUS.FUELTYPE,
               BUS.MILECOEFFICIENT,
               T.SEATCOUNT,
               T.STANDCOUNT,
               BUS.BUSMACHINEID,
               BUS. PRODUCTID,
               BUS.ISACTIVE,
               BUS.MEMOS,
               BUS.CREATED,
               BUS.CREATEDBY,
               T.UPDATED,
               BUS.UPDATEDBY,
               BUS.STANDARDOILNUM,
               BUS.BUSLENGTH,
               T.BUSTYPE,
               BUS.OILTYPE,
               BUS.UPSZBUSID,
               BUS.TOTALMILE,
               BUS.UPSZBUSIDTMP,
               BUS.VEHICLETYPE,
               T.BUSLENGTHTYPE,
               T.BUSOPERATETYPE,
               T.BUSSTATUS,
               T.ORGIDFROM
          FROM TB_BUSINFO_ALL@GJ T, MCBUSINFOGS_BUS BUS
         WHERE T.CARDID(+) = BUS.CARDID;
      COMMIT;
    
      WRITE_LOG('Treate_Data', '数据处理', '0', SYSDATE, '成功！');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_LOG('Treate_Data', '数据处理', '0', SYSDATE, SQLERRM);
    END;
  END;
  --业务数据复制
  PROCEDURE REPLICATION_BUSINESS(V_FROMDATE DATE, V_TODATE DATE) AS
    V_DATE_IN DATE;
    V_SQL     VARCHAR2(4000);
  BEGIN
  
    --计划表
    BEGIN
      DELETE BZ_BUSPLANSEQLD T
       WHERE T.PLANID IN (SELECT PLANID
                            FROM BZ_BUSPLANLD
                           WHERE CONFIRMDATE >= V_FROMDATE
                             AND CONFIRMDATE <= V_TODATE);
      DELETE BZ_BUSPLANLD
       WHERE CONFIRMDATE >= V_FROMDATE
         AND CONFIRMDATE <= V_TODATE;
    
      INSERT INTO BZ_BUSPLANLD
        SELECT *
          FROM BZ_BUSPLANLD T
         WHERE T.STATUS = 'd'
           AND T.CONFIRMDATE >= V_FROMDATE
           AND T.CONFIRMDATE <= V_TODATE;
    
      INSERT INTO BZ_BUSPLANSEQLD
        SELECT *
          FROM BZ_BUSPLANSEQLD T
         WHERE EXISTS (SELECT 1
                  FROM BZ_BUSPLANLD G
                 WHERE G.STATUS = 'd'
                   AND G.CONFIRMDATE >= V_FROMDATE
                   AND G.CONFIRMDATE <= V_TODATE
                   AND G.PLANID = T.PLANID);
    
      WRITE_LOG('计划表',
                'busplan',
                '1',
                V_FROMDATE,
                '导入成功。' || TO_CHAR(V_TODATE, 'yyyy-mm-dd'));
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('计划表', 'busplan', V_FROMDATE, SQLCODE, SQLERRM);
    END;
  
    DELETE FROM BZ_ARRANGEWORKSHIFTLD T
     WHERE T.EXECDATE >= V_FROMDATE
       AND T.EXECDATE <= V_TODATE;
    INSERT INTO BZ_ARRANGEWORKSHIFTLD
      (ARRANGEWSID,
       ORGID,
       ROUTEID,
       SHIFTNUM,
       GROUPNUM,
       DRIVERID,
       STEWARDID,
       BUSID,
       ONWORKTIME1,
       OFFWORKTIME1,
       ONWORKTIME2,
       OFFWORKTIME2,
       SEQNUM,
       EXECDATE)
      SELECT ARRANGEWSID,
             ORGID,
             ROUTEID,
             SHIFTNUM,
             GROUPNUM,
             DRIVERID,
             STEWARDID,
             BUSID,
             ONWORKTIME1,
             OFFWORKTIME1,
             ONWORKTIME2,
             OFFWORKTIME2,
             SEQNUM,
             EXECDATE
        FROM BZ_ARRANGEWORKSHIFTLD@GJ
       WHERE EXECDATE >= V_FROMDATE
         AND EXECDATE <= V_TODATE;
    WRITE_LOG('排班数据',
              'BZ_ARRANGEWORKSHIFTLD',
              '1',
              V_FROMDATE,
              '导入成功。' || TO_CHAR(V_TODATE, 'yyyy-mm-dd'));
    COMMIT;
  
    DELETE FROM BZ_BUSDISPLANLD T
     WHERE T.RUNDATE >= V_FROMDATE
       AND T.RUNDATE <= V_TODATE;
    INSERT INTO BZ_BUSDISPLANLD
      (DISPLANDID,
       ORGID,
       ROUTEID,
       SUBROUTEID,
       SEGMENTID,
       BUSID,
       BUSSELFID,
       DRIVERID,
       DIRVERNAME,
       STEWARDID,
       STEWARDNAME,
       SHIFTNUM,
       LEAVETIME,
       ARRIVETIME,
       SEQTYPE,
       SEQUENCENUM,
       MILENUM,
       STARTSTATIONID,
       ENDSTATIONID,
       GROUPNUM,
       SEQNUM,
       ISACTIVE,
       RECTYPE,
       RUNDATE,
       MEMOS,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY)
      SELECT DISPLANDID,
             ORGID,
             ROUTEID,
             SUBROUTEID,
             SEGMENTID,
             BUSID,
             BUSSELFID,
             DRIVERID,
             DIRVERNAME,
             STEWARDID,
             STEWARDNAME,
             SHIFTNUM,
             LEAVETIME,
             ARRIVETIME,
             SEQTYPE,
             SEQUENCENUM,
             MILENUM,
             STARTSTATIONID,
             ENDSTATIONID,
             GROUPNUM,
             SEQNUM,
             ISACTIVE,
             RECTYPE,
             RUNDATE,
             MEMOS,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY
        FROM BZ_BUSDISPLANLD@GJ T
       WHERE T.RUNDATE >= V_FROMDATE
         AND T.RUNDATE <= V_TODATE;
    WRITE_LOG('排队数据',
              'BZ_BUSDISPLANLD',
              '1',
              V_FROMDATE,
              '导入成功。' || TO_CHAR(V_TODATE, 'yyyy-mm-dd'));
    COMMIT;
    /*REPLICATION_DAYDATA('bz_busoilld',
                        'bz_busoilld',
                        'recdate',
                        V_FROMDATE,
                        V_TODATE,
                        '0',
                        '加油数据');
    REPLICATION_DAYDATA('bz_complaintsld',
                        'bz_complaintsld',
                        'handledtime',
                        V_FROMDATE,
                        V_TODATE,
                        '0',
                        '投诉数据');*/
  
    V_DATE_IN := V_FROMDATE;
    WHILE (V_DATE_IN <= V_TODATE) LOOP
    
      DELETE FROM BZ_BUSRUNRECORDLD WHERE RUNDATADATE = V_DATE_IN;
      INSERT INTO BZ_BUSRUNRECORDLD
        (BUSRRID,
         ORGID,
         ROUTEID,
         SUBROUTEID,
         SEGMENTID,
         RECTYPE,
         BUSID,
         DRIVERID,
         BUSSID,
         STEWARDID,
         STARTSTATIONID,
         ENDSTATIONID,
         LEAVETIME,
         ARRIVETIME,
         ISLATE,
         RUNDATADATE,
         MILETYPEID,
         MILENUM,
         RECDATE,
         SEQNUM,
         AVGSPEED,
         SEQTIME,
         GPSMILE,
         MEMOS,
         ISACTIVE,
         CREATED,
         CREATEDBY,
         UPDATED,
         UPDATEDBY,
         STOPTIME,
         STOPNUM,
         STATIONNUM,
         SECTRATE,
         DISPLANID,
         DATASOURCE,
         PLANSTARTTIME,
         PLANENDTIME,
         INTERVALFLAG,
         SHIFTTYPE,
         SHIFTPERIOD,
         BUSCARDNO,
         INTERVALPERIOD,
         STATIONRATE,
         ISFULLFLAG,
         ISENDFLAG,
         ISSTARTFLAG,
         PLANSTARTSTATION,
         PLANENDSTATION)
        SELECT BUSRRID,
               ORGID,
               ROUTEID,
               SUBROUTEID,
               SEGMENTID,
               RECTYPE,
               BUSID,
               DRIVERID,
               BUSSID,
               STEWARDID,
               STARTSTATIONID,
               ENDSTATIONID,
               LEAVETIME,
               ARRIVETIME,
               ISLATE,
               RUNDATADATE,
               MILETYPEID,
               MILENUM,
               RECDATE,
               SEQNUM,
               AVGSPEED,
               SEQTIME,
               GPSMILE,
               MEMOS,
               ISACTIVE,
               CREATED,
               CREATEDBY,
               UPDATED,
               UPDATEDBY,
               STOPTIME,
               STOPNUM,
               STATIONNUM,
               SECTRATE,
               DISPLANID,
               DATASOURCE,
               PLANSTARTTIME,
               PLANENDTIME,
               INTERVALFLAG,
               SHIFTTYPE,
               SHIFTPERIOD,
               BUSCARDNO,
               INTERVALPERIOD,
               STATIONRATE,
               ISFULLFLAG,
               ISENDFLAG,
               ISSTARTFLAG,
               PLANSTARTSTATION,
               PLANENDSTATION
          FROM BZ_BUSRUNRECORDLD@GJ
         WHERE RUNDATADATE = V_DATE_IN;
      WRITE_LOG('车次数据',
                'BZ_BUSRUNRECORDLD',
                '1',
                V_DATE_IN,
                '导入成功。' || TO_CHAR(V_DATE_IN, 'yyyy-mm-dd'));
      COMMIT;
      DELETE FROM BZ_CASHINCOME T WHERE T.RUNDATE = V_DATE_IN;
      INSERT INTO BZ_CASHINCOME
        (RECORDID,
         ORGID,
         ROUTEID,
         BUSID,
         STATIONID,
         SOURCEFROM,
         TICKETSORT,
         ICCARDTYPE,
         TOTALINCOME,
         PASSENGERFLOW,
         RECDATE,
         RUNDATE,
         ORGNAME,
         ROUTENAME,
         BUSSELFID)
        SELECT RECORDID,
               ORGID,
               ROUTEID,
               BUSID,
               STATIONID,
               SOURCEFROM,
               TICKETSORT,
               ICCARDTYPE,
               TOTALINCOME,
               PASSENGERFLOW,
               RECDATE,
               RUNDATE,
               ORGNAME,
               ROUTENAME,
               BUSSELFID
          FROM BZ_CASHINCOME@GJ
         WHERE RUNDATE = V_DATE_IN;
      WRITE_LOG('投币数据',
                'BZ_CASHINCOME',
                '1',
                V_DATE_IN,
                '导入成功。' || TO_CHAR(V_DATE_IN, 'yyyy-mm-dd'));
      COMMIT;
      SELECT TO_CHAR(V_DATE_IN, 'YYYYMMDD') INTO V_SQL FROM DUAL;
      V_SQL := 'ALTER TABLE TB_MONTHCONSUME TRUNCATE PARTITION P_' || V_SQL;
      EXECUTE IMMEDIATE V_SQL;
      INSERT INTO TB_MONTHCONSUME
        (COUNTSERIAL,
         CONSUMESERIAL,
         CONSUMECOUNT,
         CARDNO,
         CONSUME,
         REMAINTIMES,
         BALANCE,
         CONSUMEDATE,
         CONSUMETYPE,
         VERIFYCODE,
         DRIVERCARDNO,
         LINENO,
         BUSNO,
         PSAM,
         FLAG)
        SELECT COUNTSERIAL,
               CONSUMESERIAL,
               CONSUMECOUNT,
               CARDNO,
               CONSUME,
               REMAINTIMES,
               BALANCE,
               CONSUMEDATE,
               CONSUMETYPE,
               VERIFYCODE,
               DRIVERCARDNO,
               LINENO,
               BUSNO,
               PSAM,
               FLAG
          FROM TB_MONTHCONSUME@GJ
         WHERE CONSUMEDATE >= V_DATE_IN
           AND CONSUMEDATE < V_DATE_IN + 1;
      WRITE_LOG('刷卡数据',
                'TB_MONTHCONSUME',
                '1',
                V_DATE_IN,
                '导入成功。' || TO_CHAR(V_DATE_IN, 'yyyy-mm-dd'));
      COMMIT;
      V_DATE_IN := V_DATE_IN + 1;
    END LOOP;
  END;

  --业务数据的数据清理
  PROCEDURE TREATE_BUSINESSDATA(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    --投币记录
    BEGIN
      --组织名称
      UPDATE BZ_CASHINCOME T
         SET T.ORGNAME = (SELECT ORGNAME
                            FROM MCORGINFOGS
                           WHERE ORGID = T.ORGID)
       WHERE T.RUNDATE = V_DATE_IN - G_CASH_DELTA
         AND T.ORGNAME IS NULL;
      UPDATE BZ_CASHINCOME T
         SET T.ORGNAME = '---'
       WHERE T.RUNDATE = V_DATE_IN - G_CASH_DELTA
         AND T.ORGNAME IS NULL;
      COMMIT;
    
      --线路ID
      UPDATE BZ_CASHINCOME T
         SET T.ROUTEID = (SELECT MAX(ROUTEID)
                            FROM MCROUTEINFOGS
                           WHERE ROUTENAME = T.ROUTENAME)
       WHERE T.RUNDATE = V_DATE_IN - G_CASH_DELTA
         AND T.ROUTEID IS NULL;
      UPDATE BZ_CASHINCOME T
         SET T.ROUTEID = '0'
       WHERE T.RUNDATE = V_DATE_IN - G_CASH_DELTA
         AND T.ROUTEID IS NULL;
      COMMIT;
      --车辆ID
      UPDATE BZ_CASHINCOME T
         SET T.BUSID = (SELECT MAX(BUSID)
                          FROM MCBUSINFOGS
                         WHERE BUSSELFID = T.BUSSELFID)
       WHERE T.RUNDATE = V_DATE_IN - G_CASH_DELTA
         AND T.BUSID IS NULL;
      UPDATE BZ_CASHINCOME T
         SET T.BUSID = '---'
       WHERE T.RUNDATE = V_DATE_IN - G_CASH_DELTA
         AND T.BUSID IS NULL;
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_LOG('投币数据清理', 'update', '0', SYSDATE, SQLERRM);
    END;
    --加油记录
    BEGIN
      --组织名称
      UPDATE BZ_BUSOILLD T
         SET T.ORGNAME = (SELECT ORGNAME
                            FROM MCORGINFOGS
                           WHERE ORGID = T.ORGID)
       WHERE T.RUNDATE = V_DATE_IN - G_OIL_DELTA
         AND T.ORGNAME IS NULL;
      UPDATE BZ_BUSOILLD T
         SET T.ORGNAME = '---'
       WHERE T.RUNDATE = V_DATE_IN - G_OIL_DELTA
         AND T.ORGNAME IS NULL;
      COMMIT;
    
      --线路ID
      UPDATE BZ_BUSOILLD T
         SET T.ROUTEID = (SELECT MAX(ROUTEID)
                            FROM MCROUTEINFOGS
                           WHERE ROUTENAME = T.ROUTENAME)
       WHERE T.RUNDATE = V_DATE_IN - G_OIL_DELTA
         AND T.ROUTEID IS NULL;
      UPDATE BZ_BUSOILLD T
         SET T.ROUTEID = '0'
       WHERE T.RUNDATE = V_DATE_IN - G_OIL_DELTA
         AND T.ROUTEID IS NULL;
      COMMIT;
      --车辆ID
      UPDATE BZ_BUSOILLD T
         SET T.BUSID = (SELECT MAX(BUSID)
                          FROM MCBUSINFOGS
                         WHERE BUSSELFID = T.BUSSELFID)
       WHERE T.RUNDATE = V_DATE_IN - G_OIL_DELTA
         AND T.BUSID IS NULL;
      UPDATE BZ_BUSOILLD T
         SET T.BUSID = '---'
       WHERE T.RUNDATE = V_DATE_IN - G_OIL_DELTA
         AND T.BUSID IS NULL;
      COMMIT;
    
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_LOG('加油清理', 'update', '0', SYSDATE, SQLERRM);
    END;
  END;
  --复制当天数据
  PROCEDURE MAKE_REPLICATION AS
  BEGIN
    MAKE_REPLICATION(SYSDATE);
    TREATE_GJBUSCOUNT(TRUNC(SYSDATE) - 1);
  END;
  --复制某天数据
  PROCEDURE MAKE_REPLICATION(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
    V_SQL     VARCHAR2(4000);
  BEGIN
  
    IF (V_DATE_IN >= SYSDATE - 7) THEN
      --复制数据并预处理
      REPLICATION_BASEDATA;
      TREATE_DATA;
    END IF;
  
    --计划表
    BEGIN
      DELETE BZ_BUSPLANSEQLD T
       WHERE T.PLANID IN
             (SELECT PLANID
                FROM BZ_BUSPLANLD
               WHERE CONFIRMDATE >= V_DATE_IN - G_ARR_DELTA
                 AND CONFIRMDATE < V_DATE_IN + 1 - G_ARR_DELTA);
      DELETE BZ_BUSPLANLD
       WHERE CONFIRMDATE >= V_DATE_IN - G_ARR_DELTA
         AND CONFIRMDATE < V_DATE_IN + 1 - G_ARR_DELTA;
    
      INSERT INTO BZ_BUSPLANLD
        SELECT *
          FROM BZ_BUSPLANLD T
         WHERE T.STATUS = 'd'
           AND T.CONFIRMDATE >= V_DATE_IN - G_ARR_DELTA
           AND T.CONFIRMDATE < V_DATE_IN + 1 - G_ARR_DELTA;
    
      INSERT INTO BZ_BUSPLANSEQLD
        SELECT *
          FROM BZ_BUSPLANSEQLD T
         WHERE EXISTS (SELECT 1
                  FROM BZ_BUSPLANLD G
                 WHERE G.STATUS = 'd'
                   AND G.CONFIRMDATE >= V_DATE_IN - G_ARR_DELTA
                   AND G.CONFIRMDATE < V_DATE_IN + 1 - G_ARR_DELTA
                   AND G.PLANID = T.PLANID);
    
      WRITE_LOG('计划表',
                'busplan',
                '1',
                V_DATE_IN,
                '导入成功。' || TO_CHAR(V_DATE_IN, 'yyyy-mm-dd'));
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK;
        WRITE_EXCEPTION('计划表', 'busplan', V_DATE_IN, SQLCODE, SQLERRM);
    END;
  
    DELETE FROM BZ_ARRANGEWORKSHIFTLD T
     WHERE T.EXECDATE >= V_DATE_IN - G_ARR_DELTA
       AND T.EXECDATE <= V_DATE_IN - G_ARR_DELTA;
    INSERT INTO BZ_ARRANGEWORKSHIFTLD
      (ARRANGEWSID,
       ORGID,
       ROUTEID,
       SHIFTNUM,
       GROUPNUM,
       DRIVERID,
       STEWARDID,
       BUSID,
       ONWORKTIME1,
       OFFWORKTIME1,
       ONWORKTIME2,
       OFFWORKTIME2,
       SEQNUM,
       EXECDATE)
      SELECT ARRANGEWSID,
             ORGID,
             ROUTEID,
             SHIFTNUM,
             GROUPNUM,
             DRIVERID,
             STEWARDID,
             BUSID,
             ONWORKTIME1,
             OFFWORKTIME1,
             ONWORKTIME2,
             OFFWORKTIME2,
             SEQNUM,
             EXECDATE
        FROM BZ_ARRANGEWORKSHIFTLD@GJ
       WHERE EXECDATE >= V_DATE_IN - G_ARR_DELTA
         AND EXECDATE <= V_DATE_IN - G_ARR_DELTA;
    WRITE_LOG('排班数据',
              'BZ_ARRANGEWORKSHIFTLD',
              '1',
              V_DATE_IN - G_ARR_DELTA,
              '导入成功。' || TO_CHAR(V_DATE_IN - G_ARR_DELTA, 'yyyy-mm-dd'));
    COMMIT;
  
    DELETE FROM BZ_BUSDISPLANLD T
     WHERE T.RUNDATE >= V_DATE_IN - G_SEQ_DELTA
       AND T.RUNDATE <= V_DATE_IN - G_SEQ_DELTA;
    INSERT INTO BZ_BUSDISPLANLD
      (DISPLANDID,
       ORGID,
       ROUTEID,
       SUBROUTEID,
       SEGMENTID,
       BUSID,
       BUSSELFID,
       DRIVERID,
       DIRVERNAME,
       STEWARDID,
       STEWARDNAME,
       SHIFTNUM,
       LEAVETIME,
       ARRIVETIME,
       SEQTYPE,
       SEQUENCENUM,
       MILENUM,
       STARTSTATIONID,
       ENDSTATIONID,
       GROUPNUM,
       SEQNUM,
       ISACTIVE,
       RECTYPE,
       RUNDATE,
       MEMOS,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY)
      SELECT DISPLANDID,
             ORGID,
             ROUTEID,
             SUBROUTEID,
             SEGMENTID,
             BUSID,
             BUSSELFID,
             DRIVERID,
             DIRVERNAME,
             STEWARDID,
             STEWARDNAME,
             SHIFTNUM,
             LEAVETIME,
             ARRIVETIME,
             SEQTYPE,
             SEQUENCENUM,
             MILENUM,
             STARTSTATIONID,
             ENDSTATIONID,
             GROUPNUM,
             SEQNUM,
             ISACTIVE,
             RECTYPE,
             RUNDATE,
             MEMOS,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY
        FROM BZ_BUSDISPLANLD@GJ T
       WHERE T.RUNDATE >= V_DATE_IN - G_SEQ_DELTA
         AND T.RUNDATE <= V_DATE_IN - G_SEQ_DELTA;
    WRITE_LOG('排队数据',
              'BZ_BUSDISPLANLD',
              '1',
              V_DATE_IN - G_SEQ_DELTA,
              '导入成功。' || TO_CHAR(V_DATE_IN - G_SEQ_DELTA, 'yyyy-mm-dd'));
    COMMIT;
    /*REPLICATION_DAYDATA('bz_busoilld',
                        'bz_busoilld',
                        'recdate',
                        V_FROMDATE,
                        V_TODATE,
                        '0',
                        '加油数据');
    REPLICATION_DAYDATA('bz_complaintsld',
                        'bz_complaintsld',
                        'handledtime',
                        V_FROMDATE,
                        V_TODATE,
                        '0',
                        '投诉数据');*/
  
    DELETE FROM BZ_BUSRUNRECORDLD
     WHERE RUNDATADATE = V_DATE_IN - G_SEQ_DELTA;
    INSERT INTO BZ_BUSRUNRECORDLD
      (BUSRRID,
       ORGID,
       ROUTEID,
       SUBROUTEID,
       SEGMENTID,
       RECTYPE,
       BUSID,
       DRIVERID,
       BUSSID,
       STEWARDID,
       STARTSTATIONID,
       ENDSTATIONID,
       LEAVETIME,
       ARRIVETIME,
       ISLATE,
       RUNDATADATE,
       MILETYPEID,
       MILENUM,
       RECDATE,
       SEQNUM,
       AVGSPEED,
       SEQTIME,
       GPSMILE,
       MEMOS,
       ISACTIVE,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY,
       STOPTIME,
       STOPNUM,
       STATIONNUM,
       SECTRATE,
       DISPLANID,
       DATASOURCE,
       PLANSTARTTIME,
       PLANENDTIME,
       INTERVALFLAG,
       SHIFTTYPE,
       SHIFTPERIOD,
       BUSCARDNO,
       INTERVALPERIOD,
       STATIONRATE,
       ISFULLFLAG,
       ISENDFLAG,
       ISSTARTFLAG,
       PLANSTARTSTATION,
       PLANENDSTATION)
      SELECT BUSRRID,
             ORGID,
             ROUTEID,
             SUBROUTEID,
             SEGMENTID,
             RECTYPE,
             BUSID,
             DRIVERID,
             BUSSID,
             STEWARDID,
             STARTSTATIONID,
             ENDSTATIONID,
             LEAVETIME,
             ARRIVETIME,
             ISLATE,
             RUNDATADATE,
             MILETYPEID,
             MILENUM,
             RECDATE,
             SEQNUM,
             AVGSPEED,
             SEQTIME,
             GPSMILE,
             MEMOS,
             ISACTIVE,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY,
             STOPTIME,
             STOPNUM,
             STATIONNUM,
             SECTRATE,
             DISPLANID,
             DATASOURCE,
             PLANSTARTTIME,
             PLANENDTIME,
             INTERVALFLAG,
             SHIFTTYPE,
             SHIFTPERIOD,
             BUSCARDNO,
             INTERVALPERIOD,
             STATIONRATE,
             ISFULLFLAG,
             ISENDFLAG,
             ISSTARTFLAG,
             PLANSTARTSTATION,
             PLANENDSTATION
        FROM BZ_BUSRUNRECORDLD@GJ
       WHERE RUNDATADATE = V_DATE_IN - G_SEQ_DELTA;
    WRITE_LOG('车次数据',
              'BZ_BUSRUNRECORDLD',
              '1',
              V_DATE_IN - G_SEQ_DELTA,
              '导入成功。' || TO_CHAR(V_DATE_IN - G_SEQ_DELTA, 'yyyy-mm-dd'));
    COMMIT;
    DELETE FROM BZ_CASHINCOME T WHERE T.RUNDATE = V_DATE_IN - G_CASH_DELTA;
    INSERT INTO BZ_CASHINCOME
      (RECORDID,
       ORGID,
       ROUTEID,
       BUSID,
       STATIONID,
       SOURCEFROM,
       TICKETSORT,
       ICCARDTYPE,
       TOTALINCOME,
       PASSENGERFLOW,
       RECDATE,
       RUNDATE,
       ORGNAME,
       ROUTENAME,
       BUSSELFID)
      SELECT RECORDID,
             ORGID,
             ROUTEID,
             BUSID,
             STATIONID,
             SOURCEFROM,
             TICKETSORT,
             ICCARDTYPE,
             TOTALINCOME,
             PASSENGERFLOW,
             RECDATE,
             RUNDATE,
             ORGNAME,
             ROUTENAME,
             BUSSELFID
        FROM BZ_CASHINCOME@GJ
       WHERE RUNDATE = V_DATE_IN - G_CASH_DELTA;
    WRITE_LOG('投币数据',
              'BZ_CASHINCOME',
              '1',
              V_DATE_IN - G_CASH_DELTA,
              '导入成功。' || TO_CHAR(V_DATE_IN - G_CASH_DELTA, 'yyyy-mm-dd'));
    COMMIT;
    SELECT TO_CHAR(V_DATE_IN - G_IC_DELTA, 'YYYYMMDD')
      INTO V_SQL
      FROM DUAL;
    V_SQL := 'ALTER TABLE TB_MONTHCONSUME TRUNCATE PARTITION P_' || V_SQL;
    EXECUTE IMMEDIATE V_SQL;
    INSERT INTO TB_MONTHCONSUME
      (COUNTSERIAL,
       CONSUMESERIAL,
       CONSUMECOUNT,
       CARDNO,
       CONSUME,
       REMAINTIMES,
       BALANCE,
       CONSUMEDATE,
       CONSUMETYPE,
       VERIFYCODE,
       DRIVERCARDNO,
       LINENO,
       BUSNO,
       PSAM,
       FLAG)
      SELECT COUNTSERIAL,
             CONSUMESERIAL,
             CONSUMECOUNT,
             CARDNO,
             CONSUME,
             REMAINTIMES,
             BALANCE,
             CONSUMEDATE,
             CONSUMETYPE,
             VERIFYCODE,
             DRIVERCARDNO,
             LINENO,
             BUSNO,
             PSAM,
             FLAG
        FROM TB_MONTHCONSUME@GJ
       WHERE CONSUMEDATE >= V_DATE_IN - G_IC_DELTA
         AND CONSUMEDATE < V_DATE_IN - G_IC_DELTA + 1;
    WRITE_LOG('刷卡数据',
              'TB_MONTHCONSUME',
              '1',
              V_DATE_IN - G_IC_DELTA,
              '导入成功。' || TO_CHAR(V_DATE_IN - G_IC_DELTA, 'yyyy-mm-dd'));
    COMMIT;
    --BRT刷卡数据
    /* DELETE FROM BRT_JYM1CPUZ_HIS T
     WHERE T.JYRQZ = TO_CHAR(V_DATE_IN - G_CASH_DELTA, 'YYYYMMDD');
    INSERT INTO BRT_JYM1CPUZ_HIS
      SELECT *
        FROM BRT_JYM1CPUZ_HIS@GJ
       WHERE JYRQZ = TO_CHAR(V_DATE_IN - G_CASH_DELTA, 'YYYYMMDD');
    WRITE_LOG('Replication_DayData',
              'BRT刷卡数据',
              '1',
              V_DATE_IN,
              '结束 BRT_JYM1CPUZ_HIS TO BRT_JYM1CPUZ_HIS');*/
    COMMIT;
    --数据清理
    TREATE_BUSINESSDATA(V_DATE_IN);
  END;
  --复制某时间段范围内数据
  PROCEDURE MAKE_REPLICATION(V_BEGINDATE DATE, V_ENDDATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := V_BEGINDATE;
    WHILE V_DATE_IN <= V_ENDDATE LOOP
      MAKE_REPLICATION(V_DATE_IN);
      V_DATE_IN := V_DATE_IN + 1;
    END LOOP;
  END;
  /***************************************************************************************
  *    名称：P_IMPORT_BUSRUNDATA                                                         *
  *                                                                                      *
  *    功能：导入GPS数据(JOB调用)                                                        *
  *                                                                                      *
  *    作者：Huhuimin                                                                    *
  *    日期：2014-01-20                                                                  *
  ****************************************************************************************/
  PROCEDURE P_IMPORT_BUSRUNDATA AS
    V_STARTTIME NUMBER := 0;
    V_DATE_IN   DATE := TRUNC(SYSDATE - 4);
    V_ERRORMESS VARCHAR2(200);
  BEGIN
    SELECT NVL(MAX(T.ACTDATE), TRUNC(SYSDATE - 4))
      INTO V_DATE_IN
      FROM SYS_GPSIMPORTLOG T
     WHERE T.SUCCESSFLAG = '1';
    SELECT NVL(MAX(T.ENDTIME), 0)
      INTO V_STARTTIME
      FROM SYS_GPSIMPORTLOG T
     WHERE T.SUCCESSFLAG = '1'
       AND T.ACTDATE = V_DATE_IN;
    P_IMPORT_BUSRUNDATA(TRUNC(SYSDATE - 4), 0, 24);
    WHILE (V_DATE_IN < TRUNC(SYSDATE - 5) OR
          (V_DATE_IN = TRUNC(SYSDATE - 5) AND V_STARTTIME < 24)) LOOP
      P_IMPORT_BUSRUNDATA(V_DATE_IN, V_STARTTIME, 24);
      V_DATE_IN   := V_DATE_IN + 1;
      V_STARTTIME := 0;
    END LOOP;
    FOR CUR_DATE IN (SELECT T.ACTDATE, T.STARTTIME
                       FROM SYS_GPSIMPORTLOG T
                      WHERE T.SUCCESSFLAG = '0') LOOP
      P_IMPORT_BUSRUNDATA(CUR_DATE.ACTDATE, CUR_DATE.STARTTIME, 24);
    END LOOP;
    FOR CUR_START IN (SELECT T.ACTDATE, T.STARTTIME, T.ENDTIME
                        FROM SYS_GPSIMPORTLOG T
                       WHERE T.SUCCESSFLAG = '1'
                         AND T.SQLNUM <= 0) LOOP
      P_IMPORT_BUSRUNDATA(CUR_START.ACTDATE,
                          CUR_START.STARTTIME,
                          CUR_START.ENDTIME);
    END LOOP;
    /*  SELECT 'ALTER TABLE BSVCBUSRUNDATALD5 TRUNCATE PARTITION P_' ||
           TO_CHAR(ADD_MONTHS(V_DATE_IN, -3), 'YYYYMMDD')
      INTO V_SQL
      FROM DUAL;
    EXECUTE IMMEDIATE V_SQL;
    SELECT 'ALTER TABLE BSVCBUSRUNDATALD5 DROP PARTITION P_' ||
           TO_CHAR(ADD_MONTHS(V_DATE_IN, -3), 'YYYYMMDD')
      INTO V_SQL
      FROM DUAL;
    EXECUTE IMMEDIATE V_SQL;*/
  EXCEPTION
    WHEN OTHERS THEN
      V_ERRORMESS := SUBSTR(SQLERRM, 1, 200);
      INSERT INTO SYS_GPSIMPORTLOG
        (ID, DESCRIPTION, SUCCESSFLAG, STARTTIME, ENDTIME, ACTDATE, SQLNUM)
      VALUES
        (S_LOG.NEXTVAL,
         'GPS数据导入异常' || V_ERRORMESS,
         '0',
         0,
         24,
         V_DATE_IN,
         0);
      COMMIT;
  END;
  /***************************************************************************************
  *    名称：P_IMPORT_BUSRUNDATA                                                         *
  *                                                                                      *
  *    功能：导入GPS数据                                                                 *
  *                                                                                      *
  *    作者：Huhuimin                                                                    *
  *    日期：2014-01-20                                                                  *
  ****************************************************************************************/
  PROCEDURE P_IMPORT_BUSRUNDATA(V_DATE      DATE,
                                V_STARTTIME NUMBER,
                                V_ENDTIME   NUMBER) AS
    V_DATE_IN   DATE;
    V_START     NUMBER := 0;
    V_SQLNUM    NUMBER;
    V_SQL       VARCHAR2(500);
    V_ERRORMESS VARCHAR2(200);
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    -------------------------------------------------------------------------------------------------
    -- 清除GPS数据
    -------------------------------------------------------------------------------------------------
    IF V_STARTTIME = 0 AND V_ENDTIME = 24 THEN
      SELECT 'ALTER TABLE BSVCBUSRUNDATALD5 TRUNCATE PARTITION P_' ||
             TO_CHAR(V_DATE_IN, 'yyyymmdd')
        INTO V_SQL
        FROM DUAL;
      EXECUTE IMMEDIATE V_SQL;
    ELSE
      DELETE FROM BSVCBUSRUNDATALD5 T
       WHERE T.ACTDATETIME >= V_DATE_IN + V_STARTTIME / 24
         AND T.ACTDATETIME < V_DATE_IN + V_ENDTIME / 24;
    END IF;
    COMMIT;
    -------------------------------------------------------------------------------------------------
    -- 清除GPS数据导入日志
    -------------------------------------------------------------------------------------------------
    DELETE FROM SYS_GPSIMPORTLOG T
     WHERE T.ACTDATE = V_DATE_IN
       AND T.ENDTIME <= V_ENDTIME
       AND T.STARTTIME >= V_STARTTIME;
    COMMIT;
    -------------------------------------------------------------------------------------------------
    -- 分时段导入GPS数据
    -------------------------------------------------------------------------------------------------
    FOR CUR IN V_STARTTIME .. V_ENDTIME - 1 LOOP
      INSERT /*+append*/
      INTO BSVCBUSRUNDATALD5
        (BUSRDID,
         DATATYPE,
         ROUTEID,
         SUBROUTEID,
         PRODUCTID,
         STATIONSEQNUM,
         STATIONNUM,
         ISARRLFT,
         ACTDATETIME,
         RECDATETIME,
         WRITEID,
         ISAPPEND,
         BUSSID,
         LONGITUDE,
         LATITUDE,
         ALTITUDE,
         GPSSPEED,
         SENSORSPEED,
         ROTATIONANGLE,
         STATIONTYPE,
         ISMANULOPT,
         PACKCODE,
         SMCODE,
         ONPNUM,
         OFFPNUM,
         LEFTPNUM,
         TPTDATA,
         DOORSTATE,
         PECCANCYTYPE,
         PECCANCYTIME,
         STANDARDVALUE,
         PECCANCYVALUE,
         GPSMILE,
         RESERVECHAR1,
         RESERVECHAR2,
         RESERVECHAR3,
         RESERVECHAR4,
         RESERVECHAR5,
         RESERVECHAR6,
         RESERVECHAR7,
         RESERVECHAR8,
         RESERVECHAR9,
         RESERVECHAR10)
        (SELECT BUSRDID,
                DATATYPE,
                ROUTEID,
                SUBROUTEID,
                PRODUCTID,
                STATIONSEQNUM,
                STATIONNUM,
                ISARRLFT,
                ACTDATETIME,
                RECDATETIME,
                WRITEID,
                ISAPPEND,
                BUSSID,
                LONGITUDE,
                LATITUDE,
                ALTITUDE,
                GPSSPEED,
                SENSORSPEED,
                ROTATIONANGLE,
                STATIONTYPE,
                ISMANULOPT,
                PACKCODE,
                SMCODE,
                ONPNUM,
                OFFPNUM,
                LEFTPNUM,
                TPTDATA,
                DOORSTATE,
                PECCANCYTYPE,
                PECCANCYTIME,
                STANDARDVALUE,
                PECCANCYVALUE,
                GPSMILE,
                RESERVECHAR1,
                RESERVECHAR2,
                RESERVECHAR3,
                RESERVECHAR4,
                RESERVECHAR5,
                RESERVECHAR6,
                RESERVECHAR7,
                RESERVECHAR8,
                RESERVECHAR9,
                RESERVECHAR10
           FROM BSVCBUSRUNDATALD5@GJ T
          WHERE T.ACTDATETIME >= V_DATE_IN + CUR / 24
            AND T.ACTDATETIME < V_DATE_IN + (CUR + 1) / 24);
      --每cur/24提交一次
      COMMIT;
      --写入导入日志
      SELECT COUNT(*)
        INTO V_SQLNUM
        FROM BSVCBUSRUNDATALD5 T
       WHERE T.ACTDATETIME >= V_DATE_IN + CUR / 24
         AND T.ACTDATETIME < V_DATE_IN + (CUR + 1) / 24;
      INSERT INTO SYS_GPSIMPORTLOG
        (ID, DESCRIPTION, SUCCESSFLAG, STARTTIME, ENDTIME, ACTDATE, SQLNUM)
      VALUES
        (S_LOG.NEXTVAL,
         'GPS数据导入' || CUR || '-' || (CUR + 1),
         '1',
         CUR,
         (CUR + 1),
         V_DATE_IN,
         V_SQLNUM);
      COMMIT;
      V_START := CUR;
    END LOOP;
    COMMIT;
    UPDATE SYS_IMPORTRECORD@GJ T
       SET T.EXPORTNUM = T.EXPORTNUM + 1
     WHERE T.ACTDATE = V_DATE_IN
       AND T.DATATYPE = '0';
    -------------------------------------------------------------------------------------------------
  EXCEPTION
    WHEN OTHERS THEN
      V_ERRORMESS := SUBSTR(SQLERRM, 1, 200);
      INSERT INTO SYS_GPSIMPORTLOG
        (ID, DESCRIPTION, SUCCESSFLAG, STARTTIME, ENDTIME, ACTDATE, SQLNUM)
      VALUES
        (S_LOG.NEXTVAL,
         'GPS数据导入异常' || V_ERRORMESS,
         '0',
         V_START,
         24,
         V_DATE_IN,
         0);
      COMMIT;
  END;
  PROCEDURE TREATE_GJBUSCOUNT(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_GJBUSCOUNT',
              '公交统计方式车辆数',
              '1',
              V_DATE_IN,
              '开始');
    --删除已有同日数据
    DELETE FROM GJ_BUSCOUNT T WHERE T.RECDATE = V_DATE_IN;
    INSERT INTO GJ_BUSCOUNT
      (RECORDID, ORGID, BUSCOUNT, RECDATE, FLAG)
      SELECT RECORDID, ORGID, BUSCOUNT, RECDATE, FLAG
        FROM GJ_BUSCOUNT@GJ T
       WHERE T.RECDATE = V_DATE_IN;
    UPDATE GJ_BUSCOUNT T
       SET T.BUSCOUNT = T.BUSCOUNT + (SELECT TT.BUSCOUNT
                                        FROM GJ_BUSCOUNT TT
                                       WHERE TT.RECDATE = V_DATE_IN
                                         AND TT.FLAG = 3)
     WHERE T.FLAG != 3
       AND T.ORGID IN (SELECT TT.ORGID
                         FROM GJ_BUSCOUNT TT
                        WHERE TT.RECDATE = V_DATE_IN
                          AND TT.FLAG = 3)
       AND T.RECDATE = V_DATE_IN;
    DELETE FROM GJ_BUSCOUNT T WHERE T.FLAG = '3';
  
    UPDATE GJ_BUSCOUNT T
       SET T.BUSCOUNT = T.BUSCOUNT + (SELECT NVL(TT.BUSCOUNT, 0)
                                        FROM GJ_BUSCOUNT TT
                                       WHERE TT.RECDATE = T.RECDATE
                                         AND TT.ORGID = '2106'
                                         AND TT.FLAG = T.FLAG)
     WHERE T.BUSCOUNT IS NOT NULL
       AND T.ORGID = '2102'
       AND T.RECDATE = V_DATE_IN;
    DELETE FROM GJ_BUSCOUNT T WHERE T.ORGID = '2106';
    WRITE_LOG('TREATE_GJBUSCOUNT',
              '公交统计方式车辆数',
              '1',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      WRITE_EXCEPTION('TREATE_GJBUSCOUNT',
                      '公交统计方式车辆数',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
END PKG_OSE_REPLICATION;
/

prompt
prompt Creating package body PKG_OSE_RUNDATA
prompt =====================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_RUNDATA IS
  --------------------------------------------------------------------------------------------
  /***************************************************************************************
  *    名称：WRITE_LOG                                                                   *
  *                                                                                      *
  *    功能：写入日志                                                                    *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2,
                      FUNC_DESC     VARCHAR2,
                      V_DATE        DATE,
                      LOGINFO       VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := SUBSTR(LOGINFO, 1, 250);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '1',
       V_DATE,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /****************************************************************************************
  *    名称：WRITE_EXCEPTION                                                             *
  *                                                                                      *
  *    功能：写入异常日志                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_EXCEPTION(PROCEDURENAME VARCHAR2,
                            FUNC_DESC     VARCHAR2,
                            V_DATE        DATE,
                            ERRORCODE     NUMBER,
                            ERRORTEXT     VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := ERRORCODE || '-' || SUBSTR(ERRORTEXT, 1, 200);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '0',
       V_DATE,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /***************************************************************************************
  *    名称：Get_MainSubRoute                                                            *
  *                                                                                      *
  *    功能：获取线路主子线                                                              *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE GET_MAINSUBROUTE(V_DATE         DATE,
                             V_USEDATE      DATE,
                             V_ROUTEID      VARCHAR2,
                             V_SUBROUTEID   OUT VARCHAR2,
                             V_SUBROUTENAME OUT VARCHAR2) AS
  BEGIN
    V_SUBROUTEID   := 0;
    V_SUBROUTENAME := NULL;
  
    --取主子线ID
    FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                  FROM MCSUBROUTEINFOGS SUB
                 WHERE SUB.ROUTEID = V_ROUTEID
                   AND SUB.ISMAINSUB = '1'
                   AND SUB.ISACTIVE = '1'
                   AND SUB.BEGINDATE <= V_DATE
                   AND SUB.ENDDATE >= V_DATE) LOOP
      V_SUBROUTEID   := CUR.SUBROUTEID;
      V_SUBROUTENAME := CUR.SUBROUTENAME;
    END LOOP;
    --没有结存日期的主子线，则取当前有效的主子线
    IF (V_SUBROUTEID = 0) THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISMAINSUB = '1'
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_USEDATE
                             AND SUB.ENDDATE >= V_USEDATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
    --没有主子线，则取非主子线最小的ID
    IF (V_SUBROUTEID = 0) THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_DATE
                             AND SUB.ENDDATE >= V_DATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
    IF (V_SUBROUTEID = 0) THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_USEDATE
                             AND SUB.ENDDATE >= V_USEDATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('GetMainSubRoute',
                      '获取线路主子线',
                      V_DATE,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：Get_DriverWorkTime                                                          *
  *                                                                                      *
  *    功能：获取驾驶员工作时间                                                          *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  FUNCTION GET_DRIVERWORKTIME(V_ROUTEID NUMBER, V_DATE DATE) RETURN NUMBER AS
    V_WORKTIME   NUMBER;
    V_DATE_IN    DATE := TRUNC(V_DATE);
    V_DRIVERID   VARCHAR2(36);
    V_ARRIVETIME DATE;
    CURSOR CUR_ROUTE(ROUTE_ID NUMBER, DATE_IN DATE) IS
      SELECT T.ROUTEID, T.DRIVERID, T.ARRIVETIME, T.LEAVETIME
        FROM BZ_BUSRUNRECORDLDTEMP T
       WHERE T.ROUTEID = ROUTE_ID
         AND T.ISACTIVE = '1'
         AND T.RUNDATADATE = DATE_IN
         AND T.ARRIVETIME >= T.LEAVETIME --去掉时间错误的
       ORDER BY T.ROUTEID, T.DRIVERID, T.LEAVETIME;
  BEGIN
    V_WORKTIME := 0;
    V_DRIVERID := '';
    FOR CUR_R IN CUR_ROUTE(V_ROUTEID, V_DATE_IN) LOOP
      BEGIN
        IF (V_DRIVERID = CUR_R.DRIVERID) THEN
          IF (CUR_R.LEAVETIME - V_ARRIVETIME) * 24 > G_DRIVER_TIME THEN
            --休息时间超过2小时
            V_WORKTIME := V_WORKTIME +
                          (CUR_R.ARRIVETIME - CUR_R.LEAVETIME) * 24; --不考虑
          ELSE
            V_WORKTIME := V_WORKTIME +
                          (CUR_R.ARRIVETIME - V_ARRIVETIME) * 24;
          END IF;
          V_ARRIVETIME := CUR_R.ARRIVETIME;
        ELSE
          V_DRIVERID   := CUR_R.DRIVERID;
          V_WORKTIME   := V_WORKTIME +
                          (CUR_R.ARRIVETIME - CUR_R.LEAVETIME) * 24;
          V_ARRIVETIME := CUR_R.ARRIVETIME;
        END IF;
      END;
    END LOOP;
    RETURN V_WORKTIME;
  END;
  /***************************************************************************************
  *    名称：TREATE_RUNDATA                                                               *
  *                                                                                       *
  *    功能：业务（运营）数据结存(JOB调用接口)                                              *
  *                                                                                       *
  *    作者：huhuimin                                                                      *
  *    日期：2014-02-24                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_RUNDATA AS
  BEGIN
    TREATE_RUNDATASTORAGE(TRUNC(SYSDATE) - G_RUNDATA,
                          TRUNC(SYSDATE) - G_RUNDATA);
  END;
  /***************************************************************************************
  *    名称：TREATE_RUNDATASTORAGE                                                        *
  *                                                                                       *
  *    功能：业务（运营）数据结存(手工调用接口)                                             *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2011-12-26                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_RUNDATASTORAGE(V_BEGINDATE DATE, V_ENDDATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_BEGINDATE);
    WHILE (V_DATE_IN <= V_ENDDATE) LOOP
      --先峰段结存，后日结存
      WRITE_LOG('TREATE_RUNDATASTORAGE', '业务数据结存', V_DATE_IN, '开始');
      --导入发车记录数据
      IMPORT_BUSRUNRECORD(V_DATE_IN);
      --车辆时段发车间隔
      TREATE_BUSSENDINTERVAL(V_DATE_IN);
      --车辆数据日结存
      TREATE_BUSDAYSTORAGE(V_DATE_IN);
      --首末班时间按月份备份
      TREATE_ROUTEFSTANDLSTSEQTIME(V_DATE_IN);
      --每分钟运营车辆数据结存
      TREATE_BUSRUNCOUNT(V_DATE_IN);
      --早高峰运营车辆数据结存
      TREATE_MORBUSRUNCOUNT(V_DATE_IN);
      --线路峰段结存
      TREATE_ROUTETIMEPHASESTORAGE(V_DATE_IN);
      --线路五峰段结存
      TREATE_ROUTETIMEPHASESTORAGE2(V_DATE_IN);
      --线路日结存
      TREATE_ROUTEDAYDATASTORAGE(V_DATE_IN);
      --投诉数据结存
      TREATE_COMPLAINTS(V_DATE_IN);
      --驾驶员驾驶时间结存
      TREATE_DRIVETIMESTORAGE(V_DATE_IN);
      --行车事故信息结存
      TREATE_SAFETYEVENTINFO(V_DATE_IN);
      --指标预警结存
      INDICATOR_BUSNUMPUNCTUAL(V_DATE_IN);
      INDICATOR_BUSSHIFTCOMPLETE(V_DATE_IN);
      INDICATOR_FSTANDLSTPUNCTUAL(V_DATE_IN);
      INDICATOR_ROUTESENDBLANK(V_DATE_IN);
      INDICATOR_SATISFY(V_DATE_IN);
      INDICATOR_UPDATE_ALL(V_DATE_IN);
      WRITE_LOG('TREATE_RUNDATASTORAGE', '业务数据结存', V_DATE_IN, '结束');
      V_DATE_IN := V_DATE_IN + 1;
    END LOOP;
  END;
  /***************************************************************************************
  *    名称：P_IMPORT_BUSRUNRECORD                                                       *
  *                                                                                      *
  *    功能：导入车辆发车记录数据                                                        *
                                                                                         *
  *    作者：huhuimin                                                                    * 
  *    日期：2013-05-02                                                                  *
  ****************************************************************************************/
  PROCEDURE IMPORT_BUSRUNRECORD(V_DATE DATE) AS
    V_DATE_IN   DATE;
    V_STARTDATE DATE;
    V_SQL       VARCHAR2(500);
  BEGIN
    V_DATE_IN   := TRUNC(V_DATE);
    V_STARTDATE := SYSDATE;
    -------------------------------------------------------------------------------------------------
    -- 清除当天发车记录数据        
    -------------------------------------------------------------------------------------------------
    SELECT 'TRUNCATE TABLE BZ_BUSRUNRECORDLDTEMP' INTO V_SQL FROM DUAL;
    EXECUTE IMMEDIATE V_SQL;
    COMMIT;
    -------------------------------------------------------------------------------------------------
    -- 分时段导入发车记录数据
    -------------------------------------------------------------------------------------------------
    FOR CUR IN 1 .. 34 LOOP
      BEGIN
        INSERT /*+append*/
        INTO BZ_BUSRUNRECORDLDTEMP
          (BUSRRID,
           ORGID,
           ROUTEID,
           SUBROUTEID,
           SEGMENTID,
           RECTYPE,
           BUSID,
           DRIVERID,
           BUSSID,
           STEWARDID,
           STARTSTATIONID,
           ENDSTATIONID,
           LEAVETIME,
           ARRIVETIME,
           ISLATE,
           RUNDATADATE,
           MILETYPEID,
           MILENUM,
           RECDATE,
           SEQNUM,
           AVGSPEED,
           SEQTIME,
           GPSMILE,
           MEMOS,
           ISACTIVE,
           CREATED,
           CREATEDBY,
           UPDATED,
           UPDATEDBY,
           STOPTIME,
           STOPNUM,
           STATIONNUM,
           SECTRATE)
          SELECT BUSRRID,
                 ORGID,
                 ROUTEID,
                 SUBROUTEID,
                 SEGMENTID,
                 RECTYPE,
                 BUSID,
                 DRIVERID,
                 BUSSID,
                 STEWARDID,
                 STARTSTATIONID,
                 ENDSTATIONID,
                 LEAVETIME,
                 ARRIVETIME,
                 ISLATE,
                 RUNDATADATE,
                 MILETYPEID,
                 MILENUM,
                 RECDATE,
                 SEQNUM,
                 AVGSPEED,
                 SEQTIME,
                 GPSMILE,
                 MEMOS,
                 ISACTIVE,
                 CREATED,
                 CREATEDBY,
                 UPDATED,
                 UPDATEDBY,
                 STOPTIME,
                 STOPNUM,
                 STATIONNUM,
                 SECTRATE
            FROM BZ_BUSRUNRECORDLD T
           WHERE T.RUNDATADATE>=V_DATE_IN
           AND T.RUNDATADATE<V_DATE_IN+2
             AND T.LEAVETIME >= V_DATE_IN + (CUR - 1) / 24
             AND T.LEAVETIME < V_DATE_IN + CUR / 24
             AND T.ARRIVETIME > T.LEAVETIME
             AND T.ISACTIVE = '1'
             AND T.GPSMILE >= 0
           ORDER BY T.ROUTEID, T.BUSID, T.LEAVETIME;
        --每cur/24提交一次
        COMMIT;
      END;
    END LOOP;
    INSERT /*+append*/
    INTO BZ_BUSRUNRECORDLDTEMP
      (BUSRRID,
       ORGID,
       ROUTEID,
       SUBROUTEID,
       SEGMENTID,
       RECTYPE,
       BUSID,
       DRIVERID,
       BUSSID,
       STEWARDID,
       STARTSTATIONID,
       ENDSTATIONID,
       LEAVETIME,
       ARRIVETIME,
       ISLATE,
       RUNDATADATE,
       MILETYPEID,
       MILENUM,
       RECDATE,
       SEQNUM,
       AVGSPEED,
       SEQTIME,
       GPSMILE,
       MEMOS,
       ISACTIVE,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY,
       STOPTIME,
       STOPNUM,
       STATIONNUM,
       SECTRATE)
      SELECT BUSRRID,
             ORGID,
             ROUTEID,
             SUBROUTEID,
             SEGMENTID,
             RECTYPE,
             BUSID,
             DRIVERID,
             BUSSID,
             STEWARDID,
             STARTSTATIONID,
             ENDSTATIONID,
             LEAVETIME,
             ARRIVETIME,
             ISLATE,
             RUNDATADATE,
             MILETYPEID,
             MILENUM,
             RECDATE,
             SEQNUM,
             AVGSPEED,
             SEQTIME,
             GPSMILE,
             MEMOS,
             ISACTIVE,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY,
             STOPTIME,
             STOPNUM,
             STATIONNUM,
             SECTRATE
        FROM BZ_BUSRUNRECORDLD T
       WHERE T.LEAVETIME < V_DATE_IN
         AND T.ARRIVETIME >= V_DATE_IN;
    COMMIT;
    WRITE_LOG('P_IMPORT_BUSRUNRECORD',
              '导入发车记录数据',
              V_DATE_IN,
              '时间：' || ROUND((SYSDATE - V_STARTDATE) * 24 * 60 * 60, 2) || '秒');
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('P_IMPORT_BUSRUNRECORD',
                      '导入发车记录数据',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_BUSSENDINTERVAL                                                        *
  *                                                                                      *
  *    功能：车辆时段发车间隔                                                           *
  *                                                                                      *
  *    作者：huhuimin                                                                    *
  *    日期：2013-08-27                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_BUSSENDINTERVAL(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_BUSSENDINTERVAL',
              '车辆时段发车间隔',
              V_DATE_IN,
              '开始');
    DELETE FROM JZ_BUSSENDINTERVAL T WHERE T.JZDATE = V_DATE_IN;
    INSERT INTO JZ_BUSSENDINTERVAL
      (RECORDID,
       ROUTEID,
       STARTTIME,
       ENDTIME,
       BUSSID,
       SHIFTNUM,
       SENDINTERVAL,
       DATASAVELEVEL,
       JZDATE)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             T.ROUTEID,
             T.STARTTIME,
             T.ENDTIME,
             T.BUSSID,
             T.SHIFTNUM,
             T.SENDINTERVAL,
             '3' AS DATASAVELEVEL,
             V_DATE_IN AS JZDATE
        FROM (SELECT T.ORGID,
                     T.ROUTEID,
                     T.BUSSID,
                     SCAL.MINNUM AS STARTTIME,
                     SCAL.MAXNUM AS ENDTIME,
                     COUNT(*) AS SHIFTNUM,
                     ROUND(DECODE(COUNT(*),
                                  0,
                                  0,
                                  (SCAL.MAXNUM - SCAL.MINNUM) / COUNT(*)),
                           2) AS SENDINTERVAL
                FROM BZ_BUSRUNRECORDLDTEMP T, SYS_CALCULATECONFIG SCAL
               WHERE LEAVETIME >= V_DATE_IN + SCAL.MINNUM / 24 / 60
                 AND LEAVETIME <= V_DATE_IN + SCAL.MAXNUM / 24 / 60
                 AND RECTYPE = '1'
                 AND SCAL.CONFIGNAME = 'SENDINTERVALHOURPHASE'
               GROUP BY T.ORGID,
                        T.ROUTEID,
                        T.BUSSID,
                        SCAL.MINNUM,
                        SCAL.MAXNUM) T;
    COMMIT;
    INSERT INTO JZ_BUSSENDINTERVAL
      (RECORDID,
       ROUTEID,
       STARTTIME,
       ENDTIME,
       BUSSID,
       SHIFTNUM,
       SENDINTERVAL,
       DATASAVELEVEL,
       JZDATE)
      SELECT S_ROUTESTORAGE.NEXTVAL,
             T.ROUTEID,
             0 AS STARTTIME,
             1440 AS ENDTIME,
             T.BUSSID,
             T.SHIFTNUM,
             ROUND(T.RUNTIME / T.SHIFTNUM, 2) AS SENDINTERVAL,
             '3' AS DATASAVELEVEL,
             V_DATE_IN AS JZDATE
        FROM (SELECT T.ROUTEID,
                     T.BUSSID,
                     COUNT(T.BUSRRID) AS SHIFTNUM,
                     MAX(T.LEAVETIME) AS STARTTIME,
                     MIN(T.LEAVETIME) AS ENDTIME,
                     ROUND((MAX(T.LEAVETIME) - MIN(T.LEAVETIME)) * 24 * 60,
                           2) AS RUNTIME
                FROM BZ_BUSRUNRECORDLDTEMP T
               WHERE T.LEAVETIME >= V_DATE_IN
                 AND T.LEAVETIME < V_DATE_IN + 1
                 AND T.RECTYPE = '1'
               GROUP BY T.ROUTEID, T.BUSSID) T;
    COMMIT;
    WRITE_LOG('TREATE_BUSSENDINTERVAL',
              '车辆时段发车间隔',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_BUSSENDINTERVAL',
                      '车辆时段发车间隔',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_BUSDAYSTORAGE                                                        *
  *                                                                                      *
  *    功能：车辆数据日结存表                                                            *
  *                                                                                      *
  *    作者：huhuimin                                                                    *
  *    日期：2013-03-07                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_BUSDAYSTORAGE(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_BUSDAYSTORAGE',
              '车辆数据日结存表',
              V_DATE_IN,
              '开始');
    DELETE FROM JZ_BUSDAYSTORAGE T WHERE T.JZDATE = V_DATE_IN;
    INSERT INTO JZ_BUSDAYSTORAGE
      (RECORDID,
       ORGID,
       ORGNAME,
       ROUTEID,
       ROUTENAME,
       BUSID,
       CARDID,
       RUNMILES,
       UNRUNMILES,
       RUNTIME,
       UNRUNTIME,
       JZDATE)
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
             ORG.ORGID            AS ORGID,
             ORG.ORGNAME          AS ORGNAME,
             TTT.ROUTEID          AS ROUTEID,
             TTT.ROUTENAME        AS ROUTENAME,
             TTT.BUSID            AS BUSID,
             BUS.CARDID           AS CARDID,
             TTT.RUNMILES         AS RUNMILES,
             TTT.UNRUNMILES       AS UNRUNMILES,
             TTT.RUNTIME          AS RUNTIME,
             TTT.UNRUNTIME        AS UNRUNTIME,
             V_DATE_IN            AS JZDATE
        FROM (SELECT BUS.ORGID,
                     TT.ROUTEID,
                     TT.ROUTENAME,
                     BUS.BUSID,
                     TT.RUNMILES,
                     TT.UNRUNMILES,
                     TT.RUNTIME,
                     TT.UNRUNTIME
                FROM (SELECT ROUTEINFO.ORGID,
                             ROU.ROUTEID,
                             ROUTEINFO.ROUTENAME,
                             RUNRECORD.BUSID,
                             RUNRECORD.RUNMILES,
                             RUNRECORD.UNRUNMILES,
                             RUNRECORD.RUNTIME,
                             RUNRECORD.UNRUNTIME
                        FROM (SELECT *
                                FROM (SELECT RUN.BUSID,
                                             RUN.RUNMILES,
                                             UNRUN.UNRUNMILES,
                                             RUN.RUNTIME,
                                             UNRUN.UNRUNTIME
                                        FROM (SELECT BRUN.BUSID,
                                                     SUM(NVL(BRUN.MILENUM, 0)) AS RUNMILES,
                                                     ROUND(SUM(NVL(BRUN.ARRIVETIME -
                                                                   BRUN.LEAVETIME,
                                                                   0)) * 24 * 60,
                                                           2) AS RUNTIME
                                                FROM BZ_BUSRUNRECORDLDTEMP BRUN
                                               WHERE BRUN.RECTYPE = '1'
                                                 AND BRUN.RUNDATADATE =
                                                     V_DATE_IN
                                               GROUP BY BRUN.BUSID) RUN,
                                             (SELECT BRUN.BUSID,
                                                     SUM(NVL(BRUN.MILENUM, 0)) AS UNRUNMILES,
                                                     ROUND(SUM(NVL(BRUN.ARRIVETIME -
                                                                   BRUN.LEAVETIME,
                                                                   0)) * 24 * 60,
                                                           2) AS UNRUNTIME
                                                FROM BZ_BUSRUNRECORDLDTEMP BRUN
                                               WHERE BRUN.RECTYPE = '2'
                                                 AND BRUN.RUNDATADATE =
                                                     V_DATE_IN
                                               GROUP BY BRUN.BUSID) UNRUN
                                       WHERE RUN.BUSID = UNRUN.BUSID(+)) RUN1
                              UNION
                              SELECT *
                                FROM (SELECT UNRUN.BUSID,
                                             RUN.RUNMILES,
                                             UNRUN.UNRUNMILES,
                                             RUN.RUNTIME,
                                             UNRUN.UNRUNTIME
                                        FROM (SELECT BRUN.BUSID,
                                                     SUM(NVL(BRUN.MILENUM, 0)) AS RUNMILES,
                                                     ROUND(SUM(NVL(BRUN.ARRIVETIME -
                                                                   BRUN.LEAVETIME,
                                                                   0)) * 24 * 60,
                                                           2) AS RUNTIME
                                                FROM BZ_BUSRUNRECORDLDTEMP BRUN
                                               WHERE BRUN.RECTYPE = '1'
                                                 AND BRUN.RUNDATADATE =
                                                     V_DATE_IN
                                               GROUP BY BRUN.BUSID) RUN,
                                             (SELECT BRUN.BUSID,
                                                     SUM(NVL(BRUN.MILENUM, 0)) AS UNRUNMILES,
                                                     ROUND(SUM(NVL(BRUN.ARRIVETIME -
                                                                   BRUN.LEAVETIME,
                                                                   0)) * 24 * 60,
                                                           2) AS UNRUNTIME
                                                FROM BZ_BUSRUNRECORDLDTEMP BRUN
                                               WHERE BRUN.RECTYPE = '2'
                                                 AND BRUN.RUNDATADATE =
                                                     V_DATE_IN
                                               GROUP BY BRUN.BUSID) UNRUN
                                       WHERE RUN.BUSID(+) = UNRUN.BUSID) UNRUN1
                               WHERE UNRUN1.RUNMILES IS NULL) RUNRECORD,
                             (SELECT *
                                FROM MCRBUSROUTEGS T
                               WHERE T.RECDATE IN
                                     (SELECT MAX(T.RECDATE)
                                        FROM MCRBUSROUTEGS TT
                                       WHERE T.BUSID = TT.BUSID
                                         AND T.RECDATE <= V_DATE_IN + 10)) ROU,
                             MCROUTEINFOVW ROUTEINFO
                       WHERE RUNRECORD.BUSID = ROU.BUSID(+)
                         AND ROU.ROUTEID = ROUTEINFO.ROUTEID) TT,
                     MCBUSINFOVW BUS
               WHERE BUS.BUSID = TT.BUSID(+)) TTT,
             MCBUSINFOVW BUS,
             (SELECT ORG2.ORGID AS ORGID2, ORG1.ORGID, ORG1.ORGNAME
                FROM MCORGINFOGS ORG1, MCORGINFOGS ORG2
               WHERE ORG1.ORGID = ORG2.PARENTORGID
                 AND ORG1.ORGGRADE != 1) ORG
       WHERE BUS.BUSID(+) = TTT.BUSID
         AND ORG.ORGID2(+) = TTT.ORGID;
    COMMIT;
    WRITE_LOG('TREATE_BUSDAYSTORAGE',
              '车辆数据日结存表',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_BUSDAYSTORAGE',
                      '车辆数据日结存表',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：TREATE_ROUTEFSTANDLSTSEQTIME                                                 *
  *                                                                                       *
  *    功能：线路首末班时间按月备份                                                       *
  *                                                                                       *
  *    作者：huhuimin                                                                     *
  *    日期：2013-03-26                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEFSTANDLSTSEQTIME(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_ROUTEFSTANDLSTSEQTIME',
              '线路首末班时间按月备份',
              V_DATE_IN,
              '开始');
    --删除现有本月份数据
    DELETE FROM JZ_ROUTEFSTANDLSTSEQTIME T
     WHERE T.JZDATE >=
           TO_DATE(TO_CHAR(V_DATE_IN, 'YYYYMM') || '01', 'YYYYMMDD')
       AND T.JZDATE < TO_DATE(TO_CHAR(ADD_MONTHS(V_DATE_IN, 1), 'YYYYMM') || '01',
                              'YYYYMMDD');
    --插入新结存数据
    INSERT INTO JZ_ROUTEFSTANDLSTSEQTIME
      (RECORDID,
       ROUTEID,
       STARTDATE,
       ENDDATE,
       STARTWEEK,
       ENDWEEK,
       MAINSTATIONFSTTIME,
       MAINSTATIONLSTTIME,
       SECONDSTATIONFSTTIME,
       SECONDSTATIONLSTTIME,
       JZDATE)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             ROU.ROUTEID,
             T.STARTDATE,
             T.ENDDATE,
             T.STARTWEEK,
             T.ENDWEEK,
             T.MAINSTATIONFSTTIME,
             T.MAINSTATIONLSTTIME,
             T.SECONDSTATIONFSTTIME,
             T.SECONDSTATIONLSTTIME,
             V_DATE_IN AS JZDATE
        FROM MCROUTEFSTANDLSTSEQTIMEGS T, MCROUTEINFOVW ROU
       WHERE T.ROUTEID(+) = ROU.ROUTEID;
    COMMIT;
    WRITE_LOG('TREATE_ROUTEFSTANDLSTSEQTIME',
              '线路首末班时间按月备份',
              V_DATE_IN,
              '结束');
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTEFSTANDLSTSEQTIME',
                      '线路首末班时间按月备份',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_BUSRUNCOUNT                                                          *
  *                                                                                      *
  *    功能：车辆运营在线数数据结存                                                      *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                    *
  *    日期：2013-05-07                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_BUSRUNCOUNT(V_DATE DATE) AS
    V_DATE_IN VARCHAR2(20);
  BEGIN
    V_DATE_IN := TO_CHAR(V_DATE, 'yyyy-mm-dd');
    WRITE_LOG('TREATE_BUSRUNCOUNT',
              '车辆运营在线数数据结存',
              TO_DATE(V_DATE_IN, 'yyyy-mm-dd'),
              '开始');
    FOR CUR IN 0 .. 23 LOOP
      MERGE INTO BZ_BUSONLINE DEST
      USING (SELECT TO_CHAR(MINU.MINUTE, 'hh24:mi:ss') MINUTE,
                    COUNT(DISTINCT(T.BUSID)) BUSCOUNT
               FROM BZ_BUSRUNRECORDLDTEMP T, MINUTES_DAY MINU
              WHERE T.LEAVETIME <=
                    TO_DATE(V_DATE_IN || TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss')
                AND T.ARRIVETIME >=
                    TO_DATE(V_DATE_IN || TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss')
                AND TO_DATE('2000-01-01' ||
                            TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss') <
                    TO_DATE('2000-01-01', 'yyyy-mm-dd') + (CUR + 1) / 24
                AND TO_DATE('2000-01-01' ||
                            TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss') >=
                    TO_DATE('2000-01-01', 'yyyy-mm-dd') + CUR / 24
                AND T.RECTYPE = 1
              GROUP BY MINU.MINUTE) SOUR
      ON (TO_DATE(V_DATE_IN || SOUR.MINUTE, 'yyyy-mm-dd hh24:mi:ss') = TO_DATE(TO_CHAR(DEST.RECDATE, 'yyyy-mm-dd hh24:mi') || ':00', 'yyyy-mm-dd hh24:mi:ss'))
      WHEN MATCHED THEN
        UPDATE SET DEST.BUSRUNCOUNT = SOUR.BUSCOUNT;
      COMMIT;
      MERGE INTO BZ_BUSONLINE DEST
      USING (SELECT TO_CHAR(MINU.MINUTE, 'hh24:mi:ss') MINUTE,
                    COUNT(DISTINCT(T.BUSID)) BUSCOUNT
               FROM BZ_BUSRUNRECORDLDTEMP T, MINUTES_DAY MINU
              WHERE T.LEAVETIME <=
                    TO_DATE(V_DATE_IN || TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss')
                AND T.ARRIVETIME >=
                    TO_DATE(V_DATE_IN || TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss')
                AND TO_DATE('2000-01-01' ||
                            TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss') <
                    TO_DATE('2000-01-01', 'yyyy-mm-dd') + (CUR + 1) / 24
                AND TO_DATE('2000-01-01' ||
                            TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss') >=
                    TO_DATE('2000-01-01', 'yyyy-mm-dd') + CUR / 24
                AND T.RECTYPE != '1'
              GROUP BY MINU.MINUTE) SOUR
      ON (TO_DATE(V_DATE_IN || SOUR.MINUTE, 'yyyy-mm-dd hh24:mi:ss') = TO_DATE(TO_CHAR(DEST.RECDATE, 'yyyy-mm-dd hh24:mi') || ':00', 'yyyy-mm-dd hh24:mi:ss'))
      WHEN MATCHED THEN
        UPDATE SET DEST.BUSUNRUNCOUNT = SOUR.BUSCOUNT;
      COMMIT;
    END LOOP;
    WRITE_LOG('TREATE_BUSRUNCOUNT',
              '车辆运营在线数数据结存',
              TO_DATE(V_DATE_IN, 'yyyy-mm-dd'),
              '结束');
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_BUSRUNCOUNT',
                      '车辆运营在线数数据结存',
                      TO_DATE(V_DATE_IN, 'yyyy-mm-dd'),
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_GJBUSCOUNT                                                          *
  *                                                                                      *
  *    功能：早高峰车辆在线数数据结存                                                      *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                    *
  *    日期：2013-05-07                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_GJBUSCOUNT(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('按公交统计方式统计早高峰上线车辆',
              'TREATE_GJBUSCOUNT',
              V_DATE_IN,
              '开始计算');
    DELETE FROM GJ_BUSCOUNT T WHERE T.RECDATE = V_DATE_IN;
    INSERT INTO GJ_BUSCOUNT
      (RECORDID, ORGID, BUSCOUNT, RECDATE, FLAG)
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
             T.ORGID AS ORGID,
             T.BUSCOUNT AS BUSCOUNT,
             TRUNC(V_DATE_IN) AS RECDATE,
             '2' AS FLAG
        FROM (SELECT MM.PARENTORGID AS ORGID,
                     COUNT(DISTINCT T.PRODUCTID) AS BUSCOUNT
                FROM BSVCBUSRUNDATALD5 T, MCROUTEINFOGS M, MCORGINFOGS MM
               WHERE T.ACTDATETIME <= V_DATE_IN + 26 / 3 / 24
                 AND T.ACTDATETIME >= V_DATE_IN + 49 / 6 / 24
                 AND T.ROUTEID = M.ROUTEID
                 AND M.ORGID = MM.ORGID
                 AND MM.PARENTORGID >= 2101
                 AND MM.PARENTORGID <= 2106
                 AND (T.ROUTEID < 370 OR T.ROUTEID > 400)
               GROUP BY MM.PARENTORGID) T;
    COMMIT;
    INSERT INTO GJ_BUSCOUNT
      (RECORDID, ORGID, BUSCOUNT, RECDATE, FLAG)
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
             T.ORGID AS ORGID,
             T.BUSCOUNT AS BUSCOUNT,
             TRUNC(V_DATE_IN) AS RECDATE,
             '1' AS FLAG
        FROM (SELECT MM.PARENTORGID AS ORGID,
                     COUNT(DISTINCT T.PRODUCTID) AS BUSCOUNT
                FROM BSVCBUSRUNDATALD5 T, MCROUTEINFOGS M, MCORGINFOGS MM
               WHERE T.ACTDATETIME <= V_DATE_IN + 26 / 3 / 24
                 AND T.ACTDATETIME >= V_DATE_IN + 25 / 3 / 24
                 AND T.ROUTEID = M.ROUTEID
                 AND M.ORGID = MM.ORGID
                 AND MM.PARENTORGID >= 2101
                 AND MM.PARENTORGID <= 2106
                 AND (T.ROUTEID < 370 OR T.ROUTEID > 400)
               GROUP BY MM.PARENTORGID) T;
    COMMIT;
    INSERT INTO GJ_BUSCOUNT
      (RECORDID, ORGID, BUSCOUNT, RECDATE, FLAG)
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
             T.ORGID AS ORGID,
             T.BUSCOUNT AS BUSCOUNT,
             TRUNC(V_DATE_IN) AS RECDATE,
             '3' AS FLAG
        FROM (SELECT MM.PARENTORGID AS ORGID,
                     COUNT(DISTINCT T.PRODUCTID) AS BUSCOUNT
                FROM BSVCBUSRUNDATALD5 T, MCROUTEINFOGS M, MCORGINFOGS MM
               WHERE T.ACTDATETIME <= V_DATE_IN + 8.5 / 24
                 AND T.ACTDATETIME >= V_DATE_IN + 7 / 24
                 AND T.ROUTEID = M.ROUTEID
                 AND T.ROUTEID >= 370
                 AND T.ROUTEID <= 400
                 AND M.ORGID = MM.ORGID
                 AND MM.PARENTORGID >= 2101
                 AND MM.PARENTORGID <= 2106
               GROUP BY MM.PARENTORGID) T;
    COMMIT;
    UPDATE GJ_BUSCOUNT T
       SET T.BUSCOUNT = T.BUSCOUNT + (SELECT TT.BUSCOUNT
                                        FROM GJ_BUSCOUNT TT
                                       WHERE TT.RECDATE = V_DATE_IN
                                         AND TT.FLAG = 3)
     WHERE T.FLAG != 3
       AND T.ORGID IN (SELECT TT.ORGID
                         FROM GJ_BUSCOUNT TT
                        WHERE TT.RECDATE = V_DATE_IN
                          AND TT.FLAG = 3)
       AND T.RECDATE = V_DATE_IN;
    DELETE FROM GJ_BUSCOUNT T WHERE T.FLAG = '3';
  
    UPDATE GJ_BUSCOUNT T
       SET T.BUSCOUNT = T.BUSCOUNT + (SELECT NVL(TT.BUSCOUNT, 0)
                                        FROM GJ_BUSCOUNT TT
                                       WHERE TT.RECDATE = T.RECDATE
                                         AND TT.ORGID = '2106'
                                         AND TT.FLAG = T.FLAG)
     WHERE T.BUSCOUNT IS NOT NULL
       AND T.ORGID = '2102'
       AND T.RECDATE = V_DATE_IN;
    DELETE FROM GJ_BUSCOUNT T WHERE T.ORGID = '2106';
    WRITE_LOG('按公交统计方式统计早高峰上线车辆',
              'TREATE_GJBUSCOUNT',
              V_DATE_IN,
              '计算结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      WRITE_EXCEPTION('按公交统计方式统计早高峰上线车辆',
                      'TREATE_GJBUSCOUNT',
                      SYSDATE,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_MORBUSRUNCOUNT                                                       *
  *                                                                                      *
  *    功能：早高峰车辆运营在线数数据结存                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                    *
  *    日期：2013-07-19                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_MORBUSRUNCOUNT(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_MORBUSRUNCOUNT',
              '早高峰车辆运营在线数数据结存',
              V_DATE_IN,
              '开始');
    MERGE INTO GJ_BUSCOUNT DEST
    USING (SELECT '2' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 49 / 6 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 49 / 6 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND ORG.ORGID = T.ORGID
              AND T.RECTYPE = '1'
              AND ORG.PARENTORGID IN
                  ('2101', '2102', '2103', '2104', '2105', '2106')
            GROUP BY ORG.PARENTORGID
           UNION
           SELECT '1' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 25 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 25 / 3 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND T.ORGID = ORG.ORGID
              AND T.RECTYPE = '1'
              AND ORG.PARENTORGID IN
                  ('2101', '2102', '2103', '2104', '2105', '2106')
            GROUP BY ORG.PARENTORGID) SOUR
    ON (DEST.ORGID = SOUR.ORGID AND DEST.RECDATE = V_DATE_IN AND DEST.FLAG = SOUR.FLAG)
    WHEN MATCHED THEN
      UPDATE SET DEST.BUSRUNCOUNT = SOUR.BUSCOUNT;
    COMMIT;
    MERGE INTO GJ_BUSCOUNT DEST
    USING (SELECT '2' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 49 / 6 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 49 / 6 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND ORG.ORGID = T.ORGID
              AND T.RECTYPE != '1'
              AND ORG.PARENTORGID IN
                  ('2101', '2102', '2103', '2104', '2105', '2106')
            GROUP BY ORG.PARENTORGID
           UNION
           SELECT '1' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 25 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 25 / 3 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND T.ORGID = ORG.ORGID
              AND T.RECTYPE != '1'
              AND ORG.PARENTORGID IN
                  ('2101', '2102', '2103', '2104', '2105', '2106')
            GROUP BY ORG.PARENTORGID) SOUR
    ON (DEST.ORGID = SOUR.ORGID AND DEST.RECDATE = V_DATE_IN AND DEST.FLAG = SOUR.FLAG)
    WHEN MATCHED THEN
      UPDATE SET DEST.BUSUNRUNCOUNT = SOUR.BUSCOUNT;
    COMMIT;
    MERGE INTO GJ_BUSCOUNT DEST
    USING (SELECT '2' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 49 / 6 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 49 / 6 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND ORG.ORGID = T.ORGID
              AND T.RECTYPE = '1'
              AND ORG.PARENTORGID IN ('2106')
            GROUP BY ORG.PARENTORGID
           UNION
           SELECT '1' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 25 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 25 / 3 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND T.ORGID = ORG.ORGID
              AND T.RECTYPE = '1'
              AND ORG.PARENTORGID IN ('2106')
            GROUP BY ORG.PARENTORGID) SOUR
    ON (DEST.ORGID = SOUR.ORGID AND DEST.RECDATE = V_DATE_IN AND DEST.FLAG = SOUR.FLAG AND DEST.ORGID = '2102')
    WHEN MATCHED THEN
      UPDATE SET DEST.BUSRUNCOUNT = DEST.BUSRUNCOUNT + SOUR.BUSCOUNT;
    COMMIT;
    MERGE INTO GJ_BUSCOUNT DEST
    USING (SELECT '2' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 49 / 6 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 49 / 6 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND ORG.ORGID = T.ORGID
              AND T.RECTYPE != '1'
              AND ORG.PARENTORGID IN ('2106')
            GROUP BY ORG.PARENTORGID
           UNION
           SELECT '1' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 25 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 25 / 3 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND T.ORGID = ORG.ORGID
              AND T.RECTYPE != '1'
              AND ORG.PARENTORGID IN ('2106')
            GROUP BY ORG.PARENTORGID) SOUR
    ON (DEST.ORGID = SOUR.ORGID AND DEST.RECDATE = V_DATE_IN AND DEST.FLAG = SOUR.FLAG AND DEST.ORGID = '2102')
    WHEN MATCHED THEN
      UPDATE SET DEST.BUSUNRUNCOUNT = DEST.BUSUNRUNCOUNT + SOUR.BUSCOUNT;
    COMMIT;
    WRITE_LOG('TREATE_MORBUSRUNCOUNT',
              '早高峰车辆运营在线数数据结存',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_MORBUSRUNCOUNT',
                      '早高峰车辆运营在线数数据结存',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASE_ORG                                                *
  *                                                                                      *
  *    功能：按峰段指标数据结存表(组织)                                                    *
  *                                                                                      *
  *    作者：huhuimin                                                                     *
  *    日期：2012-04-09                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASE2_ORG(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    WRITE_LOG('TREATE_ROUTETIMEPHASE2_ORG',
              '按峰段指标结存-组织',
              V_DATE_IN,
              '开始');
    --删除日结数据
    DELETE FROM JZ_TIMEPHASEDATASTORAGE2
     WHERE JZDATE = V_DATE_IN
       AND STORAGEORGTYPE != '4'
       AND DATASAVELEVEL = '3';
    --插入日结数据
    INSERT INTO JZ_TIMEPHASEDATASTORAGE2
      (RECORDID, --记录编号
       ORGID, --组织编号
       ROUTEID, --线路编号
       ROUTENAME, --线路名称
       JZDATE, --结存日期
       TIMEPHASETYPE, --峰段类型
       TIMEPHASEVALUE, --峰段名称
       TIMEPHASESTARTTIME, --峰段开始时间
       TIMEPHASEENDTIME, --峰段结束时间
       TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
       TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
       STDSEQS, --标准车次数
       LOADPSGCAPABILITY, --载客能力
       PLANSEQMILE, --计划里程
       GPSMILES, --GPS里程
       RUNMILES, --营运里程
       RUNTIMES, --营运时间
       UNRUNMILES, --非营运里程
       DEVOTIONBUSCOUNT, --投入车辆数
       DEVOTIONEMPCOUNT, --投入人员数
       PLANBUSCOUNT, --计划投入车辆数
       PLANEMPCOUNT, --计划投入驾驶员数
       PSGCOUNT, --客运量
       PLANSEQCOUNT, --计划班次数
       ACTUALSEQCOUNT, --实际班次数
       FULLSEQCOUNT,
       ACTUALINTERVAL, --实际平均发车间隔（分钟）
       ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
       BUSSENDINTERVALSTD, --发车间隔合格班次数
       BUSDISTANCERATE, --车距合格率
       STATIONKEEPBACKRATE, --车站平均留客率
       OVERSPEEDCOUNT, --超速次数
       UNRULESTOPCOUNT, --不规范停车次数
       MDLOPENDOORCOUNT, --中途开关门次数
       RUNCIRCLETIME, --运营周期时间（分钟）
       ROUTERUNTIME, --线路行驶时间（分钟）
       ROUTESTOPTIME, --线路停站时间（分钟）
       BUSSENDSPEED, --运营车速（公里/小时）
       BUSRUNSPEED, --运送车速（公里/小时）
       ONTIMESEQCOUNT, --准点车次数
       BIGSTATIONONTIMERATE, --大站准点率
       SUMBUSCOUNT, --总配车数
       ROUTECODE, --线路编码
       DATASAVELEVEL, --数据结存级别
       STORAGEORGTYPE, --组织结存级别
       RECDATE, --记录日期
       TIMEPHASETIME)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             ORG.ORGID AS ORGID,
             NULL AS ROUTEID,
             NULL AS ROUTENAME,
             V_DATE_IN AS JZDATE,
             T.TIMEPHASETYPE AS TIMEPHASETYPE,
             T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
             NULL AS TIMEPHASESTARTTIME,
             NULL AS TIMEPHASEENDTIME,
             NULL AS TIMEPHASEINTERVAL,
             NULL AS TIMEPHASECIRCLETIME,
             T.STDSEQS AS STDSEQS,
             T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
             T.PLANSEQMILE AS PLANSEQMILE,
             T.GPSMILES AS GPSMILES,
             T.RUNMILES AS RUNMILES,
             T.RUNTIMES AS RUNTIMES,
             T.UNRUNMILES AS UNRUNMILES,
             T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
             T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
             T.PLANBUSCOUNT AS PLANBUSCOUNT,
             T.PLANEMPCOUNT AS PLANEMPCOUNT,
             T.PSGCOUNT AS PSGCOUNT,
             T.PLANSEQCOUNT AS PLANSEQCOUNT,
             T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
             T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
             NULL AS ACTUALINTERVAL,
             NULL AS ACTUALCIRCLETIME,
             T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
             NULL AS BUSDISTANCERATE,
             NULL AS STATIONKEEPBACKRATE,
             T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
             T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
             T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
             NULL AS RUNCIRCLETIME,
             NULL AS ROUTERUNTIME,
             NULL AS ROUTESTOPTIME,
             NULL AS BUNSENDSPEED,
             NULL AS BUSRUNSPEED,
             T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
             NULL AS BIGSTATIONONTIMERATE,
             T.SUMBUSCOUNT AS SUMBUSCOUNT,
             NULL AS ROUTECODE,
             '3' AS DATASAVELEVEL,
             ORG.ORGGRADE AS STORAGEORGTYPE,
             SYSDATE AS RECDATE,
             TIMEPHASETIME AS TIMEPHASETIME
        FROM MCORGINFOGS ORG,
             (SELECT O.PARENTORGID AS ORGID,
                     T.TIMEPHASETYPE AS TIMEPHASETYPE,
                     T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                     SUM(T.STDSEQS) AS STDSEQS,
                     SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                     SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                     SUM(T.GPSMILES) AS GPSMILES,
                     SUM(T.RUNMILES) AS RUNMILES,
                     SUM(T.RUNTIMES) AS RUNTIMES,
                     SUM(T.UNRUNMILES) AS UNRUNMILES,
                     SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                     SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                     SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                     SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                     SUM(T.PSGCOUNT) AS PSGCOUNT,
                     SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                     SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                     SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                     SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                     SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                     SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                     SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                     SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                     SUM(T.TIMEPHASETIME) AS TIMEPHASETIME
                FROM JZ_TIMEPHASEDATASTORAGE2 T, JZ_ORGGRADETREE O
               WHERE T.ORGID = O.ORGID
                 AND T.JZDATE = V_DATE_IN
                 AND T.DATASAVELEVEL = '3' --日
                 AND T.STORAGEORGTYPE = '4' --线路
               GROUP BY O.PARENTORGID, T.TIMEPHASETYPE, T.TIMEPHASEVALUE) T
       WHERE T.ORGID = ORG.ORGID(+);
    COMMIT;
    WRITE_LOG('TREATE_ROUTETIMEPHASE2_ORG',
              '按峰段指标结存-组织',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE2_ORG',
                      '按峰段指标结存-组织',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASE2_PHASE                                                *
  *                                                                                      *
  *    功能：按峰段指标数据结存表(月/年结存)                                                    *
  *                                                                                      *
  *    作者：huhuimin                                                                     *
  *    日期：2012-04-09                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASE2_PHASE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
    V_BEGIN_YEAR  DATE;
    V_END_YEAR    DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    V_BEGIN_YEAR  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                             'YYYY-MM-DD');
    V_END_YEAR    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                        '-01-01',
                                        'YYYY-MM-DD'),
                                12);
    --月结
    BEGIN
      WRITE_LOG('TREATE_ROUTETIMEPHASE2_PHASE',
                '按峰段指标结存-月结',
                V_DATE_IN,
                '开始');
      --删除月结数据
      DELETE FROM JZ_TIMEPHASEDATASTORAGE2
       WHERE JZDATE < V_END_MONTH
         AND JZDATE >= V_BEGIN_MONTH
         AND DATASAVELEVEL = '2';
      --线路月结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE2
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均周转时间（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE, --记录日期
         TIMEPHASETIME --峰段时间
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ORGID AS ORGID,
               T.ROUTEID AS ROUTEID,
               ROU.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.ACTUALINTERVAL AS ACTUALINTERVAL,
               T.ACTUALCIRCLETIME AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE, --车距合格率
               NULL AS STATIONKEEPBACKRATE, --车站平均留客率
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               T.RUNCIRCLETIME AS RUNCIRCLETIME,
               T.ROUTERUNTIME AS ROUTERUNTIME,
               T.ROUTESTOPTIME AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED, --运送速度
               NULL AS BUSRUNSPEED, --运营速度
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE, --大站准点率
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               ROU.ROUTECODE AS ROUTECODE,
               '2' AS DATASAVELEVEL,
               '4' AS STORAGEORGTYPE,
               SYSDATE AS RECDATE,
               TIMEPHASETIME AS TIMEPHASETIME
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       ROUND(AVG(T.TIMEPHASEINTERVAL), 2) AS TIMEPHASEINTERVAL,
                       ROUND(AVG(T.TIMEPHASECIRCLETIME), 2) AS TIMEPHASECIRCLETIME,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       ROUND(AVG(T.ACTUALINTERVAL), 2) AS ACTUALINTERVAL,
                       ROUND(AVG(T.ACTUALCIRCLETIME), 2) AS ACTUALCIRCLETIME,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       ROUND(AVG(T.RUNCIRCLETIME), 2) AS RUNCIRCLETIME,
                       ROUND(AVG(T.ROUTERUNTIME), 2) AS ROUTERUNTIME,
                       ROUND(AVG(T.ROUTESTOPTIME), 2) AS ROUTESTOPTIME,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       ROUND(SUM(T.TIMEPHASEENDTIME - T.TIMEPHASESTARTTIME) * 24,
                             2) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE2 T
                 WHERE T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日
                   AND T.STORAGEORGTYPE = '4' --线路
                 GROUP BY T.ORGID,
                          T.ROUTEID,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织月结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE2
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE, --记录日期
         TIMEPHASETIME --峰段时间
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               NULL AS ACTUALINTERVAL,
               NULL AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE,
               NULL AS STATIONKEEPBACKRATE,
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               NULL AS RUNCIRCLETIME,
               NULL AS ROUTERUNTIME,
               NULL AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED,
               NULL AS BUSRUNSPEED,
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE,
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               NULL AS ROUTECODE,
               '2' AS DATASAVELEVEL,
               T.STORAGEORGTYPE AS STORAGEORGTYPE,
               SYSDATE AS RECDATE,
               TIMEPHASETIME AS TIMEPHASETIME
          FROM MCORGINFOGS ORG,
               (SELECT T.ORGID AS ORGID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       T.STORAGEORGTYPE AS STORAGEORGTYPE,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       ROUND(SUM(TIMEPHASETIME) * 24, 2) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE2 T
                 WHERE T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日
                   AND T.STORAGEORGTYPE != '4'
                 GROUP BY T.ORGID,
                          T.STORAGEORGTYPE,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_ROUTETIMEPHASE2_PHASE',
                '按指标峰段结存-月结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE2_PHASE',
                        '按指标峰段结存-月结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
    --年结
    BEGIN
      WRITE_LOG('TREATE_ROUTETIMEPHASE2_PHASE',
                '按峰段指标结存-年结',
                V_DATE_IN,
                '开始');
      --删除年结数据
      DELETE FROM JZ_TIMEPHASEDATASTORAGE2
       WHERE JZDATE < V_END_YEAR
         AND JZDATE >= V_BEGIN_YEAR
         AND DATASAVELEVEL = '1';
      --线路年结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE2
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT, --实际班次数
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均周转时间（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE, --记录日期
         TIMEPHASETIME --峰段时间
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ORGID AS ORGID,
               T.ROUTEID AS ROUTEID,
               ROU.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.ACTUALINTERVAL AS ACTUALINTERVAL,
               T.ACTUALCIRCLETIME AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE, --车距合格率
               NULL AS STATIONKEEPBACKRATE, --车站平均留客率
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               T.RUNCIRCLETIME AS RUNCIRCLETIME,
               T.ROUTERUNTIME AS ROUTERUNTIME,
               T.ROUTESTOPTIME AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED, --运送速度
               NULL AS BUSRUNSPEED, --运营速度
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE, --大站准点率
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               ROU.ROUTECODE AS ROUTECODE,
               '1' AS DATASAVELEVEL,
               '4' AS STORAGEORGTYPE,
               SYSDATE AS RECDATE,
               TIMEPHASETIME AS TIMEPHASETIME
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       AVG(T.TIMEPHASEINTERVAL) AS TIMEPHASEINTERVAL,
                       AVG(T.TIMEPHASECIRCLETIME) AS TIMEPHASECIRCLETIME,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       AVG(T.ACTUALINTERVAL) AS ACTUALINTERVAL,
                       AVG(T.ACTUALCIRCLETIME) AS ACTUALCIRCLETIME,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       AVG(T.RUNCIRCLETIME) AS RUNCIRCLETIME,
                       AVG(T.ROUTERUNTIME) AS ROUTERUNTIME,
                       AVG(T.ROUTESTOPTIME) AS ROUTESTOPTIME,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       ROUND(SUM(TIMEPHASETIME) * 24, 2) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE2 T
                 WHERE T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月
                   AND T.STORAGEORGTYPE = '4' --线路
                 GROUP BY T.ORGID,
                          T.ROUTEID,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织年结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE2
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE, --记录日期
         TIMEPHASETIME --峰段时间
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               NULL AS ACTUALINTERVAL,
               NULL AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE,
               NULL AS STATIONKEEPBACKRATE,
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               NULL AS RUNCIRCLETIME,
               NULL AS ROUTERUNTIME,
               NULL AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED,
               NULL AS BUSRUNSPEED,
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE,
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               NULL AS ROUTECODE,
               '1' AS DATASAVELEVEL,
               T.STORAGEORGTYPE AS STORAGEORGTYPE,
               SYSDATE AS RECDATE,
               TIMEPHASETIME AS TIMEPHASETIME
          FROM MCORGINFOGS ORG,
               (SELECT T.ORGID AS ORGID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       T.STORAGEORGTYPE AS STORAGEORGTYPE,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       ROUND(SUM(TIMEPHASETIME) * 24, 2) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE2 T
                 WHERE T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月
                   AND T.STORAGEORGTYPE != '4'
                 GROUP BY T.ORGID,
                          T.STORAGEORGTYPE,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_ROUTETIMEPHASE2_PHASE',
                '按指标峰段结存-年结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE2_PHASE',
                        '按指标峰段结存-月年结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASESTORAGE2                                               *
  *                                                                                      *
  *    功能：按五峰段指标数据结存表                                                      *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASESTORAGE2(V_DATE DATE) AS
    V_ORGID               VARCHAR2(36); --jz_timephasedatastorage.orgid%TYPE; --组织id'
    V_ROUTEID             VARCHAR2(36); --jz_timephasedatastorage.routeid%TYPE; --线路编号';
    V_ROUTENAME           VARCHAR2(36); --jz_timephasedatastorage.routename%TYPE; --线路名称';
    V_ROUTECODE           VARCHAR2(36); --jz_timephasedatastorage.routecode%TYPE; --线路编码';
    V_TIMEPHASETYPE       VARCHAR2(2); --jz_timephasedatastorage.timephasetype%TYPE; --峰段类型
    V_TIMEPHASEVALUE      VARCHAR2(40); --jz_timephasedatastorage.timephasevalue%TYPE; --峰段名称
    V_STARTTIME           NUMBER; --峰段开始时间(相对0点的小时数)
    V_ENDTIME             NUMBER; --峰段结束时间(相对0点的小时数)
    V_TIMEPHASESTARTTIME  DATE; --峰段开始时间
    V_TIMEPHASEENDTIME    DATE; --峰段结束时间  
    V_TIMEPHASEINTERVAL   NUMBER; -- jz_timephasedatastorage.timephaseinterval%TYPE; --峰段发车间隔（分钟）
    V_TIMEPHASECIRCLETIME NUMBER; --jz_timephasedatastorage.timephasecircletime%TYPE; --峰段周转时间（分钟）
    V_STDSEQS             NUMBER; --jz_timephasedatastorage.stdseqs%TYPE; --标准车次数
    V_LOADPSGCAPABILITY   NUMBER; --jz_timephasedatastorage.loadpsgcapability%TYPE; --载客能力';
    V_GPSMILES            NUMBER; --jz_timephasedatastorage.gpsmiles%TYPE; --gps里程';
    V_RUNMILES            NUMBER; --jz_timephasedatastorage.runmiles%TYPE; --营运里程';
    V_RUNTIMES            NUMBER;
    V_UNRUNMILES          NUMBER; --jz_timephasedatastorage.unrunmiles%TYPE; --非营运里程';
    V_ACTUALSEQCOUNT      NUMBER; --jz_timephasedatastorage.actualseqcount%TYPE; --实际班次数';
    V_FULLSEQCOUNT        NUMBER;
    V_ACTUALINTERVAL      NUMBER; --jz_timephasedatastorage.actualinterval%TYPE; --实际平均发车间隔（分钟）
    V_ACTUALCIRCLETIME    NUMBER; --jz_timephasedatastorage.actualcircletime%TYPE; --实际平均周转时间（分钟）
    V_DEVOTIONBUSCOUNT    NUMBER; --jz_timephasedatastorage.devotionbuscount%TYPE; --投入车辆数';
    V_DEVOTIONEMPCOUNT    NUMBER; --jz_timephasedatastorage.devotionempcount%TYPE; --投入驾驶员数';
    V_BUSSENDINTERVALSTD  NUMBER; --jz_timephasedatastorage.bussendintervalstd%TYPE; --发车间隔合格班次数';
    V_PLANSEQMILE         NUMBER; --jz_timephasedatastorage.planseqmile%TYPE; --计划里程数';
    V_PLANSEQCOUNT        NUMBER; --jz_timephasedatastorage.planseqcount%TYPE; --计划班次数';
    V_PLANBUSCOUNT        NUMBER; --jz_timephasedatastorage.planbuscount%TYPE; --计划投入车辆数';
    V_PLANEMPCOUNT        NUMBER; --jz_timephasedatastorage.planempcount%TYPE; --计划投入驾驶员数';
    V_OVERSPEEDCOUNT      NUMBER; --jz_timephasedatastorage.overspeedcount%TYPE; --超速次数';
    V_UNRULESTOPCOUNT     NUMBER; --jz_timephasedatastorage.unrulestopcount%TYPE; --不规范停车次数';
    V_MDLOPENDOORCOUNT    NUMBER; --jz_timephasedatastorage.mdlopendoorcount%TYPE; --中途开关门次数';
    V_PSGCOUNT            NUMBER; --jz_timephasedatastorage.psgcount%TYPE;--客运量
    V_INTERVAL            NUMBER; --发车间隔
    V_SUMBUSCOUNT         NUMBER;
    V_ONTIMECOUNT         NUMBER; --准点车次数
    V_DATASAVELEVEL       CHAR(1);
    V_DATE_IN             DATE := TRUNC(V_DATE);
    --五峰段
    CURSOR CUR_PHASE(DATE_IN DATE) IS
      SELECT ROUTE.ORGID,
             ROUTE.ROUTEID,
             ROUTE.ROUTENAME,
             ROUTE.ROUTECODE,
             NVL(T.TIMEPHASEKEY, '3') TIMEPHASEKEY,
             NVL(T.TIMEPHASENAME, '平峰') TIMEPHASENAME,
             TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
             TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
             ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
             ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME,
             T.TIMEINTERVAL
        FROM MCROUTEINFOGS ROUTE, MCROUTETIMEPHASEGS2 T
       ORDER BY ROUTE.ROUTEID, T.STARTTIME;
    --线路峰段(注意：如果没有配置峰段，则全天按平峰计算)
    CURSOR CUR_ROUTE_MIN(ROUTEID_IN VARCHAR2, DATE_IN DATE) IS
      SELECT *
        FROM (SELECT ROUTE.ORGID,
                     ROUTE.ROUTEID,
                     ROUTE.ROUTENAME,
                     ROUTE.ROUTECODE,
                     NVL(T.TIMEPHASEKEY, '2') TIMEPHASEKEY,
                     NVL(T.TIMEPHASENAME, '平峰') TIMEPHASENAME,
                     TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
                     TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
                     ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
                     ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME,
                     NVL(T.TIMEPHASEINTERVAL, 0) TIMEPHASEINTERVAL,
                     NVL(T.TIMEPHASECIRCLETIME, 0) TIMEPHASECIRCLETIME,
                     NVL(T.PLANSEQS, 0) PLANSEQS
                FROM MCROUTEINFOGS ROUTE,
                     (SELECT *
                        FROM MCROUTETIMEPHASEGS T
                       WHERE T.BEGINDATE <= DATE_IN
                         AND T.ENDDATE >= DATE_IN
                         AND T.BEGINWEEK <=
                             (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)
                         AND T.ENDWEEK >=
                             (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)) T
               WHERE ROUTE.ROUTEID = T.ROUTEID(+)
                 AND ROUTE.ROUTEID = ROUTEID_IN
               ORDER BY T.ROUTEID, T.STARTTIME)
       WHERE ROWNUM < 2;
    CURSOR CUR_ROUTE_MAX(ROUTEID_IN VARCHAR2, DATE_IN DATE) IS
      SELECT *
        FROM (SELECT ROUTE.ORGID,
                     ROUTE.ROUTEID,
                     ROUTE.ROUTENAME,
                     ROUTE.ROUTECODE,
                     NVL(T.TIMEPHASEKEY, '2') TIMEPHASEKEY,
                     NVL(T.TIMEPHASENAME, '平峰') TIMEPHASENAME,
                     TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
                     TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
                     ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
                     ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME,
                     NVL(T.TIMEPHASEINTERVAL, 0) TIMEPHASEINTERVAL,
                     NVL(T.TIMEPHASECIRCLETIME, 0) TIMEPHASECIRCLETIME,
                     NVL(T.PLANSEQS, 0) PLANSEQS
                FROM MCROUTEINFOGS ROUTE,
                     (SELECT *
                        FROM MCROUTETIMEPHASEGS T
                       WHERE T.BEGINDATE <= DATE_IN
                         AND T.ENDDATE >= DATE_IN
                         AND T.BEGINWEEK <=
                             (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)
                         AND T.ENDWEEK >=
                             (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)) T
               WHERE ROUTE.ROUTEID = T.ROUTEID(+)
                 AND ROUTE.ROUTEID = ROUTEID_IN
               ORDER BY T.ROUTEID, T.STARTTIME DESC)
       WHERE ROWNUM < 2;
    --实际车次
    CURSOR CUR_ACTUALSEQ(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS ACTUALSEQCOUNT, --实际班次数'
             SUM(T.GPSMILE) AS GPSMILES, --gps里程';
             SUM(T.GPSMILE *
                 (NVL(BUS.SEATCOUNT, 0) + NVL(BUS.STANDCOUNT, 0))) AS LOADPSGCAPABILITY, --载客能力';
             COUNT(DISTINCT T.BUSID) AS DEVOTIONBUSCOUNT, --投入车辆数';
             COUNT(DISTINCT T.DRIVERID) AS DEVOTIONEMPCOUNT, --投入驾驶员数';
             ROUND(SUM((T.ARRIVETIME - T.LEAVETIME) * 24 * 60) /
                   NVL(COUNT(*), 0),
                   2) AS ACTUALCIRCLETIME --实际平均周转时间（分钟）
        FROM BZ_BUSRUNRECORDLDTEMP T, MCBUSINFOGS BUS
       WHERE T.BUSID = BUS.BUSID
         AND T.ROUTEID = ROUTEID_IN
         AND T.RUNDATADATE = DATE_IN
         AND T.RECTYPE = '1'
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME <= TIMEPHASEENDTIME_IN;
    --计划车次
    CURSOR CUR_PLANSEQ(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS PLANSEQCOUNT, --计划班次数';
             SUM(T.MILENUM) AS PLANSEQMILE, --计划里程数';
             COUNT(DISTINCT T.BUSID) AS PLANBUSCOUNT, --计划投入车辆数';
             COUNT(DISTINCT T.DRIVERID) AS PLANEMPCOUNT --计划投入驾驶员数';
        FROM BZ_BUSDISPLANLD T
       WHERE T.ROUTEID = ROUTEID_IN
         AND T.RUNDATE = DATE_IN
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME <= TIMEPHASEENDTIME_IN;
    --准点班次数
    CURSOR CUR_ONTIME(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT T.ROUTEID,
             (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS ONTIME
        FROM BZ_BUSRUNRECORDLDTEMP T
       WHERE T.ROUTEID = ROUTEID_IN
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME < TIMEPHASEENDTIME_IN
         AND T.RUNDATADATE = DATE_IN
         AND T.RECTYPE = '1'
         AND (T.ISLATE = '0' OR T.ISLATE = '3' OR T.ISLATE IS NULL)
       GROUP BY T.ROUTEID;
    V_MAXPHASEKEY VARCHAR2(10);
    V_MINPHASEKEY VARCHAR2(10);
  BEGIN
    WRITE_LOG('TREATE_ROUTETIMEPHASESTORAGE2',
              '按峰段指标数据结存表',
              V_DATE,
              '开始');
    --删除全部数据
    DELETE JZ_TIMEPHASEDATASTORAGE2 WHERE JZDATE = V_DATE_IN;
    COMMIT;
    FOR CUR IN (SELECT MAX(T.TIMEPHASEKEY) MAXPHASEKEY,
                       MIN(T.TIMEPHASEKEY) MINPHASEKEY
                  FROM MCROUTETIMEPHASEGS2 T) LOOP
      V_MINPHASEKEY := CUR.MINPHASEKEY;
      V_MAXPHASEKEY := CUR.MAXPHASEKEY;
    END LOOP;
    FOR CUR_R IN CUR_PHASE(V_DATE_IN) LOOP
      BEGIN
        V_DATASAVELEVEL       := '3'; ---日结      
        V_ORGID               := CUR_R.ORGID; --组织id'
        V_ROUTEID             := CUR_R.ROUTEID; --线路编号';
        V_ROUTENAME           := CUR_R.ROUTENAME; --线路名称';
        V_ROUTECODE           := CUR_R.ROUTECODE; --线路编码
        V_TIMEPHASETYPE       := CUR_R.TIMEPHASEKEY; --峰段类型
        V_TIMEPHASEVALUE      := CUR_R.TIMEPHASENAME; --峰段名称
        V_TIMEPHASESTARTTIME  := CUR_R.TIMEPHASESTARTTIME; --峰段开始时间
        V_TIMEPHASEENDTIME    := CUR_R.TIMEPHASEENDTIME; --峰段结束时间
        V_STARTTIME           := CUR_R.STARTTIME; --峰段开始时间(相对0点的小时数)
        V_ENDTIME             := CUR_R.ENDTIME; --峰段结束时间(相对0点的小时数)      
        V_TIMEPHASEINTERVAL   := CUR_R.TIMEINTERVAL; --峰段发车间隔（分钟）
        V_TIMEPHASECIRCLETIME := 0; --峰段周转时间（分钟）
        V_STDSEQS             := 0; --标准车次数
      
        --初始化参数，否则会使用上次数据
        V_PLANSEQMILE        := 0;
        V_PLANSEQCOUNT       := 0; --计划班次数';
        V_PLANBUSCOUNT       := 0; --计划投入车辆数';
        V_PLANEMPCOUNT       := 0; --计划投入驾驶员数';
        V_LOADPSGCAPABILITY  := 0; --载客能力';
        V_ACTUALSEQCOUNT     := 0; --实际班次数';
        V_FULLSEQCOUNT       := 0;
        V_GPSMILES           := 0; --gps里程';
        V_RUNMILES           := 0; --营运里程';
        V_RUNTIMES           := 0;
        V_UNRUNMILES         := 0; --非营运里程';
        V_DEVOTIONBUSCOUNT   := 0; --投入车辆数';
        V_DEVOTIONEMPCOUNT   := 0; --投入驾驶员数';
        V_ACTUALINTERVAL     := 0; --实际平均发车间隔（分钟）
        V_ACTUALCIRCLETIME   := 0; --实际平均周转时间（分钟）
        V_BUSSENDINTERVALSTD := 0; --发车间隔合格班次数
        V_OVERSPEEDCOUNT     := 0; --超速次数';
        V_UNRULESTOPCOUNT    := 0; --不规范停车次数';
        V_MDLOPENDOORCOUNT   := 0; --中途开关门次数';
        V_PSGCOUNT           := 0;
        V_SUMBUSCOUNT        := 0;
        V_ONTIMECOUNT        := 0;
      
        FOR CUR IN CUR_ACTUALSEQ(V_ROUTEID,
                                 V_DATE_IN,
                                 V_TIMEPHASESTARTTIME,
                                 V_TIMEPHASEENDTIME) LOOP
          V_ACTUALSEQCOUNT    := CUR.ACTUALSEQCOUNT;
          V_FULLSEQCOUNT      := CUR.ACTUALSEQCOUNT;
          V_GPSMILES          := CUR.GPSMILES;
          V_LOADPSGCAPABILITY := CUR.LOADPSGCAPABILITY;
          V_DEVOTIONBUSCOUNT  := CUR.DEVOTIONBUSCOUNT;
          V_DEVOTIONEMPCOUNT  := CUR.DEVOTIONEMPCOUNT;
          V_ACTUALCIRCLETIME  := CUR.ACTUALCIRCLETIME;
        END LOOP;
      
        FOR CUR IN (SELECT SUM(T.MILENUM) AS RUNMILES,
                           ROUND(SUM((T.ARRIVETIME - T.LEAVETIME) * 24), 2) AS RUNTIMES --营运里程';
                      FROM BZ_BUSRUNRECORDLDTEMP T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.RUNDATADATE = V_DATE_IN
                       AND T.RECTYPE = '1'
                       AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                       AND T.LEAVETIME <= V_TIMEPHASEENDTIME) LOOP
          V_RUNMILES := CUR.RUNMILES;
          V_RUNTIMES := CUR.RUNTIMES;
        END LOOP;
      
        FOR CUR IN (SELECT SUM(T.MILENUM) AS UNRUNMILES --非营运里程';
                      FROM BZ_BUSRUNRECORDLDTEMP T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.RUNDATADATE = V_DATE_IN
                       AND T.RECTYPE = '2'
                       AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                       AND T.LEAVETIME <= V_TIMEPHASEENDTIME) LOOP
          V_UNRUNMILES := CUR.UNRUNMILES;
        END LOOP;
      
        --需要考虑上下行线路
        FOR CUR IN (SELECT ROUND(SUM(SUMTIME) / (CASE
                                                   WHEN (SUM(SUMCOUNT) < 1) THEN
                                                    1
                                                   ELSE
                                                    SUM(SUMCOUNT)
                                                 END),
                                 2) AS ACTUALINTERVAL --实际平均发车间隔（分钟）
                      FROM (SELECT T.ROUTEID,
                                   T.SEGMENTID,
                                   (MAX(T.LEAVETIME) - MIN(T.LEAVETIME)) * 24 * 60 SUMTIME,
                                   (CASE
                                     WHEN ((COUNT(*) - 1) < 1) THEN
                                      1
                                     ELSE
                                      (COUNT(*) - 1)
                                   END) SUMCOUNT
                              FROM BZ_BUSRUNRECORDLDTEMP T
                             WHERE T.ROUTEID = V_ROUTEID
                               AND T.RUNDATADATE = V_DATE_IN
                               AND T.RECTYPE = '1'
                               AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                               AND T.LEAVETIME <= V_TIMEPHASEENDTIME
                             GROUP BY T.ROUTEID, T.SEGMENTID)) LOOP
          V_ACTUALINTERVAL := CUR.ACTUALINTERVAL;
        END LOOP;
      
        FOR CUR IN CUR_PLANSEQ(V_ROUTEID,
                               V_DATE_IN,
                               V_TIMEPHASESTARTTIME,
                               V_TIMEPHASEENDTIME) LOOP
          V_PLANSEQCOUNT := CUR.PLANSEQCOUNT;
          V_PLANSEQMILE  := CUR.PLANSEQMILE;
          V_PLANBUSCOUNT := CUR.PLANBUSCOUNT;
          V_PLANEMPCOUNT := CUR.PLANEMPCOUNT;
        END LOOP;
      
        --标准峰发车间隔为空，取实际平均发车间隔
        IF (V_TIMEPHASEINTERVAL IS NULL) THEN
          V_INTERVAL := V_ACTUALINTERVAL;
        ELSE
          V_INTERVAL := V_TIMEPHASEINTERVAL;
        END IF;
        IF (V_INTERVAL IS NOT NULL) THEN
          FOR CUR IN (SELECT (CASE
                               WHEN G_SHIFTCALC_STD = '1' THEN
                                COUNT(*)
                               ELSE
                                SUM(SEQNUM)
                             END) AS BUSSENDINTERVALSTD
                        FROM (SELECT T.ROUTEID,
                                     T.SUBROUTEID,
                                     T.SEGMENTID,
                                     T.SEQNUM,
                                     (LAG(T.LEAVETIME)
                                      OVER(PARTITION BY T.ROUTEID,
                                           T.SUBROUTEID,
                                           T.SEGMENTID ORDER BY T.LEAVETIME)) PRELEAVETIME,
                                     T.LEAVETIME,
                                     NVL((T.LEAVETIME -
                                         (LAG(T.LEAVETIME)
                                          OVER(PARTITION BY T.ROUTEID,
                                                T.SUBROUTEID,
                                                T.SEGMENTID ORDER BY
                                                T.LEAVETIME))) * 24 * 60,
                                         V_INTERVAL) DELTA --考虑第一趟为标准发车
                                FROM BZ_BUSRUNRECORDLDTEMP T
                               WHERE T.ROUTEID = V_ROUTEID
                                 AND T.RUNDATADATE = V_DATE_IN)
                       WHERE LEAVETIME >= V_TIMEPHASESTARTTIME
                         AND LEAVETIME <= V_TIMEPHASEENDTIME
                            --AND DELTA > V_INTERVAL - G_SENDBUS_INTERVAL
                         AND DELTA <= V_INTERVAL) LOOP
            V_BUSSENDINTERVALSTD := CUR.BUSSENDINTERVALSTD;
          END LOOP;
        END IF;
      
        FOR CUR IN (SELECT T.BUSCOUNT
                      FROM JZ_ROUTEBASICDATAPHASESTORAGE T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND JZDATE >= TO_DATE(TO_CHAR(V_DATE_IN, 'yyyyMM') || '01',
                                             'yyyyMMdd')
                       AND JZDATE < TO_DATE(TO_CHAR(ADD_MONTHS(V_DATE_IN, 1),
                                                    'yyyyMM') || '01',
                                            'yyyyMMdd')) LOOP
          V_SUMBUSCOUNT := CUR.BUSCOUNT;
        END LOOP;
      
        --准点车次数
        FOR CUR IN CUR_ONTIME(V_ROUTEID,
                              V_DATE_IN,
                              V_TIMEPHASESTARTTIME,
                              V_TIMEPHASEENDTIME) LOOP
          V_ONTIMECOUNT := CUR.ONTIME;
        END LOOP;
      
        IF (V_TIMEPHASETYPE = V_MINPHASEKEY) THEN
          --早高峰
          FOR CUR_P IN CUR_ROUTE_MIN(V_ROUTEID, V_DATE_IN) LOOP
            V_STARTTIME := CUR_P.STARTTIME; --峰段开始时间(相对0点的小时数)
          END LOOP;
        END IF;
      
        IF (V_TIMEPHASETYPE = V_MAXPHASEKEY) THEN
          --晚平峰
          FOR CUR_P IN CUR_ROUTE_MAX(V_ROUTEID, V_DATE_IN) LOOP
            V_ENDTIME := CUR_P.ENDTIME; --峰段结束时间(相对0点的小时数)
          END LOOP;
        END IF;
      
        INSERT INTO JZ_TIMEPHASEDATASTORAGE2
          (RECORDID,
           ROUTEID,
           ROUTENAME,
           ROUTECODE,
           JZDATE,
           TIMEPHASETYPE,
           TIMEPHASEVALUE,
           TIMEPHASESTARTTIME,
           TIMEPHASEENDTIME,
           TIMEPHASEINTERVAL,
           TIMEPHASECIRCLETIME,
           STDSEQS,
           ORGID,
           PLANSEQMILE,
           PLANSEQCOUNT,
           PLANBUSCOUNT,
           PLANEMPCOUNT,
           LOADPSGCAPABILITY,
           ACTUALSEQCOUNT,
           FULLSEQCOUNT,
           GPSMILES,
           RUNMILES,
           RUNTIMES,
           UNRUNMILES,
           DEVOTIONBUSCOUNT,
           DEVOTIONEMPCOUNT,
           ACTUALINTERVAL,
           ACTUALCIRCLETIME,
           BUSSENDINTERVALSTD,
           OVERSPEEDCOUNT,
           UNRULESTOPCOUNT,
           MDLOPENDOORCOUNT,
           PSGCOUNT,
           SUMBUSCOUNT,
           ONTIMESEQCOUNT,
           DATASAVELEVEL,
           STORAGEORGTYPE,
           TIMEPHASETIME)
        VALUES
          (S_ROUTESTORAGE.NEXTVAL,
           V_ROUTEID, --线路编号';
           V_ROUTENAME, --线路名称';
           V_ROUTECODE,
           V_DATE_IN,
           V_TIMEPHASETYPE, --峰段类型
           V_TIMEPHASEVALUE, --峰段名称
           V_STARTTIME, --峰段开始时间(相对0点的小时数)
           V_ENDTIME, --峰段结束时间(相对0点的小时数)
           V_TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
           V_TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
           V_STDSEQS, --标准车次数           
           V_ORGID, --组织id'           
           V_PLANSEQMILE, --计划里程数';
           V_PLANSEQCOUNT, --计划班次数';
           V_PLANBUSCOUNT, --计划投入车辆数';
           V_PLANEMPCOUNT, --计划投入驾驶员数';           
           V_LOADPSGCAPABILITY, --载客能力';
           V_ACTUALSEQCOUNT, --实际班次数';
           V_FULLSEQCOUNT, --实际班次数';
           V_GPSMILES, --gps里程';
           V_RUNMILES, --营运里程';
           V_RUNTIMES,
           V_UNRUNMILES, --非营运里程';
           V_DEVOTIONBUSCOUNT, --投入车辆数';
           V_DEVOTIONEMPCOUNT, --投入驾驶员数';
           V_ACTUALINTERVAL, --实际平均发车间隔（分钟）
           V_ACTUALCIRCLETIME, --实际平均周转时间（分钟）
           V_BUSSENDINTERVALSTD, --发车间隔合格班次数           
           V_OVERSPEEDCOUNT, --超速次数';
           V_UNRULESTOPCOUNT, --不规范停车次数';
           V_MDLOPENDOORCOUNT, --中途开关门次数';           
           V_PSGCOUNT,
           V_SUMBUSCOUNT,
           V_ONTIMECOUNT,
           V_DATASAVELEVEL,
           '4',
           ROUND((V_ENDTIME - V_STARTTIME) * 24, 2));
        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('TREATE_ROUTETIMEPHASESTORAGE2',
                          '按峰段指标数据结存表',
                          V_DATE,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP
    
    COMMIT; --提交数据
    TREATE_ROUTETIMEPHASE2_ORG(V_DATE_IN);
    TREATE_ROUTETIMEPHASE2_PHASE(V_DATE_IN);
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTETIMEPHASESTORAGE2',
                      '按峰段指标数据结存表',
                      V_DATE,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASE_ORG                                                *
  *                                                                                      *
  *    功能：按峰段指标数据结存表(组织)                                                          *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-04-11                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASE_ORG(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_ROUTETIMEPHASE_ORG',
              '按峰段指标结存-组织',
              V_DATE_IN,
              '开始');
    --删除日结数据
    DELETE FROM JZ_TIMEPHASEDATASTORAGE
     WHERE JZDATE = V_DATE_IN
       AND STORAGEORGTYPE != '4'
       AND DATASAVELEVEL = 3;
    --插入日结数据
    INSERT INTO JZ_TIMEPHASEDATASTORAGE
      (RECORDID, --记录编号
       ORGID, --组织编号
       ROUTEID, --线路编号
       ROUTENAME, --线路名称
       JZDATE, --结存日期
       TIMEPHASETYPE, --峰段类型
       TIMEPHASEVALUE, --峰段名称
       TIMEPHASESTARTTIME, --峰段开始时间
       TIMEPHASEENDTIME, --峰段结束时间
       TIMEPHASEINTERVAL, --峰段发车间隔
       TIMEPHASECIRCLETIME, --峰段周转时间
       TIMEPHASETIME, --峰段时间(小时)
       STDSEQS, --标准车次数
       LOADPSGCAPABILITY, --载客能力
       PLANSEQMILE, --计划里程
       GPSMILES, --GPS里程
       RUNMILES, --营运里程
       RUNTIMES,
       UNRUNMILES, --非营运里程
       DEVOTIONBUSCOUNT, --投入车辆数
       DEVOTIONEMPCOUNT, --投入人员数
       PLANBUSCOUNT, --计划投入车辆数
       PLANEMPCOUNT, --计划投入驾驶员数
       PSGCOUNT, --客运量
       PLANSEQCOUNT, --计划班次数
       ACTUALSEQCOUNT, --实际班次数
       FULLSEQCOUNT, --实际班次数
       ACTUALINTERVAL, --实际平均发车间隔（分钟）
       ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
       BUSSENDINTERVALSTD, --发车间隔合格班次数
       BUSDISTANCERATE, --车距合格率
       STATIONKEEPBACKRATE, --车站平均留客率
       OVERSPEEDCOUNT, --超速次数
       UNRULESTOPCOUNT, --不规范停车次数
       MDLOPENDOORCOUNT, --中途开关门次数
       RUNCIRCLETIME, --运营周期时间（分钟）
       ROUTERUNTIME, --线路行驶时间（分钟）
       ROUTESTOPTIME, --线路停站时间（分钟）
       BUSSENDSPEED, --运营车速（公里/小时）
       BUSRUNSPEED, --运送车速（公里/小时）
       ONTIMESEQCOUNT, --准点车次数
       BIGSTATIONONTIMERATE, --大站准点率
       SUMBUSCOUNT, --总配车数
       ROUTECODE, --线路编码
       DATASAVELEVEL, --数据结存级别
       STORAGEORGTYPE, --组织结存级别
       RECDATE --记录日期
       )
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             ORG.ORGID AS ORGID,
             NULL AS ROUTEID,
             NULL AS ROUTENAME,
             V_DATE_IN AS JZDATE,
             T.TIMEPHASETYPE AS TIMEPHASETYPE,
             T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
             NULL AS TIMEPHASESTARTTIME,
             NULL AS TIMEPHASEENDTIME,
             NULL AS TIMEPHASEINTERVAL,
             NULL AS TIMEPHASECIRCLETIME,
             T.TIMEPHASETIME AS TIMEPHASETIME,
             T.STDSEQS AS STDSEQS,
             T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
             T.PLANSEQMILE AS PLANSEQMILE,
             T.GPSMILES AS GPSMILES,
             T.RUNMILES AS RUNMILES,
             T.RUNTIMES AS RUNTIMES,
             T.UNRUNMILES AS UNRUNMILES,
             T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
             T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
             T.PLANBUSCOUNT AS PLANBUSCOUNT,
             T.PLANEMPCOUNT AS PLANEMPCOUNT,
             T.PSGCOUNT AS PSGCOUNT,
             T.PLANSEQCOUNT AS PLANSEQCOUNT,
             T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
             T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
             NULL AS ACTUALINTERVAL,
             NULL AS ACTUALCIRCLETIME,
             T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
             NULL AS BUSDISTANCERATE,
             NULL AS STATIONKEEPBACKRATE,
             T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
             T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
             T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
             NULL AS RUNCIRCLETIME,
             NULL AS ROUTERUNTIME,
             NULL AS ROUTESTOPTIME,
             NULL AS BUNSENDSPEED,
             NULL AS BUSRUNSPEED,
             T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
             NULL AS BIGSTATIONONTIMERATE,
             T.SUMBUSCOUNT AS SUMBUSCOUNT,
             NULL AS ROUTECODE,
             '3' AS DATASAVELEVEL,
             ORG.ORGGRADE AS STORAGEORGTYPE,
             SYSDATE AS RECDATE
        FROM MCORGINFOGS ORG,
             (SELECT O.PARENTORGID AS ORGID,
                     T.TIMEPHASETYPE AS TIMEPHASETYPE,
                     T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                     SUM(T.STDSEQS) AS STDSEQS,
                     SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                     SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                     SUM(T.GPSMILES) AS GPSMILES,
                     SUM(T.RUNMILES) AS RUNMILES,
                     SUM(T.RUNTIMES) AS RUNTIMES,
                     SUM(T.UNRUNMILES) AS UNRUNMILES,
                     SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                     SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                     SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                     SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                     SUM(T.PSGCOUNT) AS PSGCOUNT,
                     SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                     SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                     SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                     SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                     SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                     SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                     SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                     SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                     SUM(T.TIMEPHASETIME) AS TIMEPHASETIME
                FROM JZ_TIMEPHASEDATASTORAGE T, JZ_ORGGRADETREE O
               WHERE T.ORGID = O.ORGID
                 AND T.JZDATE = V_DATE_IN
                 AND T.DATASAVELEVEL = '3' --日
                 AND T.STORAGEORGTYPE = '4' --线路
               GROUP BY O.PARENTORGID, T.TIMEPHASETYPE, T.TIMEPHASEVALUE) T
       WHERE T.ORGID = ORG.ORGID(+)
         AND ORG.ISACTIVE = '1';
    COMMIT;
    WRITE_LOG('TREATE_ROUTETIMEPHASE_ORG',
              '按峰段指标结存-组织',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE_ORG',
                      '按峰段指标结存-组织',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;

  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASE_PHASE                                                *
  *                                                                                      *
  *    功能：按峰段指标数据结存表（峰段）                                                          *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-04-11                                                                 *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASE_PHASE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
    V_BEGIN_YEAR  DATE;
    V_END_YEAR    DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    V_BEGIN_YEAR  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                             'YYYY-MM-DD');
    V_END_YEAR    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                        '-01-01',
                                        'YYYY-MM-DD'),
                                12);
    --月结
    BEGIN
      WRITE_LOG('TREATE_ROUTETIMEPHASE_PHASE',
                '按峰段指标结存-月结',
                V_DATE_IN,
                '开始');
      --删除月结数据
      DELETE FROM JZ_TIMEPHASEDATASTORAGE
       WHERE JZDATE < V_END_MONTH
         AND JZDATE >= V_BEGIN_MONTH
         AND DATASAVELEVEL = '2';
      --线路月结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         TIMEPHASETIME, ----
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均周转时间（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE --记录日期
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ORGID AS ORGID,
               T.ROUTEID AS ROUTEID,
               ROU.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               T.TIMEPHASEINTERVAL AS TIMEPHASEINTERVAL,
               T.TIMEPHASECIRCLETIME AS TIMEPHASECIRCLETIME,
               T.TIMEPHASETIME AS TIMEPHASETIME, ----
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.ACTUALINTERVAL AS ACTUALINTERVAL,
               T.ACTUALCIRCLETIME AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE, --车距合格率
               NULL AS STATIONKEEPBACKRATE, --车站平均留客率
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               T.RUNCIRCLETIME AS RUNCIRCLETIME,
               T.ROUTERUNTIME AS ROUTERUNTIME,
               T.ROUTESTOPTIME AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED, --运送速度
               NULL AS BUSRUNSPEED, --运营速度
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE, --大站准点率
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               ROU.ROUTECODE AS ROUTECODE,
               '2' AS DATASAVELEVEL,
               '4' AS STORAGEORGTYPE,
               SYSDATE AS RECDATE
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       AVG(T.TIMEPHASEINTERVAL) AS TIMEPHASEINTERVAL,
                       AVG(T.TIMEPHASECIRCLETIME) AS TIMEPHASECIRCLETIME,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       AVG(T.ACTUALINTERVAL) AS ACTUALINTERVAL,
                       AVG(T.ACTUALCIRCLETIME) AS ACTUALCIRCLETIME,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       AVG(T.RUNCIRCLETIME) AS RUNCIRCLETIME,
                       AVG(T.ROUTERUNTIME) AS ROUTERUNTIME,
                       AVG(T.ROUTESTOPTIME) AS ROUTESTOPTIME,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       SUM(T.TIMEPHASETIME) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE T
                 WHERE T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日
                   AND T.STORAGEORGTYPE = '4' --线路
                 GROUP BY T.ORGID,
                          T.ROUTEID,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织月结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         TIMEPHASETIME, ----
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE --记录日期
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.TIMEPHASETIME AS TIMEPHASETIME,
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               NULL AS ACTUALINTERVAL,
               NULL AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE,
               NULL AS STATIONKEEPBACKRATE,
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               NULL AS RUNCIRCLETIME,
               NULL AS ROUTERUNTIME,
               NULL AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED,
               NULL AS BUSRUNSPEED,
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE,
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               NULL AS ROUTECODE,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE,
               SYSDATE AS RECDATE
          FROM MCORGINFOGS ORG,
               (SELECT O.PARENTORGID AS ORGID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       SUM(T.TIMEPHASETIME) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE T, JZ_ORGGRADETREE O
                 WHERE T.ORGID = O.ORGID
                   AND T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日
                   AND T.STORAGEORGTYPE = '4'
                 GROUP BY O.PARENTORGID, T.TIMEPHASETYPE, T.TIMEPHASEVALUE) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_ROUTETIMEPHASE_PHASE',
                '按指标峰段结存-月结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE_PHASE',
                        '按指标峰段结存-月结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
    --年结
    BEGIN
      WRITE_LOG('TREATE_ROUTETIMEPHASE_PHASE',
                '按峰段指标结存-年结',
                V_DATE_IN,
                '开始');
      --删除年结数据
      DELETE FROM JZ_TIMEPHASEDATASTORAGE
       WHERE JZDATE < V_END_YEAR
         AND JZDATE >= V_BEGIN_YEAR
         AND DATASAVELEVEL = '1';
      --线路年结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         TIMEPHASETIME, ----
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均周转时间（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE --记录日期
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ORGID AS ORGID,
               T.ROUTEID AS ROUTEID,
               ROU.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               T.TIMEPHASESTARTTIME AS TIMEPHASESTARTTIME,
               T.TIMEPHASEENDTIME AS TIMEPHASEENDTIME,
               T.TIMEPHASEINTERVAL AS TIMEPHASEINTERVAL,
               T.TIMEPHASECIRCLETIME AS TIMEPHASECIRCLETIME,
               T.TIMEPHASETIME AS TIMEPHASETIME, ----
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.ACTUALINTERVAL AS ACTUALINTERVAL,
               T.ACTUALCIRCLETIME AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE, --车距合格率
               NULL AS STATIONKEEPBACKRATE, --车站平均留客率
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               T.RUNCIRCLETIME AS RUNCIRCLETIME,
               T.ROUTERUNTIME AS ROUTERUNTIME,
               T.ROUTESTOPTIME AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED, --运送速度
               NULL AS BUSRUNSPEED, --运营速度
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE, --大站准点率
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               ROU.ROUTECODE AS ROUTECODE,
               '1' AS DATASAVELEVEL,
               '4' AS STORAGEORGTYPE,
               SYSDATE AS RECDATE
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       T.TIMEPHASESTARTTIME AS TIMEPHASESTARTTIME,
                       T.TIMEPHASEENDTIME AS TIMEPHASEENDTIME,
                       AVG(T.TIMEPHASEINTERVAL) AS TIMEPHASEINTERVAL,
                       AVG(T.TIMEPHASECIRCLETIME) AS TIMEPHASECIRCLETIME,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       AVG(T.ACTUALINTERVAL) AS ACTUALINTERVAL,
                       AVG(T.ACTUALCIRCLETIME) AS ACTUALCIRCLETIME,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       AVG(T.RUNCIRCLETIME) AS RUNCIRCLETIME,
                       AVG(T.ROUTERUNTIME) AS ROUTERUNTIME,
                       AVG(T.ROUTESTOPTIME) AS ROUTESTOPTIME,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       SUM(T.TIMEPHASETIME) AS TIMEPHASETIME ---
                  FROM JZ_TIMEPHASEDATASTORAGE T
                 WHERE T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月
                   AND T.STORAGEORGTYPE = '4' --线路
                 GROUP BY T.ORGID,
                          T.ROUTEID,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE,
                          T.TIMEPHASESTARTTIME,
                          T.TIMEPHASEENDTIME) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织年结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         TIMEPHASETIME, ----
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE --记录日期
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.TIMEPHASETIME AS TIMEPHASETIME, ----
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               NULL AS ACTUALINTERVAL,
               NULL AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE,
               NULL AS STATIONKEEPBACKRATE,
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               NULL AS RUNCIRCLETIME,
               NULL AS ROUTERUNTIME,
               NULL AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED,
               NULL AS BUSRUNSPEED,
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE,
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               NULL AS ROUTECODE,
               '1' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE,
               SYSDATE AS RECDATE
          FROM MCORGINFOGS ORG,
               (SELECT O.PARENTORGID AS ORGID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       SUM(T.TIMEPHASETIME) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE T, JZ_ORGGRADETREE O
                 WHERE T.ORGID = O.ORGID
                   AND T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月
                   AND T.STORAGEORGTYPE = '4'
                 GROUP BY PARENTORGID, T.TIMEPHASETYPE, T.TIMEPHASEVALUE) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_ROUTETIMEPHASE_PHASE',
                '按指标峰段结存-年结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE_PHASE',
                        '按指标峰段结存-月年结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASESTORAGE                                                *
  *                                                                                      *
  *    功能：按峰段指标数据结存表                                                          *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASESTORAGE(V_DATE DATE) AS
    V_ORGID               VARCHAR2(36); --jz_timephasedatastorage.orgid%TYPE; --组织id'
    V_ROUTEID             VARCHAR2(36); --jz_timephasedatastorage.routeid%TYPE; --线路编号';
    V_ROUTENAME           VARCHAR2(36); --jz_timephasedatastorage.routename%TYPE; --线路名称';
    V_ROUTECODE           VARCHAR2(36); --jz_timephasedatastorage.routecode%TYPE; --线路编码';
    V_TIMEPHASETYPE       VARCHAR2(2); --jz_timephasedatastorage.timephasetype%TYPE; --峰段类型
    V_TIMEPHASEVALUE      VARCHAR2(40); --jz_timephasedatastorage.timephasevalue%TYPE; --峰段名称
    V_STARTTIME           NUMBER; --峰段开始时间(相对0点的小时数)
    V_ENDTIME             NUMBER; --峰段结束时间(相对0点的小时数)
    V_TIMEPHASESTARTTIME  DATE; --峰段开始时间
    V_TIMEPHASEENDTIME    DATE; --峰段结束时间  
    V_TIMEPHASEINTERVAL   NUMBER; -- jz_timephasedatastorage.timephaseinterval%TYPE; --峰段发车间隔（分钟）
    V_TIMEPHASECIRCLETIME NUMBER; --jz_timephasedatastorage.timephasecircletime%TYPE; --峰段周转时间（分钟）
    V_STDSEQS             NUMBER; --jz_timephasedatastorage.stdseqs%TYPE; --标准车次数  
    V_LOADPSGCAPABILITY   NUMBER; --jz_timephasedatastorage.loadpsgcapability%TYPE; --载客能力';
    V_GPSMILES            NUMBER; --jz_timephasedatastorage.gpsmiles%TYPE; --gps里程';
    V_RUNMILES            NUMBER; --jz_timephasedatastorage.runmiles%TYPE; --营运里程';
    V_UNRUNMILES          NUMBER; --jz_timephasedatastorage.unrunmiles%TYPE; --非营运里程';
    V_RUNTIMES            NUMBER;
    V_ACTUALSEQCOUNT      NUMBER; --jz_timephasedatastorage.actualseqcount%TYPE; --实际班次数';
    V_FULLSEQCOUNT        NUMBER;
    V_ACTUALINTERVAL      NUMBER; --jz_timephasedatastorage.actualinterval%TYPE; --实际平均发车间隔（分钟）
    V_ACTUALCIRCLETIME    NUMBER; --jz_timephasedatastorage.actualcircletime%TYPE; --实际平均周转时间（分钟）
    V_DEVOTIONBUSCOUNT    NUMBER; --jz_timephasedatastorage.devotionbuscount%TYPE; --投入车辆数';
    V_DEVOTIONEMPCOUNT    NUMBER; --jz_timephasedatastorage.devotionempcount%TYPE; --投入驾驶员数';
    V_BUSSENDINTERVALSTD  NUMBER; --jz_timephasedatastorage.bussendintervalstd%TYPE; --发车间隔合格班次数';
    V_PLANSEQMILE         NUMBER; --jz_timephasedatastorage.planseqmile%TYPE; --计划里程数';
    V_PLANSEQCOUNT        NUMBER; --jz_timephasedatastorage.planseqcount%TYPE; --计划班次数';
    V_PLANBUSCOUNT        NUMBER; --jz_timephasedatastorage.planbuscount%TYPE; --计划投入车辆数';
    V_PLANEMPCOUNT        NUMBER; --jz_timephasedatastorage.planempcount%TYPE; --计划投入驾驶员数';
    V_OVERSPEEDCOUNT      NUMBER; --jz_timephasedatastorage.overspeedcount%TYPE; --超速次数';
    V_UNRULESTOPCOUNT     NUMBER; --jz_timephasedatastorage.unrulestopcount%TYPE; --不规范停车次数';
    V_MDLOPENDOORCOUNT    NUMBER; --jz_timephasedatastorage.mdlopendoorcount%TYPE; --中途开关门次数';
    V_PSGCOUNT            NUMBER; --jz_timephasedatastorage.psgcount%TYPE;--客运量
    V_INTERVAL            NUMBER; --发车间隔
    V_SUMBUSCOUNT         NUMBER;
    V_ONTIMECOUNT         NUMBER; --准点车次数
    V_DATASAVELEVEL       CHAR(1);
    V_DATE_IN             DATE := TRUNC(V_DATE);
    --线路峰段(注意：如果没有配置峰段，则全天按平峰计算)
    CURSOR CUR_ROUTE(DATE_IN DATE) IS
      SELECT ROUTE.ORGID,
             ROUTE.ROUTEID,
             ROUTE.ROUTENAME,
             ROUTE.ROUTECODE,
             NVL(T.TIMEPHASEKEY, '2') TIMEPHASEKEY,
             NVL(T.TIMEPHASENAME, '平峰') TIMEPHASENAME,
             TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
             TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
             ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
             ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME,
             NVL(T.TIMEPHASEINTERVAL, 0) TIMEPHASEINTERVAL,
             NVL(T.TIMEPHASECIRCLETIME, 0) TIMEPHASECIRCLETIME,
             NVL(T.PLANSEQS, 0) PLANSEQS
        FROM MCROUTEINFOGS ROUTE,
             (SELECT *
                FROM MCROUTETIMEPHASEGS T
               WHERE T.BEGINDATE <= DATE_IN
                 AND T.ENDDATE >= DATE_IN
                 AND T.BEGINWEEK <=
                     (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)
                 AND T.ENDWEEK >=
                     (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)) T
       WHERE ROUTE.ROUTEID = T.ROUTEID(+)
       ORDER BY T.ROUTEID, T.STARTTIME;
    --实际车次
    CURSOR CUR_ACTUALSEQ(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS ACTUALSEQCOUNT, --实际班次数'
             SUM(T.GPSMILE) AS GPSMILES, --gps里程';
             SUM(T.GPSMILE *
                 (NVL(BUS.SEATCOUNT, 0) + NVL(BUS.STANDCOUNT, 0))) AS LOADPSGCAPABILITY, --载客能力';
             COUNT(DISTINCT T.BUSID) AS DEVOTIONBUSCOUNT, --投入车辆数';
             COUNT(DISTINCT T.DRIVERID) AS DEVOTIONEMPCOUNT, --投入驾驶员数';
             ROUND(SUM((T.ARRIVETIME - T.LEAVETIME) * 24 * 60) /
                   NVL(COUNT(*), 0),
                   2) AS ACTUALCIRCLETIME --实际平均周转时间（分钟）
        FROM BZ_BUSRUNRECORDLDTEMP T, MCBUSINFOGS BUS
       WHERE T.BUSID = BUS.BUSID
         AND T.ROUTEID = ROUTEID_IN
         AND T.RUNDATADATE = DATE_IN
         AND T.RECTYPE = '1'
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME <= TIMEPHASEENDTIME_IN;
    --计划车次
    CURSOR CUR_PLANSEQ(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS PLANSEQCOUNT, --计划班次数';
             SUM(T.MILENUM) AS PLANSEQMILE, --计划里程数';
             COUNT(DISTINCT T.BUSID) AS PLANBUSCOUNT, --计划投入车辆数';
             COUNT(DISTINCT T.DRIVERID) AS PLANEMPCOUNT --计划投入驾驶员数';
        FROM BZ_BUSDISPLANLD T
       WHERE T.ROUTEID = ROUTEID_IN
         AND T.RUNDATE = DATE_IN
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME <= TIMEPHASEENDTIME_IN;
    --准点班次数
    CURSOR CUR_ONTIME(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT T.ROUTEID,
             (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS ONTIME
        FROM BZ_BUSRUNRECORDLDTEMP T
       WHERE T.ROUTEID = ROUTEID_IN
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME < TIMEPHASEENDTIME_IN
         AND T.RUNDATADATE = DATE_IN
         AND T.RECTYPE = '1'
         AND (T.ISLATE = '0' OR T.ISLATE = '3' OR T.ISLATE IS NULL)
       GROUP BY T.ROUTEID;
  BEGIN
    WRITE_LOG('TREATE_ROUTETIMEPHASESTORAGE',
              '按峰段指标数据结存表',
              V_DATE,
              '开始');
    --删除全部数据
    DELETE JZ_TIMEPHASEDATASTORAGE WHERE JZDATE = V_DATE_IN;
    COMMIT;
    FOR CUR_R IN CUR_ROUTE(V_DATE_IN) LOOP
      BEGIN
        V_DATASAVELEVEL := '3'; ---日结
      
        V_ORGID               := CUR_R.ORGID; --组织id'
        V_ROUTEID             := CUR_R.ROUTEID; --线路编号';
        V_ROUTENAME           := CUR_R.ROUTENAME; --线路名称';
        V_ROUTECODE           := CUR_R.ROUTECODE; --线路编码
        V_TIMEPHASETYPE       := CUR_R.TIMEPHASEKEY; --峰段类型
        V_TIMEPHASEVALUE      := CUR_R.TIMEPHASENAME; --峰段名称
        V_TIMEPHASESTARTTIME  := CUR_R.TIMEPHASESTARTTIME; --峰段开始时间
        V_TIMEPHASEENDTIME    := CUR_R.TIMEPHASEENDTIME; --峰段结束时间
        V_STARTTIME           := CUR_R.STARTTIME; --峰段开始时间(相对0点的小时数)
        V_ENDTIME             := CUR_R.ENDTIME; --峰段结束时间(相对0点的小时数)      
        V_TIMEPHASEINTERVAL   := CUR_R.TIMEPHASEINTERVAL; --峰段发车间隔（分钟）
        V_TIMEPHASECIRCLETIME := CUR_R.TIMEPHASECIRCLETIME; --峰段周转时间（分钟）
        V_STDSEQS             := CUR_R.PLANSEQS; --标准车次数
        --初始化参数
        V_PLANSEQMILE        := 0; --计划里程数';
        V_PLANSEQCOUNT       := 0; --计划班次数';
        V_PLANBUSCOUNT       := 0; --计划投入车辆数';
        V_PLANEMPCOUNT       := 0; --计划投入驾驶员数';
        V_LOADPSGCAPABILITY  := 0; --载客能力';
        V_ACTUALSEQCOUNT     := 0; --实际班次数';
        V_FULLSEQCOUNT       := 0;
        V_GPSMILES           := 0; --gps里程';
        V_RUNMILES           := 0; --营运里程';
        V_RUNTIMES           := 0; --营运时间';
        V_UNRUNMILES         := 0; --非营运里程';
        V_DEVOTIONBUSCOUNT   := 0; --投入车辆数';
        V_DEVOTIONEMPCOUNT   := 0; --投入驾驶员数';
        V_ACTUALINTERVAL     := 0; --实际平均发车间隔（分钟）
        V_ACTUALCIRCLETIME   := 0; --实际平均周转时间（分钟）
        V_BUSSENDINTERVALSTD := 0; --发车间隔合格班次数
        V_OVERSPEEDCOUNT     := 0; --超速次数';
        V_UNRULESTOPCOUNT    := 0; --不规范停车次数';
        V_MDLOPENDOORCOUNT   := 0; --中途开关门次数';
        V_PSGCOUNT           := 0;
        V_SUMBUSCOUNT        := 0;
        V_ONTIMECOUNT        := 0;
        FOR CUR IN CUR_ACTUALSEQ(V_ROUTEID,
                                 V_DATE_IN,
                                 V_TIMEPHASESTARTTIME,
                                 V_TIMEPHASEENDTIME) LOOP
          V_ACTUALSEQCOUNT    := CUR.ACTUALSEQCOUNT;
          V_FULLSEQCOUNT      := CUR.ACTUALSEQCOUNT;
          V_GPSMILES          := CUR.GPSMILES;
          V_LOADPSGCAPABILITY := CUR.LOADPSGCAPABILITY;
          V_DEVOTIONBUSCOUNT  := CUR.DEVOTIONBUSCOUNT;
          V_DEVOTIONEMPCOUNT  := CUR.DEVOTIONEMPCOUNT;
          V_ACTUALCIRCLETIME  := CUR.ACTUALCIRCLETIME;
        END LOOP;
        FOR CUR IN (SELECT SUM(T.MILENUM) AS RUNMILES,
                           ROUND(SUM((T.ARRIVETIME - T.LEAVETIME) * 24), 2) AS RUNTIMES --营运里程';
                      FROM BZ_BUSRUNRECORDLDTEMP T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.RUNDATADATE = V_DATE_IN
                       AND T.RECTYPE = '1'
                       AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                       AND T.LEAVETIME <= V_TIMEPHASEENDTIME) LOOP
          V_RUNMILES := CUR.RUNMILES;
          V_RUNTIMES := CUR.RUNTIMES;
        END LOOP;
        FOR CUR IN (SELECT SUM(T.MILENUM) AS UNRUNMILES --非营运里程';
                      FROM BZ_BUSRUNRECORDLDTEMP T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.RUNDATADATE = V_DATE_IN
                       AND T.RECTYPE = '2'
                       AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                       AND T.LEAVETIME <= V_TIMEPHASEENDTIME) LOOP
          V_UNRUNMILES := CUR.UNRUNMILES;
        END LOOP;
        --需要考虑上下行线路
        FOR CUR IN (SELECT ROUND(SUM(SUMTIME) / (CASE
                                                   WHEN (SUM(SUMCOUNT) < 1) THEN
                                                    1
                                                   ELSE
                                                    SUM(SUMCOUNT)
                                                 END),
                                 2) AS ACTUALINTERVAL --实际平均发车间隔（分钟）
                      FROM (SELECT T.ROUTEID,
                                   T.SEGMENTID,
                                   (MAX(T.LEAVETIME) - MIN(T.LEAVETIME)) * 24 * 60 SUMTIME,
                                   (CASE
                                     WHEN ((COUNT(*) - 1) < 1) THEN
                                      1
                                     ELSE
                                      (COUNT(*) - 1)
                                   END) SUMCOUNT
                              FROM BZ_BUSRUNRECORDLDTEMP T
                             WHERE T.ROUTEID = V_ROUTEID
                               AND T.RUNDATADATE = V_DATE_IN
                               AND T.RECTYPE = '1'
                               AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                               AND T.LEAVETIME <= V_TIMEPHASEENDTIME
                             GROUP BY T.ROUTEID, T.SEGMENTID)) LOOP
          V_ACTUALINTERVAL := CUR.ACTUALINTERVAL;
        END LOOP;
        FOR CUR IN CUR_PLANSEQ(V_ROUTEID,
                               V_DATE_IN,
                               V_TIMEPHASESTARTTIME,
                               V_TIMEPHASEENDTIME) LOOP
          V_PLANSEQCOUNT := CUR.PLANSEQCOUNT;
          V_PLANSEQMILE  := CUR.PLANSEQMILE;
          V_PLANBUSCOUNT := CUR.PLANBUSCOUNT;
          V_PLANEMPCOUNT := CUR.PLANEMPCOUNT;
        END LOOP;
        --标准峰发车间隔为空，取实际平均发车间隔
        IF (V_TIMEPHASEINTERVAL IS NULL) THEN
          V_INTERVAL := V_ACTUALINTERVAL;
        ELSE
          V_INTERVAL := V_TIMEPHASEINTERVAL;
        END IF;
        IF (V_INTERVAL IS NOT NULL) THEN
          FOR CUR IN (SELECT (CASE
                               WHEN G_SHIFTCALC_STD = '1' THEN
                                COUNT(*)
                               ELSE
                                SUM(SEQNUM)
                             END) AS BUSSENDINTERVALSTD
                        FROM (SELECT T.ROUTEID,
                                     T.SUBROUTEID,
                                     T.SEGMENTID,
                                     T.SEQNUM,
                                     (LAG(T.LEAVETIME)
                                      OVER(PARTITION BY T.ROUTEID,
                                           T.SUBROUTEID,
                                           T.SEGMENTID ORDER BY T.LEAVETIME)) PRELEAVETIME,
                                     T.LEAVETIME,
                                     NVL((T.LEAVETIME -
                                         (LAG(T.LEAVETIME)
                                          OVER(PARTITION BY T.ROUTEID,
                                                T.SUBROUTEID,
                                                T.SEGMENTID ORDER BY
                                                T.LEAVETIME))) * 24 * 60,
                                         V_INTERVAL) DELTA --考虑第一趟为标准发车
                                FROM BZ_BUSRUNRECORDLDTEMP T
                               WHERE T.ROUTEID = V_ROUTEID
                                 AND T.RUNDATADATE = V_DATE_IN)
                       WHERE LEAVETIME >= V_TIMEPHASESTARTTIME
                         AND LEAVETIME <= V_TIMEPHASEENDTIME
                            --AND DELTA > V_INTERVAL - G_SENDBUS_INTERVAL
                         AND DELTA <= V_INTERVAL) LOOP
            V_BUSSENDINTERVALSTD := CUR.BUSSENDINTERVALSTD;
          END LOOP;
        END IF;
        FOR CUR IN (SELECT T.BUSCOUNT
                      FROM JZ_ROUTEBASICDATAPHASESTORAGE T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND JZDATE >= TO_DATE(TO_CHAR(V_DATE_IN, 'yyyyMM') || '01',
                                             'yyyyMMdd')
                       AND JZDATE < TO_DATE(TO_CHAR(ADD_MONTHS(V_DATE_IN, 1),
                                                    'yyyyMM') || '01',
                                            'yyyyMMdd')) LOOP
          V_SUMBUSCOUNT := CUR.BUSCOUNT;
        END LOOP;
        --准点车次数
        FOR CUR IN CUR_ONTIME(V_ROUTEID,
                              V_DATE_IN,
                              V_TIMEPHASESTARTTIME,
                              V_TIMEPHASEENDTIME) LOOP
          V_ONTIMECOUNT := CUR.ONTIME;
        END LOOP;
        INSERT INTO JZ_TIMEPHASEDATASTORAGE
          (RECORDID,
           ROUTEID,
           ROUTENAME,
           ROUTECODE,
           JZDATE,
           TIMEPHASETYPE,
           TIMEPHASEVALUE,
           TIMEPHASESTARTTIME,
           TIMEPHASEENDTIME,
           TIMEPHASEINTERVAL,
           TIMEPHASECIRCLETIME,
           TIMEPHASETIME, --峰段时间（小时）
           STDSEQS,
           ORGID,
           PLANSEQMILE,
           PLANSEQCOUNT,
           PLANBUSCOUNT,
           PLANEMPCOUNT,
           LOADPSGCAPABILITY,
           ACTUALSEQCOUNT,
           FULLSEQCOUNT,
           GPSMILES,
           RUNMILES,
           RUNTIMES,
           UNRUNMILES,
           DEVOTIONBUSCOUNT,
           DEVOTIONEMPCOUNT,
           ACTUALINTERVAL,
           ACTUALCIRCLETIME,
           BUSSENDINTERVALSTD,
           OVERSPEEDCOUNT,
           UNRULESTOPCOUNT,
           MDLOPENDOORCOUNT,
           PSGCOUNT,
           SUMBUSCOUNT,
           ONTIMESEQCOUNT,
           DATASAVELEVEL,
           STORAGEORGTYPE)
        VALUES
          (S_ROUTESTORAGE.NEXTVAL,
           V_ROUTEID, --线路编号';
           V_ROUTENAME, --线路名称';
           V_ROUTECODE,
           V_DATE_IN,
           V_TIMEPHASETYPE, --峰段类型
           V_TIMEPHASEVALUE, --峰段名称
           V_STARTTIME, --峰段开始时间(相对0点的天数)
           V_ENDTIME, --峰段结束时间(相对0点的天数)
           V_TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
           V_TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
           ROUND((V_ENDTIME - V_STARTTIME) * 24, 2), --峰段时间（小时）
           V_STDSEQS, --标准车次数           
           V_ORGID, --组织id'           
           V_PLANSEQMILE, --计划里程数';
           V_PLANSEQCOUNT, --计划班次数';
           V_PLANBUSCOUNT, --计划投入车辆数';
           V_PLANEMPCOUNT, --计划投入驾驶员数';           
           V_LOADPSGCAPABILITY, --载客能力';
           V_ACTUALSEQCOUNT, --实际班次数';
           V_ACTUALSEQCOUNT,
           V_GPSMILES, --gps里程';
           V_RUNMILES,
           V_RUNTIMES,
           V_UNRUNMILES, --非营运里程';
           V_DEVOTIONBUSCOUNT, --投入车辆数';
           V_DEVOTIONEMPCOUNT, --投入驾驶员数';
           V_ACTUALINTERVAL, --实际平均发车间隔（分钟）
           V_ACTUALCIRCLETIME, --实际平均周转时间（分钟）
           V_BUSSENDINTERVALSTD, --发车间隔合格班次数           
           V_OVERSPEEDCOUNT, --超速次数';
           V_UNRULESTOPCOUNT, --不规范停车次数';
           V_MDLOPENDOORCOUNT, --中途开关门次数';           
           V_PSGCOUNT,
           V_SUMBUSCOUNT,
           V_ONTIMECOUNT,
           V_DATASAVELEVEL,
           '4');
        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('TREATE_ROUTETIMEPHASESTORAGE',
                          '按峰段指标数据结存表',
                          V_DATE,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP;
    COMMIT; --提交数据
    TREATE_ROUTETIMEPHASE_ORG(V_DATE_IN);
    TREATE_ROUTETIMEPHASE_PHASE(V_DATE_IN);
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTETIMEPHASESTORAGE',
                      '按峰段指标数据结存表',
                      V_DATE,
                      SQLCODE,
                      SQLERRM);
  END;
  -----------------------------------------------------------------------------------------
  /***************************************************************************************
  *    名称：TREAT_ROUTEDAYSTORAGE_ORG                                                   *
  *                                                                                      *
  *    功能：日结存表组织维度结存(组织)                                                  *
  *                                                                                      *
  *    作者：huhuiming                                                                   *
  *    日期：2012-03-19                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEDAYSTORAGE_ORG(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    --日结
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREAT_ROUTEDAYSTORAGE_ORG',
              '组织数据结存表-日结',
              V_DATE_IN,
              '开始');
    --删除日结数据
    DELETE FROM JZ_ROUTEDAYSTORAGE
     WHERE JZDATE = V_DATE_IN
       AND STORAGEORGTYPE != '4'
       AND DATASAVELEVEL = '3'; --日结数据
    --插入新的结存数据
    INSERT INTO JZ_ROUTEDAYSTORAGE
      (RECORDID, --记录编号
       ORGID, --组织ID
       ROUTEID, --线路编号
       ROUTENAME, --线路名称
       JZDATE, --结存日期
       PLANSEQCOUNT, --计划班次数
       ACTUALSEQCOUNT, --实际班次数
       FULLSEQCOUNT, --实际班次数
       PLANSEQMILE, --计划里程数
       GPSMILES, --GPS里程
       RUNMILES, --营运里程
       UNRUNMILES, --非营运里程
       RUNTIME,
       BUSWORKTIME,
       DEVOTIONBUSCOUNT, --投入车辆数
       DEVOTIONEMPCOUNT, --投入驾驶员数
       PLANBUSCOUNT, --计划投入车辆数
       PLANEMPCOUNT, --计划投入驾驶员数
       LOADPSGCAPABILITY, --载客能力
       FSTLSTSEQCOUNT, --线路首末班车次数
       FSTONTIMECOUNT, --首班准点车次数
       LSTONTIMECOUNT, --末班准点车次数
       ONTIMESEQCOUNT, --准点车次数
       BUSSENDINTERVALSTD, --发车间隔合格班次数
       OVERSPEEDCOUNT, --超速次数
       UNRULESTOPCOUNT, --不规范停车次数
       MDLOPENDOORCOUNT, --中途开关门次数
       STORAGEORGTYPE, --数据结存组织级别
       DATASAVELEVEL, --数据结存级别
       RECDATE --记录日期
       )
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID, --记录编号
             ORG.ORGID AS ORGID, --组织编号
             NULL AS ROUTEID, --线路编号
             NULL AS ROUTENAME, --线路名称
             V_DATE_IN AS JZDATE, --结存日期
             T.PLANSEQCOUNT AS PLANSEQCOUNT, --计划班次数
             T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT, --实际班次数
             T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
             T.PLANSEQMILE AS PLANSEQMILE, --计划里程数
             T.GPSMILES AS GPSMILES, --GPS里程
             T.RUNMILES AS RUNMILES, --营运里程
             T.UNRUNMILES AS UNRUNMILES, --非营运里程
             T.RUNTIME AS RUNTIME,
             T.BUSWORKTIME AS BUSWORKTIME,
             T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT, --投入车辆数
             T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT, --投入驾驶员数
             T.PLANBUSCOUNT AS PLANBUSCOUNT, --计划投入车辆数
             T.PLANEMPCOUNT AS PLANEMPCOUNT, --计划投入驾驶员数
             T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY, --载客能力
             T.FSTLSTSEQCOUNT AS FSTLSTSEQCOUNT, --线路首末班车次数
             T.FSTONTIMECOUNT AS FSTONTIMECOUNT, --首班准点车次数
             T.LSTONTIMECOUNT AS LSTONTIMECOUNT, --末班准点车次数
             T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT, --准点车次数
             T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD, --发车间隔合格班次数
             T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT, --超速次数
             T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT, --不规范停车次数
             T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT, --中途开关门次数
             ORG.ORGGRADE AS STORAGEORGTYPE, --组织级别
             '3' AS DATASAVELEVEL, --日结存
             SYSDATE AS RECDATE --系统时间
        FROM MCORGINFOGS ORG,
             (SELECT O.PARENTORGID AS ORGID,
                     SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                     SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                     SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                     SUM(T.GPSMILES) AS GPSMILES,
                     SUM(T.RUNMILES) AS RUNMILES,
                     SUM(T.UNRUNMILES) AS UNRUNMILES,
                     SUM(T.RUNTIME) AS RUNTIME,
                     SUM(T.BUSWORKTIME) AS BUSWORKTIME,
                     SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                     SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                     SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                     SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                     SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                     SUM(T.FSTLSTSEQCOUNT) AS FSTLSTSEQCOUNT,
                     SUM(T.FSTONTIMECOUNT) AS FSTONTIMECOUNT,
                     SUM(T.LSTONTIMECOUNT) AS LSTONTIMECOUNT,
                     SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                     SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                     SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                     SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                     SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT
                FROM JZ_ROUTEDAYSTORAGE T, JZ_ORGGRADETREE O
               WHERE T.ORGID = O.ORGID
                 AND T.JZDATE = V_DATE_IN
                 AND T.DATASAVELEVEL = '3' --日
                 AND T.STORAGEORGTYPE = '4' --线路
               GROUP BY O.PARENTORGID) T
       WHERE ORG.ORGID = T.ORGID(+)
         AND ORG.ISACTIVE = '1';
    COMMIT;
    --更新拥有车辆数
    FOR CUR_BUSCOUNT IN (SELECT ORGTREE.PARENTORGID AS ORGID,
                                COUNT(*) AS BUSCOUNT
                           FROM MCBUSINFOVW BUS, JZ_ORGGRADETREE ORGTREE
                          WHERE BUS.ORGID = ORGTREE.ORGID
                          GROUP BY ORGTREE.PARENTORGID) LOOP
      UPDATE JZ_ROUTEDAYSTORAGE T
         SET T.SUMBUSCOUNT = CUR_BUSCOUNT.BUSCOUNT
       WHERE T.ORGID = CUR_BUSCOUNT.ORGID
         AND T.JZDATE = V_DATE_IN
         AND T.STORAGEORGTYPE != '4'
         AND T.DATASAVELEVEL = '3';
    END LOOP;
    COMMIT;
    WRITE_LOG('TREAT_ROUTEDAYSTORAGE_ORG',
              '组织数据结存表-日结',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREAT_ROUTEDAYSTORAGE_ORG',
                      '组织数据结存表-日结',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  -------------------------------------------------------------------------------
  /***************************************************************************************
  *    名称：TREAT_ROUTEDAYSTORAGE_PHASE                                                 *
  *                                                                                      *
  *    功能：日结存表时间维度结存(日期)                                                  *
  *                                                                                      *
  *    作者：huhuiming                                                                   *
  *    日期：2012-03-19                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEDAYSTORAGE_PHASE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
    V_BEGIN_YEAR  DATE;
    V_END_YEAR    DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    V_BEGIN_YEAR  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                             'YYYY-MM-DD');
    V_END_YEAR    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                        '-01-01',
                                        'YYYY-MM-DD'),
                                12);
    --月结
    BEGIN
      WRITE_LOG('TREAT_ROUTEDAYSTORAGE_PHASE',
                '组织数据结存表-月结',
                V_DATE_IN,
                '开始');
      --删除月结数据
      DELETE FROM JZ_ROUTEDAYSTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND DATASAVELEVEL = '2'; --月结数据
      --线路月结
      INSERT INTO JZ_ROUTEDAYSTORAGE
        (RECORDID, --记录编号
         ORGID, --组织ID
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         PLANSEQMILE, --计划里程数
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         UNRUNMILES, --非营运里程
         RUNTIME,
         BUSWORKTIME,
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入驾驶员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         LOADPSGCAPABILITY, --载客能力
         FSTLSTSEQCOUNT, --线路首末班车次数
         FSTONTIMECOUNT, --首班准点车次数
         LSTONTIMECOUNT, --末班准点车次数
         ONTIMESEQCOUNT, --准点车次数
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         STORAGEORGTYPE, --数据结存组织级别
         DATASAVELEVEL, --数据结存级别
         RECDATE, --记录日期
         SUMBUSCOUNT)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID, --记录编号
               T.ORGID AS ORGID, --组织ID
               T.ROUTEID AS ROUTEID, --线路编号
               ROU.ROUTENAME AS ROUTENAME, --线路名称
               V_DATE_IN AS JZDATE, --结存日期
               T.PLANSEQCOUNT AS PLANSEQCOUNT, --计划班次数
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT, --实际班次数
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.PLANSEQMILE AS PLANSEQMILE, --计划里程数
               T.GPSMILES AS GPSMILES, --GPS里程
               T.RUNMILES AS RUNMILES, --营运里程
               T.UNRUNMILES AS UNRUNMILES, --非营运里程
               T.RUNTIME AS RUNTIME,
               T.BUSWORKTIME AS BUSWORKTIME,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT, --投入车辆数
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT, --投入驾驶员数
               T.PLANBUSCOUNT AS PLANBUSCOUNT, --计划投入车辆数
               T.PLANEMPCOUNT AS PLANEMPCOUNT, --计划投入驾驶员数
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY, --载客能力
               T.FSTLSTSEQCOUNT AS FSTLSTSEQCOUNT, --线路首末班车次数
               T.FSTONTIMECOUNT AS FSTONTIMECOUNT, --首班准点车次数
               T.LSTONTIMECOUNT AS LSTONTIMECOUNT, --末班准点车次数
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT, --准点车次数
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD, --发车间隔合格班次数
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT, --超速次数
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT, --不规范停车次数
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT, --中途开关门次数
               '4' AS STORAGEORGTYPE, --线路结存
               '2' AS DATASAVELEVEL, --月结数据
               SYSDATE AS RECDATE, --记录日期
               T.SUMBUSCOUNT AS SUMBUSCOUNT
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.RUNTIME) AS RUNTIME,
                       SUM(T.BUSWORKTIME) AS BUSWORKTIME,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.FSTLSTSEQCOUNT) AS FSTLSTSEQCOUNT,
                       SUM(T.FSTONTIMECOUNT) AS FSTONTIMECOUNT,
                       SUM(T.LSTONTIMECOUNT) AS LSTONTIMECOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       MAX(T.SUMBUSCOUNT) AS SUMBUSCOUNT
                  FROM JZ_ROUTEDAYSTORAGE T
                 WHERE T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日结数据
                   AND T.STORAGEORGTYPE = '4' --线路数据
                 GROUP BY T.ORGID, T.ROUTEID) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织月结
      INSERT INTO JZ_ROUTEDAYSTORAGE
        (RECORDID, --记录编号
         ORGID, --组织ID
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         PLANSEQMILE, --计划里程数
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         UNRUNMILES, --非营运里程
         RUNTIME,
         BUSWORKTIME,
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入驾驶员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         LOADPSGCAPABILITY, --载客能力
         FSTLSTSEQCOUNT, --线路首末班车次数
         FSTONTIMECOUNT, --首班准点车次数
         LSTONTIMECOUNT, --末班准点车次数
         ONTIMESEQCOUNT, --准点车次数
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         STORAGEORGTYPE, --数据结存组织级别
         DATASAVELEVEL, --数据结存级别
         RECDATE, --记录日期
         SUMBUSCOUNT)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID, --记录编号
               T.ORGID AS ORGID, --组织ID
               NULL AS ROUTEID, --线路编号
               NULL AS ROUTENAME, --线路名称
               V_DATE_IN AS JZDATE, --结存日期
               T.PLANSEQCOUNT AS PLANSEQCOUNT, --计划班次数
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT, --实际班次数
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.PLANSEQMILE AS PLANSEQMILE, --计划里程数
               T.GPSMILES AS GPSMILES, --GPS里程
               T.RUNMILES AS RUNMILES, --营运里程
               T.UNRUNMILES AS UNRUNMILES, --非营运里程
               T.RUNTIME AS RUNTIME,
               T.BUSWORKTIME AS BUSWORKTIME,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT, --投入车辆数
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT, --投入驾驶员数
               T.PLANBUSCOUNT AS PLANBUSCOUNT, --计划投入车辆数
               T.PLANEMPCOUNT AS PLANEMPCOUNT, --计划投入驾驶员数
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY, --载客能力
               T.FSTLSTSEQCOUNT AS FSTLSTSEQCOUNT, --线路首末班车次数
               T.FSTONTIMECOUNT AS FSTONTIMECOUNT, --首班准点车次数
               T.LSTONTIMECOUNT AS LSTONTIMECOUNT, --末班准点车次数
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT, --准点车次数
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD, --发车间隔合格班次数
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT, --超速次数
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT, --不规范停车次数
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT, --中途开关门次数
               ORG.ORGGRADE AS STORAGEORGTYPE, --组织结存
               '2' AS DATASAVELEVEL, --月结数据
               SYSDATE AS RECDATE, --记录日期
               T.SUMBUSCOUNT AS SUMBUSCOUNT
          FROM MCORGINFOGS ORG,
               (SELECT O.PARENTORGID AS ORGID,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.RUNTIME) AS RUNTIME,
                       SUM(T.BUSWORKTIME) AS BUSWORKTIME,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.FSTLSTSEQCOUNT) AS FSTLSTSEQCOUNT,
                       SUM(T.FSTONTIMECOUNT) AS FSTONTIMECOUNT,
                       SUM(T.LSTONTIMECOUNT) AS LSTONTIMECOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT
                  FROM JZ_ROUTEDAYSTORAGE T, JZ_ORGGRADETREE O
                 WHERE T.ORGID = O.ORGID
                   AND T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日结数据
                   AND T.STORAGEORGTYPE = '4'
                 GROUP BY O.PARENTORGID) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREAT_ROUTEDAYSTORAGE_ORG',
                '组织数据结存表-月结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREAT_ROUTEDAYSTORAGE_ORG',
                        '组织数据结存表-月结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
    --年结
    BEGIN
      WRITE_LOG('TREAT_ROUTEDAYSTORAGE_PHASE',
                '组织数据结存表-年结',
                V_DATE_IN,
                '开始');
      --删除年结数据
      DELETE FROM JZ_ROUTEDAYSTORAGE
       WHERE JZDATE >= V_BEGIN_YEAR
         AND JZDATE < V_END_YEAR
         AND DATASAVELEVEL = '1'; --年结数据
      --线路年结
      INSERT INTO JZ_ROUTEDAYSTORAGE
        (RECORDID, --记录编号
         ORGID, --组织ID
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         PLANSEQMILE, --计划里程数
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         UNRUNMILES, --非营运里程
         RUNTIME,
         BUSWORKTIME,
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入驾驶员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         LOADPSGCAPABILITY, --载客能力
         FSTLSTSEQCOUNT, --线路首末班车次数
         FSTONTIMECOUNT, --首班准点车次数
         LSTONTIMECOUNT, --末班准点车次数
         ONTIMESEQCOUNT, --准点车次数
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         STORAGEORGTYPE, --数据结存组织级别
         DATASAVELEVEL, --数据结存级别
         RECDATE --记录日期
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID, --记录编号
               T.ORGID AS ORGID, --组织ID
               T.ROUTEID AS ROUTEID, --线路编号
               ROU.ROUTENAME AS ROUTENAME, --线路名称
               V_DATE_IN AS JZDATE, --结存日期
               T.PLANSEQCOUNT AS PLANSEQCOUNT, --计划班次数
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT, --实际班次数
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.PLANSEQMILE AS PLANSEQMILE, --计划里程数
               T.GPSMILES AS GPSMILES, --GPS里程
               T.RUNMILES AS RUNMILES, --营运里程
               T.UNRUNMILES AS UNRUNMILES, --非营运里程
               T.RUNTIME AS RUNTIME,
               T.BUSWORKTIME AS BUSWORKTIME,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT, --投入车辆数
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT, --投入驾驶员数
               T.PLANBUSCOUNT AS PLANBUSCOUNT, --计划投入车辆数
               T.PLANEMPCOUNT AS PLANEMPCOUNT, --计划投入驾驶员数
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY, --载客能力
               T.FSTLSTSEQCOUNT AS FSTLSTSEQCOUNT, --线路首末班车次数
               T.FSTONTIMECOUNT AS FSTONTIMECOUNT, --首班准点车次数
               T.LSTONTIMECOUNT AS LSTONTIMECOUNT, --末班准点车次数
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT, --准点车次数
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD, --发车间隔合格班次数
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT, --超速次数
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT, --不规范停车次数
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT, --中途开关门次数
               '4' AS STORAGEORGTYPE, --线路结存
               '1' AS DATASAVELEVEL, --年结数据
               SYSDATE AS RECDATE --记录日期
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.RUNTIME) AS RUNTIME,
                       SUM(T.BUSWORKTIME) AS BUSWORKTIME,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.FSTLSTSEQCOUNT) AS FSTLSTSEQCOUNT,
                       SUM(T.FSTONTIMECOUNT) AS FSTONTIMECOUNT,
                       SUM(T.LSTONTIMECOUNT) AS LSTONTIMECOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT
                  FROM JZ_ROUTEDAYSTORAGE T
                 WHERE T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月结数据
                   AND T.STORAGEORGTYPE = '4' --线路数据
                 GROUP BY T.ORGID, T.ROUTEID) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1'
           AND ROU.ISACTIVE = '1';
      --组织年结
      INSERT INTO JZ_ROUTEDAYSTORAGE
        (RECORDID, --记录编号
         ORGID, --组织ID
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         PLANSEQMILE, --计划里程数
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         UNRUNMILES, --非营运里程
         RUNTIME,
         BUSWORKTIME,
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入驾驶员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         LOADPSGCAPABILITY, --载客能力
         FSTLSTSEQCOUNT, --线路首末班车次数
         FSTONTIMECOUNT, --首班准点车次数
         LSTONTIMECOUNT, --末班准点车次数
         ONTIMESEQCOUNT, --准点车次数
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         STORAGEORGTYPE, --数据结存组织级别
         DATASAVELEVEL, --数据结存级别
         RECDATE, --记录日期
         SUMBUSCOUNT)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID, --记录编号
               T.ORGID AS ORGID, --组织ID
               NULL AS ROUTEID, --线路编号
               NULL AS ROUTENAME, --线路名称
               V_DATE_IN AS JZDATE, --结存日期
               T.PLANSEQCOUNT AS PLANSEQCOUNT, --计划班次数
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT, --实际班次数
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.PLANSEQMILE AS PLANSEQMILE, --计划里程数
               T.GPSMILES AS GPSMILES, --GPS里程
               T.RUNMILES AS RUNMILES, --营运里程
               T.UNRUNMILES AS UNRUNMILES, --非营运里程
               T.RUNTIME AS RUNTIME,
               T.BUSWORKTIME AS BUSWORKTIME,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT, --投入车辆数
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT, --投入驾驶员数
               T.PLANBUSCOUNT AS PLANBUSCOUNT, --计划投入车辆数
               T.PLANEMPCOUNT AS PLANEMPCOUNT, --计划投入驾驶员数
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY, --载客能力
               T.FSTLSTSEQCOUNT AS FSTLSTSEQCOUNT, --线路首末班车次数
               T.FSTONTIMECOUNT AS FSTONTIMECOUNT, --首班准点车次数
               T.LSTONTIMECOUNT AS LSTONTIMECOUNT, --末班准点车次数
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT, --准点车次数
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD, --发车间隔合格班次数
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT, --超速次数
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT, --不规范停车次数
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT, --中途开关门次数
               ORG.ORGGRADE AS STORAGEORGTYPE, --车队结存
               '1' AS DATASAVELEVEL, --年结数据
               SYSDATE AS RECDATE, --记录日期
               T.SUMBUSCOUNT AS SUMBUSCOUNT
          FROM MCORGINFOGS ORG,
               (SELECT O.PARENTORGID AS ORGID,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.RUNTIME) AS RUNTIME,
                       SUM(T.BUSWORKTIME) AS BUSWORKTIME,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.FSTLSTSEQCOUNT) AS FSTLSTSEQCOUNT,
                       SUM(T.FSTONTIMECOUNT) AS FSTONTIMECOUNT,
                       SUM(T.LSTONTIMECOUNT) AS LSTONTIMECOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT
                  FROM JZ_ROUTEDAYSTORAGE T, JZ_ORGGRADETREE O
                 WHERE T.ORGID = O.ORGID
                   AND T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月结数据
                   AND T.STORAGEORGTYPE = '4'
                 GROUP BY O.PARENTORGID) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREAT_ROUTEDAYSTORAGE_ORG',
                '组织数据结存表-年结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREAT_ROUTEDAYSTORAGE_ORG',
                        '组织数据结存表-年结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTEDAYDATASTORAGE                                                  *
  *                                                                                      *
  *    功能：线路指标日结存表                                                            *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEDAYDATASTORAGE(V_DATE DATE) AS
    V_DATE_IN            DATE := TRUNC(V_DATE);
    V_ROUTESTYLE         CHAR(1);
    V_ROUTEID            VARCHAR2(36);
    V_SUBROUTEID         VARCHAR2(36);
    V_SUBROUTENAME       VARCHAR2(36);
    V_BUSSENDINTERVALSTD NUMBER; --jz_routedaystorage.bussendintervalstd%TYPE; --发车间隔合格班次数';
    V_FSTLSTSEQCOUNT     NUMBER; --jz_routedaystorage.fstlstseqcount
    V_FSTONTIMECOUNT     NUMBER; --jz_routedaystorage.FstOnTimeCount
    V_LSTONTIMECOUNT     NUMBER; --jz_routedaystorage.lstOnTimeCount
    V_DRIVETIME          NUMBER;
    V_WORKTIME           NUMBER;
  BEGIN
    WRITE_LOG('TREATE_ROUTEDAYDATASTORAGE',
              '线路指标日结存表',
              V_DATE_IN,
              '开始');
    --删除全部数据
    DELETE JZ_ROUTEDAYSTORAGE WHERE JZDATE = V_DATE_IN;
    --线路日结存数据初始化
    INSERT INTO JZ_ROUTEDAYSTORAGE
      (RECORDID,
       ORGID,
       ROUTEID,
       ROUTENAME,
       JZDATE,
       RUNMILES,
       UNRUNMILES,
       RUNTIME,
       BUSWORKTIME,
       GPSMILES,
       ACTUALSEQCOUNT,
       FULLSEQCOUNT,
       ONTIMESEQCOUNT,
       DEVOTIONBUSCOUNT,
       DEVOTIONEMPCOUNT,
       PLANSEQCOUNT,
       PLANSEQMILE,
       PLANBUSCOUNT,
       PLANEMPCOUNT,
       LOADPSGCAPABILITY,
       DATASAVELEVEL,
       STORAGEORGTYPE)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             ROUTE.ORGID AS ORGID,
             ROUTE.ROUTEID AS ROUTEID,
             ROUTE.ROUTENAME AS ROUTENAME,
             V_DATE_IN AS JZDATE,
             NVL(T1.RUNMILE, 0) AS RUNMILES, --营运里程
             NVL(T2.UNRUNMILE, 0) AS UNRUNMILES, --非营运里程
             NVL(T1.RUNTIME, 0) AS RUNTIME, --营运时间
             NVL(T2.UNRUNTIME, 0) + NVL(T1.RUNTIME, 0) AS BUSWORKTIME, --车辆工作时间
             NVL(T1.RUNGPSMILE, 0) + NVL(T2.UNRUNGPSMILE, 0) AS GPSMILES, --GPS里程
             NVL(T1.RUNCOUNT, 0) AS ACTUALSEQCOUNT, --实际班次数
             NVL(T1.RUNCOUNT, 0) AS FULLSEQCOUNT, --实际班次数
             NVL(T4.ONTIME, 0) AS ONTIMESEQCOUNT, --准点班次数
             NVL(T3.BUSCOUNT, 0) AS DEVOTIONBUSCOUNT, --投入车辆
             NVL(T3.EMPCOUNT, 0) AS DEVOTIONEMPCOUNT, --投入驾驶员
             NVL(TT1.RUNPLANCOUNT, 0) AS PLANSEQCOUNT, --计划班次
             NVL(TT1.RUNPLANMILE, 0) AS PLANSEQMILE, --计划里程
             NVL(TT2.BUSCOUNT, 0) AS PLANBUSCOUNT, --计划投入车辆
             NVL(TT2.EMPCOUNT, 0) AS PLANEMPCOUNT, --计划投入驾驶员
             NVL(T1.LOADPSGCAPABILITY, 0) AS LOADPSGCAPABILITY, --载客能力
             '3' AS DATASAVELEVEL, --日结
             '4' AS STORAGEORGTYPE
        FROM MCROUTEINFOGS ROUTE,
             (SELECT T.ROUTEID,
                     (CASE
                       WHEN G_SHIFTCALC_STD = '1' THEN
                        COUNT(*)
                       ELSE
                        SUM(T.SEQNUM)
                     END) AS RUNCOUNT,
                     SUM(NVL(T.MILENUM, 0)) RUNMILE,
                     SUM(NVL(ROUND((T.ARRIVETIME - T.LEAVETIME) * 24, 2), 0)) RUNTIME,
                     SUM(NVL(T.GPSMILE, 0)) RUNGPSMILE,
                     SUM(NVL(T.MILENUM, 0) *
                         (NVL(BUS.SEATCOUNT, 0) + NVL(BUS.STANDCOUNT, 0))) AS LOADPSGCAPABILITY
                FROM BZ_BUSRUNRECORDLDTEMP T, MCBUSINFOGS BUS
               WHERE T.BUSID = BUS.BUSID(+)
                 AND T.RECTYPE = '1'
                 AND T.RUNDATADATE = V_DATE_IN
               GROUP BY T.ROUTEID) T1,
             (SELECT T.ROUTEID,
                     COUNT(*) UNRUNCOUNT,
                     SUM(NVL(T.MILENUM, 0)) UNRUNMILE,
                     SUM(NVL(ROUND((T.ARRIVETIME - T.LEAVETIME) * 24, 2), 0)) UNRUNTIME,
                     SUM(NVL(T.GPSMILE, 0)) UNRUNGPSMILE
                FROM BZ_BUSRUNRECORDLDTEMP T
               WHERE T.RECTYPE = '2'
                 AND T.RUNDATADATE = V_DATE_IN
               GROUP BY T.ROUTEID) T2,
             (SELECT T.ROUTEID,
                     COUNT(DISTINCT BUSID) AS BUSCOUNT,
                     COUNT(DISTINCT DRIVERID) AS EMPCOUNT
                FROM BZ_BUSRUNRECORDLDTEMP T
               WHERE T.RUNDATADATE = V_DATE_IN
                 AND T.RECTYPE = '1'
               GROUP BY T.ROUTEID) T3,
             (SELECT T.ROUTEID,
                     (CASE
                       WHEN G_SHIFTCALC_STD = '1' THEN
                        COUNT(*)
                       ELSE
                        SUM(T.SEQNUM)
                     END) AS ONTIME
                FROM BZ_BUSRUNRECORDLDTEMP T
               WHERE T.RECTYPE = '1'
                 AND T.RUNDATADATE = V_DATE_IN
                 AND (T.ISLATE = '0' OR T.ISLATE = '3' OR T.ISLATE IS NULL)
               GROUP BY T.ROUTEID) T4,
             (SELECT T.ROUTEID,
                     (CASE
                       WHEN G_SHIFTCALC_STD = '1' THEN
                        COUNT(*)
                       ELSE
                        SUM(T.SEQNUM)
                     END) AS RUNPLANCOUNT,
                     SUM(T.MILENUM) AS RUNPLANMILE
                FROM BZ_BUSDISPLANLD T
               WHERE T.RECTYPE = '1'
                 AND T.RUNDATE = V_DATE_IN
               GROUP BY T.ROUTEID) TT1,
             (SELECT T.ROUTEID,
                     COUNT(DISTINCT BUSID) BUSCOUNT,
                     COUNT(DISTINCT DRIVERID) EMPCOUNT
                FROM BZ_BUSDISPLANLD T
               WHERE T.RUNDATE = V_DATE_IN
               GROUP BY T.ROUTEID) TT2
       WHERE ROUTE.ROUTEID = T1.ROUTEID(+)
         AND ROUTE.ROUTEID = T2.ROUTEID(+)
         AND ROUTE.ROUTEID = T3.ROUTEID(+)
         AND ROUTE.ROUTEID = T4.ROUTEID(+)
         AND ROUTE.ROUTEID = TT1.ROUTEID(+)
         AND ROUTE.ROUTEID = TT2.ROUTEID(+);
    COMMIT;
    --按线路更新
    BEGIN
      FOR CUR_R IN (SELECT ROUTEID, ROUTENAME, ROUTECODE, ROUTESTYLE
                      FROM MCROUTEINFOGS) LOOP
        V_ROUTESTYLE         := CUR_R.ROUTESTYLE;
        V_ROUTEID            := CUR_R.ROUTEID;
        V_FSTLSTSEQCOUNT     := 0;
        V_FSTONTIMECOUNT     := 0;
        V_LSTONTIMECOUNT     := 0;
        V_BUSSENDINTERVALSTD := 0;
        V_DRIVETIME          := 0;
        --只考虑主子线，其它子线不考虑
        GET_MAINSUBROUTE(V_DATE_IN,
                         TRUNC(SYSDATE),
                         V_ROUTEID,
                         V_SUBROUTEID,
                         V_SUBROUTENAME);
        --获取首末班时间
        FOR CUR IN (SELECT SUM(STD) AS STD, SUM(FST) AS FST, SUM(LST) AS LST
                      FROM (SELECT S.ROUTEID,
                                   S.SUBROUTEID,
                                   S.SEGMENTID,
                                   S.RUNDIRECTION,
                                   2 AS STD,
                                   CASE
                                     WHEN ABS(ROUND((TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(S.MINLEAVETIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss') -
                                                    TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(D.MAINSTATIONFSTTIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss')) * 24 * 60)) > 3 THEN
                                      0
                                     ELSE
                                      1
                                   END FST,
                                   CASE
                                     WHEN ABS(ROUND((TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(S.MAXLEAVETIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss') -
                                                    TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(D.MAINSTATIONLSTTIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss')) * 24 * 60)) > 3 THEN
                                      0
                                     ELSE
                                      1
                                   END LST
                              FROM (SELECT *
                                      FROM MCROUTEFSTANDLSTSEQTIMEGS T
                                     WHERE T.STARTWEEK <=
                                           (MOD(TO_NUMBER(TO_CHAR(V_DATE_IN,
                                                                  'D')) + 5,
                                                7) + 1)
                                       AND T.ENDWEEK >=
                                           (MOD(TO_NUMBER(TO_CHAR(V_DATE_IN,
                                                                  'D')) + 5,
                                                7) + 1)) D,
                                   (SELECT T.ROUTEID,
                                           T.SUBROUTEID,
                                           T.SEGMENTID,
                                           SEG.RUNDIRECTION,
                                           MINLEAVETIME,
                                           MAXLEAVETIME
                                      FROM MCSEGMENTINFOGS SEG,
                                           (SELECT T.ROUTEID,
                                                   T.SUBROUTEID,
                                                   T.SEGMENTID,
                                                   MIN(T.LEAVETIME) AS MINLEAVETIME,
                                                   MAX(T.LEAVETIME) AS MAXLEAVETIME
                                              FROM BZ_BUSRUNRECORDLDTEMP T
                                             WHERE T.RUNDATADATE = V_DATE_IN
                                               AND T.RECTYPE = '1'
                                             GROUP BY T.ROUTEID,
                                                      T.SUBROUTEID,
                                                      T.SEGMENTID) T
                                     WHERE SEG.ROUTEID = T.ROUTEID
                                       AND SEG.SUBROUTEID = T.SUBROUTEID
                                       AND SEG.SEGMENTID = T.SEGMENTID
                                       AND SEG.RUNDIRECTION IN ('1', '3')) S --上行或环行首末班车次
                             WHERE D.ROUTEID = S.ROUTEID
                            UNION
                            SELECT S.ROUTEID,
                                   S.SUBROUTEID,
                                   S.SEGMENTID,
                                   S.RUNDIRECTION,
                                   2 AS STD,
                                   CASE
                                     WHEN ABS(ROUND((TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(S.MINLEAVETIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss') -
                                                    TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(D.SECONDSTATIONFSTTIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss')) * 24 * 60)) > 3 THEN
                                      0
                                     ELSE
                                      1
                                   END FST,
                                   CASE
                                     WHEN ABS(ROUND((TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(S.MAXLEAVETIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss') -
                                                    TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(D.SECONDSTATIONLSTTIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss')) * 24 * 60)) > 3 THEN
                                      0
                                     ELSE
                                      1
                                   END LST
                              FROM (SELECT *
                                      FROM MCROUTEFSTANDLSTSEQTIMEGS T
                                     WHERE T.STARTWEEK <=
                                           (MOD(TO_NUMBER(TO_CHAR(V_DATE_IN,
                                                                  'D')) + 5,
                                                7) + 1)
                                       AND T.ENDWEEK >=
                                           (MOD(TO_NUMBER(TO_CHAR(V_DATE_IN,
                                                                  'D')) + 5,
                                                7) + 1)) D,
                                   (SELECT T.ROUTEID,
                                           T.SUBROUTEID,
                                           T.SEGMENTID,
                                           SEG.RUNDIRECTION,
                                           MINLEAVETIME,
                                           MAXLEAVETIME
                                      FROM MCSEGMENTINFOGS SEG,
                                           (SELECT T.ROUTEID,
                                                   T.SUBROUTEID,
                                                   T.SEGMENTID,
                                                   MIN(T.LEAVETIME) AS MINLEAVETIME,
                                                   MAX(T.LEAVETIME) AS MAXLEAVETIME
                                              FROM BZ_BUSRUNRECORDLDTEMP T
                                             WHERE T.RUNDATADATE = V_DATE_IN
                                               AND T.RECTYPE = '1'
                                             GROUP BY T.ROUTEID,
                                                      T.SUBROUTEID,
                                                      T.SEGMENTID) T
                                     WHERE SEG.ROUTEID = T.ROUTEID
                                       AND SEG.SUBROUTEID = T.SUBROUTEID
                                       AND SEG.SEGMENTID = T.SEGMENTID
                                       AND SEG.RUNDIRECTION IN ('2')) S --下行首末班车次
                             WHERE D.ROUTEID = S.ROUTEID)
                     WHERE ROUTEID = V_ROUTEID
                       AND SUBROUTEID = V_SUBROUTEID) LOOP
          V_FSTLSTSEQCOUNT := CUR.STD;
          V_FSTONTIMECOUNT := CUR.FST;
          V_LSTONTIMECOUNT := CUR.LST;
        END LOOP;
        --驾驶员驾驶时间
        FOR CUR IN (SELECT SUM((T.ARRIVETIME - T.LEAVETIME) * 24) AS DRIVETIME
                      FROM BZ_BUSRUNRECORDLDTEMP T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.RUNDATADATE = V_DATE_IN
                       AND T.ARRIVETIME >= T.LEAVETIME) LOOP
          --去掉时间错误的
          V_DRIVETIME := CUR.DRIVETIME;
        END LOOP;
      
        V_WORKTIME := GET_DRIVERWORKTIME(V_ROUTEID, V_DATE_IN);
        --在峰段之外的不计算
        FOR CUR IN (SELECT SUM(NVL(T.BUSSENDINTERVALSTD, 0)) AS BUSSENDINTERVALSTD
                      FROM JZ_TIMEPHASEDATASTORAGE T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.JZDATE = V_DATE_IN
                       AND T.DATASAVELEVEL = '3'
                       AND T.STORAGEORGTYPE = '4') LOOP
          V_BUSSENDINTERVALSTD := CUR.BUSSENDINTERVALSTD;
        END LOOP;
        UPDATE JZ_ROUTEDAYSTORAGE T
           SET T.FSTLSTSEQCOUNT     = V_FSTLSTSEQCOUNT,
               T.FSTONTIMECOUNT     = V_FSTONTIMECOUNT,
               T.LSTONTIMECOUNT     = V_LSTONTIMECOUNT,
               T.DRIVERDRIVETIME    = ROUND(V_DRIVETIME /
                                            DECODE(NVL(T.DEVOTIONEMPCOUNT, 0),
                                                   0,
                                                   1,
                                                   T.DEVOTIONEMPCOUNT),
                                            2),
               T.DRIVERONWORKTIME   = ROUND(V_WORKTIME /
                                            DECODE(NVL(T.DEVOTIONEMPCOUNT, 0),
                                                   0,
                                                   1,
                                                   T.DEVOTIONEMPCOUNT),
                                            2),
               T.BUSSENDINTERVALSTD = V_BUSSENDINTERVALSTD
         WHERE T.ROUTEID = V_ROUTEID
           AND T.JZDATE = V_DATE_IN;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        WRITE_EXCEPTION('TREATE_ROUTEDAYDATASTORAGE',
                        '线路指标日结存表',
                        V_DATE,
                        SQLCODE,
                        SQLERRM);
    END;
    WRITE_LOG('TREATE_ROUTEDAYDATASTORAGE',
              '线路指标日结存表',
              V_DATE_IN,
              '结束');
    COMMIT;
    TREATE_ROUTEDAYSTORAGE_ORG(V_DATE_IN); --组织结存
    TREATE_ROUTEDAYSTORAGE_PHASE(V_DATE_IN); --日期结存  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTEDAYDATASTORAGE',
                      '线路指标日结存表',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：Treate_Complaints                                                           *
  *                                                                                      *
  *    功能：组织日/月/年投诉                                                            *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2012-06-03                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_COMPLAINTS(V_DATE DATE) AS
    V_DATE_IN    DATE := TRUNC(V_DATE);
    V_MONTHBEGIN DATE; --月初
    V_MONTHEND   DATE; --月末
    V_YEARBEGIN  DATE; --年初
    V_YEAREND    DATE; --年末
  BEGIN
    V_MONTHBEGIN := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_MONTHEND   := LAST_DAY(V_DATE_IN) + 1;
    V_YEARBEGIN  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                            'YYYY-MM-DD');
    V_YEAREND    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                       '-01-01',
                                       'YYYY-MM-DD'),
                               12);
    WRITE_LOG('Treate_Complaints', '乘客投诉数据结存', V_DATE_IN, '开始');
    BEGIN
      --分公司（日）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_DATE_IN
                                 AND T.HANDLEDTIME < V_DATE_IN + 1)
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_DATE_IN
                                  AND T.HANDLEDTIME < V_DATE_IN + 1
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_DATE_IN
                                      AND T.HANDLEDTIME < V_DATE_IN + 1
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '2'; --分公司
      --分公司（月）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_MONTHBEGIN
                                 AND T.HANDLEDTIME < V_MONTHEND)
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_MONTHBEGIN
                                  AND T.HANDLEDTIME < V_MONTHEND
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_MONTHBEGIN
                                      AND T.HANDLEDTIME < V_MONTHEND
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '2'; --分公司
      --分公司（年）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_YEARBEGIN
                                 AND T.HANDLEDTIME < V_YEAREND)
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_YEARBEGIN
                                  AND T.HANDLEDTIME < V_YEAREND
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_YEARBEGIN
                                      AND T.HANDLEDTIME < V_YEAREND
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      COMMIT;
    END;
  
    BEGIN
      --集团（日）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_DATE_IN
                                 AND T.HANDLEDTIME < V_DATE_IN + 1)
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_DATE_IN
                                  AND T.HANDLEDTIME < V_DATE_IN + 1
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_DATE_IN
                                      AND T.HANDLEDTIME < V_DATE_IN + 1
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '1'; --集团
      --集团（月）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_MONTHBEGIN
                                 AND T.HANDLEDTIME < V_MONTHEND)
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_MONTHBEGIN
                                  AND T.HANDLEDTIME < V_MONTHEND
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_MONTHBEGIN
                                      AND T.HANDLEDTIME < V_MONTHEND
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '1'; --集团
      --集团（年）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_YEARBEGIN
                                 AND T.HANDLEDTIME < V_YEAREND)
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_YEARBEGIN
                                  AND T.HANDLEDTIME < V_YEAREND
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_YEARBEGIN
                                      AND T.HANDLEDTIME < V_YEAREND
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      COMMIT;
    END;
  
    WRITE_LOG('Treate_Complaints', '乘客投诉数据结存', V_DATE_IN, '结束');
  END;
  /***************************************************************************************
  *    名称：Treate_Complaints                                                           *
  *                                                                                      *
  *    功能：组织日/月/年投诉                                                            *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2012-06-03                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_DRIVETIMESTORAGE(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    WRITE_LOG('TREATE_DRIVETIMESTORAGE',
              '驾驶员驾驶时间结存',
              V_DATE_IN,
              '开始');
    DELETE FROM JZ_DRIVETIMESTORAGE T WHERE T.JZDATE = V_DATE_IN;
    INSERT INTO JZ_DRIVETIMESTORAGE
      (RECORDID, ORGID, ROUTEID, DRIVERID, DRIVETIME, JZDATE)
      SELECT S_EMPSTORAGE.NEXTVAL AS RECORDID,
             T.ORGID,
             T.ROUTEID,
             T.DRIVERID,
             T.DRIVETIME,
             V_DATE_IN AS JZDATE
        FROM (SELECT ORG.ORGID,
                     EROU.ROUTEID,
                     T.DRIVERID,
                     ROUND(SUM((T.ARRIVETIME - T.LEAVETIME) * 24) * 60, 2) AS DRIVETIME
                FROM BZ_BUSRUNRECORDLDTEMP T,
                     (SELECT DISTINCT EROU.EMPID, EROU.ROUTEID
                        FROM MCREMPROUTEGS EROU
                       WHERE EROU.RECDATE IN
                             (SELECT MAX(RECDATE)
                                FROM MCREMPROUTEGS EROU1
                               WHERE EROU.EMPID = EROU1.EMPID
                                 AND EROU1.RECDATE <= V_DATE_IN + 10)) EROU,
                     MCEMPLOYEEINFOGS ORG
               WHERE T.RECTYPE = '1'
                 AND T.ARRIVETIME > T.LEAVETIME
                 AND (T.ARRIVETIME - T.LEAVETIME) * 24 < 5
                 AND T.DRIVERID = EROU.EMPID(+)
                 AND T.DRIVERID = ORG.EMPID(+)
                 AND T.RUNDATADATE = V_DATE_IN
               GROUP BY ORG.ORGID, EROU.ROUTEID, T.DRIVERID) T;
    COMMIT;
    WRITE_LOG('TREATE_DRIVETIMESTORAGE',
              '驾驶员驾驶时间结存',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_DRIVETIMESTORAGE',
                      '驾驶员驾驶时间结存',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_SAFETYEVENTINFO                                                           *
  *                                                                                      *
  *    功能：行车事故信息结存                                                           *
  *                                                                                      *
  *    作者：huhuimim                                                                     *
  *    日期：2013-05-03                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_SAFETYEVENTINFO(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    --日志
    WRITE_LOG('TREATE_SAFETYEVENTINFO',
              '行车事故信息结存',
              V_DATE_IN,
              '开始');
    --删除原有数据
    DELETE FROM JZ_SAFETYEVENTINFO T
     WHERE T.JZDATE = V_DATE_IN
       AND T.DATASAVELEVEL = '3';
    --插入新数据
    INSERT INTO JZ_SAFETYEVENTINFO
      (RECORDID,
       ORGID,
       ORGNAME,
       ROUTEID,
       ROUTENAME,
       JZDATE,
       ACCIDENTTYPE,
       ACCIDENTTYPENAME,
       DUTYACCIDENTCOUNT,
       NONDUTYACCIDENTCOUNT,
       DUTYACCIDENTDEATHCOUNT,
       NONDUTYACCIDENTDEATHCOUNT,
       DUTYACCIDENTINJURECOUNT,
       NONDUTYACCIDENTINJURECOUNT,
       DUTYACCIDENTECONOMICLOSS,
       NONDUTYACCIDENTECONOMICLOSS,
       DATASAVELEVEL)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             T.ORGID,
             T.ORGNAME,
             T.ROUTEID,
             T.ROUTENAME,
             V_DATE_IN AS JZDATE,
             '1' AS ACCIDENTTYPE,
             '行车事故' AS ACCIDENTTYPENAME,
             T.DUTYACCIDENTCOUNT AS DUTYACCIDENTCOUNT,
             0 AS NONDUTYACCIDENTCOUNT,
             T.DUTYACCIDENTDEATHCOUNT AS DUTYACCIDENTDEATHCOUNT,
             0 AS DUTYACCIDENTDEATHCOUNT,
             T.DUTYACCIDENTINJURECOUNT AS DUTYACCIDENTINJURECOUNT,
             0 AS DUTYACCIDENTINJURECOUNT,
             T.DUTYACCIDENTECONOMICLOSS AS DUTYACCIDENTECONOMICLOSS,
             0 AS DUTYACCIDENTECONOMICLOSS,
             '3' AS DATASAVELEVEL
        FROM (SELECT ROU.ORGID,
                     ORG.ORGNAME,
                     AC.ROUTEID,
                     ROU.ROUTENAME,
                     COUNT(AC.RECORDID) AS DUTYACCIDENTCOUNT,
                     SUM(AC.DIEDCOUNT) AS DUTYACCIDENTDEATHCOUNT,
                     SUM(AC.INJUREDCOUNT) AS DUTYACCIDENTINJURECOUNT,
                     SUM(AC.ECONOMICLOSS) AS DUTYACCIDENTECONOMICLOSS
                FROM BZ_BUSACCIDENTINFOLD AC,
                     MCROUTEINFOGS        ROU,
                     MCORGINFOGS          ORG
               WHERE AC.ROUTEID = ROU.ROUTEID
                 AND ROU.ORGID = ORG.ORGID
                 AND AC.DUTYSIDE IN ('1', '2')
                 AND AC.ACCIDENTTIME >= V_DATE_IN
                 AND AC.ACCIDENTTIME < V_DATE_IN + 1
               GROUP BY ROU.ORGID, ORG.ORGNAME, AC.ROUTEID, ROU.ROUTENAME) T;
    MERGE INTO JZ_SAFETYEVENTINFO DEST
    USING (SELECT ROU.ORGID,
                  ORG.ORGNAME,
                  AC.ROUTEID,
                  ROU.ROUTENAME,
                  COUNT(AC.RECORDID) AS NONDUTYACCIDENTCOUNT,
                  SUM(AC.DIEDCOUNT) AS NONDUTYACCIDENTDEATHCOUNT,
                  SUM(AC.INJUREDCOUNT) AS NONDUTYACCIDENTINJURECOUNT,
                  SUM(AC.ECONOMICLOSS) AS NONDUTYACCIDENTECONOMICLOSS
             FROM BZ_BUSACCIDENTINFOLD AC,
                  MCROUTEINFOGS        ROU,
                  MCORGINFOGS          ORG
            WHERE AC.ROUTEID = ROU.ROUTEID
              AND ROU.ORGID = ORG.ORGID
              AND AC.DUTYSIDE = '3'
              AND AC.ACCIDENTTIME >= V_DATE_IN
              AND AC.ACCIDENTTIME < V_DATE_IN + 1
            GROUP BY ROU.ORGID, ORG.ORGNAME, AC.ROUTEID, ROU.ROUTENAME) SOUR
    ON (DEST.ROUTEID = SOUR.ROUTEID)
    WHEN MATCHED THEN
      UPDATE
         SET DEST.NONDUTYACCIDENTCOUNT        = SOUR.NONDUTYACCIDENTCOUNT,
             DEST.NONDUTYACCIDENTDEATHCOUNT   = SOUR.NONDUTYACCIDENTDEATHCOUNT,
             DEST.NONDUTYACCIDENTINJURECOUNT  = SOUR.NONDUTYACCIDENTINJURECOUNT,
             DEST.NONDUTYACCIDENTECONOMICLOSS = SOUR.NONDUTYACCIDENTECONOMICLOSS
    WHEN NOT MATCHED THEN
      INSERT
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         ACCIDENTTYPE,
         ACCIDENTTYPENAME,
         DUTYACCIDENTCOUNT,
         NONDUTYACCIDENTCOUNT,
         DUTYACCIDENTDEATHCOUNT,
         NONDUTYACCIDENTDEATHCOUNT,
         DUTYACCIDENTINJURECOUNT,
         NONDUTYACCIDENTINJURECOUNT,
         DUTYACCIDENTECONOMICLOSS,
         NONDUTYACCIDENTECONOMICLOSS,
         DATASAVELEVEL)
      VALUES
        (S_ROUTESTORAGE.NEXTVAL,
         SOUR.ORGID,
         SOUR.ORGNAME,
         SOUR.ROUTEID,
         SOUR.ROUTENAME,
         V_DATE_IN,
         '1',
         '行车事故',
         0,
         SOUR.NONDUTYACCIDENTCOUNT,
         0,
         SOUR.NONDUTYACCIDENTDEATHCOUNT,
         0,
         SOUR.NONDUTYACCIDENTINJURECOUNT,
         0,
         SOUR.NONDUTYACCIDENTECONOMICLOSS,
         '3');
    COMMIT;
    WRITE_LOG('TREATE_SAFETYEVENTINFO',
              '行车事故信息结存',
              V_DATE_IN,
              '结束');
    TREATE_SAFETYEVENTINFO_PHASE(V_DATE_IN);
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_SAFETYEVENTINFO',
                      '行车事故信息结存',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  PROCEDURE TREATE_SAFETYEVENTINFO_PHASE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
    V_BEGIN_YEAR  DATE;
    V_END_YEAR    DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    V_BEGIN_YEAR  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                             'YYYY-MM-DD');
    V_END_YEAR    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                        '-01-01',
                                        'YYYY-MM-DD'),
                                12);
    --日志
    WRITE_LOG('TREATE_SAFETYEVENTINFO_PHASE',
              '行车事故信息结存-月结',
              V_DATE_IN,
              '开始');
    --删除原有月结数据
    DELETE FROM JZ_SAFETYEVENTINFO T
     WHERE T.JZDATE >= V_BEGIN_MONTH
       AND T.JZDATE <= V_END_MONTH
       AND T.DATASAVELEVEL = '2';
    --插入月结数据
    INSERT INTO JZ_SAFETYEVENTINFO
      (RECORDID,
       ORGID,
       ORGNAME,
       ROUTEID,
       ROUTENAME,
       JZDATE,
       ACCIDENTTYPE,
       ACCIDENTTYPENAME,
       DUTYACCIDENTCOUNT,
       NONDUTYACCIDENTCOUNT,
       DUTYACCIDENTDEATHCOUNT,
       NONDUTYACCIDENTDEATHCOUNT,
       DUTYACCIDENTINJURECOUNT,
       NONDUTYACCIDENTINJURECOUNT,
       DUTYACCIDENTECONOMICLOSS,
       NONDUTYACCIDENTECONOMICLOSS,
       DATASAVELEVEL)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             T.ORGID,
             T.ORGNAME,
             T.ROUTEID,
             T.ROUTENAME,
             V_DATE_IN AS JZDATE,
             '1' AS ACCIDENTTYPE,
             '行车事故' AS ACCIDENTTYPENAME,
             T.DUTYACCIDENTCOUNT AS DUTYACCIDENTCOUNT,
             T.NONDUTYACCIDENTCOUNT AS NONDUTYACCIDENTCOUNT,
             T.DUTYACCIDENTDEATHCOUNT AS DUTYACCIDENTDEATHCOUNT,
             T.NONDUTYACCIDENTDEATHCOUNT AS NONDUTYACCIDENTDEATHCOUNT,
             T.DUTYACCIDENTINJURECOUNT AS DUTYACCIDENTINJURECOUNT,
             T.NONDUTYACCIDENTINJURECOUNT AS NONDUTYACCIDENTINJURECOUNT,
             T.DUTYACCIDENTECONOMICLOSS AS DUTYACCIDENTECONOMICLOSS,
             T.NONDUTYACCIDENTECONOMICLOSS AS NONDUTYACCIDENTECONOMICLOSS,
             '2' AS DATASAVELEVEL
        FROM (SELECT ROU.ORGID,
                     ORG.ORGNAME,
                     T.ROUTEID,
                     ROU.ROUTENAME,
                     T.ACCIDENTTYPE,
                     T.ACCIDENTTYPENAME,
                     SUM(T.DUTYACCIDENTCOUNT) AS DUTYACCIDENTCOUNT,
                     SUM(T.NONDUTYACCIDENTCOUNT) AS NONDUTYACCIDENTCOUNT,
                     SUM(T.DUTYACCIDENTDEATHCOUNT) AS DUTYACCIDENTDEATHCOUNT,
                     SUM(T.NONDUTYACCIDENTDEATHCOUNT) AS NONDUTYACCIDENTDEATHCOUNT,
                     SUM(T.DUTYACCIDENTINJURECOUNT) AS DUTYACCIDENTINJURECOUNT,
                     SUM(T.NONDUTYACCIDENTINJURECOUNT) AS NONDUTYACCIDENTINJURECOUNT,
                     SUM(T.DUTYACCIDENTECONOMICLOSS) AS DUTYACCIDENTECONOMICLOSS,
                     SUM(T.NONDUTYACCIDENTECONOMICLOSS) AS NONDUTYACCIDENTECONOMICLOSS
                FROM JZ_SAFETYEVENTINFO T,
                     MCROUTEINFOGS      ROU,
                     MCORGINFOGS        ORG
               WHERE T.ROUTEID = ROU.ROUTEID
                 AND ROU.ORGID = ORG.ORGID
                 AND T.DATASAVELEVEL = '3'
                 AND T.JZDATE >= V_BEGIN_MONTH
                 AND T.JZDATE <= V_END_MONTH
               GROUP BY ROU.ORGID,
                        ORG.ORGNAME,
                        T.ROUTEID,
                        ROU.ROUTENAME,
                        T.ACCIDENTTYPE,
                        T.ACCIDENTTYPENAME) T;
    COMMIT;
    WRITE_LOG('TREATE_SAFETYEVENTINFO_PHASE',
              '行车事故信息结存-月结',
              V_DATE_IN,
              '结束');
    WRITE_LOG('TREATE_SAFETYEVENTINFO_PHASE',
              '行车事故信息结存-年结',
              V_DATE_IN,
              '开始');
    --删除原有年结数据
    DELETE FROM JZ_SAFETYEVENTINFO T
     WHERE T.JZDATE >= V_BEGIN_YEAR
       AND T.JZDATE <= V_END_YEAR
       AND T.DATASAVELEVEL = '1';
    --插入年结数据
    INSERT INTO JZ_SAFETYEVENTINFO
      (RECORDID,
       ORGID,
       ORGNAME,
       ROUTEID,
       ROUTENAME,
       JZDATE,
       ACCIDENTTYPE,
       ACCIDENTTYPENAME,
       DUTYACCIDENTCOUNT,
       NONDUTYACCIDENTCOUNT,
       DUTYACCIDENTDEATHCOUNT,
       NONDUTYACCIDENTDEATHCOUNT,
       DUTYACCIDENTINJURECOUNT,
       NONDUTYACCIDENTINJURECOUNT,
       DUTYACCIDENTECONOMICLOSS,
       NONDUTYACCIDENTECONOMICLOSS,
       DATASAVELEVEL)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             T.ORGID,
             T.ORGNAME,
             T.ROUTEID,
             T.ROUTENAME,
             V_DATE_IN AS JZDATE,
             '1' AS ACCIDENTTYPE,
             '行车事故' AS ACCIDENTTYPENAME,
             T.DUTYACCIDENTCOUNT AS DUTYACCIDENTCOUNT,
             T.NONDUTYACCIDENTCOUNT AS NONDUTYACCIDENTCOUNT,
             T.DUTYACCIDENTDEATHCOUNT AS DUTYACCIDENTDEATHCOUNT,
             T.NONDUTYACCIDENTDEATHCOUNT AS NONDUTYACCIDENTDEATHCOUNT,
             T.DUTYACCIDENTINJURECOUNT AS DUTYACCIDENTINJURECOUNT,
             T.NONDUTYACCIDENTINJURECOUNT AS NONDUTYACCIDENTINJURECOUNT,
             T.DUTYACCIDENTECONOMICLOSS AS DUTYACCIDENTECONOMICLOSS,
             T.NONDUTYACCIDENTECONOMICLOSS AS NONDUTYACCIDENTECONOMICLOSS,
             '1' AS DATASAVELEVEL
        FROM (SELECT ROU.ORGID,
                     ORG.ORGNAME,
                     T.ROUTEID,
                     ROU.ROUTENAME,
                     T.ACCIDENTTYPE,
                     T.ACCIDENTTYPENAME,
                     SUM(T.DUTYACCIDENTCOUNT) AS DUTYACCIDENTCOUNT,
                     SUM(T.NONDUTYACCIDENTCOUNT) AS NONDUTYACCIDENTCOUNT,
                     SUM(T.DUTYACCIDENTDEATHCOUNT) AS DUTYACCIDENTDEATHCOUNT,
                     SUM(T.NONDUTYACCIDENTDEATHCOUNT) AS NONDUTYACCIDENTDEATHCOUNT,
                     SUM(T.DUTYACCIDENTINJURECOUNT) AS DUTYACCIDENTINJURECOUNT,
                     SUM(T.NONDUTYACCIDENTINJURECOUNT) AS NONDUTYACCIDENTINJURECOUNT,
                     SUM(T.DUTYACCIDENTECONOMICLOSS) AS DUTYACCIDENTECONOMICLOSS,
                     SUM(T.NONDUTYACCIDENTECONOMICLOSS) AS NONDUTYACCIDENTECONOMICLOSS
                FROM JZ_SAFETYEVENTINFO T,
                     MCROUTEINFOGS      ROU,
                     MCORGINFOGS        ORG
               WHERE T.ROUTEID = ROU.ROUTEID
                 AND ROU.ORGID = ORG.ORGID
                 AND T.DATASAVELEVEL = '2'
                 AND T.JZDATE >= V_BEGIN_YEAR
                 AND T.JZDATE <= V_END_YEAR
               GROUP BY ROU.ORGID,
                        ORG.ORGNAME,
                        T.ROUTEID,
                        ROU.ROUTENAME,
                        T.ACCIDENTTYPE,
                        T.ACCIDENTTYPENAME) T;
    COMMIT;
    WRITE_LOG('TREATE_SAFETYEVENTINFO_PHASE',
              '行车事故信息结存-年结',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_SAFETYEVENTINFO_PHASE',
                      '行车事故信息结存',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  --------------------------------------------------------------------------------------------
  /****************************************************************************************
  *    名称：INDICATOR_BUSNUMPUNCTUAL                                                    *
  *                                                                                      *
  *    功能：车次准点率                                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-06-05                                                                  *
  ****************************************************************************************/
  PROCEDURE INDICATOR_BUSNUMPUNCTUAL(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    --日志
    WRITE_LOG('INDICATOR_BUSNUMPUNCTUAL',
              '车次准点率指标预警',
              V_DATE_IN,
              '开始');
    --删除原有数据
    DELETE FROM JZ_INDICATORWARNINGSTORAGE IND
     WHERE IND.JZDATE >= V_BEGIN_MONTH
       AND IND.JZDATE <= V_END_MONTH
       AND IND.INDICATORID = 1;
    --插入新数据
    INSERT INTO JZ_INDICATORWARNINGSTORAGE
      (RECORDID,
       INDICATORID,
       INDICATORNAME,
       INDICATORUNIT,
       INDICATORSTANDARDVALUE,
       ORGID,
       ORGNAME,
       INDICATORVALUE,
       JZDATE,
       STORAGEORGTYPE,
       INDICATORTYPE)
      SELECT S_INDICATOR.NEXTVAL      AS RECORDID,
             T.INDICATORID            AS INDICATORID,
             T.INDICATORNAME          AS INDICATORNAME,
             T.INDICATORUNIT          AS INDICATORUNIT,
             T.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
             T.ORGID                  AS ORGID,
             T.ORGNAME                AS ORGNAME,
             T.INDICATORVALUE         AS INDICATORVALUE,
             T.JZDATE                 AS JZDATE,
             T.STORAGEORGTYPE         AS STORAGEORGTYPE,
             T.INDICATORTYPE          AS INDICATORTYPE
        FROM (SELECT IND.INDICATORID AS INDICATORID,
                     IND.INDICATORNAME AS INDICATORNAME,
                     IND.INDICATORUNIT AS INDICATORUNIT,
                     IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                     T.ORGID AS ORGID,
                     T.ORGNAME AS ORGNAME,
                     T.BUSNUMPUNCTUALRATE AS INDICATORVALUE,
                     V_DATE_IN AS JZDATE,
                     '2' AS STORAGEORGTYPE,
                     '1' AS INDICATORTYPE
                FROM SYS_INDICATORWARNING IND,
                     (SELECT T.ORGID AS ORGID,
                             ORG.ORGNAME AS ORGNAME,
                             ROUND(DECODE(T.ACTUALSEQCOUNT,
                                          0,
                                          NULL,
                                          T.ONTIMESEQCOUNT / T.ACTUALSEQCOUNT),
                                   4) AS BUSNUMPUNCTUALRATE
                        FROM MCORGINFOGS ORG, JZ_ROUTEDAYSTORAGE T
                       WHERE T.ORGID = ORG.ORGID
                         AND T.JZDATE >= V_BEGIN_MONTH
                         AND T.JZDATE <= V_END_MONTH
                         AND T.DATASAVELEVEL = 2
                         AND T.STORAGEORGTYPE = 2
                         AND ORG.ORGTYPE = 1) T
               WHERE IND.INDICATORID = 1) T;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    WRITE_LOG('INDICATOR_BUSNUMPUNCTUAL',
              '车次准点率指标预警',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('INDICATOR_BUSNUMPUNCTUAL',
                      '车次准点率指标预警',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：INDICATOR_BUSSHIFTCOMPLETE                                                    *
  *                                                                                      *
  *    功能：班次完成率                                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-06-05                                                                  *
  ****************************************************************************************/
  PROCEDURE INDICATOR_BUSSHIFTCOMPLETE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    --日志
    WRITE_LOG('INDICATOR_BUSSHIFTCOMPLETE',
              '班次完成率指标预警',
              V_DATE_IN,
              '开始');
    --删除原有数据
    DELETE FROM JZ_INDICATORWARNINGSTORAGE IND
     WHERE IND.JZDATE >= V_BEGIN_MONTH
       AND IND.JZDATE <= V_END_MONTH
       AND IND.INDICATORID = 2;
    --插入新数据
    INSERT INTO JZ_INDICATORWARNINGSTORAGE
      (RECORDID,
       INDICATORID,
       INDICATORNAME,
       INDICATORUNIT,
       INDICATORSTANDARDVALUE,
       ORGID,
       ORGNAME,
       INDICATORVALUE,
       JZDATE,
       STORAGEORGTYPE,
       INDICATORTYPE)
      SELECT S_INDICATOR.NEXTVAL      AS RECORDID,
             T.INDICATORID            AS INDICATORID,
             T.INDICATORNAME          AS INDICATORNAME,
             T.INDICATORUNIT          AS INDICATORUNIT,
             T.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
             T.ORGID                  AS ORGID,
             T.ORGNAME                AS ORGNAME,
             T.INDICATORVALUE         AS INDICATORVALUE,
             T.JZDATE                 AS JZDATE,
             T.STORAGEORGTYPE         AS STORAGEORGTYPE,
             T.INDICATORTYPE          AS INDICATORTYPE
        FROM (SELECT IND.INDICATORID AS INDICATORID,
                     IND.INDICATORNAME AS INDICATORNAME,
                     IND.INDICATORUNIT AS INDICATORUNIT,
                     IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                     T.ORGID AS ORGID,
                     T.ORGNAME AS ORGNAME,
                     T.BUSSHIFTCOMPLETERATE AS INDICATORVALUE,
                     V_DATE_IN AS JZDATE,
                     '2' AS STORAGEORGTYPE,
                     '1' AS INDICATORTYPE
                FROM SYS_INDICATORWARNING IND,
                     (SELECT T.ORGID AS ORGID,
                             ORG.ORGNAME AS ORGNAME,
                             ROUND(DECODE(T.PLANSEQCOUNT,
                                          0,
                                          NULL,
                                          T.ACTUALSEQCOUNT / T.PLANSEQCOUNT),
                                   4) AS BUSSHIFTCOMPLETERATE
                        FROM MCORGINFOGS ORG, JZ_ROUTEDAYSTORAGE T
                       WHERE T.ORGID = ORG.ORGID
                         AND T.JZDATE >= V_BEGIN_MONTH
                         AND T.JZDATE <= V_END_MONTH
                         AND T.DATASAVELEVEL = 2
                         AND T.STORAGEORGTYPE = 2
                         AND ORG.ORGTYPE = 1) T
               WHERE IND.INDICATORID = 2) T;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    WRITE_LOG('INDICATOR_BUSNUMPUNCTUAL',
              '班次完成率指标预警',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('INDICATOR_BUSNUMPUNCTUAL',
                      '班次完成率指标预警',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：INDICATOR_FSTANDLSTPUNCTUAL                                                    *
  *                                                                                      *
  *    功能：首末班准点率                                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-06-05                                                                  *
  ****************************************************************************************/
  PROCEDURE INDICATOR_FSTANDLSTPUNCTUAL(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    --日志
    WRITE_LOG('INDICATOR_FSTANDLSTPUNCTUAL',
              '首末班准点率指标预警',
              V_DATE_IN,
              '开始');
    --删除原有数据
    DELETE FROM JZ_INDICATORWARNINGSTORAGE IND
     WHERE IND.JZDATE >= V_BEGIN_MONTH
       AND IND.JZDATE <= V_END_MONTH
       AND IND.INDICATORID = 3;
    --插入新数据
    INSERT INTO JZ_INDICATORWARNINGSTORAGE
      (RECORDID,
       INDICATORID,
       INDICATORNAME,
       INDICATORUNIT,
       INDICATORSTANDARDVALUE,
       ORGID,
       ORGNAME,
       INDICATORVALUE,
       JZDATE,
       STORAGEORGTYPE,
       INDICATORTYPE)
      SELECT S_INDICATOR.NEXTVAL      AS RECORDID,
             T.INDICATORID            AS INDICATORID,
             T.INDICATORNAME          AS INDICATORNAME,
             T.INDICATORUNIT          AS INDICATORUNIT,
             T.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
             T.ORGID                  AS ORGID,
             T.ORGNAME                AS ORGNAME,
             T.INDICATORVALUE         AS INDICATORVALUE,
             T.JZDATE                 AS JZDATE,
             T.STORAGEORGTYPE         AS STORAGEORGTYPE,
             T.INDICATORTYPE          AS INDICATORTYPE
        FROM (SELECT IND.INDICATORID AS INDICATORID,
                     IND.INDICATORNAME AS INDICATORNAME,
                     IND.INDICATORUNIT AS INDICATORUNIT,
                     IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                     T.ORGID AS ORGID,
                     T.ORGNAME AS ORGNAME,
                     T.FSTANDLSTONTIMERATE AS INDICATORVALUE,
                     V_DATE_IN AS JZDATE,
                     '2' AS STORAGEORGTYPE,
                     '1' AS INDICATORTYPE
                FROM SYS_INDICATORWARNING IND,
                     (SELECT T.ORGID AS ORGID,
                             ORG.ORGNAME AS ORGNAME,
                             ROUND(DECODE(T.FSTLSTSEQCOUNT,
                                          0,
                                          NULL,
                                          (T.FSTONTIMECOUNT + T.LSTONTIMECOUNT) /
                                          T.FSTLSTSEQCOUNT),
                                   4) AS FSTANDLSTONTIMERATE
                        FROM MCORGINFOGS ORG, JZ_ROUTEDAYSTORAGE T
                       WHERE T.ORGID = ORG.ORGID
                         AND T.JZDATE >= V_BEGIN_MONTH
                         AND T.JZDATE <= V_END_MONTH
                         AND T.DATASAVELEVEL = 2
                         AND T.STORAGEORGTYPE = 2
                         AND ORG.ORGTYPE = 1) T
               WHERE IND.INDICATORID = 3) T;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    WRITE_LOG('INDICATOR_FSTANDLSTPUNCTUAL',
              '首末班准点率指标预警',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('INDICATOR_FSTANDLSTPUNCTUAL',
                      '首末班准点率指标预警',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：INDICATOR_ROUTESENDBLANK                                                    *
  *                                                                                      *
  *    功能：发车间隔兑现率                                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-06-05                                                                  *
  ****************************************************************************************/
  PROCEDURE INDICATOR_ROUTESENDBLANK(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    --日志
    WRITE_LOG('INDICATOR_ROUTESENDBLANK',
              '发车间隔兑现率指标预警',
              V_DATE_IN,
              '开始');
    --删除原有数据
    DELETE FROM JZ_INDICATORWARNINGSTORAGE IND
     WHERE IND.JZDATE >= V_BEGIN_MONTH
       AND IND.JZDATE <= V_END_MONTH
       AND IND.INDICATORID = 4;
    --插入新数据
    INSERT INTO JZ_INDICATORWARNINGSTORAGE
      (RECORDID,
       INDICATORID,
       INDICATORNAME,
       INDICATORUNIT,
       INDICATORSTANDARDVALUE,
       ORGID,
       ORGNAME,
       INDICATORVALUE,
       JZDATE,
       STORAGEORGTYPE,
       INDICATORTYPE)
      SELECT S_INDICATOR.NEXTVAL      AS RECORDID,
             T.INDICATORID            AS INDICATORID,
             T.INDICATORNAME          AS INDICATORNAME,
             T.INDICATORUNIT          AS INDICATORUNIT,
             T.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
             T.ORGID                  AS ORGID,
             T.ORGNAME                AS ORGNAME,
             T.INDICATORVALUE         AS INDICATORVALUE,
             T.JZDATE                 AS JZDATE,
             T.STORAGEORGTYPE         AS STORAGEORGTYPE,
             T.INDICATORTYPE          AS INDICATORTYPE
        FROM (SELECT IND.INDICATORID AS INDICATORID,
                     IND.INDICATORNAME AS INDICATORNAME,
                     IND.INDICATORUNIT AS INDICATORUNIT,
                     IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                     T.ORGID AS ORGID,
                     T.ORGNAME AS ORGNAME,
                     T.ROUTESENDBLANKRATE AS INDICATORVALUE,
                     V_DATE_IN AS JZDATE,
                     '2' AS STORAGEORGTYPE,
                     '1' AS INDICATORTYPE
                FROM SYS_INDICATORWARNING IND,
                     (SELECT T.ORGID AS ORGID,
                             ORG.ORGNAME AS ORGNAME,
                             ROUND(DECODE(T.ACTUALSEQCOUNT,
                                          0,
                                          NULL,
                                          T.BUSSENDINTERVALSTD /
                                          T.ACTUALSEQCOUNT),
                                   4) AS ROUTESENDBLANKRATE
                        FROM MCORGINFOGS ORG, JZ_ROUTEDAYSTORAGE T
                       WHERE T.ORGID = ORG.ORGID
                         AND T.JZDATE >= V_BEGIN_MONTH
                         AND T.JZDATE <= V_END_MONTH
                         AND T.DATASAVELEVEL = 2
                         AND T.STORAGEORGTYPE = 2
                         AND ORG.ORGTYPE = 1) T
               WHERE IND.INDICATORID = 4) T;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    WRITE_LOG('INDICATOR_ROUTESENDBLANK',
              '发车间隔兑现率指标预警',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('INDICATOR_ROUTESENDBLANK',
                      '发车间隔兑现率指标预警',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：INDICATOR_SATISFY                                                    *
  *                                                                                      *
  *    功能：公众满意度                                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-06-05                                                                  *
  ****************************************************************************************/
  PROCEDURE INDICATOR_SATISFY(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    --日志
    WRITE_LOG('INDICATOR_SATISFY', '公众满意度指标预警', V_DATE_IN, '开始');
    --删除原有数据
    DELETE FROM JZ_INDICATORWARNINGSTORAGE IND
     WHERE IND.JZDATE >= V_BEGIN_MONTH
       AND IND.JZDATE <= V_END_MONTH
       AND IND.INDICATORID = 5;
    --插入新数据
    INSERT INTO JZ_INDICATORWARNINGSTORAGE
      (RECORDID,
       INDICATORID,
       INDICATORNAME,
       INDICATORUNIT,
       INDICATORSTANDARDVALUE,
       ORGID,
       ORGNAME,
       INDICATORVALUE,
       JZDATE,
       STORAGEORGTYPE,
       INDICATORTYPE)
      SELECT S_INDICATOR.NEXTVAL      AS RECORDID,
             T.INDICATORID            AS INDICATORID,
             T.INDICATORNAME          AS INDICATORNAME,
             T.INDICATORUNIT          AS INDICATORUNIT,
             T.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
             T.ORGID                  AS ORGID,
             T.ORGNAME                AS ORGNAME,
             T.INDICATORVALUE         AS INDICATORVALUE,
             T.JZDATE                 AS JZDATE,
             T.STORAGEORGTYPE         AS STORAGEORGTYPE,
             T.INDICATORTYPE          AS INDICATORTYPE
        FROM (SELECT IND.INDICATORID AS INDICATORID,
                     IND.INDICATORNAME AS INDICATORNAME,
                     IND.INDICATORUNIT AS INDICATORUNIT,
                     IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                     T.ORGID AS ORGID,
                     T.ORGNAME AS ORGNAME,
                     T.PUBLICSATISFYRATE AS INDICATORVALUE,
                     V_DATE_IN AS JZDATE,
                     '2' AS STORAGEORGTYPE,
                     '1' AS INDICATORTYPE
                FROM SYS_INDICATORWARNING IND,
                     (SELECT T.ORGID AS ORGID,
                             ORG.ORGNAME AS ORGNAME,
                             ROUND(DECODE(T.PASSENGERCOUNT,
                                          0,
                                          NULL,
                                          (T.PASSENGERCOUNT - T.ACCUSECOUNT +
                                          T.SATISFYCOUNT) / T.PASSENGERCOUNT),
                                   4) AS PUBLICSATISFYRATE
                        FROM MCORGINFOGS ORG, JZ_ROUTEDAYSTORAGE T
                       WHERE T.ORGID = ORG.ORGID
                         AND T.JZDATE >= V_BEGIN_MONTH
                         AND T.JZDATE <= V_END_MONTH
                         AND T.DATASAVELEVEL = 2
                         AND T.STORAGEORGTYPE = 2
                         AND ORG.ORGTYPE = 1) T
               WHERE IND.INDICATORID = 5) T;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    WRITE_LOG('INDICATOR_SATISFY', '公众满意度指标预警', V_DATE_IN, '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('INDICATOR_SATISFY',
                      '公众满意度指标预警',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  PROCEDURE INDICATOR_UPDATE_ALL(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1
       AND IND.JZDATE = V_DATE_IN;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1
       AND IND.JZDATE = V_DATE_IN;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0
       AND IND.JZDATE = V_DATE_IN;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0
       AND IND.JZDATE = V_DATE_IN;
    COMMIT;
  END;
END PKG_OSE_RUNDATA;
/

prompt
prompt Creating package body PKG_OSE_RUNDATA1
prompt ======================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_RUNDATA1 IS
  --------------------------------------------------------------------------------------------
  /***************************************************************************************
  *    名称：WRITE_LOG                                                                   *
  *                                                                                      *
  *    功能：写入日志                                                                    *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_LOG(PROCEDURENAME VARCHAR2,
                      FUNC_DESC     VARCHAR2,
                      V_DATE        DATE,
                      LOGINFO       VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := SUBSTR(LOGINFO, 1, 250);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '1',
       V_DATE,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /****************************************************************************************
  *    名称：WRITE_EXCEPTION                                                             *
  *                                                                                      *
  *    功能：写入异常日志                                                                *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE WRITE_EXCEPTION(PROCEDURENAME VARCHAR2,
                            FUNC_DESC     VARCHAR2,
                            V_DATE        DATE,
                            ERRORCODE     NUMBER,
                            ERRORTEXT     VARCHAR2) AS
    V_INFO VARCHAR2(255);
  BEGIN
    V_INFO := ERRORCODE || '-' || SUBSTR(ERRORTEXT, 1, 200);
    INSERT INTO SYS_JZLOG
      (ID, PROCEDURENAME, FUNCDESC, SUCCESSFLAG, EXECDATE, RECDATE, MEMOS)
    VALUES
      (S_LOG.NEXTVAL,
       PROCEDURENAME,
       FUNC_DESC,
       '0',
       V_DATE,
       SYSDATE,
       V_INFO);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;
  /***************************************************************************************
  *    名称：Get_MainSubRoute                                                            *
  *                                                                                      *
  *    功能：获取线路主子线                                                              *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE GET_MAINSUBROUTE(V_DATE         DATE,
                             V_USEDATE      DATE,
                             V_ROUTEID      VARCHAR2,
                             V_SUBROUTEID   OUT VARCHAR2,
                             V_SUBROUTENAME OUT VARCHAR2) AS
  BEGIN
    V_SUBROUTEID   := 0;
    V_SUBROUTENAME := NULL;
  
    --取主子线ID
    FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                  FROM MCSUBROUTEINFOGS SUB
                 WHERE SUB.ROUTEID = V_ROUTEID
                   AND SUB.ISMAINSUB = '1'
                   AND SUB.ISACTIVE = '1'
                   AND SUB.BEGINDATE <= V_DATE
                   AND SUB.ENDDATE >= V_DATE) LOOP
      V_SUBROUTEID   := CUR.SUBROUTEID;
      V_SUBROUTENAME := CUR.SUBROUTENAME;
    END LOOP;
    --没有结存日期的主子线，则取当前有效的主子线
    IF (V_SUBROUTEID = 0) THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISMAINSUB = '1'
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_USEDATE
                             AND SUB.ENDDATE >= V_USEDATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
    --没有主子线，则取非主子线最小的ID
    IF (V_SUBROUTEID = 0) THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_DATE
                             AND SUB.ENDDATE >= V_DATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
    IF (V_SUBROUTEID = 0) THEN
      FOR CUR IN (SELECT SUB.SUBROUTEID, SUB.SUBROUTENAME
                    FROM MCSUBROUTEINFOGS SUB
                   WHERE SUB.ISACTIVE = '1'
                     AND SUB.SUBROUTEID IN
                         (SELECT MIN(SUB.SUBROUTEID) SUBROUTEID
                            FROM MCSUBROUTEINFOGS SUB
                           WHERE SUB.ROUTEID = V_ROUTEID
                             AND SUB.ISACTIVE = '1'
                             AND SUB.BEGINDATE <= V_USEDATE
                             AND SUB.ENDDATE >= V_USEDATE)) LOOP
        V_SUBROUTEID   := CUR.SUBROUTEID;
        V_SUBROUTENAME := CUR.SUBROUTENAME;
      END LOOP;
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('GetMainSubRoute',
                      '获取线路主子线',
                      V_DATE,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：Get_DriverWorkTime                                                          *
  *                                                                                      *
  *    功能：获取驾驶员工作时间                                                          *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  FUNCTION GET_DRIVERWORKTIME(V_ROUTEID NUMBER, V_DATE DATE) RETURN NUMBER AS
    V_WORKTIME   NUMBER;
    V_DATE_IN    DATE := TRUNC(V_DATE);
    V_DRIVERID   VARCHAR2(36);
    V_ARRIVETIME DATE;
    CURSOR CUR_ROUTE(ROUTE_ID NUMBER, DATE_IN DATE) IS
      SELECT T.ROUTEID, T.DRIVERID, T.ARRIVETIME, T.LEAVETIME
        FROM BZ_BUSRUNRECORDLDTEMP1 T
       WHERE T.ROUTEID = ROUTE_ID
         AND T.ISACTIVE = '1'
         AND T.RUNDATADATE = DATE_IN
         AND T.ARRIVETIME >= T.LEAVETIME --去掉时间错误的
       ORDER BY T.ROUTEID, T.DRIVERID, T.LEAVETIME;
  BEGIN
    V_WORKTIME := 0;
    V_DRIVERID := '';
    FOR CUR_R IN CUR_ROUTE(V_ROUTEID, V_DATE_IN) LOOP
      BEGIN
        IF (V_DRIVERID = CUR_R.DRIVERID) THEN
          IF (CUR_R.LEAVETIME - V_ARRIVETIME) * 24 > G_DRIVER_TIME THEN
            --休息时间超过2小时
            V_WORKTIME := V_WORKTIME +
                          (CUR_R.ARRIVETIME - CUR_R.LEAVETIME) * 24; --不考虑
          ELSE
            V_WORKTIME := V_WORKTIME +
                          (CUR_R.ARRIVETIME - V_ARRIVETIME) * 24;
          END IF;
          V_ARRIVETIME := CUR_R.ARRIVETIME;
        ELSE
          V_DRIVERID   := CUR_R.DRIVERID;
          V_WORKTIME   := V_WORKTIME +
                          (CUR_R.ARRIVETIME - CUR_R.LEAVETIME) * 24;
          V_ARRIVETIME := CUR_R.ARRIVETIME;
        END IF;
      END;
    END LOOP;
    RETURN V_WORKTIME;
  END;
  /***************************************************************************************
  *    名称：TREATE_RUNDATA                                                               *
  *                                                                                       *
  *    功能：业务（运营）数据结存(JOB调用接口)                                              *
  *                                                                                       *
  *    作者：huhuimin                                                                      *
  *    日期：2014-02-24                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_RUNDATA AS
  BEGIN
    TREATE_RUNDATASTORAGE(TRUNC(SYSDATE) - G_RUNDATA,
                          TRUNC(SYSDATE) - G_RUNDATA);
  END;
  /***************************************************************************************
  *    名称：TREATE_RUNDATASTORAGE                                                        *
  *                                                                                       *
  *    功能：业务（运营）数据结存(手工调用接口)                                             *
  *                                                                                       *
  *    作者：hujihuo                                                                      *
  *    日期：2011-12-26                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_RUNDATASTORAGE(V_BEGINDATE DATE, V_ENDDATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_BEGINDATE);
    WHILE (V_DATE_IN <= V_ENDDATE) LOOP
      --先峰段结存，后日结存
      WRITE_LOG('TREATE_RUNDATASTORAGE', '业务数据结存', V_DATE_IN, '开始');
      --导入发车记录数据
      IMPORT_BUSRUNRECORD(V_DATE_IN);
      --车辆时段发车间隔
      TREATE_BUSSENDINTERVAL(V_DATE_IN);
      --车辆数据日结存
      TREATE_BUSDAYSTORAGE(V_DATE_IN);
      --首末班时间按月份备份
      TREATE_ROUTEFSTANDLSTSEQTIME(V_DATE_IN);
      --每分钟运营车辆数据结存
      TREATE_BUSRUNCOUNT(V_DATE_IN);
      --早高峰运营车辆数据结存
      TREATE_MORBUSRUNCOUNT(V_DATE_IN);
      --线路峰段结存
      --TREATE_ROUTETIMEPHASESTORAGE(V_DATE_IN);
      --线路五峰段结存
      --TREATE_ROUTETIMEPHASESTORAGE2(V_DATE_IN);
      --线路日结存
      TREATE_ROUTEDAYDATASTORAGE(V_DATE_IN);
      --投诉数据结存
      TREATE_COMPLAINTS(V_DATE_IN);
      --驾驶员驾驶时间结存
      TREATE_DRIVETIMESTORAGE(V_DATE_IN);
      --行车事故信息结存
      TREATE_SAFETYEVENTINFO(V_DATE_IN);
      --指标预警结存
      INDICATOR_BUSNUMPUNCTUAL(V_DATE_IN);
      INDICATOR_BUSSHIFTCOMPLETE(V_DATE_IN);
      INDICATOR_FSTANDLSTPUNCTUAL(V_DATE_IN);
      INDICATOR_ROUTESENDBLANK(V_DATE_IN);
      INDICATOR_SATISFY(V_DATE_IN);
      INDICATOR_UPDATE_ALL(V_DATE_IN);
      WRITE_LOG('TREATE_RUNDATASTORAGE', '业务数据结存', V_DATE_IN, '结束');
      V_DATE_IN := V_DATE_IN + 1;
    END LOOP;
  END;
  /***************************************************************************************
  *    名称：P_IMPORT_BUSRUNRECORD                                                       *
  *                                                                                      *
  *    功能：导入车辆发车记录数据                                                        *
                                                                                         *
  *    作者：huhuimin                                                                    * 
  *    日期：2013-05-02                                                                  *
  ****************************************************************************************/
  PROCEDURE IMPORT_BUSRUNRECORD(V_DATE DATE) AS
    V_DATE_IN   DATE;
    V_STARTDATE DATE;
    V_SQL       VARCHAR2(500);
  BEGIN
    V_DATE_IN   := TRUNC(V_DATE);
    V_STARTDATE := SYSDATE;
    -------------------------------------------------------------------------------------------------
    -- 清除当天发车记录数据        
    -------------------------------------------------------------------------------------------------
    SELECT 'TRUNCATE TABLE BZ_BUSRUNRECORDLDTEMP1' INTO V_SQL FROM DUAL;
    EXECUTE IMMEDIATE V_SQL;
    COMMIT;
    -------------------------------------------------------------------------------------------------
    -- 分时段导入发车记录数据
    -------------------------------------------------------------------------------------------------
    FOR CUR IN 1 .. 34 LOOP
      BEGIN
        INSERT /*+append*/
        INTO BZ_BUSRUNRECORDLDTEMP1
          (BUSRRID,
           ORGID,
           ROUTEID,
           SUBROUTEID,
           SEGMENTID,
           RECTYPE,
           BUSID,
           DRIVERID,
           BUSSID,
           STEWARDID,
           STARTSTATIONID,
           ENDSTATIONID,
           LEAVETIME,
           ARRIVETIME,
           ISLATE,
           RUNDATADATE,
           MILETYPEID,
           MILENUM,
           RECDATE,
           SEQNUM,
           AVGSPEED,
           SEQTIME,
           GPSMILE,
           MEMOS,
           ISACTIVE,
           CREATED,
           CREATEDBY,
           UPDATED,
           UPDATEDBY,
           STOPTIME,
           STOPNUM,
           STATIONNUM,
           SECTRATE)
          SELECT BUSRRID,
                 ORGID,
                 ROUTEID,
                 SUBROUTEID,
                 SEGMENTID,
                 RECTYPE,
                 BUSID,
                 DRIVERID,
                 BUSSID,
                 STEWARDID,
                 STARTSTATIONID,
                 ENDSTATIONID,
                 LEAVETIME,
                 ARRIVETIME,
                 ISLATE,
                 RUNDATADATE,
                 MILETYPEID,
                 MILENUM,
                 RECDATE,
                 SEQNUM,
                 AVGSPEED,
                 SEQTIME,
                 GPSMILE,
                 MEMOS,
                 ISACTIVE,
                 CREATED,
                 CREATEDBY,
                 UPDATED,
                 UPDATEDBY,
                 STOPTIME,
                 STOPNUM,
                 STATIONNUM,
                 SECTRATE
            FROM BZ_BUSRUNRECORDLD T
           WHERE T.GPSMILE >= 0
             AND T.LEAVETIME >= V_DATE_IN + (CUR - 1) / 24
             AND T.LEAVETIME < V_DATE_IN + CUR / 24
             AND T.ARRIVETIME > T.LEAVETIME
             AND T.ISACTIVE = '1'
           ORDER BY T.ROUTEID, T.BUSID, T.LEAVETIME;
        --每cur/24提交一次
        COMMIT;
      END;
    END LOOP;
    INSERT /*+append*/
    INTO BZ_BUSRUNRECORDLDTEMP1
      (BUSRRID,
       ORGID,
       ROUTEID,
       SUBROUTEID,
       SEGMENTID,
       RECTYPE,
       BUSID,
       DRIVERID,
       BUSSID,
       STEWARDID,
       STARTSTATIONID,
       ENDSTATIONID,
       LEAVETIME,
       ARRIVETIME,
       ISLATE,
       RUNDATADATE,
       MILETYPEID,
       MILENUM,
       RECDATE,
       SEQNUM,
       AVGSPEED,
       SEQTIME,
       GPSMILE,
       MEMOS,
       ISACTIVE,
       CREATED,
       CREATEDBY,
       UPDATED,
       UPDATEDBY,
       STOPTIME,
       STOPNUM,
       STATIONNUM,
       SECTRATE)
      SELECT BUSRRID,
             ORGID,
             ROUTEID,
             SUBROUTEID,
             SEGMENTID,
             RECTYPE,
             BUSID,
             DRIVERID,
             BUSSID,
             STEWARDID,
             STARTSTATIONID,
             ENDSTATIONID,
             LEAVETIME,
             ARRIVETIME,
             ISLATE,
             RUNDATADATE,
             MILETYPEID,
             MILENUM,
             RECDATE,
             SEQNUM,
             AVGSPEED,
             SEQTIME,
             GPSMILE,
             MEMOS,
             ISACTIVE,
             CREATED,
             CREATEDBY,
             UPDATED,
             UPDATEDBY,
             STOPTIME,
             STOPNUM,
             STATIONNUM,
             SECTRATE
        FROM BZ_BUSRUNRECORDLD T
       WHERE T.LEAVETIME < V_DATE_IN
         AND T.ARRIVETIME >= V_DATE_IN;
    COMMIT;
    WRITE_LOG('P_IMPORT_BUSRUNRECORD',
              '导入发车记录数据',
              V_DATE_IN,
              '时间：' || ROUND((SYSDATE - V_STARTDATE) * 24 * 60 * 60, 2) || '秒');
  EXCEPTION
    WHEN OTHERS THEN
      WRITE_EXCEPTION('P_IMPORT_BUSRUNRECORD',
                      '导入发车记录数据',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_BUSSENDINTERVAL                                                        *
  *                                                                                      *
  *    功能：车辆时段发车间隔                                                           *
  *                                                                                      *
  *    作者：huhuimin                                                                    *
  *    日期：2013-08-27                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_BUSSENDINTERVAL(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_BUSSENDINTERVAL',
              '车辆时段发车间隔',
              V_DATE_IN,
              '开始');
    DELETE FROM JZ_BUSSENDINTERVAL T WHERE T.JZDATE = V_DATE_IN;
    INSERT INTO JZ_BUSSENDINTERVAL
      (RECORDID,
       ROUTEID,
       STARTTIME,
       ENDTIME,
       BUSSID,
       SHIFTNUM,
       SENDINTERVAL,
       DATASAVELEVEL,
       JZDATE)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             T.ROUTEID,
             T.STARTTIME,
             T.ENDTIME,
             T.BUSSID,
             T.SHIFTNUM,
             T.SENDINTERVAL,
             '3' AS DATASAVELEVEL,
             V_DATE_IN AS JZDATE
        FROM (SELECT T.ORGID,
                     T.ROUTEID,
                     T.BUSSID,
                     SCAL.MINNUM AS STARTTIME,
                     SCAL.MAXNUM AS ENDTIME,
                     COUNT(*) AS SHIFTNUM,
                     ROUND(DECODE(COUNT(*),
                                  0,
                                  0,
                                  (SCAL.MAXNUM - SCAL.MINNUM) / COUNT(*)),
                           2) AS SENDINTERVAL
                FROM BZ_BUSRUNRECORDLDTEMP1 T, SYS_CALCULATECONFIG SCAL
               WHERE LEAVETIME >= V_DATE_IN + SCAL.MINNUM / 24 / 60
                 AND LEAVETIME <= V_DATE_IN + SCAL.MAXNUM / 24 / 60
                 AND RECTYPE = '1'
                 AND SCAL.CONFIGNAME = 'SENDINTERVALHOURPHASE'
               GROUP BY T.ORGID,
                        T.ROUTEID,
                        T.BUSSID,
                        SCAL.MINNUM,
                        SCAL.MAXNUM) T;
    COMMIT;
    INSERT INTO JZ_BUSSENDINTERVAL
      (RECORDID,
       ROUTEID,
       STARTTIME,
       ENDTIME,
       BUSSID,
       SHIFTNUM,
       SENDINTERVAL,
       DATASAVELEVEL,
       JZDATE)
      SELECT S_ROUTESTORAGE.NEXTVAL,
             T.ROUTEID,
             0 AS STARTTIME,
             1440 AS ENDTIME,
             T.BUSSID,
             T.SHIFTNUM,
             ROUND(T.RUNTIME / T.SHIFTNUM, 2) AS SENDINTERVAL,
             '3' AS DATASAVELEVEL,
             V_DATE_IN AS JZDATE
        FROM (SELECT T.ROUTEID,
                     T.BUSSID,
                     COUNT(T.BUSRRID) AS SHIFTNUM,
                     MAX(T.LEAVETIME) AS STARTTIME,
                     MIN(T.LEAVETIME) AS ENDTIME,
                     ROUND((MAX(T.LEAVETIME) - MIN(T.LEAVETIME)) * 24 * 60,
                           2) AS RUNTIME
                FROM BZ_BUSRUNRECORDLDTEMP1 T
               WHERE T.LEAVETIME >= V_DATE_IN
                 AND T.LEAVETIME < V_DATE_IN + 1
                 AND T.RECTYPE = '1'
               GROUP BY T.ROUTEID, T.BUSSID) T;
    COMMIT;
    WRITE_LOG('TREATE_BUSSENDINTERVAL',
              '车辆时段发车间隔',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_BUSSENDINTERVAL',
                      '车辆时段发车间隔',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_BUSDAYSTORAGE                                                        *
  *                                                                                      *
  *    功能：车辆数据日结存表                                                            *
  *                                                                                      *
  *    作者：huhuimin                                                                    *
  *    日期：2013-03-07                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_BUSDAYSTORAGE(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_BUSDAYSTORAGE',
              '车辆数据日结存表',
              V_DATE_IN,
              '开始');
    DELETE FROM JZ_BUSDAYSTORAGE T WHERE T.JZDATE = V_DATE_IN;
    INSERT INTO JZ_BUSDAYSTORAGE
      (RECORDID,
       ORGID,
       ORGNAME,
       ROUTEID,
       ROUTENAME,
       BUSID,
       CARDID,
       RUNMILES,
       UNRUNMILES,
       RUNTIME,
       UNRUNTIME,
       JZDATE)
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
             ORG.ORGID            AS ORGID,
             ORG.ORGNAME          AS ORGNAME,
             TTT.ROUTEID          AS ROUTEID,
             TTT.ROUTENAME        AS ROUTENAME,
             TTT.BUSID            AS BUSID,
             BUS.CARDID           AS CARDID,
             TTT.RUNMILES         AS RUNMILES,
             TTT.UNRUNMILES       AS UNRUNMILES,
             TTT.RUNTIME          AS RUNTIME,
             TTT.UNRUNTIME        AS UNRUNTIME,
             V_DATE_IN            AS JZDATE
        FROM (SELECT BUS.ORGID,
                     TT.ROUTEID,
                     TT.ROUTENAME,
                     BUS.BUSID,
                     TT.RUNMILES,
                     TT.UNRUNMILES,
                     TT.RUNTIME,
                     TT.UNRUNTIME
                FROM (SELECT ROUTEINFO.ORGID,
                             ROU.ROUTEID,
                             ROUTEINFO.ROUTENAME,
                             RUNRECORD.BUSID,
                             RUNRECORD.RUNMILES,
                             RUNRECORD.UNRUNMILES,
                             RUNRECORD.RUNTIME,
                             RUNRECORD.UNRUNTIME
                        FROM (SELECT *
                                FROM (SELECT RUN.BUSID,
                                             RUN.RUNMILES,
                                             UNRUN.UNRUNMILES,
                                             RUN.RUNTIME,
                                             UNRUN.UNRUNTIME
                                        FROM (SELECT BRUN.BUSID,
                                                     SUM(NVL(BRUN.MILENUM, 0)) AS RUNMILES,
                                                     ROUND(SUM(NVL(BRUN.ARRIVETIME -
                                                                   BRUN.LEAVETIME,
                                                                   0)) * 24 * 60,
                                                           2) AS RUNTIME
                                                FROM BZ_BUSRUNRECORDLDTEMP1 BRUN
                                               WHERE BRUN.RECTYPE = '1'
                                                 AND BRUN.RUNDATADATE =
                                                     V_DATE_IN
                                               GROUP BY BRUN.BUSID) RUN,
                                             (SELECT BRUN.BUSID,
                                                     SUM(NVL(BRUN.MILENUM, 0)) AS UNRUNMILES,
                                                     ROUND(SUM(NVL(BRUN.ARRIVETIME -
                                                                   BRUN.LEAVETIME,
                                                                   0)) * 24 * 60,
                                                           2) AS UNRUNTIME
                                                FROM BZ_BUSRUNRECORDLDTEMP1 BRUN
                                               WHERE BRUN.RECTYPE = '2'
                                                 AND BRUN.RUNDATADATE =
                                                     V_DATE_IN
                                               GROUP BY BRUN.BUSID) UNRUN
                                       WHERE RUN.BUSID = UNRUN.BUSID(+)) RUN1
                              UNION
                              SELECT *
                                FROM (SELECT UNRUN.BUSID,
                                             RUN.RUNMILES,
                                             UNRUN.UNRUNMILES,
                                             RUN.RUNTIME,
                                             UNRUN.UNRUNTIME
                                        FROM (SELECT BRUN.BUSID,
                                                     SUM(NVL(BRUN.MILENUM, 0)) AS RUNMILES,
                                                     ROUND(SUM(NVL(BRUN.ARRIVETIME -
                                                                   BRUN.LEAVETIME,
                                                                   0)) * 24 * 60,
                                                           2) AS RUNTIME
                                                FROM BZ_BUSRUNRECORDLDTEMP1 BRUN
                                               WHERE BRUN.RECTYPE = '1'
                                                 AND BRUN.RUNDATADATE =
                                                     V_DATE_IN
                                               GROUP BY BRUN.BUSID) RUN,
                                             (SELECT BRUN.BUSID,
                                                     SUM(NVL(BRUN.MILENUM, 0)) AS UNRUNMILES,
                                                     ROUND(SUM(NVL(BRUN.ARRIVETIME -
                                                                   BRUN.LEAVETIME,
                                                                   0)) * 24 * 60,
                                                           2) AS UNRUNTIME
                                                FROM BZ_BUSRUNRECORDLDTEMP1 BRUN
                                               WHERE BRUN.RECTYPE = '2'
                                                 AND BRUN.RUNDATADATE =
                                                     V_DATE_IN
                                               GROUP BY BRUN.BUSID) UNRUN
                                       WHERE RUN.BUSID(+) = UNRUN.BUSID) UNRUN1
                               WHERE UNRUN1.RUNMILES IS NULL) RUNRECORD,
                             (SELECT *
                                FROM MCRBUSROUTEGS T
                               WHERE T.RECDATE IN
                                     (SELECT MAX(T.RECDATE)
                                        FROM MCRBUSROUTEGS TT
                                       WHERE T.BUSID = TT.BUSID
                                         AND T.RECDATE <= V_DATE_IN + 10)) ROU,
                             MCROUTEINFOVW ROUTEINFO
                       WHERE RUNRECORD.BUSID = ROU.BUSID(+)
                         AND ROU.ROUTEID = ROUTEINFO.ROUTEID) TT,
                     MCBUSINFOVW BUS
               WHERE BUS.BUSID = TT.BUSID(+)) TTT,
             MCBUSINFOVW BUS,
             (SELECT ORG2.ORGID AS ORGID2, ORG1.ORGID, ORG1.ORGNAME
                FROM MCORGINFOGS ORG1, MCORGINFOGS ORG2
               WHERE ORG1.ORGID = ORG2.PARENTORGID
                 AND ORG1.ORGGRADE != 1) ORG
       WHERE BUS.BUSID(+) = TTT.BUSID
         AND ORG.ORGID2(+) = TTT.ORGID;
    COMMIT;
    WRITE_LOG('TREATE_BUSDAYSTORAGE',
              '车辆数据日结存表',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_BUSDAYSTORAGE',
                      '车辆数据日结存表',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：TREATE_ROUTEFSTANDLSTSEQTIME                                                 *
  *                                                                                       *
  *    功能：线路首末班时间按月备份                                                       *
  *                                                                                       *
  *    作者：huhuimin                                                                     *
  *    日期：2013-03-26                                                                   *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEFSTANDLSTSEQTIME(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_ROUTEFSTANDLSTSEQTIME',
              '线路首末班时间按月备份',
              V_DATE_IN,
              '开始');
    --删除现有本月份数据
    DELETE FROM JZ_ROUTEFSTANDLSTSEQTIME T
     WHERE T.JZDATE >=
           TO_DATE(TO_CHAR(V_DATE_IN, 'YYYYMM') || '01', 'YYYYMMDD')
       AND T.JZDATE < TO_DATE(TO_CHAR(ADD_MONTHS(V_DATE_IN, 1), 'YYYYMM') || '01',
                              'YYYYMMDD');
    --插入新结存数据
    INSERT INTO JZ_ROUTEFSTANDLSTSEQTIME
      (RECORDID,
       ROUTEID,
       STARTDATE,
       ENDDATE,
       STARTWEEK,
       ENDWEEK,
       MAINSTATIONFSTTIME,
       MAINSTATIONLSTTIME,
       SECONDSTATIONFSTTIME,
       SECONDSTATIONLSTTIME,
       JZDATE)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             ROU.ROUTEID,
             T.STARTDATE,
             T.ENDDATE,
             T.STARTWEEK,
             T.ENDWEEK,
             T.MAINSTATIONFSTTIME,
             T.MAINSTATIONLSTTIME,
             T.SECONDSTATIONFSTTIME,
             T.SECONDSTATIONLSTTIME,
             V_DATE_IN AS JZDATE
        FROM MCROUTEFSTANDLSTSEQTIMEGS T, MCROUTEINFOVW ROU
       WHERE T.ROUTEID(+) = ROU.ROUTEID;
    COMMIT;
    WRITE_LOG('TREATE_ROUTEFSTANDLSTSEQTIME',
              '线路首末班时间按月备份',
              V_DATE_IN,
              '结束');
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTEFSTANDLSTSEQTIME',
                      '线路首末班时间按月备份',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_BUSRUNCOUNT                                                          *
  *                                                                                      *
  *    功能：车辆运营在线数数据结存                                                      *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                    *
  *    日期：2013-05-07                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_BUSRUNCOUNT(V_DATE DATE) AS
    V_DATE_IN VARCHAR2(20);
  BEGIN
    V_DATE_IN := TO_CHAR(V_DATE, 'yyyy-mm-dd');
    WRITE_LOG('TREATE_BUSRUNCOUNT',
              '车辆运营在线数数据结存',
              TO_DATE(V_DATE_IN, 'yyyy-mm-dd'),
              '开始');
    FOR CUR IN 0 .. 23 LOOP
      MERGE INTO BZ_BUSONLINE DEST
      USING (SELECT TO_CHAR(MINU.MINUTE, 'hh24:mi:ss') MINUTE,
                    COUNT(DISTINCT(T.BUSID)) BUSCOUNT
               FROM BZ_BUSRUNRECORDLDTEMP1 T, MINUTES_DAY MINU
              WHERE T.LEAVETIME <=
                    TO_DATE(V_DATE_IN || TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss')
                AND T.ARRIVETIME >=
                    TO_DATE(V_DATE_IN || TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss')
                AND TO_DATE('2000-01-01' ||
                            TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss') <
                    TO_DATE('2000-01-01', 'yyyy-mm-dd') + (CUR + 1) / 24
                AND TO_DATE('2000-01-01' ||
                            TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss') >=
                    TO_DATE('2000-01-01', 'yyyy-mm-dd') + CUR / 24
                AND T.RECTYPE = 1
              GROUP BY MINU.MINUTE) SOUR
      ON (TO_DATE(V_DATE_IN || SOUR.MINUTE, 'yyyy-mm-dd hh24:mi:ss') = TO_DATE(TO_CHAR(DEST.RECDATE, 'yyyy-mm-dd hh24:mi') || ':00', 'yyyy-mm-dd hh24:mi:ss'))
      WHEN MATCHED THEN
        UPDATE SET DEST.BUSRUNCOUNT = SOUR.BUSCOUNT;
      COMMIT;
      MERGE INTO BZ_BUSONLINE DEST
      USING (SELECT TO_CHAR(MINU.MINUTE, 'hh24:mi:ss') MINUTE,
                    COUNT(DISTINCT(T.BUSID)) BUSCOUNT
               FROM BZ_BUSRUNRECORDLDTEMP1 T, MINUTES_DAY MINU
              WHERE T.LEAVETIME <=
                    TO_DATE(V_DATE_IN || TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss')
                AND T.ARRIVETIME >=
                    TO_DATE(V_DATE_IN || TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss')
                AND TO_DATE('2000-01-01' ||
                            TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss') <
                    TO_DATE('2000-01-01', 'yyyy-mm-dd') + (CUR + 1) / 24
                AND TO_DATE('2000-01-01' ||
                            TO_CHAR(MINU.MINUTE, 'hh24:mi:ss'),
                            'yyyy-mm-dd hh24:mi:ss') >=
                    TO_DATE('2000-01-01', 'yyyy-mm-dd') + CUR / 24
                AND T.RECTYPE != '1'
              GROUP BY MINU.MINUTE) SOUR
      ON (TO_DATE(V_DATE_IN || SOUR.MINUTE, 'yyyy-mm-dd hh24:mi:ss') = TO_DATE(TO_CHAR(DEST.RECDATE, 'yyyy-mm-dd hh24:mi') || ':00', 'yyyy-mm-dd hh24:mi:ss'))
      WHEN MATCHED THEN
        UPDATE SET DEST.BUSUNRUNCOUNT = SOUR.BUSCOUNT;
      COMMIT;
    END LOOP;
    WRITE_LOG('TREATE_BUSRUNCOUNT',
              '车辆运营在线数数据结存',
              TO_DATE(V_DATE_IN, 'yyyy-mm-dd'),
              '结束');
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_BUSRUNCOUNT',
                      '车辆运营在线数数据结存',
                      TO_DATE(V_DATE_IN, 'yyyy-mm-dd'),
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_GJBUSCOUNT                                                          *
  *                                                                                      *
  *    功能：早高峰车辆在线数数据结存                                                      *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                    *
  *    日期：2013-05-07                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_GJBUSCOUNT(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('按公交统计方式统计早高峰上线车辆',
              'TREATE_GJBUSCOUNT',
              V_DATE_IN,
              '开始计算');
    DELETE FROM GJ_BUSCOUNT T WHERE T.RECDATE = V_DATE_IN;
    INSERT INTO GJ_BUSCOUNT
      (RECORDID, ORGID, BUSCOUNT, RECDATE, FLAG)
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
             T.ORGID AS ORGID,
             T.BUSCOUNT AS BUSCOUNT,
             TRUNC(V_DATE_IN) AS RECDATE,
             '2' AS FLAG
        FROM (SELECT MM.PARENTORGID AS ORGID,
                     COUNT(DISTINCT T.PRODUCTID) AS BUSCOUNT
                FROM BSVCBUSRUNDATALD5 T, MCROUTEINFOGS M, MCORGINFOGS MM
               WHERE T.ACTDATETIME <= V_DATE_IN + 26 / 3 / 24
                 AND T.ACTDATETIME >= V_DATE_IN + 49 / 6 / 24
                 AND T.ROUTEID = M.ROUTEID
                 AND M.ORGID = MM.ORGID
                 AND MM.PARENTORGID >= 2101
                 AND MM.PARENTORGID <= 2106
                 AND (T.ROUTEID < 370 OR T.ROUTEID > 400)
               GROUP BY MM.PARENTORGID) T;
    COMMIT;
    INSERT INTO GJ_BUSCOUNT
      (RECORDID, ORGID, BUSCOUNT, RECDATE, FLAG)
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
             T.ORGID AS ORGID,
             T.BUSCOUNT AS BUSCOUNT,
             TRUNC(V_DATE_IN) AS RECDATE,
             '1' AS FLAG
        FROM (SELECT MM.PARENTORGID AS ORGID,
                     COUNT(DISTINCT T.PRODUCTID) AS BUSCOUNT
                FROM BSVCBUSRUNDATALD5 T, MCROUTEINFOGS M, MCORGINFOGS MM
               WHERE T.ACTDATETIME <= V_DATE_IN + 26 / 3 / 24
                 AND T.ACTDATETIME >= V_DATE_IN + 25 / 3 / 24
                 AND T.ROUTEID = M.ROUTEID
                 AND M.ORGID = MM.ORGID
                 AND MM.PARENTORGID >= 2101
                 AND MM.PARENTORGID <= 2106
                 AND (T.ROUTEID < 370 OR T.ROUTEID > 400)
               GROUP BY MM.PARENTORGID) T;
    COMMIT;
    INSERT INTO GJ_BUSCOUNT
      (RECORDID, ORGID, BUSCOUNT, RECDATE, FLAG)
      SELECT S_BUSSTORAGE.NEXTVAL AS RECORDID,
             T.ORGID AS ORGID,
             T.BUSCOUNT AS BUSCOUNT,
             TRUNC(V_DATE_IN) AS RECDATE,
             '3' AS FLAG
        FROM (SELECT MM.PARENTORGID AS ORGID,
                     COUNT(DISTINCT T.PRODUCTID) AS BUSCOUNT
                FROM BSVCBUSRUNDATALD5 T, MCROUTEINFOGS M, MCORGINFOGS MM
               WHERE T.ACTDATETIME <= V_DATE_IN + 8.5 / 24
                 AND T.ACTDATETIME >= V_DATE_IN + 7 / 24
                 AND T.ROUTEID = M.ROUTEID
                 AND T.ROUTEID >= 370
                 AND T.ROUTEID <= 400
                 AND M.ORGID = MM.ORGID
                 AND MM.PARENTORGID >= 2101
                 AND MM.PARENTORGID <= 2106
               GROUP BY MM.PARENTORGID) T;
    COMMIT;
    UPDATE GJ_BUSCOUNT T
       SET T.BUSCOUNT = T.BUSCOUNT + (SELECT TT.BUSCOUNT
                                        FROM GJ_BUSCOUNT TT
                                       WHERE TT.RECDATE = V_DATE_IN
                                         AND TT.FLAG = 3)
     WHERE T.FLAG != 3
       AND T.ORGID IN (SELECT TT.ORGID
                         FROM GJ_BUSCOUNT TT
                        WHERE TT.RECDATE = V_DATE_IN
                          AND TT.FLAG = 3)
       AND T.RECDATE = V_DATE_IN;
    DELETE FROM GJ_BUSCOUNT T WHERE T.FLAG = '3';
  
    UPDATE GJ_BUSCOUNT T
       SET T.BUSCOUNT = T.BUSCOUNT + (SELECT NVL(TT.BUSCOUNT, 0)
                                        FROM GJ_BUSCOUNT TT
                                       WHERE TT.RECDATE = T.RECDATE
                                         AND TT.ORGID = '2106'
                                         AND TT.FLAG = T.FLAG)
     WHERE T.BUSCOUNT IS NOT NULL
       AND T.ORGID = '2102'
       AND T.RECDATE = V_DATE_IN;
    DELETE FROM GJ_BUSCOUNT T WHERE T.ORGID = '2106';
    WRITE_LOG('按公交统计方式统计早高峰上线车辆',
              'TREATE_GJBUSCOUNT',
              V_DATE_IN,
              '计算结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      WRITE_EXCEPTION('按公交统计方式统计早高峰上线车辆',
                      'TREATE_GJBUSCOUNT',
                      SYSDATE,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_MORBUSRUNCOUNT                                                       *
  *                                                                                      *
  *    功能：早高峰车辆运营在线数数据结存                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                    *
  *    日期：2013-07-19                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_MORBUSRUNCOUNT(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_MORBUSRUNCOUNT',
              '早高峰车辆运营在线数数据结存',
              V_DATE_IN,
              '开始');
    MERGE INTO GJ_BUSCOUNT DEST
    USING (SELECT '2' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 49 / 6 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 49 / 6 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND ORG.ORGID = T.ORGID
              AND T.RECTYPE = '1'
              AND ORG.PARENTORGID IN
                  ('2101', '2102', '2103', '2104', '2105', '2106')
            GROUP BY ORG.PARENTORGID
           UNION
           SELECT '1' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 25 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 25 / 3 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND T.ORGID = ORG.ORGID
              AND T.RECTYPE = '1'
              AND ORG.PARENTORGID IN
                  ('2101', '2102', '2103', '2104', '2105', '2106')
            GROUP BY ORG.PARENTORGID) SOUR
    ON (DEST.ORGID = SOUR.ORGID AND DEST.RECDATE = V_DATE_IN AND DEST.FLAG = SOUR.FLAG)
    WHEN MATCHED THEN
      UPDATE SET DEST.BUSRUNCOUNT = SOUR.BUSCOUNT;
    COMMIT;
    MERGE INTO GJ_BUSCOUNT DEST
    USING (SELECT '2' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 49 / 6 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 49 / 6 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND ORG.ORGID = T.ORGID
              AND T.RECTYPE != '1'
              AND ORG.PARENTORGID IN
                  ('2101', '2102', '2103', '2104', '2105', '2106')
            GROUP BY ORG.PARENTORGID
           UNION
           SELECT '1' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 25 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 25 / 3 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND T.ORGID = ORG.ORGID
              AND T.RECTYPE != '1'
              AND ORG.PARENTORGID IN
                  ('2101', '2102', '2103', '2104', '2105', '2106')
            GROUP BY ORG.PARENTORGID) SOUR
    ON (DEST.ORGID = SOUR.ORGID AND DEST.RECDATE = V_DATE_IN AND DEST.FLAG = SOUR.FLAG)
    WHEN MATCHED THEN
      UPDATE SET DEST.BUSUNRUNCOUNT = SOUR.BUSCOUNT;
    COMMIT;
    MERGE INTO GJ_BUSCOUNT DEST
    USING (SELECT '2' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 49 / 6 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 49 / 6 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND ORG.ORGID = T.ORGID
              AND T.RECTYPE = '1'
              AND ORG.PARENTORGID IN ('2106')
            GROUP BY ORG.PARENTORGID
           UNION
           SELECT '1' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 25 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 25 / 3 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND T.ORGID = ORG.ORGID
              AND T.RECTYPE = '1'
              AND ORG.PARENTORGID IN ('2106')
            GROUP BY ORG.PARENTORGID) SOUR
    ON (DEST.ORGID = SOUR.ORGID AND DEST.RECDATE = V_DATE_IN AND DEST.FLAG = SOUR.FLAG AND DEST.ORGID = '2102')
    WHEN MATCHED THEN
      UPDATE SET DEST.BUSRUNCOUNT = DEST.BUSRUNCOUNT + SOUR.BUSCOUNT;
    COMMIT;
    MERGE INTO GJ_BUSCOUNT DEST
    USING (SELECT '2' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 49 / 6 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 49 / 6 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND ORG.ORGID = T.ORGID
              AND T.RECTYPE != '1'
              AND ORG.PARENTORGID IN ('2106')
            GROUP BY ORG.PARENTORGID
           UNION
           SELECT '1' AS FLAG,
                  ORG.PARENTORGID ORGID,
                  COUNT(DISTINCT(T.BUSID)) BUSCOUNT
             FROM BZ_BUSRUNRECORDLD T, MCORGINFOVW ORG
            WHERE ((T.LEAVETIME <= V_DATE_IN + 25 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 25 / 3 / 24) OR
                  (T.LEAVETIME <= V_DATE_IN + 26 / 3 / 24 AND
                  T.ARRIVETIME > V_DATE_IN + 26 / 3 / 24))
              AND T.ORGID = ORG.ORGID
              AND T.RECTYPE != '1'
              AND ORG.PARENTORGID IN ('2106')
            GROUP BY ORG.PARENTORGID) SOUR
    ON (DEST.ORGID = SOUR.ORGID AND DEST.RECDATE = V_DATE_IN AND DEST.FLAG = SOUR.FLAG AND DEST.ORGID = '2102')
    WHEN MATCHED THEN
      UPDATE SET DEST.BUSUNRUNCOUNT = DEST.BUSUNRUNCOUNT + SOUR.BUSCOUNT;
    COMMIT;
    WRITE_LOG('TREATE_MORBUSRUNCOUNT',
              '早高峰车辆运营在线数数据结存',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_MORBUSRUNCOUNT',
                      '早高峰车辆运营在线数数据结存',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASE_ORG                                                *
  *                                                                                      *
  *    功能：按峰段指标数据结存表(组织)                                                    *
  *                                                                                      *
  *    作者：huhuimin                                                                     *
  *    日期：2012-04-09                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASE2_ORG(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    WRITE_LOG('TREATE_ROUTETIMEPHASE2_ORG',
              '按峰段指标结存-组织',
              V_DATE_IN,
              '开始');
    --删除日结数据
    DELETE FROM JZ_TIMEPHASEDATASTORAGE2
     WHERE JZDATE = V_DATE_IN
       AND STORAGEORGTYPE != '4'
       AND DATASAVELEVEL = '3';
    --插入日结数据
    INSERT INTO JZ_TIMEPHASEDATASTORAGE2
      (RECORDID, --记录编号
       ORGID, --组织编号
       ROUTEID, --线路编号
       ROUTENAME, --线路名称
       JZDATE, --结存日期
       TIMEPHASETYPE, --峰段类型
       TIMEPHASEVALUE, --峰段名称
       TIMEPHASESTARTTIME, --峰段开始时间
       TIMEPHASEENDTIME, --峰段结束时间
       TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
       TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
       STDSEQS, --标准车次数
       LOADPSGCAPABILITY, --载客能力
       PLANSEQMILE, --计划里程
       GPSMILES, --GPS里程
       RUNMILES, --营运里程
       RUNTIMES, --营运时间
       UNRUNMILES, --非营运里程
       DEVOTIONBUSCOUNT, --投入车辆数
       DEVOTIONEMPCOUNT, --投入人员数
       PLANBUSCOUNT, --计划投入车辆数
       PLANEMPCOUNT, --计划投入驾驶员数
       PSGCOUNT, --客运量
       PLANSEQCOUNT, --计划班次数
       ACTUALSEQCOUNT, --实际班次数
       FULLSEQCOUNT,
       ACTUALINTERVAL, --实际平均发车间隔（分钟）
       ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
       BUSSENDINTERVALSTD, --发车间隔合格班次数
       BUSDISTANCERATE, --车距合格率
       STATIONKEEPBACKRATE, --车站平均留客率
       OVERSPEEDCOUNT, --超速次数
       UNRULESTOPCOUNT, --不规范停车次数
       MDLOPENDOORCOUNT, --中途开关门次数
       RUNCIRCLETIME, --运营周期时间（分钟）
       ROUTERUNTIME, --线路行驶时间（分钟）
       ROUTESTOPTIME, --线路停站时间（分钟）
       BUSSENDSPEED, --运营车速（公里/小时）
       BUSRUNSPEED, --运送车速（公里/小时）
       ONTIMESEQCOUNT, --准点车次数
       BIGSTATIONONTIMERATE, --大站准点率
       SUMBUSCOUNT, --总配车数
       ROUTECODE, --线路编码
       DATASAVELEVEL, --数据结存级别
       STORAGEORGTYPE, --组织结存级别
       RECDATE, --记录日期
       TIMEPHASETIME)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             ORG.ORGID AS ORGID,
             NULL AS ROUTEID,
             NULL AS ROUTENAME,
             V_DATE_IN AS JZDATE,
             T.TIMEPHASETYPE AS TIMEPHASETYPE,
             T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
             NULL AS TIMEPHASESTARTTIME,
             NULL AS TIMEPHASEENDTIME,
             NULL AS TIMEPHASEINTERVAL,
             NULL AS TIMEPHASECIRCLETIME,
             T.STDSEQS AS STDSEQS,
             T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
             T.PLANSEQMILE AS PLANSEQMILE,
             T.GPSMILES AS GPSMILES,
             T.RUNMILES AS RUNMILES,
             T.RUNTIMES AS RUNTIMES,
             T.UNRUNMILES AS UNRUNMILES,
             T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
             T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
             T.PLANBUSCOUNT AS PLANBUSCOUNT,
             T.PLANEMPCOUNT AS PLANEMPCOUNT,
             T.PSGCOUNT AS PSGCOUNT,
             T.PLANSEQCOUNT AS PLANSEQCOUNT,
             T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
             T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
             NULL AS ACTUALINTERVAL,
             NULL AS ACTUALCIRCLETIME,
             T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
             NULL AS BUSDISTANCERATE,
             NULL AS STATIONKEEPBACKRATE,
             T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
             T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
             T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
             NULL AS RUNCIRCLETIME,
             NULL AS ROUTERUNTIME,
             NULL AS ROUTESTOPTIME,
             NULL AS BUNSENDSPEED,
             NULL AS BUSRUNSPEED,
             T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
             NULL AS BIGSTATIONONTIMERATE,
             T.SUMBUSCOUNT AS SUMBUSCOUNT,
             NULL AS ROUTECODE,
             '3' AS DATASAVELEVEL,
             ORG.ORGGRADE AS STORAGEORGTYPE,
             SYSDATE AS RECDATE,
             TIMEPHASETIME AS TIMEPHASETIME
        FROM MCORGINFOGS ORG,
             (SELECT O.PARENTORGID AS ORGID,
                     T.TIMEPHASETYPE AS TIMEPHASETYPE,
                     T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                     SUM(T.STDSEQS) AS STDSEQS,
                     SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                     SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                     SUM(T.GPSMILES) AS GPSMILES,
                     SUM(T.RUNMILES) AS RUNMILES,
                     SUM(T.RUNTIMES) AS RUNTIMES,
                     SUM(T.UNRUNMILES) AS UNRUNMILES,
                     SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                     SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                     SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                     SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                     SUM(T.PSGCOUNT) AS PSGCOUNT,
                     SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                     SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                     SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                     SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                     SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                     SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                     SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                     SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                     SUM(T.TIMEPHASETIME) AS TIMEPHASETIME
                FROM JZ_TIMEPHASEDATASTORAGE2 T, JZ_ORGGRADETREE O
               WHERE T.ORGID = O.ORGID
                 AND T.JZDATE = V_DATE_IN
                 AND T.DATASAVELEVEL = '3' --日
                 AND T.STORAGEORGTYPE = '4' --线路
               GROUP BY O.PARENTORGID, T.TIMEPHASETYPE, T.TIMEPHASEVALUE) T
       WHERE T.ORGID = ORG.ORGID(+);
    COMMIT;
    WRITE_LOG('TREATE_ROUTETIMEPHASE2_ORG',
              '按峰段指标结存-组织',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE2_ORG',
                      '按峰段指标结存-组织',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASE2_PHASE                                                *
  *                                                                                      *
  *    功能：按峰段指标数据结存表(月/年结存)                                                    *
  *                                                                                      *
  *    作者：huhuimin                                                                     *
  *    日期：2012-04-09                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASE2_PHASE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
    V_BEGIN_YEAR  DATE;
    V_END_YEAR    DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    V_BEGIN_YEAR  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                             'YYYY-MM-DD');
    V_END_YEAR    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                        '-01-01',
                                        'YYYY-MM-DD'),
                                12);
    --月结
    BEGIN
      WRITE_LOG('TREATE_ROUTETIMEPHASE2_PHASE',
                '按峰段指标结存-月结',
                V_DATE_IN,
                '开始');
      --删除月结数据
      DELETE FROM JZ_TIMEPHASEDATASTORAGE2
       WHERE JZDATE < V_END_MONTH
         AND JZDATE >= V_BEGIN_MONTH
         AND DATASAVELEVEL = '2';
      --线路月结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE2
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均周转时间（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE, --记录日期
         TIMEPHASETIME --峰段时间
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ORGID AS ORGID,
               T.ROUTEID AS ROUTEID,
               ROU.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.ACTUALINTERVAL AS ACTUALINTERVAL,
               T.ACTUALCIRCLETIME AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE, --车距合格率
               NULL AS STATIONKEEPBACKRATE, --车站平均留客率
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               T.RUNCIRCLETIME AS RUNCIRCLETIME,
               T.ROUTERUNTIME AS ROUTERUNTIME,
               T.ROUTESTOPTIME AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED, --运送速度
               NULL AS BUSRUNSPEED, --运营速度
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE, --大站准点率
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               ROU.ROUTECODE AS ROUTECODE,
               '2' AS DATASAVELEVEL,
               '4' AS STORAGEORGTYPE,
               SYSDATE AS RECDATE,
               TIMEPHASETIME AS TIMEPHASETIME
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       ROUND(AVG(T.TIMEPHASEINTERVAL), 2) AS TIMEPHASEINTERVAL,
                       ROUND(AVG(T.TIMEPHASECIRCLETIME), 2) AS TIMEPHASECIRCLETIME,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       ROUND(AVG(T.ACTUALINTERVAL), 2) AS ACTUALINTERVAL,
                       ROUND(AVG(T.ACTUALCIRCLETIME), 2) AS ACTUALCIRCLETIME,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       ROUND(AVG(T.RUNCIRCLETIME), 2) AS RUNCIRCLETIME,
                       ROUND(AVG(T.ROUTERUNTIME), 2) AS ROUTERUNTIME,
                       ROUND(AVG(T.ROUTESTOPTIME), 2) AS ROUTESTOPTIME,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       ROUND(SUM(T.TIMEPHASEENDTIME - T.TIMEPHASESTARTTIME) * 24,
                             2) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE2 T
                 WHERE T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日
                   AND T.STORAGEORGTYPE = '4' --线路
                 GROUP BY T.ORGID,
                          T.ROUTEID,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织月结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE2
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE, --记录日期
         TIMEPHASETIME --峰段时间
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               NULL AS ACTUALINTERVAL,
               NULL AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE,
               NULL AS STATIONKEEPBACKRATE,
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               NULL AS RUNCIRCLETIME,
               NULL AS ROUTERUNTIME,
               NULL AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED,
               NULL AS BUSRUNSPEED,
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE,
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               NULL AS ROUTECODE,
               '2' AS DATASAVELEVEL,
               T.STORAGEORGTYPE AS STORAGEORGTYPE,
               SYSDATE AS RECDATE,
               TIMEPHASETIME AS TIMEPHASETIME
          FROM MCORGINFOGS ORG,
               (SELECT T.ORGID AS ORGID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       T.STORAGEORGTYPE AS STORAGEORGTYPE,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       ROUND(SUM(TIMEPHASETIME) * 24, 2) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE2 T
                 WHERE T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日
                   AND T.STORAGEORGTYPE != '4'
                 GROUP BY T.ORGID,
                          T.STORAGEORGTYPE,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_ROUTETIMEPHASE2_PHASE',
                '按指标峰段结存-月结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE2_PHASE',
                        '按指标峰段结存-月结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
    --年结
    BEGIN
      WRITE_LOG('TREATE_ROUTETIMEPHASE2_PHASE',
                '按峰段指标结存-年结',
                V_DATE_IN,
                '开始');
      --删除年结数据
      DELETE FROM JZ_TIMEPHASEDATASTORAGE2
       WHERE JZDATE < V_END_YEAR
         AND JZDATE >= V_BEGIN_YEAR
         AND DATASAVELEVEL = '1';
      --线路年结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE2
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT, --实际班次数
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均周转时间（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE, --记录日期
         TIMEPHASETIME --峰段时间
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ORGID AS ORGID,
               T.ROUTEID AS ROUTEID,
               ROU.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.ACTUALINTERVAL AS ACTUALINTERVAL,
               T.ACTUALCIRCLETIME AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE, --车距合格率
               NULL AS STATIONKEEPBACKRATE, --车站平均留客率
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               T.RUNCIRCLETIME AS RUNCIRCLETIME,
               T.ROUTERUNTIME AS ROUTERUNTIME,
               T.ROUTESTOPTIME AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED, --运送速度
               NULL AS BUSRUNSPEED, --运营速度
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE, --大站准点率
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               ROU.ROUTECODE AS ROUTECODE,
               '1' AS DATASAVELEVEL,
               '4' AS STORAGEORGTYPE,
               SYSDATE AS RECDATE,
               TIMEPHASETIME AS TIMEPHASETIME
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       AVG(T.TIMEPHASEINTERVAL) AS TIMEPHASEINTERVAL,
                       AVG(T.TIMEPHASECIRCLETIME) AS TIMEPHASECIRCLETIME,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       AVG(T.ACTUALINTERVAL) AS ACTUALINTERVAL,
                       AVG(T.ACTUALCIRCLETIME) AS ACTUALCIRCLETIME,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       AVG(T.RUNCIRCLETIME) AS RUNCIRCLETIME,
                       AVG(T.ROUTERUNTIME) AS ROUTERUNTIME,
                       AVG(T.ROUTESTOPTIME) AS ROUTESTOPTIME,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       ROUND(SUM(TIMEPHASETIME) * 24, 2) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE2 T
                 WHERE T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月
                   AND T.STORAGEORGTYPE = '4' --线路
                 GROUP BY T.ORGID,
                          T.ROUTEID,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织年结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE2
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE, --记录日期
         TIMEPHASETIME --峰段时间
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               NULL AS ACTUALINTERVAL,
               NULL AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE,
               NULL AS STATIONKEEPBACKRATE,
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               NULL AS RUNCIRCLETIME,
               NULL AS ROUTERUNTIME,
               NULL AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED,
               NULL AS BUSRUNSPEED,
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE,
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               NULL AS ROUTECODE,
               '1' AS DATASAVELEVEL,
               T.STORAGEORGTYPE AS STORAGEORGTYPE,
               SYSDATE AS RECDATE,
               TIMEPHASETIME AS TIMEPHASETIME
          FROM MCORGINFOGS ORG,
               (SELECT T.ORGID AS ORGID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       T.STORAGEORGTYPE AS STORAGEORGTYPE,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       ROUND(SUM(TIMEPHASETIME) * 24, 2) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE2 T
                 WHERE T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月
                   AND T.STORAGEORGTYPE != '4'
                 GROUP BY T.ORGID,
                          T.STORAGEORGTYPE,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_ROUTETIMEPHASE2_PHASE',
                '按指标峰段结存-年结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE2_PHASE',
                        '按指标峰段结存-月年结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASESTORAGE2                                               *
  *                                                                                      *
  *    功能：按五峰段指标数据结存表                                                      *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASESTORAGE2(V_DATE DATE) AS
    V_ORGID               VARCHAR2(36); --jz_timephasedatastorage.orgid%TYPE; --组织id'
    V_ROUTEID             VARCHAR2(36); --jz_timephasedatastorage.routeid%TYPE; --线路编号';
    V_ROUTENAME           VARCHAR2(36); --jz_timephasedatastorage.routename%TYPE; --线路名称';
    V_ROUTECODE           VARCHAR2(36); --jz_timephasedatastorage.routecode%TYPE; --线路编码';
    V_TIMEPHASETYPE       VARCHAR2(2); --jz_timephasedatastorage.timephasetype%TYPE; --峰段类型
    V_TIMEPHASEVALUE      VARCHAR2(40); --jz_timephasedatastorage.timephasevalue%TYPE; --峰段名称
    V_STARTTIME           NUMBER; --峰段开始时间(相对0点的小时数)
    V_ENDTIME             NUMBER; --峰段结束时间(相对0点的小时数)
    V_TIMEPHASESTARTTIME  DATE; --峰段开始时间
    V_TIMEPHASEENDTIME    DATE; --峰段结束时间  
    V_TIMEPHASEINTERVAL   NUMBER; -- jz_timephasedatastorage.timephaseinterval%TYPE; --峰段发车间隔（分钟）
    V_TIMEPHASECIRCLETIME NUMBER; --jz_timephasedatastorage.timephasecircletime%TYPE; --峰段周转时间（分钟）
    V_STDSEQS             NUMBER; --jz_timephasedatastorage.stdseqs%TYPE; --标准车次数
    V_LOADPSGCAPABILITY   NUMBER; --jz_timephasedatastorage.loadpsgcapability%TYPE; --载客能力';
    V_GPSMILES            NUMBER; --jz_timephasedatastorage.gpsmiles%TYPE; --gps里程';
    V_RUNMILES            NUMBER; --jz_timephasedatastorage.runmiles%TYPE; --营运里程';
    V_RUNTIMES            NUMBER;
    V_UNRUNMILES          NUMBER; --jz_timephasedatastorage.unrunmiles%TYPE; --非营运里程';
    V_ACTUALSEQCOUNT      NUMBER; --jz_timephasedatastorage.actualseqcount%TYPE; --实际班次数';
    V_FULLSEQCOUNT        NUMBER;
    V_ACTUALINTERVAL      NUMBER; --jz_timephasedatastorage.actualinterval%TYPE; --实际平均发车间隔（分钟）
    V_ACTUALCIRCLETIME    NUMBER; --jz_timephasedatastorage.actualcircletime%TYPE; --实际平均周转时间（分钟）
    V_DEVOTIONBUSCOUNT    NUMBER; --jz_timephasedatastorage.devotionbuscount%TYPE; --投入车辆数';
    V_DEVOTIONEMPCOUNT    NUMBER; --jz_timephasedatastorage.devotionempcount%TYPE; --投入驾驶员数';
    V_BUSSENDINTERVALSTD  NUMBER; --jz_timephasedatastorage.bussendintervalstd%TYPE; --发车间隔合格班次数';
    V_PLANSEQMILE         NUMBER; --jz_timephasedatastorage.planseqmile%TYPE; --计划里程数';
    V_PLANSEQCOUNT        NUMBER; --jz_timephasedatastorage.planseqcount%TYPE; --计划班次数';
    V_PLANBUSCOUNT        NUMBER; --jz_timephasedatastorage.planbuscount%TYPE; --计划投入车辆数';
    V_PLANEMPCOUNT        NUMBER; --jz_timephasedatastorage.planempcount%TYPE; --计划投入驾驶员数';
    V_OVERSPEEDCOUNT      NUMBER; --jz_timephasedatastorage.overspeedcount%TYPE; --超速次数';
    V_UNRULESTOPCOUNT     NUMBER; --jz_timephasedatastorage.unrulestopcount%TYPE; --不规范停车次数';
    V_MDLOPENDOORCOUNT    NUMBER; --jz_timephasedatastorage.mdlopendoorcount%TYPE; --中途开关门次数';
    V_PSGCOUNT            NUMBER; --jz_timephasedatastorage.psgcount%TYPE;--客运量
    V_INTERVAL            NUMBER; --发车间隔
    V_SUMBUSCOUNT         NUMBER;
    V_ONTIMECOUNT         NUMBER; --准点车次数
    V_DATASAVELEVEL       CHAR(1);
    V_DATE_IN             DATE := TRUNC(V_DATE);
    --五峰段
    CURSOR CUR_PHASE(DATE_IN DATE) IS
      SELECT ROUTE.ORGID,
             ROUTE.ROUTEID,
             ROUTE.ROUTENAME,
             ROUTE.ROUTECODE,
             NVL(T.TIMEPHASEKEY, '3') TIMEPHASEKEY,
             NVL(T.TIMEPHASENAME, '平峰') TIMEPHASENAME,
             TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
             TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
             ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
             ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME,
             T.TIMEINTERVAL
        FROM MCROUTEINFOGS ROUTE, MCROUTETIMEPHASEGS2 T
       ORDER BY ROUTE.ROUTEID, T.STARTTIME;
    --线路峰段(注意：如果没有配置峰段，则全天按平峰计算)
    CURSOR CUR_ROUTE_MIN(ROUTEID_IN VARCHAR2, DATE_IN DATE) IS
      SELECT *
        FROM (SELECT ROUTE.ORGID,
                     ROUTE.ROUTEID,
                     ROUTE.ROUTENAME,
                     ROUTE.ROUTECODE,
                     NVL(T.TIMEPHASEKEY, '2') TIMEPHASEKEY,
                     NVL(T.TIMEPHASENAME, '平峰') TIMEPHASENAME,
                     TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
                     TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
                     ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
                     ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME,
                     NVL(T.TIMEPHASEINTERVAL, 0) TIMEPHASEINTERVAL,
                     NVL(T.TIMEPHASECIRCLETIME, 0) TIMEPHASECIRCLETIME,
                     NVL(T.PLANSEQS, 0) PLANSEQS
                FROM MCROUTEINFOGS ROUTE,
                     (SELECT *
                        FROM MCROUTETIMEPHASEGS T
                       WHERE T.BEGINDATE <= DATE_IN
                         AND T.ENDDATE >= DATE_IN
                         AND T.BEGINWEEK <=
                             (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)
                         AND T.ENDWEEK >=
                             (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)) T
               WHERE ROUTE.ROUTEID = T.ROUTEID(+)
                 AND ROUTE.ROUTEID = ROUTEID_IN
               ORDER BY T.ROUTEID, T.STARTTIME)
       WHERE ROWNUM < 2;
    CURSOR CUR_ROUTE_MAX(ROUTEID_IN VARCHAR2, DATE_IN DATE) IS
      SELECT *
        FROM (SELECT ROUTE.ORGID,
                     ROUTE.ROUTEID,
                     ROUTE.ROUTENAME,
                     ROUTE.ROUTECODE,
                     NVL(T.TIMEPHASEKEY, '2') TIMEPHASEKEY,
                     NVL(T.TIMEPHASENAME, '平峰') TIMEPHASENAME,
                     TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
                     TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
                     ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
                     ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME,
                     NVL(T.TIMEPHASEINTERVAL, 0) TIMEPHASEINTERVAL,
                     NVL(T.TIMEPHASECIRCLETIME, 0) TIMEPHASECIRCLETIME,
                     NVL(T.PLANSEQS, 0) PLANSEQS
                FROM MCROUTEINFOGS ROUTE,
                     (SELECT *
                        FROM MCROUTETIMEPHASEGS T
                       WHERE T.BEGINDATE <= DATE_IN
                         AND T.ENDDATE >= DATE_IN
                         AND T.BEGINWEEK <=
                             (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)
                         AND T.ENDWEEK >=
                             (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)) T
               WHERE ROUTE.ROUTEID = T.ROUTEID(+)
                 AND ROUTE.ROUTEID = ROUTEID_IN
               ORDER BY T.ROUTEID, T.STARTTIME DESC)
       WHERE ROWNUM < 2;
    --实际车次
    CURSOR CUR_ACTUALSEQ(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS ACTUALSEQCOUNT, --实际班次数'
             SUM(T.GPSMILE) AS GPSMILES, --gps里程';
             SUM(T.GPSMILE *
                 (NVL(BUS.SEATCOUNT, 0) + NVL(BUS.STANDCOUNT, 0))) AS LOADPSGCAPABILITY, --载客能力';
             COUNT(DISTINCT T.BUSID) AS DEVOTIONBUSCOUNT, --投入车辆数';
             COUNT(DISTINCT T.DRIVERID) AS DEVOTIONEMPCOUNT, --投入驾驶员数';
             ROUND(SUM((T.ARRIVETIME - T.LEAVETIME) * 24 * 60) /
                   NVL(COUNT(*), 0),
                   2) AS ACTUALCIRCLETIME --实际平均周转时间（分钟）
        FROM BZ_BUSRUNRECORDLDTEMP1 T, MCBUSINFOGS BUS
       WHERE T.BUSID = BUS.BUSID
         AND T.ROUTEID = ROUTEID_IN
         AND T.RUNDATADATE = DATE_IN
         AND T.RECTYPE = '1'
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME <= TIMEPHASEENDTIME_IN;
    --计划车次
    CURSOR CUR_PLANSEQ(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS PLANSEQCOUNT, --计划班次数';
             SUM(T.MILENUM) AS PLANSEQMILE, --计划里程数';
             COUNT(DISTINCT T.BUSID) AS PLANBUSCOUNT, --计划投入车辆数';
             COUNT(DISTINCT T.DRIVERID) AS PLANEMPCOUNT --计划投入驾驶员数';
        FROM BZ_BUSDISPLANLD T
       WHERE T.ROUTEID = ROUTEID_IN
         AND T.RUNDATE = DATE_IN
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME <= TIMEPHASEENDTIME_IN;
    --准点班次数
    CURSOR CUR_ONTIME(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT T.ROUTEID,
             (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS ONTIME
        FROM BZ_BUSRUNRECORDLDTEMP1 T
       WHERE T.ROUTEID = ROUTEID_IN
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME < TIMEPHASEENDTIME_IN
         AND T.RUNDATADATE = DATE_IN
         AND T.RECTYPE = '1'
         AND (T.ISLATE = '0' OR T.ISLATE = '3' OR T.ISLATE IS NULL)
       GROUP BY T.ROUTEID;
    V_MAXPHASEKEY VARCHAR2(10);
    V_MINPHASEKEY VARCHAR2(10);
  BEGIN
    WRITE_LOG('TREATE_ROUTETIMEPHASESTORAGE2',
              '按峰段指标数据结存表',
              V_DATE,
              '开始');
    --删除全部数据
    DELETE JZ_TIMEPHASEDATASTORAGE2 WHERE JZDATE = V_DATE_IN;
    COMMIT;
    FOR CUR IN (SELECT MAX(T.TIMEPHASEKEY) MAXPHASEKEY,
                       MIN(T.TIMEPHASEKEY) MINPHASEKEY
                  FROM MCROUTETIMEPHASEGS2 T) LOOP
      V_MINPHASEKEY := CUR.MINPHASEKEY;
      V_MAXPHASEKEY := CUR.MAXPHASEKEY;
    END LOOP;
    FOR CUR_R IN CUR_PHASE(V_DATE_IN) LOOP
      BEGIN
        V_DATASAVELEVEL       := '3'; ---日结      
        V_ORGID               := CUR_R.ORGID; --组织id'
        V_ROUTEID             := CUR_R.ROUTEID; --线路编号';
        V_ROUTENAME           := CUR_R.ROUTENAME; --线路名称';
        V_ROUTECODE           := CUR_R.ROUTECODE; --线路编码
        V_TIMEPHASETYPE       := CUR_R.TIMEPHASEKEY; --峰段类型
        V_TIMEPHASEVALUE      := CUR_R.TIMEPHASENAME; --峰段名称
        V_TIMEPHASESTARTTIME  := CUR_R.TIMEPHASESTARTTIME; --峰段开始时间
        V_TIMEPHASEENDTIME    := CUR_R.TIMEPHASEENDTIME; --峰段结束时间
        V_STARTTIME           := CUR_R.STARTTIME; --峰段开始时间(相对0点的小时数)
        V_ENDTIME             := CUR_R.ENDTIME; --峰段结束时间(相对0点的小时数)      
        V_TIMEPHASEINTERVAL   := CUR_R.TIMEINTERVAL; --峰段发车间隔（分钟）
        V_TIMEPHASECIRCLETIME := 0; --峰段周转时间（分钟）
        V_STDSEQS             := 0; --标准车次数
      
        --初始化参数，否则会使用上次数据
        V_PLANSEQMILE        := 0;
        V_PLANSEQCOUNT       := 0; --计划班次数';
        V_PLANBUSCOUNT       := 0; --计划投入车辆数';
        V_PLANEMPCOUNT       := 0; --计划投入驾驶员数';
        V_LOADPSGCAPABILITY  := 0; --载客能力';
        V_ACTUALSEQCOUNT     := 0; --实际班次数';
        V_FULLSEQCOUNT       := 0;
        V_GPSMILES           := 0; --gps里程';
        V_RUNMILES           := 0; --营运里程';
        V_RUNTIMES           := 0;
        V_UNRUNMILES         := 0; --非营运里程';
        V_DEVOTIONBUSCOUNT   := 0; --投入车辆数';
        V_DEVOTIONEMPCOUNT   := 0; --投入驾驶员数';
        V_ACTUALINTERVAL     := 0; --实际平均发车间隔（分钟）
        V_ACTUALCIRCLETIME   := 0; --实际平均周转时间（分钟）
        V_BUSSENDINTERVALSTD := 0; --发车间隔合格班次数
        V_OVERSPEEDCOUNT     := 0; --超速次数';
        V_UNRULESTOPCOUNT    := 0; --不规范停车次数';
        V_MDLOPENDOORCOUNT   := 0; --中途开关门次数';
        V_PSGCOUNT           := 0;
        V_SUMBUSCOUNT        := 0;
        V_ONTIMECOUNT        := 0;
      
        FOR CUR IN CUR_ACTUALSEQ(V_ROUTEID,
                                 V_DATE_IN,
                                 V_TIMEPHASESTARTTIME,
                                 V_TIMEPHASEENDTIME) LOOP
          V_ACTUALSEQCOUNT    := CUR.ACTUALSEQCOUNT;
          V_FULLSEQCOUNT      := CUR.ACTUALSEQCOUNT;
          V_GPSMILES          := CUR.GPSMILES;
          V_LOADPSGCAPABILITY := CUR.LOADPSGCAPABILITY;
          V_DEVOTIONBUSCOUNT  := CUR.DEVOTIONBUSCOUNT;
          V_DEVOTIONEMPCOUNT  := CUR.DEVOTIONEMPCOUNT;
          V_ACTUALCIRCLETIME  := CUR.ACTUALCIRCLETIME;
        END LOOP;
      
        FOR CUR IN (SELECT SUM(T.MILENUM) AS RUNMILES,
                           ROUND(SUM((T.ARRIVETIME - T.LEAVETIME) * 24), 2) AS RUNTIMES --营运里程';
                      FROM BZ_BUSRUNRECORDLDTEMP1 T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.RUNDATADATE = V_DATE_IN
                       AND T.RECTYPE = '1'
                       AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                       AND T.LEAVETIME <= V_TIMEPHASEENDTIME) LOOP
          V_RUNMILES := CUR.RUNMILES;
          V_RUNTIMES := CUR.RUNTIMES;
        END LOOP;
      
        FOR CUR IN (SELECT SUM(T.MILENUM) AS UNRUNMILES --非营运里程';
                      FROM BZ_BUSRUNRECORDLDTEMP1 T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.RUNDATADATE = V_DATE_IN
                       AND T.RECTYPE = '2'
                       AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                       AND T.LEAVETIME <= V_TIMEPHASEENDTIME) LOOP
          V_UNRUNMILES := CUR.UNRUNMILES;
        END LOOP;
      
        --需要考虑上下行线路
        FOR CUR IN (SELECT ROUND(SUM(SUMTIME) / (CASE
                                                   WHEN (SUM(SUMCOUNT) < 1) THEN
                                                    1
                                                   ELSE
                                                    SUM(SUMCOUNT)
                                                 END),
                                 2) AS ACTUALINTERVAL --实际平均发车间隔（分钟）
                      FROM (SELECT T.ROUTEID,
                                   T.SEGMENTID,
                                   (MAX(T.LEAVETIME) - MIN(T.LEAVETIME)) * 24 * 60 SUMTIME,
                                   (CASE
                                     WHEN ((COUNT(*) - 1) < 1) THEN
                                      1
                                     ELSE
                                      (COUNT(*) - 1)
                                   END) SUMCOUNT
                              FROM BZ_BUSRUNRECORDLDTEMP1 T
                             WHERE T.ROUTEID = V_ROUTEID
                               AND T.RUNDATADATE = V_DATE_IN
                               AND T.RECTYPE = '1'
                               AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                               AND T.LEAVETIME <= V_TIMEPHASEENDTIME
                             GROUP BY T.ROUTEID, T.SEGMENTID)) LOOP
          V_ACTUALINTERVAL := CUR.ACTUALINTERVAL;
        END LOOP;
      
        FOR CUR IN CUR_PLANSEQ(V_ROUTEID,
                               V_DATE_IN,
                               V_TIMEPHASESTARTTIME,
                               V_TIMEPHASEENDTIME) LOOP
          V_PLANSEQCOUNT := CUR.PLANSEQCOUNT;
          V_PLANSEQMILE  := CUR.PLANSEQMILE;
          V_PLANBUSCOUNT := CUR.PLANBUSCOUNT;
          V_PLANEMPCOUNT := CUR.PLANEMPCOUNT;
        END LOOP;
      
        --标准峰发车间隔为空，取实际平均发车间隔
        IF (V_TIMEPHASEINTERVAL IS NULL) THEN
          V_INTERVAL := V_ACTUALINTERVAL;
        ELSE
          V_INTERVAL := V_TIMEPHASEINTERVAL;
        END IF;
        IF (V_INTERVAL IS NOT NULL) THEN
          FOR CUR IN (SELECT (CASE
                               WHEN G_SHIFTCALC_STD = '1' THEN
                                COUNT(*)
                               ELSE
                                SUM(SEQNUM)
                             END) AS BUSSENDINTERVALSTD
                        FROM (SELECT T.ROUTEID,
                                     T.SUBROUTEID,
                                     T.SEGMENTID,
                                     T.SEQNUM,
                                     (LAG(T.LEAVETIME)
                                      OVER(PARTITION BY T.ROUTEID,
                                           T.SUBROUTEID,
                                           T.SEGMENTID ORDER BY T.LEAVETIME)) PRELEAVETIME,
                                     T.LEAVETIME,
                                     NVL((T.LEAVETIME -
                                         (LAG(T.LEAVETIME)
                                          OVER(PARTITION BY T.ROUTEID,
                                                T.SUBROUTEID,
                                                T.SEGMENTID ORDER BY
                                                T.LEAVETIME))) * 24 * 60,
                                         V_INTERVAL) DELTA --考虑第一趟为标准发车
                                FROM BZ_BUSRUNRECORDLDTEMP1 T
                               WHERE T.ROUTEID = V_ROUTEID
                                 AND T.RUNDATADATE = V_DATE_IN)
                       WHERE LEAVETIME >= V_TIMEPHASESTARTTIME
                         AND LEAVETIME <= V_TIMEPHASEENDTIME
                            --AND DELTA > V_INTERVAL - G_SENDBUS_INTERVAL
                         AND DELTA <= V_INTERVAL) LOOP
            V_BUSSENDINTERVALSTD := CUR.BUSSENDINTERVALSTD;
          END LOOP;
        END IF;
      
        FOR CUR IN (SELECT T.BUSCOUNT
                      FROM JZ_ROUTEBASICDATAPHASESTORAGE T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND JZDATE >= TO_DATE(TO_CHAR(V_DATE_IN, 'yyyyMM') || '01',
                                             'yyyyMMdd')
                       AND JZDATE < TO_DATE(TO_CHAR(ADD_MONTHS(V_DATE_IN, 1),
                                                    'yyyyMM') || '01',
                                            'yyyyMMdd')) LOOP
          V_SUMBUSCOUNT := CUR.BUSCOUNT;
        END LOOP;
      
        --准点车次数
        FOR CUR IN CUR_ONTIME(V_ROUTEID,
                              V_DATE_IN,
                              V_TIMEPHASESTARTTIME,
                              V_TIMEPHASEENDTIME) LOOP
          V_ONTIMECOUNT := CUR.ONTIME;
        END LOOP;
      
        IF (V_TIMEPHASETYPE = V_MINPHASEKEY) THEN
          --早高峰
          FOR CUR_P IN CUR_ROUTE_MIN(V_ROUTEID, V_DATE_IN) LOOP
            V_STARTTIME := CUR_P.STARTTIME; --峰段开始时间(相对0点的小时数)
          END LOOP;
        END IF;
      
        IF (V_TIMEPHASETYPE = V_MAXPHASEKEY) THEN
          --晚平峰
          FOR CUR_P IN CUR_ROUTE_MAX(V_ROUTEID, V_DATE_IN) LOOP
            V_ENDTIME := CUR_P.ENDTIME; --峰段结束时间(相对0点的小时数)
          END LOOP;
        END IF;
      
        INSERT INTO JZ_TIMEPHASEDATASTORAGE2
          (RECORDID,
           ROUTEID,
           ROUTENAME,
           ROUTECODE,
           JZDATE,
           TIMEPHASETYPE,
           TIMEPHASEVALUE,
           TIMEPHASESTARTTIME,
           TIMEPHASEENDTIME,
           TIMEPHASEINTERVAL,
           TIMEPHASECIRCLETIME,
           STDSEQS,
           ORGID,
           PLANSEQMILE,
           PLANSEQCOUNT,
           PLANBUSCOUNT,
           PLANEMPCOUNT,
           LOADPSGCAPABILITY,
           ACTUALSEQCOUNT,
           FULLSEQCOUNT,
           GPSMILES,
           RUNMILES,
           RUNTIMES,
           UNRUNMILES,
           DEVOTIONBUSCOUNT,
           DEVOTIONEMPCOUNT,
           ACTUALINTERVAL,
           ACTUALCIRCLETIME,
           BUSSENDINTERVALSTD,
           OVERSPEEDCOUNT,
           UNRULESTOPCOUNT,
           MDLOPENDOORCOUNT,
           PSGCOUNT,
           SUMBUSCOUNT,
           ONTIMESEQCOUNT,
           DATASAVELEVEL,
           STORAGEORGTYPE,
           TIMEPHASETIME)
        VALUES
          (S_ROUTESTORAGE.NEXTVAL,
           V_ROUTEID, --线路编号';
           V_ROUTENAME, --线路名称';
           V_ROUTECODE,
           V_DATE_IN,
           V_TIMEPHASETYPE, --峰段类型
           V_TIMEPHASEVALUE, --峰段名称
           V_STARTTIME, --峰段开始时间(相对0点的小时数)
           V_ENDTIME, --峰段结束时间(相对0点的小时数)
           V_TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
           V_TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
           V_STDSEQS, --标准车次数           
           V_ORGID, --组织id'           
           V_PLANSEQMILE, --计划里程数';
           V_PLANSEQCOUNT, --计划班次数';
           V_PLANBUSCOUNT, --计划投入车辆数';
           V_PLANEMPCOUNT, --计划投入驾驶员数';           
           V_LOADPSGCAPABILITY, --载客能力';
           V_ACTUALSEQCOUNT, --实际班次数';
           V_FULLSEQCOUNT, --实际班次数';
           V_GPSMILES, --gps里程';
           V_RUNMILES, --营运里程';
           V_RUNTIMES,
           V_UNRUNMILES, --非营运里程';
           V_DEVOTIONBUSCOUNT, --投入车辆数';
           V_DEVOTIONEMPCOUNT, --投入驾驶员数';
           V_ACTUALINTERVAL, --实际平均发车间隔（分钟）
           V_ACTUALCIRCLETIME, --实际平均周转时间（分钟）
           V_BUSSENDINTERVALSTD, --发车间隔合格班次数           
           V_OVERSPEEDCOUNT, --超速次数';
           V_UNRULESTOPCOUNT, --不规范停车次数';
           V_MDLOPENDOORCOUNT, --中途开关门次数';           
           V_PSGCOUNT,
           V_SUMBUSCOUNT,
           V_ONTIMECOUNT,
           V_DATASAVELEVEL,
           '4',
           ROUND((V_ENDTIME - V_STARTTIME) * 24, 2));
        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('TREATE_ROUTETIMEPHASESTORAGE2',
                          '按峰段指标数据结存表',
                          V_DATE,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP
    
    COMMIT; --提交数据
    TREATE_ROUTETIMEPHASE2_ORG(V_DATE_IN);
    TREATE_ROUTETIMEPHASE2_PHASE(V_DATE_IN);
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTETIMEPHASESTORAGE2',
                      '按峰段指标数据结存表',
                      V_DATE,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASE_ORG                                                *
  *                                                                                      *
  *    功能：按峰段指标数据结存表(组织)                                                          *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-04-11                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASE_ORG(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREATE_ROUTETIMEPHASE_ORG',
              '按峰段指标结存-组织',
              V_DATE_IN,
              '开始');
    --删除日结数据
    DELETE FROM JZ_TIMEPHASEDATASTORAGE
     WHERE JZDATE = V_DATE_IN
       AND STORAGEORGTYPE != '4'
       AND DATASAVELEVEL = 3;
    --插入日结数据
    INSERT INTO JZ_TIMEPHASEDATASTORAGE
      (RECORDID, --记录编号
       ORGID, --组织编号
       ROUTEID, --线路编号
       ROUTENAME, --线路名称
       JZDATE, --结存日期
       TIMEPHASETYPE, --峰段类型
       TIMEPHASEVALUE, --峰段名称
       TIMEPHASESTARTTIME, --峰段开始时间
       TIMEPHASEENDTIME, --峰段结束时间
       TIMEPHASEINTERVAL, --峰段发车间隔
       TIMEPHASECIRCLETIME, --峰段周转时间
       TIMEPHASETIME, --峰段时间(小时)
       STDSEQS, --标准车次数
       LOADPSGCAPABILITY, --载客能力
       PLANSEQMILE, --计划里程
       GPSMILES, --GPS里程
       RUNMILES, --营运里程
       RUNTIMES,
       UNRUNMILES, --非营运里程
       DEVOTIONBUSCOUNT, --投入车辆数
       DEVOTIONEMPCOUNT, --投入人员数
       PLANBUSCOUNT, --计划投入车辆数
       PLANEMPCOUNT, --计划投入驾驶员数
       PSGCOUNT, --客运量
       PLANSEQCOUNT, --计划班次数
       ACTUALSEQCOUNT, --实际班次数
       FULLSEQCOUNT, --实际班次数
       ACTUALINTERVAL, --实际平均发车间隔（分钟）
       ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
       BUSSENDINTERVALSTD, --发车间隔合格班次数
       BUSDISTANCERATE, --车距合格率
       STATIONKEEPBACKRATE, --车站平均留客率
       OVERSPEEDCOUNT, --超速次数
       UNRULESTOPCOUNT, --不规范停车次数
       MDLOPENDOORCOUNT, --中途开关门次数
       RUNCIRCLETIME, --运营周期时间（分钟）
       ROUTERUNTIME, --线路行驶时间（分钟）
       ROUTESTOPTIME, --线路停站时间（分钟）
       BUSSENDSPEED, --运营车速（公里/小时）
       BUSRUNSPEED, --运送车速（公里/小时）
       ONTIMESEQCOUNT, --准点车次数
       BIGSTATIONONTIMERATE, --大站准点率
       SUMBUSCOUNT, --总配车数
       ROUTECODE, --线路编码
       DATASAVELEVEL, --数据结存级别
       STORAGEORGTYPE, --组织结存级别
       RECDATE --记录日期
       )
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             ORG.ORGID AS ORGID,
             NULL AS ROUTEID,
             NULL AS ROUTENAME,
             V_DATE_IN AS JZDATE,
             T.TIMEPHASETYPE AS TIMEPHASETYPE,
             T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
             NULL AS TIMEPHASESTARTTIME,
             NULL AS TIMEPHASEENDTIME,
             NULL AS TIMEPHASEINTERVAL,
             NULL AS TIMEPHASECIRCLETIME,
             T.TIMEPHASETIME AS TIMEPHASETIME,
             T.STDSEQS AS STDSEQS,
             T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
             T.PLANSEQMILE AS PLANSEQMILE,
             T.GPSMILES AS GPSMILES,
             T.RUNMILES AS RUNMILES,
             T.RUNTIMES AS RUNTIMES,
             T.UNRUNMILES AS UNRUNMILES,
             T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
             T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
             T.PLANBUSCOUNT AS PLANBUSCOUNT,
             T.PLANEMPCOUNT AS PLANEMPCOUNT,
             T.PSGCOUNT AS PSGCOUNT,
             T.PLANSEQCOUNT AS PLANSEQCOUNT,
             T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
             T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
             NULL AS ACTUALINTERVAL,
             NULL AS ACTUALCIRCLETIME,
             T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
             NULL AS BUSDISTANCERATE,
             NULL AS STATIONKEEPBACKRATE,
             T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
             T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
             T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
             NULL AS RUNCIRCLETIME,
             NULL AS ROUTERUNTIME,
             NULL AS ROUTESTOPTIME,
             NULL AS BUNSENDSPEED,
             NULL AS BUSRUNSPEED,
             T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
             NULL AS BIGSTATIONONTIMERATE,
             T.SUMBUSCOUNT AS SUMBUSCOUNT,
             NULL AS ROUTECODE,
             '3' AS DATASAVELEVEL,
             ORG.ORGGRADE AS STORAGEORGTYPE,
             SYSDATE AS RECDATE
        FROM MCORGINFOGS ORG,
             (SELECT O.PARENTORGID AS ORGID,
                     T.TIMEPHASETYPE AS TIMEPHASETYPE,
                     T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                     SUM(T.STDSEQS) AS STDSEQS,
                     SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                     SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                     SUM(T.GPSMILES) AS GPSMILES,
                     SUM(T.RUNMILES) AS RUNMILES,
                     SUM(T.RUNTIMES) AS RUNTIMES,
                     SUM(T.UNRUNMILES) AS UNRUNMILES,
                     SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                     SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                     SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                     SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                     SUM(T.PSGCOUNT) AS PSGCOUNT,
                     SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                     SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                     SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                     SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                     SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                     SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                     SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                     SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                     SUM(T.TIMEPHASETIME) AS TIMEPHASETIME
                FROM JZ_TIMEPHASEDATASTORAGE T, JZ_ORGGRADETREE O
               WHERE T.ORGID = O.ORGID
                 AND T.JZDATE = V_DATE_IN
                 AND T.DATASAVELEVEL = '3' --日
                 AND T.STORAGEORGTYPE = '4' --线路
               GROUP BY O.PARENTORGID, T.TIMEPHASETYPE, T.TIMEPHASEVALUE) T
       WHERE T.ORGID = ORG.ORGID(+)
         AND ORG.ISACTIVE = '1';
    COMMIT;
    WRITE_LOG('TREATE_ROUTETIMEPHASE_ORG',
              '按峰段指标结存-组织',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE_ORG',
                      '按峰段指标结存-组织',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;

  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASE_PHASE                                                *
  *                                                                                      *
  *    功能：按峰段指标数据结存表（峰段）                                                          *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-04-11                                                                 *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASE_PHASE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
    V_BEGIN_YEAR  DATE;
    V_END_YEAR    DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    V_BEGIN_YEAR  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                             'YYYY-MM-DD');
    V_END_YEAR    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                        '-01-01',
                                        'YYYY-MM-DD'),
                                12);
    --月结
    BEGIN
      WRITE_LOG('TREATE_ROUTETIMEPHASE_PHASE',
                '按峰段指标结存-月结',
                V_DATE_IN,
                '开始');
      --删除月结数据
      DELETE FROM JZ_TIMEPHASEDATASTORAGE
       WHERE JZDATE < V_END_MONTH
         AND JZDATE >= V_BEGIN_MONTH
         AND DATASAVELEVEL = '2';
      --线路月结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         TIMEPHASETIME, ----
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均周转时间（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE --记录日期
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ORGID AS ORGID,
               T.ROUTEID AS ROUTEID,
               ROU.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               T.TIMEPHASEINTERVAL AS TIMEPHASEINTERVAL,
               T.TIMEPHASECIRCLETIME AS TIMEPHASECIRCLETIME,
               T.TIMEPHASETIME AS TIMEPHASETIME, ----
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.ACTUALINTERVAL AS ACTUALINTERVAL,
               T.ACTUALCIRCLETIME AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE, --车距合格率
               NULL AS STATIONKEEPBACKRATE, --车站平均留客率
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               T.RUNCIRCLETIME AS RUNCIRCLETIME,
               T.ROUTERUNTIME AS ROUTERUNTIME,
               T.ROUTESTOPTIME AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED, --运送速度
               NULL AS BUSRUNSPEED, --运营速度
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE, --大站准点率
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               ROU.ROUTECODE AS ROUTECODE,
               '2' AS DATASAVELEVEL,
               '4' AS STORAGEORGTYPE,
               SYSDATE AS RECDATE
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       AVG(T.TIMEPHASEINTERVAL) AS TIMEPHASEINTERVAL,
                       AVG(T.TIMEPHASECIRCLETIME) AS TIMEPHASECIRCLETIME,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       AVG(T.ACTUALINTERVAL) AS ACTUALINTERVAL,
                       AVG(T.ACTUALCIRCLETIME) AS ACTUALCIRCLETIME,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       AVG(T.RUNCIRCLETIME) AS RUNCIRCLETIME,
                       AVG(T.ROUTERUNTIME) AS ROUTERUNTIME,
                       AVG(T.ROUTESTOPTIME) AS ROUTESTOPTIME,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       SUM(T.TIMEPHASETIME) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE T
                 WHERE T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日
                   AND T.STORAGEORGTYPE = '4' --线路
                 GROUP BY T.ORGID,
                          T.ROUTEID,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织月结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         TIMEPHASETIME, ----
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE --记录日期
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.TIMEPHASETIME AS TIMEPHASETIME,
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               NULL AS ACTUALINTERVAL,
               NULL AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE,
               NULL AS STATIONKEEPBACKRATE,
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               NULL AS RUNCIRCLETIME,
               NULL AS ROUTERUNTIME,
               NULL AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED,
               NULL AS BUSRUNSPEED,
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE,
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               NULL AS ROUTECODE,
               '2' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE,
               SYSDATE AS RECDATE
          FROM MCORGINFOGS ORG,
               (SELECT O.PARENTORGID AS ORGID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       SUM(T.TIMEPHASETIME) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE T, JZ_ORGGRADETREE O
                 WHERE T.ORGID = O.ORGID
                   AND T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日
                   AND T.STORAGEORGTYPE = '4'
                 GROUP BY O.PARENTORGID, T.TIMEPHASETYPE, T.TIMEPHASEVALUE) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_ROUTETIMEPHASE_PHASE',
                '按指标峰段结存-月结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE_PHASE',
                        '按指标峰段结存-月结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
    --年结
    BEGIN
      WRITE_LOG('TREATE_ROUTETIMEPHASE_PHASE',
                '按峰段指标结存-年结',
                V_DATE_IN,
                '开始');
      --删除年结数据
      DELETE FROM JZ_TIMEPHASEDATASTORAGE
       WHERE JZDATE < V_END_YEAR
         AND JZDATE >= V_BEGIN_YEAR
         AND DATASAVELEVEL = '1';
      --线路年结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         TIMEPHASETIME, ----
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均周转时间（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE --记录日期
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               T.ORGID AS ORGID,
               T.ROUTEID AS ROUTEID,
               ROU.ROUTENAME AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               T.TIMEPHASESTARTTIME AS TIMEPHASESTARTTIME,
               T.TIMEPHASEENDTIME AS TIMEPHASEENDTIME,
               T.TIMEPHASEINTERVAL AS TIMEPHASEINTERVAL,
               T.TIMEPHASECIRCLETIME AS TIMEPHASECIRCLETIME,
               T.TIMEPHASETIME AS TIMEPHASETIME, ----
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.ACTUALINTERVAL AS ACTUALINTERVAL,
               T.ACTUALCIRCLETIME AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE, --车距合格率
               NULL AS STATIONKEEPBACKRATE, --车站平均留客率
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               T.RUNCIRCLETIME AS RUNCIRCLETIME,
               T.ROUTERUNTIME AS ROUTERUNTIME,
               T.ROUTESTOPTIME AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED, --运送速度
               NULL AS BUSRUNSPEED, --运营速度
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE, --大站准点率
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               ROU.ROUTECODE AS ROUTECODE,
               '1' AS DATASAVELEVEL,
               '4' AS STORAGEORGTYPE,
               SYSDATE AS RECDATE
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       T.TIMEPHASESTARTTIME AS TIMEPHASESTARTTIME,
                       T.TIMEPHASEENDTIME AS TIMEPHASEENDTIME,
                       AVG(T.TIMEPHASEINTERVAL) AS TIMEPHASEINTERVAL,
                       AVG(T.TIMEPHASECIRCLETIME) AS TIMEPHASECIRCLETIME,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       AVG(T.ACTUALINTERVAL) AS ACTUALINTERVAL,
                       AVG(T.ACTUALCIRCLETIME) AS ACTUALCIRCLETIME,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       AVG(T.RUNCIRCLETIME) AS RUNCIRCLETIME,
                       AVG(T.ROUTERUNTIME) AS ROUTERUNTIME,
                       AVG(T.ROUTESTOPTIME) AS ROUTESTOPTIME,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       SUM(T.TIMEPHASETIME) AS TIMEPHASETIME ---
                  FROM JZ_TIMEPHASEDATASTORAGE T
                 WHERE T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月
                   AND T.STORAGEORGTYPE = '4' --线路
                 GROUP BY T.ORGID,
                          T.ROUTEID,
                          T.TIMEPHASETYPE,
                          T.TIMEPHASEVALUE,
                          T.TIMEPHASESTARTTIME,
                          T.TIMEPHASEENDTIME) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织年结
      INSERT INTO JZ_TIMEPHASEDATASTORAGE
        (RECORDID, --记录编号
         ORGID, --组织编号
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         TIMEPHASETYPE, --峰段类型
         TIMEPHASEVALUE, --峰段名称
         TIMEPHASESTARTTIME, --峰段开始时间
         TIMEPHASEENDTIME, --峰段结束时间
         TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
         TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
         TIMEPHASETIME, ----
         STDSEQS, --标准车次数
         LOADPSGCAPABILITY, --载客能力
         PLANSEQMILE, --计划里程
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         RUNTIMES, --营运里程
         UNRUNMILES, --非营运里程
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入人员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         PSGCOUNT, --客运量
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         ACTUALINTERVAL, --实际平均发车间隔（分钟）
         ACTUALCIRCLETIME, --实际平均发车间隔（分钟）
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         BUSDISTANCERATE, --车距合格率
         STATIONKEEPBACKRATE, --车站平均留客率
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         RUNCIRCLETIME, --运营周期时间（分钟）
         ROUTERUNTIME, --线路行驶时间（分钟）
         ROUTESTOPTIME, --线路停站时间（分钟）
         BUSSENDSPEED, --运营车速（公里/小时）
         BUSRUNSPEED, --运送车速（公里/小时）
         ONTIMESEQCOUNT, --准点车次数
         BIGSTATIONONTIMERATE, --大站准点率
         SUMBUSCOUNT, --总配车数
         ROUTECODE, --线路编码
         DATASAVELEVEL, --数据结存级别
         STORAGEORGTYPE, --组织结存级别
         RECDATE --记录日期
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
               ORG.ORGID AS ORGID,
               NULL AS ROUTEID,
               NULL AS ROUTENAME,
               V_DATE_IN AS JZDATE,
               T.TIMEPHASETYPE AS TIMEPHASETYPE,
               T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
               NULL AS TIMEPHASESTARTTIME,
               NULL AS TIMEPHASEENDTIME,
               NULL AS TIMEPHASEINTERVAL,
               NULL AS TIMEPHASECIRCLETIME,
               T.TIMEPHASETIME AS TIMEPHASETIME, ----
               T.STDSEQS AS STDSEQS,
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY,
               T.PLANSEQMILE AS PLANSEQMILE,
               T.GPSMILES AS GPSMILES,
               T.RUNMILES AS RUNMILES,
               T.RUNTIMES AS RUNTIMES,
               T.UNRUNMILES AS UNRUNMILES,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT,
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT,
               T.PLANBUSCOUNT AS PLANBUSCOUNT,
               T.PLANEMPCOUNT AS PLANEMPCOUNT,
               T.PSGCOUNT AS PSGCOUNT,
               T.PLANSEQCOUNT AS PLANSEQCOUNT,
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT,
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               NULL AS ACTUALINTERVAL,
               NULL AS ACTUALCIRCLETIME,
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD,
               NULL AS BUSDISTANCERATE,
               NULL AS STATIONKEEPBACKRATE,
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT,
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT,
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT,
               NULL AS RUNCIRCLETIME,
               NULL AS ROUTERUNTIME,
               NULL AS ROUTESTOPTIME,
               NULL AS BUNSENDSPEED,
               NULL AS BUSRUNSPEED,
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT,
               NULL AS BIGSTATIONONTIMERATE,
               T.SUMBUSCOUNT AS SUMBUSCOUNT,
               NULL AS ROUTECODE,
               '1' AS DATASAVELEVEL,
               ORG.ORGGRADE AS STORAGEORGTYPE,
               SYSDATE AS RECDATE
          FROM MCORGINFOGS ORG,
               (SELECT O.PARENTORGID AS ORGID,
                       T.TIMEPHASETYPE AS TIMEPHASETYPE,
                       T.TIMEPHASEVALUE AS TIMEPHASEVALUE,
                       SUM(T.STDSEQS) AS STDSEQS,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.RUNTIMES) AS RUNTIMES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.PSGCOUNT) AS PSGCOUNT,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT,
                       SUM(T.TIMEPHASETIME) AS TIMEPHASETIME
                  FROM JZ_TIMEPHASEDATASTORAGE T, JZ_ORGGRADETREE O
                 WHERE T.ORGID = O.ORGID
                   AND T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月
                   AND T.STORAGEORGTYPE = '4'
                 GROUP BY PARENTORGID, T.TIMEPHASETYPE, T.TIMEPHASEVALUE) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREATE_ROUTETIMEPHASE_PHASE',
                '按指标峰段结存-年结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREATE_ROUTETIMEPHASE_PHASE',
                        '按指标峰段结存-月年结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTETIMEPHASESTORAGE                                                *
  *                                                                                      *
  *    功能：按峰段指标数据结存表                                                          *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTETIMEPHASESTORAGE(V_DATE DATE) AS
    V_ORGID               VARCHAR2(36); --jz_timephasedatastorage.orgid%TYPE; --组织id'
    V_ROUTEID             VARCHAR2(36); --jz_timephasedatastorage.routeid%TYPE; --线路编号';
    V_ROUTENAME           VARCHAR2(36); --jz_timephasedatastorage.routename%TYPE; --线路名称';
    V_ROUTECODE           VARCHAR2(36); --jz_timephasedatastorage.routecode%TYPE; --线路编码';
    V_TIMEPHASETYPE       VARCHAR2(2); --jz_timephasedatastorage.timephasetype%TYPE; --峰段类型
    V_TIMEPHASEVALUE      VARCHAR2(40); --jz_timephasedatastorage.timephasevalue%TYPE; --峰段名称
    V_STARTTIME           NUMBER; --峰段开始时间(相对0点的小时数)
    V_ENDTIME             NUMBER; --峰段结束时间(相对0点的小时数)
    V_TIMEPHASESTARTTIME  DATE; --峰段开始时间
    V_TIMEPHASEENDTIME    DATE; --峰段结束时间  
    V_TIMEPHASEINTERVAL   NUMBER; -- jz_timephasedatastorage.timephaseinterval%TYPE; --峰段发车间隔（分钟）
    V_TIMEPHASECIRCLETIME NUMBER; --jz_timephasedatastorage.timephasecircletime%TYPE; --峰段周转时间（分钟）
    V_STDSEQS             NUMBER; --jz_timephasedatastorage.stdseqs%TYPE; --标准车次数  
    V_LOADPSGCAPABILITY   NUMBER; --jz_timephasedatastorage.loadpsgcapability%TYPE; --载客能力';
    V_GPSMILES            NUMBER; --jz_timephasedatastorage.gpsmiles%TYPE; --gps里程';
    V_RUNMILES            NUMBER; --jz_timephasedatastorage.runmiles%TYPE; --营运里程';
    V_UNRUNMILES          NUMBER; --jz_timephasedatastorage.unrunmiles%TYPE; --非营运里程';
    V_RUNTIMES            NUMBER;
    V_ACTUALSEQCOUNT      NUMBER; --jz_timephasedatastorage.actualseqcount%TYPE; --实际班次数';
    V_FULLSEQCOUNT        NUMBER;
    V_ACTUALINTERVAL      NUMBER; --jz_timephasedatastorage.actualinterval%TYPE; --实际平均发车间隔（分钟）
    V_ACTUALCIRCLETIME    NUMBER; --jz_timephasedatastorage.actualcircletime%TYPE; --实际平均周转时间（分钟）
    V_DEVOTIONBUSCOUNT    NUMBER; --jz_timephasedatastorage.devotionbuscount%TYPE; --投入车辆数';
    V_DEVOTIONEMPCOUNT    NUMBER; --jz_timephasedatastorage.devotionempcount%TYPE; --投入驾驶员数';
    V_BUSSENDINTERVALSTD  NUMBER; --jz_timephasedatastorage.bussendintervalstd%TYPE; --发车间隔合格班次数';
    V_PLANSEQMILE         NUMBER; --jz_timephasedatastorage.planseqmile%TYPE; --计划里程数';
    V_PLANSEQCOUNT        NUMBER; --jz_timephasedatastorage.planseqcount%TYPE; --计划班次数';
    V_PLANBUSCOUNT        NUMBER; --jz_timephasedatastorage.planbuscount%TYPE; --计划投入车辆数';
    V_PLANEMPCOUNT        NUMBER; --jz_timephasedatastorage.planempcount%TYPE; --计划投入驾驶员数';
    V_OVERSPEEDCOUNT      NUMBER; --jz_timephasedatastorage.overspeedcount%TYPE; --超速次数';
    V_UNRULESTOPCOUNT     NUMBER; --jz_timephasedatastorage.unrulestopcount%TYPE; --不规范停车次数';
    V_MDLOPENDOORCOUNT    NUMBER; --jz_timephasedatastorage.mdlopendoorcount%TYPE; --中途开关门次数';
    V_PSGCOUNT            NUMBER; --jz_timephasedatastorage.psgcount%TYPE;--客运量
    V_INTERVAL            NUMBER; --发车间隔
    V_SUMBUSCOUNT         NUMBER;
    V_ONTIMECOUNT         NUMBER; --准点车次数
    V_DATASAVELEVEL       CHAR(1);
    V_DATE_IN             DATE := TRUNC(V_DATE);
    --线路峰段(注意：如果没有配置峰段，则全天按平峰计算)
    CURSOR CUR_ROUTE(DATE_IN DATE) IS
      SELECT ROUTE.ORGID,
             ROUTE.ROUTEID,
             ROUTE.ROUTENAME,
             ROUTE.ROUTECODE,
             NVL(T.TIMEPHASEKEY, '2') TIMEPHASEKEY,
             NVL(T.TIMEPHASENAME, '平峰') TIMEPHASENAME,
             TRUNC(DATE_IN) + NVL(T.STARTTIME / 24, G_START_TIME) AS TIMEPHASESTARTTIME,
             TRUNC(DATE_IN) + NVL(T.ENDTIME / 24, 1 + G_START_TIME) AS TIMEPHASEENDTIME,
             ROUND(NVL(T.STARTTIME / 24, G_START_TIME), 6) AS STARTTIME,
             ROUND(NVL(T.ENDTIME / 24, 1 + G_START_TIME), 6) AS ENDTIME,
             NVL(T.TIMEPHASEINTERVAL, 0) TIMEPHASEINTERVAL,
             NVL(T.TIMEPHASECIRCLETIME, 0) TIMEPHASECIRCLETIME,
             NVL(T.PLANSEQS, 0) PLANSEQS
        FROM MCROUTEINFOGS ROUTE,
             (SELECT *
                FROM MCROUTETIMEPHASEGS T
               WHERE T.BEGINDATE <= DATE_IN
                 AND T.ENDDATE >= DATE_IN
                 AND T.BEGINWEEK <=
                     (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)
                 AND T.ENDWEEK >=
                     (MOD(TO_NUMBER(TO_CHAR(DATE_IN, 'D')) + 5, 7) + 1)) T
       WHERE ROUTE.ROUTEID = T.ROUTEID(+)
       ORDER BY T.ROUTEID, T.STARTTIME;
    --实际车次
    CURSOR CUR_ACTUALSEQ(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS ACTUALSEQCOUNT, --实际班次数'
             SUM(T.GPSMILE) AS GPSMILES, --gps里程';
             SUM(T.GPSMILE *
                 (NVL(BUS.SEATCOUNT, 0) + NVL(BUS.STANDCOUNT, 0))) AS LOADPSGCAPABILITY, --载客能力';
             COUNT(DISTINCT T.BUSID) AS DEVOTIONBUSCOUNT, --投入车辆数';
             COUNT(DISTINCT T.DRIVERID) AS DEVOTIONEMPCOUNT, --投入驾驶员数';
             ROUND(SUM((T.ARRIVETIME - T.LEAVETIME) * 24 * 60) /
                   NVL(COUNT(*), 0),
                   2) AS ACTUALCIRCLETIME --实际平均周转时间（分钟）
        FROM BZ_BUSRUNRECORDLDTEMP1 T, MCBUSINFOGS BUS
       WHERE T.BUSID = BUS.BUSID
         AND T.ROUTEID = ROUTEID_IN
         AND T.RUNDATADATE = DATE_IN
         AND T.RECTYPE = '1'
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME <= TIMEPHASEENDTIME_IN;
    --计划车次
    CURSOR CUR_PLANSEQ(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS PLANSEQCOUNT, --计划班次数';
             SUM(T.MILENUM) AS PLANSEQMILE, --计划里程数';
             COUNT(DISTINCT T.BUSID) AS PLANBUSCOUNT, --计划投入车辆数';
             COUNT(DISTINCT T.DRIVERID) AS PLANEMPCOUNT --计划投入驾驶员数';
        FROM BZ_BUSDISPLANLD T
       WHERE T.ROUTEID = ROUTEID_IN
         AND T.RUNDATE = DATE_IN
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME <= TIMEPHASEENDTIME_IN;
    --准点班次数
    CURSOR CUR_ONTIME(ROUTEID_IN VARCHAR2, DATE_IN DATE, TIMEPHASESTARTTIME_IN DATE, TIMEPHASEENDTIME_IN DATE) IS
      SELECT T.ROUTEID,
             (CASE
               WHEN G_SHIFTCALC_STD = '1' THEN
                COUNT(*)
               ELSE
                SUM(T.SEQNUM)
             END) AS ONTIME
        FROM BZ_BUSRUNRECORDLDTEMP1 T
       WHERE T.ROUTEID = ROUTEID_IN
         AND T.LEAVETIME >= TIMEPHASESTARTTIME_IN
         AND T.LEAVETIME < TIMEPHASEENDTIME_IN
         AND T.RUNDATADATE = DATE_IN
         AND T.RECTYPE = '1'
         AND (T.ISLATE = '0' OR T.ISLATE = '3' OR T.ISLATE IS NULL)
       GROUP BY T.ROUTEID;
  BEGIN
    WRITE_LOG('TREATE_ROUTETIMEPHASESTORAGE',
              '按峰段指标数据结存表',
              V_DATE,
              '开始');
    --删除全部数据
    DELETE JZ_TIMEPHASEDATASTORAGE WHERE JZDATE = V_DATE_IN;
    COMMIT;
    FOR CUR_R IN CUR_ROUTE(V_DATE_IN) LOOP
      BEGIN
        V_DATASAVELEVEL := '3'; ---日结
      
        V_ORGID               := CUR_R.ORGID; --组织id'
        V_ROUTEID             := CUR_R.ROUTEID; --线路编号';
        V_ROUTENAME           := CUR_R.ROUTENAME; --线路名称';
        V_ROUTECODE           := CUR_R.ROUTECODE; --线路编码
        V_TIMEPHASETYPE       := CUR_R.TIMEPHASEKEY; --峰段类型
        V_TIMEPHASEVALUE      := CUR_R.TIMEPHASENAME; --峰段名称
        V_TIMEPHASESTARTTIME  := CUR_R.TIMEPHASESTARTTIME; --峰段开始时间
        V_TIMEPHASEENDTIME    := CUR_R.TIMEPHASEENDTIME; --峰段结束时间
        V_STARTTIME           := CUR_R.STARTTIME; --峰段开始时间(相对0点的小时数)
        V_ENDTIME             := CUR_R.ENDTIME; --峰段结束时间(相对0点的小时数)      
        V_TIMEPHASEINTERVAL   := CUR_R.TIMEPHASEINTERVAL; --峰段发车间隔（分钟）
        V_TIMEPHASECIRCLETIME := CUR_R.TIMEPHASECIRCLETIME; --峰段周转时间（分钟）
        V_STDSEQS             := CUR_R.PLANSEQS; --标准车次数
        --初始化参数
        V_PLANSEQMILE        := 0; --计划里程数';
        V_PLANSEQCOUNT       := 0; --计划班次数';
        V_PLANBUSCOUNT       := 0; --计划投入车辆数';
        V_PLANEMPCOUNT       := 0; --计划投入驾驶员数';
        V_LOADPSGCAPABILITY  := 0; --载客能力';
        V_ACTUALSEQCOUNT     := 0; --实际班次数';
        V_FULLSEQCOUNT       := 0;
        V_GPSMILES           := 0; --gps里程';
        V_RUNMILES           := 0; --营运里程';
        V_RUNTIMES           := 0; --营运时间';
        V_UNRUNMILES         := 0; --非营运里程';
        V_DEVOTIONBUSCOUNT   := 0; --投入车辆数';
        V_DEVOTIONEMPCOUNT   := 0; --投入驾驶员数';
        V_ACTUALINTERVAL     := 0; --实际平均发车间隔（分钟）
        V_ACTUALCIRCLETIME   := 0; --实际平均周转时间（分钟）
        V_BUSSENDINTERVALSTD := 0; --发车间隔合格班次数
        V_OVERSPEEDCOUNT     := 0; --超速次数';
        V_UNRULESTOPCOUNT    := 0; --不规范停车次数';
        V_MDLOPENDOORCOUNT   := 0; --中途开关门次数';
        V_PSGCOUNT           := 0;
        V_SUMBUSCOUNT        := 0;
        V_ONTIMECOUNT        := 0;
        FOR CUR IN CUR_ACTUALSEQ(V_ROUTEID,
                                 V_DATE_IN,
                                 V_TIMEPHASESTARTTIME,
                                 V_TIMEPHASEENDTIME) LOOP
          V_ACTUALSEQCOUNT    := CUR.ACTUALSEQCOUNT;
          V_FULLSEQCOUNT      := CUR.ACTUALSEQCOUNT;
          V_GPSMILES          := CUR.GPSMILES;
          V_LOADPSGCAPABILITY := CUR.LOADPSGCAPABILITY;
          V_DEVOTIONBUSCOUNT  := CUR.DEVOTIONBUSCOUNT;
          V_DEVOTIONEMPCOUNT  := CUR.DEVOTIONEMPCOUNT;
          V_ACTUALCIRCLETIME  := CUR.ACTUALCIRCLETIME;
        END LOOP;
        FOR CUR IN (SELECT SUM(T.MILENUM) AS RUNMILES,
                           ROUND(SUM((T.ARRIVETIME - T.LEAVETIME) * 24), 2) AS RUNTIMES --营运里程';
                      FROM BZ_BUSRUNRECORDLDTEMP1 T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.RUNDATADATE = V_DATE_IN
                       AND T.RECTYPE = '1'
                       AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                       AND T.LEAVETIME <= V_TIMEPHASEENDTIME) LOOP
          V_RUNMILES := CUR.RUNMILES;
          V_RUNTIMES := CUR.RUNTIMES;
        END LOOP;
        FOR CUR IN (SELECT SUM(T.MILENUM) AS UNRUNMILES --非营运里程';
                      FROM BZ_BUSRUNRECORDLDTEMP1 T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.RUNDATADATE = V_DATE_IN
                       AND T.RECTYPE = '2'
                       AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                       AND T.LEAVETIME <= V_TIMEPHASEENDTIME) LOOP
          V_UNRUNMILES := CUR.UNRUNMILES;
        END LOOP;
        --需要考虑上下行线路
        FOR CUR IN (SELECT ROUND(SUM(SUMTIME) / (CASE
                                                   WHEN (SUM(SUMCOUNT) < 1) THEN
                                                    1
                                                   ELSE
                                                    SUM(SUMCOUNT)
                                                 END),
                                 2) AS ACTUALINTERVAL --实际平均发车间隔（分钟）
                      FROM (SELECT T.ROUTEID,
                                   T.SEGMENTID,
                                   (MAX(T.LEAVETIME) - MIN(T.LEAVETIME)) * 24 * 60 SUMTIME,
                                   (CASE
                                     WHEN ((COUNT(*) - 1) < 1) THEN
                                      1
                                     ELSE
                                      (COUNT(*) - 1)
                                   END) SUMCOUNT
                              FROM BZ_BUSRUNRECORDLDTEMP1 T
                             WHERE T.ROUTEID = V_ROUTEID
                               AND T.RUNDATADATE = V_DATE_IN
                               AND T.RECTYPE = '1'
                               AND T.LEAVETIME >= V_TIMEPHASESTARTTIME
                               AND T.LEAVETIME <= V_TIMEPHASEENDTIME
                             GROUP BY T.ROUTEID, T.SEGMENTID)) LOOP
          V_ACTUALINTERVAL := CUR.ACTUALINTERVAL;
        END LOOP;
        FOR CUR IN CUR_PLANSEQ(V_ROUTEID,
                               V_DATE_IN,
                               V_TIMEPHASESTARTTIME,
                               V_TIMEPHASEENDTIME) LOOP
          V_PLANSEQCOUNT := CUR.PLANSEQCOUNT;
          V_PLANSEQMILE  := CUR.PLANSEQMILE;
          V_PLANBUSCOUNT := CUR.PLANBUSCOUNT;
          V_PLANEMPCOUNT := CUR.PLANEMPCOUNT;
        END LOOP;
        --标准峰发车间隔为空，取实际平均发车间隔
        IF (V_TIMEPHASEINTERVAL IS NULL) THEN
          V_INTERVAL := V_ACTUALINTERVAL;
        ELSE
          V_INTERVAL := V_TIMEPHASEINTERVAL;
        END IF;
        IF (V_INTERVAL IS NOT NULL) THEN
          FOR CUR IN (SELECT (CASE
                               WHEN G_SHIFTCALC_STD = '1' THEN
                                COUNT(*)
                               ELSE
                                SUM(SEQNUM)
                             END) AS BUSSENDINTERVALSTD
                        FROM (SELECT T.ROUTEID,
                                     T.SUBROUTEID,
                                     T.SEGMENTID,
                                     T.SEQNUM,
                                     (LAG(T.LEAVETIME)
                                      OVER(PARTITION BY T.ROUTEID,
                                           T.SUBROUTEID,
                                           T.SEGMENTID ORDER BY T.LEAVETIME)) PRELEAVETIME,
                                     T.LEAVETIME,
                                     NVL((T.LEAVETIME -
                                         (LAG(T.LEAVETIME)
                                          OVER(PARTITION BY T.ROUTEID,
                                                T.SUBROUTEID,
                                                T.SEGMENTID ORDER BY
                                                T.LEAVETIME))) * 24 * 60,
                                         V_INTERVAL) DELTA --考虑第一趟为标准发车
                                FROM BZ_BUSRUNRECORDLDTEMP1 T
                               WHERE T.ROUTEID = V_ROUTEID
                                 AND T.RUNDATADATE = V_DATE_IN)
                       WHERE LEAVETIME >= V_TIMEPHASESTARTTIME
                         AND LEAVETIME <= V_TIMEPHASEENDTIME
                            --AND DELTA > V_INTERVAL - G_SENDBUS_INTERVAL
                         AND DELTA <= V_INTERVAL) LOOP
            V_BUSSENDINTERVALSTD := CUR.BUSSENDINTERVALSTD;
          END LOOP;
        END IF;
        FOR CUR IN (SELECT T.BUSCOUNT
                      FROM JZ_ROUTEBASICDATAPHASESTORAGE T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND JZDATE >= TO_DATE(TO_CHAR(V_DATE_IN, 'yyyyMM') || '01',
                                             'yyyyMMdd')
                       AND JZDATE < TO_DATE(TO_CHAR(ADD_MONTHS(V_DATE_IN, 1),
                                                    'yyyyMM') || '01',
                                            'yyyyMMdd')) LOOP
          V_SUMBUSCOUNT := CUR.BUSCOUNT;
        END LOOP;
        --准点车次数
        FOR CUR IN CUR_ONTIME(V_ROUTEID,
                              V_DATE_IN,
                              V_TIMEPHASESTARTTIME,
                              V_TIMEPHASEENDTIME) LOOP
          V_ONTIMECOUNT := CUR.ONTIME;
        END LOOP;
        INSERT INTO JZ_TIMEPHASEDATASTORAGE
          (RECORDID,
           ROUTEID,
           ROUTENAME,
           ROUTECODE,
           JZDATE,
           TIMEPHASETYPE,
           TIMEPHASEVALUE,
           TIMEPHASESTARTTIME,
           TIMEPHASEENDTIME,
           TIMEPHASEINTERVAL,
           TIMEPHASECIRCLETIME,
           TIMEPHASETIME, --峰段时间（小时）
           STDSEQS,
           ORGID,
           PLANSEQMILE,
           PLANSEQCOUNT,
           PLANBUSCOUNT,
           PLANEMPCOUNT,
           LOADPSGCAPABILITY,
           ACTUALSEQCOUNT,
           FULLSEQCOUNT,
           GPSMILES,
           RUNMILES,
           RUNTIMES,
           UNRUNMILES,
           DEVOTIONBUSCOUNT,
           DEVOTIONEMPCOUNT,
           ACTUALINTERVAL,
           ACTUALCIRCLETIME,
           BUSSENDINTERVALSTD,
           OVERSPEEDCOUNT,
           UNRULESTOPCOUNT,
           MDLOPENDOORCOUNT,
           PSGCOUNT,
           SUMBUSCOUNT,
           ONTIMESEQCOUNT,
           DATASAVELEVEL,
           STORAGEORGTYPE)
        VALUES
          (S_ROUTESTORAGE.NEXTVAL,
           V_ROUTEID, --线路编号';
           V_ROUTENAME, --线路名称';
           V_ROUTECODE,
           V_DATE_IN,
           V_TIMEPHASETYPE, --峰段类型
           V_TIMEPHASEVALUE, --峰段名称
           V_STARTTIME, --峰段开始时间(相对0点的天数)
           V_ENDTIME, --峰段结束时间(相对0点的天数)
           V_TIMEPHASEINTERVAL, --峰段发车间隔（分钟）
           V_TIMEPHASECIRCLETIME, --峰段周转时间（分钟）
           ROUND((V_ENDTIME - V_STARTTIME) * 24, 2), --峰段时间（小时）
           V_STDSEQS, --标准车次数           
           V_ORGID, --组织id'           
           V_PLANSEQMILE, --计划里程数';
           V_PLANSEQCOUNT, --计划班次数';
           V_PLANBUSCOUNT, --计划投入车辆数';
           V_PLANEMPCOUNT, --计划投入驾驶员数';           
           V_LOADPSGCAPABILITY, --载客能力';
           V_ACTUALSEQCOUNT, --实际班次数';
           V_ACTUALSEQCOUNT,
           V_GPSMILES, --gps里程';
           V_RUNMILES,
           V_RUNTIMES,
           V_UNRUNMILES, --非营运里程';
           V_DEVOTIONBUSCOUNT, --投入车辆数';
           V_DEVOTIONEMPCOUNT, --投入驾驶员数';
           V_ACTUALINTERVAL, --实际平均发车间隔（分钟）
           V_ACTUALCIRCLETIME, --实际平均周转时间（分钟）
           V_BUSSENDINTERVALSTD, --发车间隔合格班次数           
           V_OVERSPEEDCOUNT, --超速次数';
           V_UNRULESTOPCOUNT, --不规范停车次数';
           V_MDLOPENDOORCOUNT, --中途开关门次数';           
           V_PSGCOUNT,
           V_SUMBUSCOUNT,
           V_ONTIMECOUNT,
           V_DATASAVELEVEL,
           '4');
        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          WRITE_EXCEPTION('TREATE_ROUTETIMEPHASESTORAGE',
                          '按峰段指标数据结存表',
                          V_DATE,
                          SQLCODE,
                          SQLERRM);
      END;
    END LOOP;
    COMMIT; --提交数据
    TREATE_ROUTETIMEPHASE_ORG(V_DATE_IN);
    TREATE_ROUTETIMEPHASE_PHASE(V_DATE_IN);
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTETIMEPHASESTORAGE',
                      '按峰段指标数据结存表',
                      V_DATE,
                      SQLCODE,
                      SQLERRM);
  END;
  -----------------------------------------------------------------------------------------
  /***************************************************************************************
  *    名称：TREAT_ROUTEDAYSTORAGE_ORG                                                   *
  *                                                                                      *
  *    功能：日结存表组织维度结存(组织)                                                  *
  *                                                                                      *
  *    作者：huhuiming                                                                   *
  *    日期：2012-03-19                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEDAYSTORAGE_ORG(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    --日结
    V_DATE_IN := TRUNC(V_DATE);
    WRITE_LOG('TREAT_ROUTEDAYSTORAGE_ORG',
              '组织数据结存表-日结',
              V_DATE_IN,
              '开始');
    --删除日结数据
    DELETE FROM JZ_ROUTEDAYSTORAGE
     WHERE JZDATE = V_DATE_IN
       AND STORAGEORGTYPE != '4'
       AND DATASAVELEVEL = '3'; --日结数据
    --插入新的结存数据
    INSERT INTO JZ_ROUTEDAYSTORAGE
      (RECORDID, --记录编号
       ORGID, --组织ID
       ROUTEID, --线路编号
       ROUTENAME, --线路名称
       JZDATE, --结存日期
       PLANSEQCOUNT, --计划班次数
       ACTUALSEQCOUNT, --实际班次数
       FULLSEQCOUNT, --实际班次数
       PLANSEQMILE, --计划里程数
       GPSMILES, --GPS里程
       RUNMILES, --营运里程
       UNRUNMILES, --非营运里程
       RUNTIME,
       BUSWORKTIME,
       DEVOTIONBUSCOUNT, --投入车辆数
       DEVOTIONEMPCOUNT, --投入驾驶员数
       PLANBUSCOUNT, --计划投入车辆数
       PLANEMPCOUNT, --计划投入驾驶员数
       LOADPSGCAPABILITY, --载客能力
       FSTLSTSEQCOUNT, --线路首末班车次数
       FSTONTIMECOUNT, --首班准点车次数
       LSTONTIMECOUNT, --末班准点车次数
       ONTIMESEQCOUNT, --准点车次数
       BUSSENDINTERVALSTD, --发车间隔合格班次数
       OVERSPEEDCOUNT, --超速次数
       UNRULESTOPCOUNT, --不规范停车次数
       MDLOPENDOORCOUNT, --中途开关门次数
       STORAGEORGTYPE, --数据结存组织级别
       DATASAVELEVEL, --数据结存级别
       RECDATE --记录日期
       )
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID, --记录编号
             ORG.ORGID AS ORGID, --组织编号
             NULL AS ROUTEID, --线路编号
             NULL AS ROUTENAME, --线路名称
             V_DATE_IN AS JZDATE, --结存日期
             T.PLANSEQCOUNT AS PLANSEQCOUNT, --计划班次数
             T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT, --实际班次数
             T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
             T.PLANSEQMILE AS PLANSEQMILE, --计划里程数
             T.GPSMILES AS GPSMILES, --GPS里程
             T.RUNMILES AS RUNMILES, --营运里程
             T.UNRUNMILES AS UNRUNMILES, --非营运里程
             T.RUNTIME AS RUNTIME,
             T.BUSWORKTIME AS BUSWORKTIME,
             T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT, --投入车辆数
             T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT, --投入驾驶员数
             T.PLANBUSCOUNT AS PLANBUSCOUNT, --计划投入车辆数
             T.PLANEMPCOUNT AS PLANEMPCOUNT, --计划投入驾驶员数
             T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY, --载客能力
             T.FSTLSTSEQCOUNT AS FSTLSTSEQCOUNT, --线路首末班车次数
             T.FSTONTIMECOUNT AS FSTONTIMECOUNT, --首班准点车次数
             T.LSTONTIMECOUNT AS LSTONTIMECOUNT, --末班准点车次数
             T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT, --准点车次数
             T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD, --发车间隔合格班次数
             T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT, --超速次数
             T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT, --不规范停车次数
             T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT, --中途开关门次数
             ORG.ORGGRADE AS STORAGEORGTYPE, --组织级别
             '3' AS DATASAVELEVEL, --日结存
             SYSDATE AS RECDATE --系统时间
        FROM MCORGINFOGS ORG,
             (SELECT O.PARENTORGID AS ORGID,
                     SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                     SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                     SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                     SUM(T.GPSMILES) AS GPSMILES,
                     SUM(T.RUNMILES) AS RUNMILES,
                     SUM(T.UNRUNMILES) AS UNRUNMILES,
                     SUM(T.RUNTIME) AS RUNTIME,
                     SUM(T.BUSWORKTIME) AS BUSWORKTIME,
                     SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                     SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                     SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                     SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                     SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                     SUM(T.FSTLSTSEQCOUNT) AS FSTLSTSEQCOUNT,
                     SUM(T.FSTONTIMECOUNT) AS FSTONTIMECOUNT,
                     SUM(T.LSTONTIMECOUNT) AS LSTONTIMECOUNT,
                     SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                     SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                     SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                     SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                     SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT
                FROM JZ_ROUTEDAYSTORAGE T, JZ_ORGGRADETREE O
               WHERE T.ORGID = O.ORGID
                 AND T.JZDATE = V_DATE_IN
                 AND T.DATASAVELEVEL = '3' --日
                 AND T.STORAGEORGTYPE = '4' --线路
               GROUP BY O.PARENTORGID) T
       WHERE ORG.ORGID = T.ORGID(+)
         AND ORG.ISACTIVE = '1';
    COMMIT;
    --更新拥有车辆数
    FOR CUR_BUSCOUNT IN (SELECT ORGTREE.PARENTORGID AS ORGID,
                                COUNT(*) AS BUSCOUNT
                           FROM MCBUSINFOVW BUS, JZ_ORGGRADETREE ORGTREE
                          WHERE BUS.ORGID = ORGTREE.ORGID
                          GROUP BY ORGTREE.PARENTORGID) LOOP
      UPDATE JZ_ROUTEDAYSTORAGE T
         SET T.SUMBUSCOUNT = CUR_BUSCOUNT.BUSCOUNT
       WHERE T.ORGID = CUR_BUSCOUNT.ORGID
         AND T.JZDATE = V_DATE_IN
         AND T.STORAGEORGTYPE != '4'
         AND T.DATASAVELEVEL = '3';
    END LOOP;
    COMMIT;
    WRITE_LOG('TREAT_ROUTEDAYSTORAGE_ORG',
              '组织数据结存表-日结',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREAT_ROUTEDAYSTORAGE_ORG',
                      '组织数据结存表-日结',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  -------------------------------------------------------------------------------
  /***************************************************************************************
  *    名称：TREAT_ROUTEDAYSTORAGE_PHASE                                                 *
  *                                                                                      *
  *    功能：日结存表时间维度结存(日期)                                                  *
  *                                                                                      *
  *    作者：huhuiming                                                                   *
  *    日期：2012-03-19                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEDAYSTORAGE_PHASE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
    V_BEGIN_YEAR  DATE;
    V_END_YEAR    DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN) + 1;
    V_BEGIN_YEAR  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                             'YYYY-MM-DD');
    V_END_YEAR    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                        '-01-01',
                                        'YYYY-MM-DD'),
                                12);
    --月结
    BEGIN
      WRITE_LOG('TREAT_ROUTEDAYSTORAGE_PHASE',
                '组织数据结存表-月结',
                V_DATE_IN,
                '开始');
      --删除月结数据
      DELETE FROM JZ_ROUTEDAYSTORAGE
       WHERE JZDATE >= V_BEGIN_MONTH
         AND JZDATE < V_END_MONTH
         AND DATASAVELEVEL = '2'; --月结数据
      --线路月结
      INSERT INTO JZ_ROUTEDAYSTORAGE
        (RECORDID, --记录编号
         ORGID, --组织ID
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         PLANSEQMILE, --计划里程数
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         UNRUNMILES, --非营运里程
         RUNTIME,
         BUSWORKTIME,
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入驾驶员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         LOADPSGCAPABILITY, --载客能力
         FSTLSTSEQCOUNT, --线路首末班车次数
         FSTONTIMECOUNT, --首班准点车次数
         LSTONTIMECOUNT, --末班准点车次数
         ONTIMESEQCOUNT, --准点车次数
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         STORAGEORGTYPE, --数据结存组织级别
         DATASAVELEVEL, --数据结存级别
         RECDATE, --记录日期
         SUMBUSCOUNT)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID, --记录编号
               T.ORGID AS ORGID, --组织ID
               T.ROUTEID AS ROUTEID, --线路编号
               ROU.ROUTENAME AS ROUTENAME, --线路名称
               V_DATE_IN AS JZDATE, --结存日期
               T.PLANSEQCOUNT AS PLANSEQCOUNT, --计划班次数
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT, --实际班次数
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.PLANSEQMILE AS PLANSEQMILE, --计划里程数
               T.GPSMILES AS GPSMILES, --GPS里程
               T.RUNMILES AS RUNMILES, --营运里程
               T.UNRUNMILES AS UNRUNMILES, --非营运里程
               T.RUNTIME AS RUNTIME,
               T.BUSWORKTIME AS BUSWORKTIME,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT, --投入车辆数
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT, --投入驾驶员数
               T.PLANBUSCOUNT AS PLANBUSCOUNT, --计划投入车辆数
               T.PLANEMPCOUNT AS PLANEMPCOUNT, --计划投入驾驶员数
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY, --载客能力
               T.FSTLSTSEQCOUNT AS FSTLSTSEQCOUNT, --线路首末班车次数
               T.FSTONTIMECOUNT AS FSTONTIMECOUNT, --首班准点车次数
               T.LSTONTIMECOUNT AS LSTONTIMECOUNT, --末班准点车次数
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT, --准点车次数
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD, --发车间隔合格班次数
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT, --超速次数
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT, --不规范停车次数
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT, --中途开关门次数
               '4' AS STORAGEORGTYPE, --线路结存
               '2' AS DATASAVELEVEL, --月结数据
               SYSDATE AS RECDATE, --记录日期
               T.SUMBUSCOUNT AS SUMBUSCOUNT
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.RUNTIME) AS RUNTIME,
                       SUM(T.BUSWORKTIME) AS BUSWORKTIME,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.FSTLSTSEQCOUNT) AS FSTLSTSEQCOUNT,
                       SUM(T.FSTONTIMECOUNT) AS FSTONTIMECOUNT,
                       SUM(T.LSTONTIMECOUNT) AS LSTONTIMECOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       MAX(T.SUMBUSCOUNT) AS SUMBUSCOUNT
                  FROM JZ_ROUTEDAYSTORAGE T
                 WHERE T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日结数据
                   AND T.STORAGEORGTYPE = '4' --线路数据
                 GROUP BY T.ORGID, T.ROUTEID) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+);
      --组织月结
      INSERT INTO JZ_ROUTEDAYSTORAGE
        (RECORDID, --记录编号
         ORGID, --组织ID
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         PLANSEQMILE, --计划里程数
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         UNRUNMILES, --非营运里程
         RUNTIME,
         BUSWORKTIME,
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入驾驶员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         LOADPSGCAPABILITY, --载客能力
         FSTLSTSEQCOUNT, --线路首末班车次数
         FSTONTIMECOUNT, --首班准点车次数
         LSTONTIMECOUNT, --末班准点车次数
         ONTIMESEQCOUNT, --准点车次数
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         STORAGEORGTYPE, --数据结存组织级别
         DATASAVELEVEL, --数据结存级别
         RECDATE, --记录日期
         SUMBUSCOUNT)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID, --记录编号
               T.ORGID AS ORGID, --组织ID
               NULL AS ROUTEID, --线路编号
               NULL AS ROUTENAME, --线路名称
               V_DATE_IN AS JZDATE, --结存日期
               T.PLANSEQCOUNT AS PLANSEQCOUNT, --计划班次数
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT, --实际班次数
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.PLANSEQMILE AS PLANSEQMILE, --计划里程数
               T.GPSMILES AS GPSMILES, --GPS里程
               T.RUNMILES AS RUNMILES, --营运里程
               T.UNRUNMILES AS UNRUNMILES, --非营运里程
               T.RUNTIME AS RUNTIME,
               T.BUSWORKTIME AS BUSWORKTIME,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT, --投入车辆数
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT, --投入驾驶员数
               T.PLANBUSCOUNT AS PLANBUSCOUNT, --计划投入车辆数
               T.PLANEMPCOUNT AS PLANEMPCOUNT, --计划投入驾驶员数
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY, --载客能力
               T.FSTLSTSEQCOUNT AS FSTLSTSEQCOUNT, --线路首末班车次数
               T.FSTONTIMECOUNT AS FSTONTIMECOUNT, --首班准点车次数
               T.LSTONTIMECOUNT AS LSTONTIMECOUNT, --末班准点车次数
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT, --准点车次数
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD, --发车间隔合格班次数
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT, --超速次数
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT, --不规范停车次数
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT, --中途开关门次数
               ORG.ORGGRADE AS STORAGEORGTYPE, --组织结存
               '2' AS DATASAVELEVEL, --月结数据
               SYSDATE AS RECDATE, --记录日期
               T.SUMBUSCOUNT AS SUMBUSCOUNT
          FROM MCORGINFOGS ORG,
               (SELECT O.PARENTORGID AS ORGID,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.RUNTIME) AS RUNTIME,
                       SUM(T.BUSWORKTIME) AS BUSWORKTIME,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.FSTLSTSEQCOUNT) AS FSTLSTSEQCOUNT,
                       SUM(T.FSTONTIMECOUNT) AS FSTONTIMECOUNT,
                       SUM(T.LSTONTIMECOUNT) AS LSTONTIMECOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT
                  FROM JZ_ROUTEDAYSTORAGE T, JZ_ORGGRADETREE O
                 WHERE T.ORGID = O.ORGID
                   AND T.JZDATE >= V_BEGIN_MONTH
                   AND T.JZDATE <= V_END_MONTH
                   AND T.DATASAVELEVEL = '3' --日结数据
                   AND T.STORAGEORGTYPE = '4'
                 GROUP BY O.PARENTORGID) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREAT_ROUTEDAYSTORAGE_ORG',
                '组织数据结存表-月结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREAT_ROUTEDAYSTORAGE_ORG',
                        '组织数据结存表-月结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
    --年结
    BEGIN
      WRITE_LOG('TREAT_ROUTEDAYSTORAGE_PHASE',
                '组织数据结存表-年结',
                V_DATE_IN,
                '开始');
      --删除年结数据
      DELETE FROM JZ_ROUTEDAYSTORAGE
       WHERE JZDATE >= V_BEGIN_YEAR
         AND JZDATE < V_END_YEAR
         AND DATASAVELEVEL = '1'; --年结数据
      --线路年结
      INSERT INTO JZ_ROUTEDAYSTORAGE
        (RECORDID, --记录编号
         ORGID, --组织ID
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         PLANSEQMILE, --计划里程数
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         UNRUNMILES, --非营运里程
         RUNTIME,
         BUSWORKTIME,
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入驾驶员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         LOADPSGCAPABILITY, --载客能力
         FSTLSTSEQCOUNT, --线路首末班车次数
         FSTONTIMECOUNT, --首班准点车次数
         LSTONTIMECOUNT, --末班准点车次数
         ONTIMESEQCOUNT, --准点车次数
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         STORAGEORGTYPE, --数据结存组织级别
         DATASAVELEVEL, --数据结存级别
         RECDATE --记录日期
         )
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID, --记录编号
               T.ORGID AS ORGID, --组织ID
               T.ROUTEID AS ROUTEID, --线路编号
               ROU.ROUTENAME AS ROUTENAME, --线路名称
               V_DATE_IN AS JZDATE, --结存日期
               T.PLANSEQCOUNT AS PLANSEQCOUNT, --计划班次数
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT, --实际班次数
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.PLANSEQMILE AS PLANSEQMILE, --计划里程数
               T.GPSMILES AS GPSMILES, --GPS里程
               T.RUNMILES AS RUNMILES, --营运里程
               T.UNRUNMILES AS UNRUNMILES, --非营运里程
               T.RUNTIME AS RUNTIME,
               T.BUSWORKTIME AS BUSWORKTIME,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT, --投入车辆数
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT, --投入驾驶员数
               T.PLANBUSCOUNT AS PLANBUSCOUNT, --计划投入车辆数
               T.PLANEMPCOUNT AS PLANEMPCOUNT, --计划投入驾驶员数
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY, --载客能力
               T.FSTLSTSEQCOUNT AS FSTLSTSEQCOUNT, --线路首末班车次数
               T.FSTONTIMECOUNT AS FSTONTIMECOUNT, --首班准点车次数
               T.LSTONTIMECOUNT AS LSTONTIMECOUNT, --末班准点车次数
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT, --准点车次数
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD, --发车间隔合格班次数
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT, --超速次数
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT, --不规范停车次数
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT, --中途开关门次数
               '4' AS STORAGEORGTYPE, --线路结存
               '1' AS DATASAVELEVEL, --年结数据
               SYSDATE AS RECDATE --记录日期
          FROM MCORGINFOGS ORG,
               MCROUTEINFOGS ROU,
               (SELECT T.ORGID AS ORGID,
                       T.ROUTEID AS ROUTEID,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.RUNTIME) AS RUNTIME,
                       SUM(T.BUSWORKTIME) AS BUSWORKTIME,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.FSTLSTSEQCOUNT) AS FSTLSTSEQCOUNT,
                       SUM(T.FSTONTIMECOUNT) AS FSTONTIMECOUNT,
                       SUM(T.LSTONTIMECOUNT) AS LSTONTIMECOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT
                  FROM JZ_ROUTEDAYSTORAGE T
                 WHERE T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月结数据
                   AND T.STORAGEORGTYPE = '4' --线路数据
                 GROUP BY T.ORGID, T.ROUTEID) T
         WHERE T.ROUTEID = ROU.ROUTEID(+)
           AND T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1'
           AND ROU.ISACTIVE = '1';
      --组织年结
      INSERT INTO JZ_ROUTEDAYSTORAGE
        (RECORDID, --记录编号
         ORGID, --组织ID
         ROUTEID, --线路编号
         ROUTENAME, --线路名称
         JZDATE, --结存日期
         PLANSEQCOUNT, --计划班次数
         ACTUALSEQCOUNT, --实际班次数
         FULLSEQCOUNT,
         PLANSEQMILE, --计划里程数
         GPSMILES, --GPS里程
         RUNMILES, --营运里程
         UNRUNMILES, --非营运里程
         RUNTIME,
         BUSWORKTIME,
         DEVOTIONBUSCOUNT, --投入车辆数
         DEVOTIONEMPCOUNT, --投入驾驶员数
         PLANBUSCOUNT, --计划投入车辆数
         PLANEMPCOUNT, --计划投入驾驶员数
         LOADPSGCAPABILITY, --载客能力
         FSTLSTSEQCOUNT, --线路首末班车次数
         FSTONTIMECOUNT, --首班准点车次数
         LSTONTIMECOUNT, --末班准点车次数
         ONTIMESEQCOUNT, --准点车次数
         BUSSENDINTERVALSTD, --发车间隔合格班次数
         OVERSPEEDCOUNT, --超速次数
         UNRULESTOPCOUNT, --不规范停车次数
         MDLOPENDOORCOUNT, --中途开关门次数
         STORAGEORGTYPE, --数据结存组织级别
         DATASAVELEVEL, --数据结存级别
         RECDATE, --记录日期
         SUMBUSCOUNT)
        SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID, --记录编号
               T.ORGID AS ORGID, --组织ID
               NULL AS ROUTEID, --线路编号
               NULL AS ROUTENAME, --线路名称
               V_DATE_IN AS JZDATE, --结存日期
               T.PLANSEQCOUNT AS PLANSEQCOUNT, --计划班次数
               T.ACTUALSEQCOUNT AS ACTUALSEQCOUNT, --实际班次数
               T.ACTUALSEQCOUNT AS FULLSEQCOUNT,
               T.PLANSEQMILE AS PLANSEQMILE, --计划里程数
               T.GPSMILES AS GPSMILES, --GPS里程
               T.RUNMILES AS RUNMILES, --营运里程
               T.UNRUNMILES AS UNRUNMILES, --非营运里程
               T.RUNTIME AS RUNTIME,
               T.BUSWORKTIME AS BUSWORKTIME,
               T.DEVOTIONBUSCOUNT AS DEVOTIONBUSCOUNT, --投入车辆数
               T.DEVOTIONEMPCOUNT AS DEVOTIONEMPCOUNT, --投入驾驶员数
               T.PLANBUSCOUNT AS PLANBUSCOUNT, --计划投入车辆数
               T.PLANEMPCOUNT AS PLANEMPCOUNT, --计划投入驾驶员数
               T.LOADPSGCAPABILITY AS LOADPSGCAPABILITY, --载客能力
               T.FSTLSTSEQCOUNT AS FSTLSTSEQCOUNT, --线路首末班车次数
               T.FSTONTIMECOUNT AS FSTONTIMECOUNT, --首班准点车次数
               T.LSTONTIMECOUNT AS LSTONTIMECOUNT, --末班准点车次数
               T.ONTIMESEQCOUNT AS ONTIMESEQCOUNT, --准点车次数
               T.BUSSENDINTERVALSTD AS BUSSENDINTERVALSTD, --发车间隔合格班次数
               T.OVERSPEEDCOUNT AS OVERSPEEDCOUNT, --超速次数
               T.UNRULESTOPCOUNT AS UNRULESTOPCOUNT, --不规范停车次数
               T.MDLOPENDOORCOUNT AS MDLOPENDOORCOUNT, --中途开关门次数
               ORG.ORGGRADE AS STORAGEORGTYPE, --车队结存
               '1' AS DATASAVELEVEL, --年结数据
               SYSDATE AS RECDATE, --记录日期
               T.SUMBUSCOUNT AS SUMBUSCOUNT
          FROM MCORGINFOGS ORG,
               (SELECT O.PARENTORGID AS ORGID,
                       SUM(T.PLANSEQCOUNT) AS PLANSEQCOUNT,
                       SUM(T.ACTUALSEQCOUNT) AS ACTUALSEQCOUNT,
                       SUM(T.PLANSEQMILE) AS PLANSEQMILE,
                       SUM(T.GPSMILES) AS GPSMILES,
                       SUM(T.RUNMILES) AS RUNMILES,
                       SUM(T.UNRUNMILES) AS UNRUNMILES,
                       SUM(T.RUNTIME) AS RUNTIME,
                       SUM(T.BUSWORKTIME) AS BUSWORKTIME,
                       SUM(T.DEVOTIONBUSCOUNT) AS DEVOTIONBUSCOUNT,
                       SUM(T.DEVOTIONEMPCOUNT) AS DEVOTIONEMPCOUNT,
                       SUM(T.PLANBUSCOUNT) AS PLANBUSCOUNT,
                       SUM(T.PLANEMPCOUNT) AS PLANEMPCOUNT,
                       SUM(T.LOADPSGCAPABILITY) AS LOADPSGCAPABILITY,
                       SUM(T.FSTLSTSEQCOUNT) AS FSTLSTSEQCOUNT,
                       SUM(T.FSTONTIMECOUNT) AS FSTONTIMECOUNT,
                       SUM(T.LSTONTIMECOUNT) AS LSTONTIMECOUNT,
                       SUM(T.ONTIMESEQCOUNT) AS ONTIMESEQCOUNT,
                       SUM(T.BUSSENDINTERVALSTD) AS BUSSENDINTERVALSTD,
                       SUM(T.OVERSPEEDCOUNT) AS OVERSPEEDCOUNT,
                       SUM(T.UNRULESTOPCOUNT) AS UNRULESTOPCOUNT,
                       SUM(T.MDLOPENDOORCOUNT) AS MDLOPENDOORCOUNT,
                       SUM(T.SUMBUSCOUNT) AS SUMBUSCOUNT
                  FROM JZ_ROUTEDAYSTORAGE T, JZ_ORGGRADETREE O
                 WHERE T.ORGID = O.ORGID
                   AND T.JZDATE >= V_BEGIN_YEAR
                   AND T.JZDATE <= V_END_YEAR
                   AND T.DATASAVELEVEL = '2' --月结数据
                   AND T.STORAGEORGTYPE = '4'
                 GROUP BY O.PARENTORGID) T
         WHERE T.ORGID = ORG.ORGID(+)
           AND ORG.ISACTIVE = '1';
      COMMIT;
      WRITE_LOG('TREAT_ROUTEDAYSTORAGE_ORG',
                '组织数据结存表-年结',
                V_DATE_IN,
                '结束');
    EXCEPTION
      WHEN OTHERS THEN
        ROLLBACK; --回滚
        WRITE_EXCEPTION('TREAT_ROUTEDAYSTORAGE_ORG',
                        '组织数据结存表-年结',
                        NULL,
                        SQLCODE,
                        SQLERRM);
    END;
  END;
  /***************************************************************************************
  *    名称：TREATE_ROUTEDAYDATASTORAGE                                                  *
  *                                                                                      *
  *    功能：线路指标日结存表                                                            *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2011-12-26                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_ROUTEDAYDATASTORAGE(V_DATE DATE) AS
    V_DATE_IN            DATE := TRUNC(V_DATE);
    V_ROUTESTYLE         CHAR(1);
    V_ROUTEID            VARCHAR2(36);
    V_SUBROUTEID         VARCHAR2(36);
    V_SUBROUTENAME       VARCHAR2(36);
    V_BUSSENDINTERVALSTD NUMBER; --jz_routedaystorage.bussendintervalstd%TYPE; --发车间隔合格班次数';
    V_FSTLSTSEQCOUNT     NUMBER; --jz_routedaystorage.fstlstseqcount
    V_FSTONTIMECOUNT     NUMBER; --jz_routedaystorage.FstOnTimeCount
    V_LSTONTIMECOUNT     NUMBER; --jz_routedaystorage.lstOnTimeCount
    V_DRIVETIME          NUMBER;
    V_WORKTIME           NUMBER;
  BEGIN
    WRITE_LOG('TREATE_ROUTEDAYDATASTORAGE',
              '线路指标日结存表',
              V_DATE_IN,
              '开始');
    --删除全部数据
    DELETE JZ_ROUTEDAYSTORAGE WHERE JZDATE = V_DATE_IN;
    --线路日结存数据初始化
    INSERT INTO JZ_ROUTEDAYSTORAGE
      (RECORDID,
       ORGID,
       ROUTEID,
       ROUTENAME,
       JZDATE,
       RUNMILES,
       UNRUNMILES,
       RUNTIME,
       BUSWORKTIME,
       GPSMILES,
       ACTUALSEQCOUNT,
       FULLSEQCOUNT,
       ONTIMESEQCOUNT,
       DEVOTIONBUSCOUNT,
       DEVOTIONEMPCOUNT,
       PLANSEQCOUNT,
       PLANSEQMILE,
       PLANBUSCOUNT,
       PLANEMPCOUNT,
       LOADPSGCAPABILITY,
       DATASAVELEVEL,
       STORAGEORGTYPE)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             ROUTE.ORGID AS ORGID,
             ROUTE.ROUTEID AS ROUTEID,
             ROUTE.ROUTENAME AS ROUTENAME,
             V_DATE_IN AS JZDATE,
             NVL(T1.RUNMILE, 0) AS RUNMILES, --营运里程
             NVL(T2.UNRUNMILE, 0) AS UNRUNMILES, --非营运里程
             NVL(T1.RUNTIME, 0) AS RUNTIME, --营运时间
             NVL(T2.UNRUNTIME, 0) + NVL(T1.RUNTIME, 0) AS BUSWORKTIME, --车辆工作时间
             NVL(T1.RUNGPSMILE, 0) + NVL(T2.UNRUNGPSMILE, 0) AS GPSMILES, --GPS里程
             NVL(T1.RUNCOUNT, 0) AS ACTUALSEQCOUNT, --实际班次数
             NVL(T1.RUNCOUNT, 0) AS FULLSEQCOUNT, --实际班次数
             NVL(T4.ONTIME, 0) AS ONTIMESEQCOUNT, --准点班次数
             NVL(T3.BUSCOUNT, 0) AS DEVOTIONBUSCOUNT, --投入车辆
             NVL(T3.EMPCOUNT, 0) AS DEVOTIONEMPCOUNT, --投入驾驶员
             NVL(TT1.RUNPLANCOUNT, 0) AS PLANSEQCOUNT, --计划班次
             NVL(TT1.RUNPLANMILE, 0) AS PLANSEQMILE, --计划里程
             NVL(TT2.BUSCOUNT, 0) AS PLANBUSCOUNT, --计划投入车辆
             NVL(TT2.EMPCOUNT, 0) AS PLANEMPCOUNT, --计划投入驾驶员
             NVL(T1.LOADPSGCAPABILITY, 0) AS LOADPSGCAPABILITY, --载客能力
             '3' AS DATASAVELEVEL, --日结
             '4' AS STORAGEORGTYPE
        FROM MCROUTEINFOGS ROUTE,
             (SELECT T.ROUTEID,
                     (CASE
                       WHEN G_SHIFTCALC_STD = '1' THEN
                        COUNT(*)
                       ELSE
                        SUM(T.SEQNUM)
                     END) AS RUNCOUNT,
                     SUM(NVL(T.MILENUM, 0)) RUNMILE,
                     SUM(NVL(ROUND((T.ARRIVETIME - T.LEAVETIME) * 24, 2), 0)) RUNTIME,
                     SUM(NVL(T.GPSMILE, 0)) RUNGPSMILE,
                     SUM(NVL(T.MILENUM, 0) *
                         (NVL(BUS.SEATCOUNT, 0) + NVL(BUS.STANDCOUNT, 0))) AS LOADPSGCAPABILITY
                FROM BZ_BUSRUNRECORDLDTEMP1 T, MCBUSINFOGS BUS
               WHERE T.BUSID = BUS.BUSID(+)
                 AND T.RECTYPE = '1'
                 AND T.RUNDATADATE = V_DATE_IN
               GROUP BY T.ROUTEID) T1,
             (SELECT T.ROUTEID,
                     COUNT(*) UNRUNCOUNT,
                     SUM(NVL(T.MILENUM, 0)) UNRUNMILE,
                     SUM(NVL(ROUND((T.ARRIVETIME - T.LEAVETIME) * 24, 2), 0)) UNRUNTIME,
                     SUM(NVL(T.GPSMILE, 0)) UNRUNGPSMILE
                FROM BZ_BUSRUNRECORDLDTEMP1 T
               WHERE T.RECTYPE = '2'
                 AND T.RUNDATADATE = V_DATE_IN
               GROUP BY T.ROUTEID) T2,
             (SELECT T.ROUTEID,
                     COUNT(DISTINCT BUSID) AS BUSCOUNT,
                     COUNT(DISTINCT DRIVERID) AS EMPCOUNT
                FROM BZ_BUSRUNRECORDLDTEMP1 T
               WHERE T.RUNDATADATE = V_DATE_IN
                 AND T.RECTYPE = '1'
               GROUP BY T.ROUTEID) T3,
             (SELECT T.ROUTEID,
                     (CASE
                       WHEN G_SHIFTCALC_STD = '1' THEN
                        COUNT(*)
                       ELSE
                        SUM(T.SEQNUM)
                     END) AS ONTIME
                FROM BZ_BUSRUNRECORDLDTEMP1 T
               WHERE T.RECTYPE = '1'
                 AND T.RUNDATADATE = V_DATE_IN
                 AND (T.ISLATE = '0' OR T.ISLATE = '3' OR T.ISLATE IS NULL)
               GROUP BY T.ROUTEID) T4,
             (SELECT T.ROUTEID,
                     (CASE
                       WHEN G_SHIFTCALC_STD = '1' THEN
                        COUNT(*)
                       ELSE
                        SUM(T.SEQNUM)
                     END) AS RUNPLANCOUNT,
                     SUM(T.MILENUM) AS RUNPLANMILE
                FROM BZ_BUSDISPLANLD T
               WHERE T.RECTYPE = '1'
                 AND T.RUNDATE = V_DATE_IN
               GROUP BY T.ROUTEID) TT1,
             (SELECT T.ROUTEID,
                     COUNT(DISTINCT BUSID) BUSCOUNT,
                     COUNT(DISTINCT DRIVERID) EMPCOUNT
                FROM BZ_BUSDISPLANLD T
               WHERE T.RUNDATE = V_DATE_IN
               GROUP BY T.ROUTEID) TT2
       WHERE ROUTE.ROUTEID = T1.ROUTEID(+)
         AND ROUTE.ROUTEID = T2.ROUTEID(+)
         AND ROUTE.ROUTEID = T3.ROUTEID(+)
         AND ROUTE.ROUTEID = T4.ROUTEID(+)
         AND ROUTE.ROUTEID = TT1.ROUTEID(+)
         AND ROUTE.ROUTEID = TT2.ROUTEID(+);
    COMMIT;
    --按线路更新
    BEGIN
      FOR CUR_R IN (SELECT ROUTEID, ROUTENAME, ROUTECODE, ROUTESTYLE
                      FROM MCROUTEINFOGS) LOOP
        V_ROUTESTYLE         := CUR_R.ROUTESTYLE;
        V_ROUTEID            := CUR_R.ROUTEID;
        V_FSTLSTSEQCOUNT     := 0;
        V_FSTONTIMECOUNT     := 0;
        V_LSTONTIMECOUNT     := 0;
        V_BUSSENDINTERVALSTD := 0;
        V_DRIVETIME          := 0;
        --只考虑主子线，其它子线不考虑
        GET_MAINSUBROUTE(V_DATE_IN,
                         TRUNC(SYSDATE),
                         V_ROUTEID,
                         V_SUBROUTEID,
                         V_SUBROUTENAME);
        --获取首末班时间
        FOR CUR IN (SELECT SUM(STD) AS STD, SUM(FST) AS FST, SUM(LST) AS LST
                      FROM (SELECT S.ROUTEID,
                                   S.SUBROUTEID,
                                   S.SEGMENTID,
                                   S.RUNDIRECTION,
                                   2 AS STD,
                                   CASE
                                     WHEN ABS(ROUND((TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(S.MINLEAVETIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss') -
                                                    TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(D.MAINSTATIONFSTTIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss')) * 24 * 60)) > 3 THEN
                                      0
                                     ELSE
                                      1
                                   END FST,
                                   CASE
                                     WHEN ABS(ROUND((TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(S.MAXLEAVETIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss') -
                                                    TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(D.MAINSTATIONLSTTIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss')) * 24 * 60)) > 3 THEN
                                      0
                                     ELSE
                                      1
                                   END LST
                              FROM (SELECT *
                                      FROM MCROUTEFSTANDLSTSEQTIMEGS T
                                     WHERE T.STARTWEEK <=
                                           (MOD(TO_NUMBER(TO_CHAR(V_DATE_IN,
                                                                  'D')) + 5,
                                                7) + 1)
                                       AND T.ENDWEEK >=
                                           (MOD(TO_NUMBER(TO_CHAR(V_DATE_IN,
                                                                  'D')) + 5,
                                                7) + 1)) D,
                                   (SELECT T.ROUTEID,
                                           T.SUBROUTEID,
                                           T.SEGMENTID,
                                           SEG.RUNDIRECTION,
                                           MINLEAVETIME,
                                           MAXLEAVETIME
                                      FROM MCSEGMENTINFOGS SEG,
                                           (SELECT T.ROUTEID,
                                                   T.SUBROUTEID,
                                                   T.SEGMENTID,
                                                   MIN(T.LEAVETIME) AS MINLEAVETIME,
                                                   MAX(T.LEAVETIME) AS MAXLEAVETIME
                                              FROM BZ_BUSRUNRECORDLDTEMP1 T
                                             WHERE T.RUNDATADATE = V_DATE_IN
                                               AND T.RECTYPE = '1'
                                             GROUP BY T.ROUTEID,
                                                      T.SUBROUTEID,
                                                      T.SEGMENTID) T
                                     WHERE SEG.ROUTEID = T.ROUTEID
                                       AND SEG.SUBROUTEID = T.SUBROUTEID
                                       AND SEG.SEGMENTID = T.SEGMENTID
                                       AND SEG.RUNDIRECTION IN ('1', '3')) S --上行或环行首末班车次
                             WHERE D.ROUTEID = S.ROUTEID
                            UNION
                            SELECT S.ROUTEID,
                                   S.SUBROUTEID,
                                   S.SEGMENTID,
                                   S.RUNDIRECTION,
                                   2 AS STD,
                                   CASE
                                     WHEN ABS(ROUND((TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(S.MINLEAVETIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss') -
                                                    TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(D.SECONDSTATIONFSTTIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss')) * 24 * 60)) > 3 THEN
                                      0
                                     ELSE
                                      1
                                   END FST,
                                   CASE
                                     WHEN ABS(ROUND((TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(S.MAXLEAVETIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss') -
                                                    TO_DATE('2011-01-01 ' ||
                                                             TO_CHAR(D.SECONDSTATIONLSTTIME,
                                                                     'hh24:mi:ss'),
                                                             'yyyy-mm-dd hh24:mi:ss')) * 24 * 60)) > 3 THEN
                                      0
                                     ELSE
                                      1
                                   END LST
                              FROM (SELECT *
                                      FROM MCROUTEFSTANDLSTSEQTIMEGS T
                                     WHERE T.STARTWEEK <=
                                           (MOD(TO_NUMBER(TO_CHAR(V_DATE_IN,
                                                                  'D')) + 5,
                                                7) + 1)
                                       AND T.ENDWEEK >=
                                           (MOD(TO_NUMBER(TO_CHAR(V_DATE_IN,
                                                                  'D')) + 5,
                                                7) + 1)) D,
                                   (SELECT T.ROUTEID,
                                           T.SUBROUTEID,
                                           T.SEGMENTID,
                                           SEG.RUNDIRECTION,
                                           MINLEAVETIME,
                                           MAXLEAVETIME
                                      FROM MCSEGMENTINFOGS SEG,
                                           (SELECT T.ROUTEID,
                                                   T.SUBROUTEID,
                                                   T.SEGMENTID,
                                                   MIN(T.LEAVETIME) AS MINLEAVETIME,
                                                   MAX(T.LEAVETIME) AS MAXLEAVETIME
                                              FROM BZ_BUSRUNRECORDLDTEMP1 T
                                             WHERE T.RUNDATADATE = V_DATE_IN
                                               AND T.RECTYPE = '1'
                                             GROUP BY T.ROUTEID,
                                                      T.SUBROUTEID,
                                                      T.SEGMENTID) T
                                     WHERE SEG.ROUTEID = T.ROUTEID
                                       AND SEG.SUBROUTEID = T.SUBROUTEID
                                       AND SEG.SEGMENTID = T.SEGMENTID
                                       AND SEG.RUNDIRECTION IN ('2')) S --下行首末班车次
                             WHERE D.ROUTEID = S.ROUTEID)
                     WHERE ROUTEID = V_ROUTEID
                       AND SUBROUTEID = V_SUBROUTEID) LOOP
          V_FSTLSTSEQCOUNT := CUR.STD;
          V_FSTONTIMECOUNT := CUR.FST;
          V_LSTONTIMECOUNT := CUR.LST;
        END LOOP;
        --驾驶员驾驶时间
        FOR CUR IN (SELECT SUM((T.ARRIVETIME - T.LEAVETIME) * 24) AS DRIVETIME
                      FROM BZ_BUSRUNRECORDLDTEMP1 T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.RUNDATADATE = V_DATE_IN
                       AND T.ARRIVETIME >= T.LEAVETIME) LOOP
          --去掉时间错误的
          V_DRIVETIME := CUR.DRIVETIME;
        END LOOP;
      
        V_WORKTIME := GET_DRIVERWORKTIME(V_ROUTEID, V_DATE_IN);
        --在峰段之外的不计算
        FOR CUR IN (SELECT SUM(NVL(T.BUSSENDINTERVALSTD, 0)) AS BUSSENDINTERVALSTD
                      FROM JZ_TIMEPHASEDATASTORAGE T
                     WHERE T.ROUTEID = V_ROUTEID
                       AND T.JZDATE = V_DATE_IN
                       AND T.DATASAVELEVEL = '3'
                       AND T.STORAGEORGTYPE = '4') LOOP
          V_BUSSENDINTERVALSTD := CUR.BUSSENDINTERVALSTD;
        END LOOP;
        UPDATE JZ_ROUTEDAYSTORAGE T
           SET T.FSTLSTSEQCOUNT     = V_FSTLSTSEQCOUNT,
               T.FSTONTIMECOUNT     = V_FSTONTIMECOUNT,
               T.LSTONTIMECOUNT     = V_LSTONTIMECOUNT,
               T.DRIVERDRIVETIME    = ROUND(V_DRIVETIME /
                                            DECODE(NVL(T.DEVOTIONEMPCOUNT, 0),
                                                   0,
                                                   1,
                                                   T.DEVOTIONEMPCOUNT),
                                            2),
               T.DRIVERONWORKTIME   = ROUND(V_WORKTIME /
                                            DECODE(NVL(T.DEVOTIONEMPCOUNT, 0),
                                                   0,
                                                   1,
                                                   T.DEVOTIONEMPCOUNT),
                                            2),
               T.BUSSENDINTERVALSTD = V_BUSSENDINTERVALSTD
         WHERE T.ROUTEID = V_ROUTEID
           AND T.JZDATE = V_DATE_IN;
      END LOOP;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        WRITE_EXCEPTION('TREATE_ROUTEDAYDATASTORAGE',
                        '线路指标日结存表',
                        V_DATE,
                        SQLCODE,
                        SQLERRM);
    END;
    WRITE_LOG('TREATE_ROUTEDAYDATASTORAGE',
              '线路指标日结存表',
              V_DATE_IN,
              '结束');
    COMMIT;
    TREATE_ROUTEDAYSTORAGE_ORG(V_DATE_IN); --组织结存
    TREATE_ROUTEDAYSTORAGE_PHASE(V_DATE_IN); --日期结存  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_ROUTEDAYDATASTORAGE',
                      '线路指标日结存表',
                      V_DATE_IN,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：Treate_Complaints                                                           *
  *                                                                                      *
  *    功能：组织日/月/年投诉                                                            *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2012-06-03                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_COMPLAINTS(V_DATE DATE) AS
    V_DATE_IN    DATE := TRUNC(V_DATE);
    V_MONTHBEGIN DATE; --月初
    V_MONTHEND   DATE; --月末
    V_YEARBEGIN  DATE; --年初
    V_YEAREND    DATE; --年末
  BEGIN
    V_MONTHBEGIN := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_MONTHEND   := LAST_DAY(V_DATE_IN) + 1;
    V_YEARBEGIN  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                            'YYYY-MM-DD');
    V_YEAREND    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                       '-01-01',
                                       'YYYY-MM-DD'),
                               12);
    WRITE_LOG('Treate_Complaints', '乘客投诉数据结存', V_DATE_IN, '开始');
    BEGIN
      --分公司（日）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_DATE_IN
                                 AND T.HANDLEDTIME < V_DATE_IN + 1)
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_DATE_IN
                                  AND T.HANDLEDTIME < V_DATE_IN + 1
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_DATE_IN
                                      AND T.HANDLEDTIME < V_DATE_IN + 1
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '2'; --分公司
      --分公司（月）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_MONTHBEGIN
                                 AND T.HANDLEDTIME < V_MONTHEND)
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_MONTHBEGIN
                                  AND T.HANDLEDTIME < V_MONTHEND
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_MONTHBEGIN
                                      AND T.HANDLEDTIME < V_MONTHEND
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '2'; --分公司
      --分公司（年）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_YEARBEGIN
                                 AND T.HANDLEDTIME < V_YEAREND)
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_YEARBEGIN
                                  AND T.HANDLEDTIME < V_YEAREND
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_YEARBEGIN
                                      AND T.HANDLEDTIME < V_YEAREND
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '2'; --分公司
    
      COMMIT;
    END;
  
    BEGIN
      --集团（日）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_DATE_IN
                                 AND T.HANDLEDTIME < V_DATE_IN + 1)
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_DATE_IN
                                  AND T.HANDLEDTIME < V_DATE_IN + 1
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_DATE_IN
                                      AND T.HANDLEDTIME < V_DATE_IN + 1
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE = V_DATE_IN
         AND Z.DATASAVELEVEL = '3' --日
         AND Z.STORAGEORGTYPE = '1'; --集团
      --集团（月）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_MONTHBEGIN
                                 AND T.HANDLEDTIME < V_MONTHEND)
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_MONTHBEGIN
                                  AND T.HANDLEDTIME < V_MONTHEND
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_MONTHBEGIN
                                      AND T.HANDLEDTIME < V_MONTHEND
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE >= V_MONTHBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '2' --月
         AND Z.STORAGEORGTYPE = '1'; --集团
      --集团（年）
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSECOUNT = (SELECT COUNT(1) --乘客投诉数
                                FROM BZ_COMPLAINTSLD T
                               WHERE T.ORGID = Z.ORGID
                                 AND T.HANDLEDTIME >= V_YEARBEGIN
                                 AND T.HANDLEDTIME < V_YEAREND)
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.SATISFYCOUNT = (SELECT COUNT(1) --乘客满意数
                                 FROM BZ_COMPLAINTSLD T
                                WHERE T.ORGID = Z.ORGID
                                  AND T.HANDLEDTIME >= V_YEARBEGIN
                                  AND T.HANDLEDTIME < V_YEAREND
                                  AND T.ISSATISFIED = '1')
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_MONTHEND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      UPDATE JZ_ROUTEDAYSTORAGE Z
         SET Z.ACCUSESOLVECOUNT = (SELECT COUNT(1) --投诉处理数
                                     FROM BZ_COMPLAINTSLD T
                                    WHERE T.ORGID = Z.ORGID
                                      AND T.HANDLEDTIME >= V_YEARBEGIN
                                      AND T.HANDLEDTIME < V_YEAREND
                                      AND T.ISREPLY = '1')
       WHERE Z.JZDATE >= V_YEARBEGIN
         AND Z.JZDATE < V_YEAREND
         AND Z.DATASAVELEVEL = '1' --年
         AND Z.STORAGEORGTYPE = '1'; --集团
    
      COMMIT;
    END;
  
    WRITE_LOG('Treate_Complaints', '乘客投诉数据结存', V_DATE_IN, '结束');
  END;
  /***************************************************************************************
  *    名称：Treate_Complaints                                                           *
  *                                                                                      *
  *    功能：组织日/月/年投诉                                                            *
  *                                                                                      *
  *    作者：hujihuo                                                                     *
  *    日期：2012-06-03                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_DRIVETIMESTORAGE(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    WRITE_LOG('TREATE_DRIVETIMESTORAGE',
              '驾驶员驾驶时间结存',
              V_DATE_IN,
              '开始');
    DELETE FROM JZ_DRIVETIMESTORAGE T WHERE T.JZDATE = V_DATE_IN;
    INSERT INTO JZ_DRIVETIMESTORAGE
      (RECORDID, ORGID, ROUTEID, DRIVERID, DRIVETIME, JZDATE)
      SELECT S_EMPSTORAGE.NEXTVAL AS RECORDID,
             T.ORGID,
             T.ROUTEID,
             T.DRIVERID,
             T.DRIVETIME,
             V_DATE_IN AS JZDATE
        FROM (SELECT ORG.ORGID,
                     EROU.ROUTEID,
                     T.DRIVERID,
                     ROUND(SUM((T.ARRIVETIME - T.LEAVETIME) * 24) * 60, 2) AS DRIVETIME
                FROM BZ_BUSRUNRECORDLDTEMP1 T,
                     (SELECT DISTINCT EROU.EMPID, EROU.ROUTEID
                        FROM MCREMPROUTEGS EROU
                       WHERE EROU.RECDATE IN
                             (SELECT MAX(RECDATE)
                                FROM MCREMPROUTEGS EROU1
                               WHERE EROU.EMPID = EROU1.EMPID
                                 AND EROU1.RECDATE <= V_DATE_IN + 10)) EROU,
                     MCEMPLOYEEINFOGS ORG
               WHERE T.RECTYPE = '1'
                 AND T.ARRIVETIME > T.LEAVETIME
                 AND (T.ARRIVETIME - T.LEAVETIME) * 24 < 5
                 AND T.DRIVERID = EROU.EMPID(+)
                 AND T.DRIVERID = ORG.EMPID(+)
                 AND T.RUNDATADATE = V_DATE_IN
               GROUP BY ORG.ORGID, EROU.ROUTEID, T.DRIVERID) T;
    COMMIT;
    WRITE_LOG('TREATE_DRIVETIMESTORAGE',
              '驾驶员驾驶时间结存',
              V_DATE_IN,
              '结束');
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_DRIVETIMESTORAGE',
                      '驾驶员驾驶时间结存',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /***************************************************************************************
  *    名称：TREATE_SAFETYEVENTINFO                                                           *
  *                                                                                      *
  *    功能：行车事故信息结存                                                           *
  *                                                                                      *
  *    作者：huhuimim                                                                     *
  *    日期：2013-05-03                                                                  *
  ****************************************************************************************/
  PROCEDURE TREATE_SAFETYEVENTINFO(V_DATE DATE) AS
    V_DATE_IN DATE;
  BEGIN
    V_DATE_IN := TRUNC(V_DATE);
    --日志
    WRITE_LOG('TREATE_SAFETYEVENTINFO',
              '行车事故信息结存',
              V_DATE_IN,
              '开始');
    --删除原有数据
    DELETE FROM JZ_SAFETYEVENTINFO T
     WHERE T.JZDATE = V_DATE_IN
       AND T.DATASAVELEVEL = '3';
    --插入新数据
    INSERT INTO JZ_SAFETYEVENTINFO
      (RECORDID,
       ORGID,
       ORGNAME,
       ROUTEID,
       ROUTENAME,
       JZDATE,
       ACCIDENTTYPE,
       ACCIDENTTYPENAME,
       DUTYACCIDENTCOUNT,
       NONDUTYACCIDENTCOUNT,
       DUTYACCIDENTDEATHCOUNT,
       NONDUTYACCIDENTDEATHCOUNT,
       DUTYACCIDENTINJURECOUNT,
       NONDUTYACCIDENTINJURECOUNT,
       DUTYACCIDENTECONOMICLOSS,
       NONDUTYACCIDENTECONOMICLOSS,
       DATASAVELEVEL)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             T.ORGID,
             T.ORGNAME,
             T.ROUTEID,
             T.ROUTENAME,
             V_DATE_IN AS JZDATE,
             '1' AS ACCIDENTTYPE,
             '行车事故' AS ACCIDENTTYPENAME,
             T.DUTYACCIDENTCOUNT AS DUTYACCIDENTCOUNT,
             0 AS NONDUTYACCIDENTCOUNT,
             T.DUTYACCIDENTDEATHCOUNT AS DUTYACCIDENTDEATHCOUNT,
             0 AS DUTYACCIDENTDEATHCOUNT,
             T.DUTYACCIDENTINJURECOUNT AS DUTYACCIDENTINJURECOUNT,
             0 AS DUTYACCIDENTINJURECOUNT,
             T.DUTYACCIDENTECONOMICLOSS AS DUTYACCIDENTECONOMICLOSS,
             0 AS DUTYACCIDENTECONOMICLOSS,
             '3' AS DATASAVELEVEL
        FROM (SELECT ROU.ORGID,
                     ORG.ORGNAME,
                     AC.ROUTEID,
                     ROU.ROUTENAME,
                     COUNT(AC.RECORDID) AS DUTYACCIDENTCOUNT,
                     SUM(AC.DIEDCOUNT) AS DUTYACCIDENTDEATHCOUNT,
                     SUM(AC.INJUREDCOUNT) AS DUTYACCIDENTINJURECOUNT,
                     SUM(AC.ECONOMICLOSS) AS DUTYACCIDENTECONOMICLOSS
                FROM BZ_BUSACCIDENTINFOLD AC,
                     MCROUTEINFOGS        ROU,
                     MCORGINFOGS          ORG
               WHERE AC.ROUTEID = ROU.ROUTEID
                 AND ROU.ORGID = ORG.ORGID
                 AND AC.DUTYSIDE IN ('1', '2')
                 AND AC.ACCIDENTTIME >= V_DATE_IN
                 AND AC.ACCIDENTTIME < V_DATE_IN + 1
               GROUP BY ROU.ORGID, ORG.ORGNAME, AC.ROUTEID, ROU.ROUTENAME) T;
    MERGE INTO JZ_SAFETYEVENTINFO DEST
    USING (SELECT ROU.ORGID,
                  ORG.ORGNAME,
                  AC.ROUTEID,
                  ROU.ROUTENAME,
                  COUNT(AC.RECORDID) AS NONDUTYACCIDENTCOUNT,
                  SUM(AC.DIEDCOUNT) AS NONDUTYACCIDENTDEATHCOUNT,
                  SUM(AC.INJUREDCOUNT) AS NONDUTYACCIDENTINJURECOUNT,
                  SUM(AC.ECONOMICLOSS) AS NONDUTYACCIDENTECONOMICLOSS
             FROM BZ_BUSACCIDENTINFOLD AC,
                  MCROUTEINFOGS        ROU,
                  MCORGINFOGS          ORG
            WHERE AC.ROUTEID = ROU.ROUTEID
              AND ROU.ORGID = ORG.ORGID
              AND AC.DUTYSIDE = '3'
              AND AC.ACCIDENTTIME >= V_DATE_IN
              AND AC.ACCIDENTTIME < V_DATE_IN + 1
            GROUP BY ROU.ORGID, ORG.ORGNAME, AC.ROUTEID, ROU.ROUTENAME) SOUR
    ON (DEST.ROUTEID = SOUR.ROUTEID)
    WHEN MATCHED THEN
      UPDATE
         SET DEST.NONDUTYACCIDENTCOUNT        = SOUR.NONDUTYACCIDENTCOUNT,
             DEST.NONDUTYACCIDENTDEATHCOUNT   = SOUR.NONDUTYACCIDENTDEATHCOUNT,
             DEST.NONDUTYACCIDENTINJURECOUNT  = SOUR.NONDUTYACCIDENTINJURECOUNT,
             DEST.NONDUTYACCIDENTECONOMICLOSS = SOUR.NONDUTYACCIDENTECONOMICLOSS
    WHEN NOT MATCHED THEN
      INSERT
        (RECORDID,
         ORGID,
         ORGNAME,
         ROUTEID,
         ROUTENAME,
         JZDATE,
         ACCIDENTTYPE,
         ACCIDENTTYPENAME,
         DUTYACCIDENTCOUNT,
         NONDUTYACCIDENTCOUNT,
         DUTYACCIDENTDEATHCOUNT,
         NONDUTYACCIDENTDEATHCOUNT,
         DUTYACCIDENTINJURECOUNT,
         NONDUTYACCIDENTINJURECOUNT,
         DUTYACCIDENTECONOMICLOSS,
         NONDUTYACCIDENTECONOMICLOSS,
         DATASAVELEVEL)
      VALUES
        (S_ROUTESTORAGE.NEXTVAL,
         SOUR.ORGID,
         SOUR.ORGNAME,
         SOUR.ROUTEID,
         SOUR.ROUTENAME,
         V_DATE_IN,
         '1',
         '行车事故',
         0,
         SOUR.NONDUTYACCIDENTCOUNT,
         0,
         SOUR.NONDUTYACCIDENTDEATHCOUNT,
         0,
         SOUR.NONDUTYACCIDENTINJURECOUNT,
         0,
         SOUR.NONDUTYACCIDENTECONOMICLOSS,
         '3');
    COMMIT;
    WRITE_LOG('TREATE_SAFETYEVENTINFO',
              '行车事故信息结存',
              V_DATE_IN,
              '结束');
    TREATE_SAFETYEVENTINFO_PHASE(V_DATE_IN);
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_SAFETYEVENTINFO',
                      '行车事故信息结存',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  PROCEDURE TREATE_SAFETYEVENTINFO_PHASE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
    V_BEGIN_YEAR  DATE;
    V_END_YEAR    DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    V_BEGIN_YEAR  := TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') || '-01-01',
                             'YYYY-MM-DD');
    V_END_YEAR    := ADD_MONTHS(TO_DATE(TO_CHAR(V_DATE_IN, 'YYYY') ||
                                        '-01-01',
                                        'YYYY-MM-DD'),
                                12);
    --日志
    WRITE_LOG('TREATE_SAFETYEVENTINFO_PHASE',
              '行车事故信息结存-月结',
              V_DATE_IN,
              '开始');
    --删除原有月结数据
    DELETE FROM JZ_SAFETYEVENTINFO T
     WHERE T.JZDATE >= V_BEGIN_MONTH
       AND T.JZDATE <= V_END_MONTH
       AND T.DATASAVELEVEL = '2';
    --插入月结数据
    INSERT INTO JZ_SAFETYEVENTINFO
      (RECORDID,
       ORGID,
       ORGNAME,
       ROUTEID,
       ROUTENAME,
       JZDATE,
       ACCIDENTTYPE,
       ACCIDENTTYPENAME,
       DUTYACCIDENTCOUNT,
       NONDUTYACCIDENTCOUNT,
       DUTYACCIDENTDEATHCOUNT,
       NONDUTYACCIDENTDEATHCOUNT,
       DUTYACCIDENTINJURECOUNT,
       NONDUTYACCIDENTINJURECOUNT,
       DUTYACCIDENTECONOMICLOSS,
       NONDUTYACCIDENTECONOMICLOSS,
       DATASAVELEVEL)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             T.ORGID,
             T.ORGNAME,
             T.ROUTEID,
             T.ROUTENAME,
             V_DATE_IN AS JZDATE,
             '1' AS ACCIDENTTYPE,
             '行车事故' AS ACCIDENTTYPENAME,
             T.DUTYACCIDENTCOUNT AS DUTYACCIDENTCOUNT,
             T.NONDUTYACCIDENTCOUNT AS NONDUTYACCIDENTCOUNT,
             T.DUTYACCIDENTDEATHCOUNT AS DUTYACCIDENTDEATHCOUNT,
             T.NONDUTYACCIDENTDEATHCOUNT AS NONDUTYACCIDENTDEATHCOUNT,
             T.DUTYACCIDENTINJURECOUNT AS DUTYACCIDENTINJURECOUNT,
             T.NONDUTYACCIDENTINJURECOUNT AS NONDUTYACCIDENTINJURECOUNT,
             T.DUTYACCIDENTECONOMICLOSS AS DUTYACCIDENTECONOMICLOSS,
             T.NONDUTYACCIDENTECONOMICLOSS AS NONDUTYACCIDENTECONOMICLOSS,
             '2' AS DATASAVELEVEL
        FROM (SELECT ROU.ORGID,
                     ORG.ORGNAME,
                     T.ROUTEID,
                     ROU.ROUTENAME,
                     T.ACCIDENTTYPE,
                     T.ACCIDENTTYPENAME,
                     SUM(T.DUTYACCIDENTCOUNT) AS DUTYACCIDENTCOUNT,
                     SUM(T.NONDUTYACCIDENTCOUNT) AS NONDUTYACCIDENTCOUNT,
                     SUM(T.DUTYACCIDENTDEATHCOUNT) AS DUTYACCIDENTDEATHCOUNT,
                     SUM(T.NONDUTYACCIDENTDEATHCOUNT) AS NONDUTYACCIDENTDEATHCOUNT,
                     SUM(T.DUTYACCIDENTINJURECOUNT) AS DUTYACCIDENTINJURECOUNT,
                     SUM(T.NONDUTYACCIDENTINJURECOUNT) AS NONDUTYACCIDENTINJURECOUNT,
                     SUM(T.DUTYACCIDENTECONOMICLOSS) AS DUTYACCIDENTECONOMICLOSS,
                     SUM(T.NONDUTYACCIDENTECONOMICLOSS) AS NONDUTYACCIDENTECONOMICLOSS
                FROM JZ_SAFETYEVENTINFO T,
                     MCROUTEINFOGS      ROU,
                     MCORGINFOGS        ORG
               WHERE T.ROUTEID = ROU.ROUTEID
                 AND ROU.ORGID = ORG.ORGID
                 AND T.DATASAVELEVEL = '3'
                 AND T.JZDATE >= V_BEGIN_MONTH
                 AND T.JZDATE <= V_END_MONTH
               GROUP BY ROU.ORGID,
                        ORG.ORGNAME,
                        T.ROUTEID,
                        ROU.ROUTENAME,
                        T.ACCIDENTTYPE,
                        T.ACCIDENTTYPENAME) T;
    COMMIT;
    WRITE_LOG('TREATE_SAFETYEVENTINFO_PHASE',
              '行车事故信息结存-月结',
              V_DATE_IN,
              '结束');
    WRITE_LOG('TREATE_SAFETYEVENTINFO_PHASE',
              '行车事故信息结存-年结',
              V_DATE_IN,
              '开始');
    --删除原有年结数据
    DELETE FROM JZ_SAFETYEVENTINFO T
     WHERE T.JZDATE >= V_BEGIN_YEAR
       AND T.JZDATE <= V_END_YEAR
       AND T.DATASAVELEVEL = '1';
    --插入年结数据
    INSERT INTO JZ_SAFETYEVENTINFO
      (RECORDID,
       ORGID,
       ORGNAME,
       ROUTEID,
       ROUTENAME,
       JZDATE,
       ACCIDENTTYPE,
       ACCIDENTTYPENAME,
       DUTYACCIDENTCOUNT,
       NONDUTYACCIDENTCOUNT,
       DUTYACCIDENTDEATHCOUNT,
       NONDUTYACCIDENTDEATHCOUNT,
       DUTYACCIDENTINJURECOUNT,
       NONDUTYACCIDENTINJURECOUNT,
       DUTYACCIDENTECONOMICLOSS,
       NONDUTYACCIDENTECONOMICLOSS,
       DATASAVELEVEL)
      SELECT S_ROUTESTORAGE.NEXTVAL AS RECORDID,
             T.ORGID,
             T.ORGNAME,
             T.ROUTEID,
             T.ROUTENAME,
             V_DATE_IN AS JZDATE,
             '1' AS ACCIDENTTYPE,
             '行车事故' AS ACCIDENTTYPENAME,
             T.DUTYACCIDENTCOUNT AS DUTYACCIDENTCOUNT,
             T.NONDUTYACCIDENTCOUNT AS NONDUTYACCIDENTCOUNT,
             T.DUTYACCIDENTDEATHCOUNT AS DUTYACCIDENTDEATHCOUNT,
             T.NONDUTYACCIDENTDEATHCOUNT AS NONDUTYACCIDENTDEATHCOUNT,
             T.DUTYACCIDENTINJURECOUNT AS DUTYACCIDENTINJURECOUNT,
             T.NONDUTYACCIDENTINJURECOUNT AS NONDUTYACCIDENTINJURECOUNT,
             T.DUTYACCIDENTECONOMICLOSS AS DUTYACCIDENTECONOMICLOSS,
             T.NONDUTYACCIDENTECONOMICLOSS AS NONDUTYACCIDENTECONOMICLOSS,
             '1' AS DATASAVELEVEL
        FROM (SELECT ROU.ORGID,
                     ORG.ORGNAME,
                     T.ROUTEID,
                     ROU.ROUTENAME,
                     T.ACCIDENTTYPE,
                     T.ACCIDENTTYPENAME,
                     SUM(T.DUTYACCIDENTCOUNT) AS DUTYACCIDENTCOUNT,
                     SUM(T.NONDUTYACCIDENTCOUNT) AS NONDUTYACCIDENTCOUNT,
                     SUM(T.DUTYACCIDENTDEATHCOUNT) AS DUTYACCIDENTDEATHCOUNT,
                     SUM(T.NONDUTYACCIDENTDEATHCOUNT) AS NONDUTYACCIDENTDEATHCOUNT,
                     SUM(T.DUTYACCIDENTINJURECOUNT) AS DUTYACCIDENTINJURECOUNT,
                     SUM(T.NONDUTYACCIDENTINJURECOUNT) AS NONDUTYACCIDENTINJURECOUNT,
                     SUM(T.DUTYACCIDENTECONOMICLOSS) AS DUTYACCIDENTECONOMICLOSS,
                     SUM(T.NONDUTYACCIDENTECONOMICLOSS) AS NONDUTYACCIDENTECONOMICLOSS
                FROM JZ_SAFETYEVENTINFO T,
                     MCROUTEINFOGS      ROU,
                     MCORGINFOGS        ORG
               WHERE T.ROUTEID = ROU.ROUTEID
                 AND ROU.ORGID = ORG.ORGID
                 AND T.DATASAVELEVEL = '2'
                 AND T.JZDATE >= V_BEGIN_YEAR
                 AND T.JZDATE <= V_END_YEAR
               GROUP BY ROU.ORGID,
                        ORG.ORGNAME,
                        T.ROUTEID,
                        ROU.ROUTENAME,
                        T.ACCIDENTTYPE,
                        T.ACCIDENTTYPENAME) T;
    COMMIT;
    WRITE_LOG('TREATE_SAFETYEVENTINFO_PHASE',
              '行车事故信息结存-年结',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('TREATE_SAFETYEVENTINFO_PHASE',
                      '行车事故信息结存',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  --------------------------------------------------------------------------------------------
  /****************************************************************************************
  *    名称：INDICATOR_BUSNUMPUNCTUAL                                                    *
  *                                                                                      *
  *    功能：车次准点率                                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-06-05                                                                  *
  ****************************************************************************************/
  PROCEDURE INDICATOR_BUSNUMPUNCTUAL(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    --日志
    WRITE_LOG('INDICATOR_BUSNUMPUNCTUAL',
              '车次准点率指标预警',
              V_DATE_IN,
              '开始');
    --删除原有数据
    DELETE FROM JZ_INDICATORWARNINGSTORAGE IND
     WHERE IND.JZDATE >= V_BEGIN_MONTH
       AND IND.JZDATE <= V_END_MONTH
       AND IND.INDICATORID = 1;
    --插入新数据
    INSERT INTO JZ_INDICATORWARNINGSTORAGE
      (RECORDID,
       INDICATORID,
       INDICATORNAME,
       INDICATORUNIT,
       INDICATORSTANDARDVALUE,
       ORGID,
       ORGNAME,
       INDICATORVALUE,
       JZDATE,
       STORAGEORGTYPE,
       INDICATORTYPE)
      SELECT S_INDICATOR.NEXTVAL      AS RECORDID,
             T.INDICATORID            AS INDICATORID,
             T.INDICATORNAME          AS INDICATORNAME,
             T.INDICATORUNIT          AS INDICATORUNIT,
             T.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
             T.ORGID                  AS ORGID,
             T.ORGNAME                AS ORGNAME,
             T.INDICATORVALUE         AS INDICATORVALUE,
             T.JZDATE                 AS JZDATE,
             T.STORAGEORGTYPE         AS STORAGEORGTYPE,
             T.INDICATORTYPE          AS INDICATORTYPE
        FROM (SELECT IND.INDICATORID AS INDICATORID,
                     IND.INDICATORNAME AS INDICATORNAME,
                     IND.INDICATORUNIT AS INDICATORUNIT,
                     IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                     T.ORGID AS ORGID,
                     T.ORGNAME AS ORGNAME,
                     T.BUSNUMPUNCTUALRATE AS INDICATORVALUE,
                     V_DATE_IN AS JZDATE,
                     '2' AS STORAGEORGTYPE,
                     '1' AS INDICATORTYPE
                FROM SYS_INDICATORWARNING IND,
                     (SELECT T.ORGID AS ORGID,
                             ORG.ORGNAME AS ORGNAME,
                             ROUND(DECODE(T.ACTUALSEQCOUNT,
                                          0,
                                          NULL,
                                          T.ONTIMESEQCOUNT / T.ACTUALSEQCOUNT),
                                   4) AS BUSNUMPUNCTUALRATE
                        FROM MCORGINFOGS ORG, JZ_ROUTEDAYSTORAGE T
                       WHERE T.ORGID = ORG.ORGID
                         AND T.JZDATE >= V_BEGIN_MONTH
                         AND T.JZDATE <= V_END_MONTH
                         AND T.DATASAVELEVEL = 2
                         AND T.STORAGEORGTYPE = 2
                         AND ORG.ORGTYPE = 1) T
               WHERE IND.INDICATORID = 1) T;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    WRITE_LOG('INDICATOR_BUSNUMPUNCTUAL',
              '车次准点率指标预警',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('INDICATOR_BUSNUMPUNCTUAL',
                      '车次准点率指标预警',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：INDICATOR_BUSSHIFTCOMPLETE                                                    *
  *                                                                                      *
  *    功能：班次完成率                                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-06-05                                                                  *
  ****************************************************************************************/
  PROCEDURE INDICATOR_BUSSHIFTCOMPLETE(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    --日志
    WRITE_LOG('INDICATOR_BUSSHIFTCOMPLETE',
              '班次完成率指标预警',
              V_DATE_IN,
              '开始');
    --删除原有数据
    DELETE FROM JZ_INDICATORWARNINGSTORAGE IND
     WHERE IND.JZDATE >= V_BEGIN_MONTH
       AND IND.JZDATE <= V_END_MONTH
       AND IND.INDICATORID = 2;
    --插入新数据
    INSERT INTO JZ_INDICATORWARNINGSTORAGE
      (RECORDID,
       INDICATORID,
       INDICATORNAME,
       INDICATORUNIT,
       INDICATORSTANDARDVALUE,
       ORGID,
       ORGNAME,
       INDICATORVALUE,
       JZDATE,
       STORAGEORGTYPE,
       INDICATORTYPE)
      SELECT S_INDICATOR.NEXTVAL      AS RECORDID,
             T.INDICATORID            AS INDICATORID,
             T.INDICATORNAME          AS INDICATORNAME,
             T.INDICATORUNIT          AS INDICATORUNIT,
             T.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
             T.ORGID                  AS ORGID,
             T.ORGNAME                AS ORGNAME,
             T.INDICATORVALUE         AS INDICATORVALUE,
             T.JZDATE                 AS JZDATE,
             T.STORAGEORGTYPE         AS STORAGEORGTYPE,
             T.INDICATORTYPE          AS INDICATORTYPE
        FROM (SELECT IND.INDICATORID AS INDICATORID,
                     IND.INDICATORNAME AS INDICATORNAME,
                     IND.INDICATORUNIT AS INDICATORUNIT,
                     IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                     T.ORGID AS ORGID,
                     T.ORGNAME AS ORGNAME,
                     T.BUSSHIFTCOMPLETERATE AS INDICATORVALUE,
                     V_DATE_IN AS JZDATE,
                     '2' AS STORAGEORGTYPE,
                     '1' AS INDICATORTYPE
                FROM SYS_INDICATORWARNING IND,
                     (SELECT T.ORGID AS ORGID,
                             ORG.ORGNAME AS ORGNAME,
                             ROUND(DECODE(T.PLANSEQCOUNT,
                                          0,
                                          NULL,
                                          T.ACTUALSEQCOUNT / T.PLANSEQCOUNT),
                                   4) AS BUSSHIFTCOMPLETERATE
                        FROM MCORGINFOGS ORG, JZ_ROUTEDAYSTORAGE T
                       WHERE T.ORGID = ORG.ORGID
                         AND T.JZDATE >= V_BEGIN_MONTH
                         AND T.JZDATE <= V_END_MONTH
                         AND T.DATASAVELEVEL = 2
                         AND T.STORAGEORGTYPE = 2
                         AND ORG.ORGTYPE = 1) T
               WHERE IND.INDICATORID = 2) T;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    WRITE_LOG('INDICATOR_BUSNUMPUNCTUAL',
              '班次完成率指标预警',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('INDICATOR_BUSNUMPUNCTUAL',
                      '班次完成率指标预警',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：INDICATOR_FSTANDLSTPUNCTUAL                                                    *
  *                                                                                      *
  *    功能：首末班准点率                                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-06-05                                                                  *
  ****************************************************************************************/
  PROCEDURE INDICATOR_FSTANDLSTPUNCTUAL(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    --日志
    WRITE_LOG('INDICATOR_FSTANDLSTPUNCTUAL',
              '首末班准点率指标预警',
              V_DATE_IN,
              '开始');
    --删除原有数据
    DELETE FROM JZ_INDICATORWARNINGSTORAGE IND
     WHERE IND.JZDATE >= V_BEGIN_MONTH
       AND IND.JZDATE <= V_END_MONTH
       AND IND.INDICATORID = 3;
    --插入新数据
    INSERT INTO JZ_INDICATORWARNINGSTORAGE
      (RECORDID,
       INDICATORID,
       INDICATORNAME,
       INDICATORUNIT,
       INDICATORSTANDARDVALUE,
       ORGID,
       ORGNAME,
       INDICATORVALUE,
       JZDATE,
       STORAGEORGTYPE,
       INDICATORTYPE)
      SELECT S_INDICATOR.NEXTVAL      AS RECORDID,
             T.INDICATORID            AS INDICATORID,
             T.INDICATORNAME          AS INDICATORNAME,
             T.INDICATORUNIT          AS INDICATORUNIT,
             T.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
             T.ORGID                  AS ORGID,
             T.ORGNAME                AS ORGNAME,
             T.INDICATORVALUE         AS INDICATORVALUE,
             T.JZDATE                 AS JZDATE,
             T.STORAGEORGTYPE         AS STORAGEORGTYPE,
             T.INDICATORTYPE          AS INDICATORTYPE
        FROM (SELECT IND.INDICATORID AS INDICATORID,
                     IND.INDICATORNAME AS INDICATORNAME,
                     IND.INDICATORUNIT AS INDICATORUNIT,
                     IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                     T.ORGID AS ORGID,
                     T.ORGNAME AS ORGNAME,
                     T.FSTANDLSTONTIMERATE AS INDICATORVALUE,
                     V_DATE_IN AS JZDATE,
                     '2' AS STORAGEORGTYPE,
                     '1' AS INDICATORTYPE
                FROM SYS_INDICATORWARNING IND,
                     (SELECT T.ORGID AS ORGID,
                             ORG.ORGNAME AS ORGNAME,
                             ROUND(DECODE(T.FSTLSTSEQCOUNT,
                                          0,
                                          NULL,
                                          (T.FSTONTIMECOUNT + T.LSTONTIMECOUNT) /
                                          T.FSTLSTSEQCOUNT),
                                   4) AS FSTANDLSTONTIMERATE
                        FROM MCORGINFOGS ORG, JZ_ROUTEDAYSTORAGE T
                       WHERE T.ORGID = ORG.ORGID
                         AND T.JZDATE >= V_BEGIN_MONTH
                         AND T.JZDATE <= V_END_MONTH
                         AND T.DATASAVELEVEL = 2
                         AND T.STORAGEORGTYPE = 2
                         AND ORG.ORGTYPE = 1) T
               WHERE IND.INDICATORID = 3) T;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    WRITE_LOG('INDICATOR_FSTANDLSTPUNCTUAL',
              '首末班准点率指标预警',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('INDICATOR_FSTANDLSTPUNCTUAL',
                      '首末班准点率指标预警',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：INDICATOR_ROUTESENDBLANK                                                    *
  *                                                                                      *
  *    功能：发车间隔兑现率                                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-06-05                                                                  *
  ****************************************************************************************/
  PROCEDURE INDICATOR_ROUTESENDBLANK(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    --日志
    WRITE_LOG('INDICATOR_ROUTESENDBLANK',
              '发车间隔兑现率指标预警',
              V_DATE_IN,
              '开始');
    --删除原有数据
    DELETE FROM JZ_INDICATORWARNINGSTORAGE IND
     WHERE IND.JZDATE >= V_BEGIN_MONTH
       AND IND.JZDATE <= V_END_MONTH
       AND IND.INDICATORID = 4;
    --插入新数据
    INSERT INTO JZ_INDICATORWARNINGSTORAGE
      (RECORDID,
       INDICATORID,
       INDICATORNAME,
       INDICATORUNIT,
       INDICATORSTANDARDVALUE,
       ORGID,
       ORGNAME,
       INDICATORVALUE,
       JZDATE,
       STORAGEORGTYPE,
       INDICATORTYPE)
      SELECT S_INDICATOR.NEXTVAL      AS RECORDID,
             T.INDICATORID            AS INDICATORID,
             T.INDICATORNAME          AS INDICATORNAME,
             T.INDICATORUNIT          AS INDICATORUNIT,
             T.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
             T.ORGID                  AS ORGID,
             T.ORGNAME                AS ORGNAME,
             T.INDICATORVALUE         AS INDICATORVALUE,
             T.JZDATE                 AS JZDATE,
             T.STORAGEORGTYPE         AS STORAGEORGTYPE,
             T.INDICATORTYPE          AS INDICATORTYPE
        FROM (SELECT IND.INDICATORID AS INDICATORID,
                     IND.INDICATORNAME AS INDICATORNAME,
                     IND.INDICATORUNIT AS INDICATORUNIT,
                     IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                     T.ORGID AS ORGID,
                     T.ORGNAME AS ORGNAME,
                     T.ROUTESENDBLANKRATE AS INDICATORVALUE,
                     V_DATE_IN AS JZDATE,
                     '2' AS STORAGEORGTYPE,
                     '1' AS INDICATORTYPE
                FROM SYS_INDICATORWARNING IND,
                     (SELECT T.ORGID AS ORGID,
                             ORG.ORGNAME AS ORGNAME,
                             ROUND(DECODE(T.ACTUALSEQCOUNT,
                                          0,
                                          NULL,
                                          T.BUSSENDINTERVALSTD /
                                          T.ACTUALSEQCOUNT),
                                   4) AS ROUTESENDBLANKRATE
                        FROM MCORGINFOGS ORG, JZ_ROUTEDAYSTORAGE T
                       WHERE T.ORGID = ORG.ORGID
                         AND T.JZDATE >= V_BEGIN_MONTH
                         AND T.JZDATE <= V_END_MONTH
                         AND T.DATASAVELEVEL = 2
                         AND T.STORAGEORGTYPE = 2
                         AND ORG.ORGTYPE = 1) T
               WHERE IND.INDICATORID = 4) T;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    WRITE_LOG('INDICATOR_ROUTESENDBLANK',
              '发车间隔兑现率指标预警',
              V_DATE_IN,
              '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('INDICATOR_ROUTESENDBLANK',
                      '发车间隔兑现率指标预警',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  /****************************************************************************************
  *    名称：INDICATOR_SATISFY                                                    *
  *                                                                                      *
  *    功能：公众满意度                                                                *
  *                                                                                      *
  *    作者：HUHUIMIN                                                                     *
  *    日期：2012-06-05                                                                  *
  ****************************************************************************************/
  PROCEDURE INDICATOR_SATISFY(V_DATE DATE) AS
    V_DATE_IN     DATE;
    V_BEGIN_MONTH DATE;
    V_END_MONTH   DATE;
  BEGIN
    V_DATE_IN     := TRUNC(V_DATE);
    V_BEGIN_MONTH := ADD_MONTHS(LAST_DAY(V_DATE_IN) + 1, -1);
    V_END_MONTH   := LAST_DAY(V_DATE_IN);
    --日志
    WRITE_LOG('INDICATOR_SATISFY', '公众满意度指标预警', V_DATE_IN, '开始');
    --删除原有数据
    DELETE FROM JZ_INDICATORWARNINGSTORAGE IND
     WHERE IND.JZDATE >= V_BEGIN_MONTH
       AND IND.JZDATE <= V_END_MONTH
       AND IND.INDICATORID = 5;
    --插入新数据
    INSERT INTO JZ_INDICATORWARNINGSTORAGE
      (RECORDID,
       INDICATORID,
       INDICATORNAME,
       INDICATORUNIT,
       INDICATORSTANDARDVALUE,
       ORGID,
       ORGNAME,
       INDICATORVALUE,
       JZDATE,
       STORAGEORGTYPE,
       INDICATORTYPE)
      SELECT S_INDICATOR.NEXTVAL      AS RECORDID,
             T.INDICATORID            AS INDICATORID,
             T.INDICATORNAME          AS INDICATORNAME,
             T.INDICATORUNIT          AS INDICATORUNIT,
             T.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
             T.ORGID                  AS ORGID,
             T.ORGNAME                AS ORGNAME,
             T.INDICATORVALUE         AS INDICATORVALUE,
             T.JZDATE                 AS JZDATE,
             T.STORAGEORGTYPE         AS STORAGEORGTYPE,
             T.INDICATORTYPE          AS INDICATORTYPE
        FROM (SELECT IND.INDICATORID AS INDICATORID,
                     IND.INDICATORNAME AS INDICATORNAME,
                     IND.INDICATORUNIT AS INDICATORUNIT,
                     IND.INDICATORSTANDARDVALUE AS INDICATORSTANDARDVALUE,
                     T.ORGID AS ORGID,
                     T.ORGNAME AS ORGNAME,
                     T.PUBLICSATISFYRATE AS INDICATORVALUE,
                     V_DATE_IN AS JZDATE,
                     '2' AS STORAGEORGTYPE,
                     '1' AS INDICATORTYPE
                FROM SYS_INDICATORWARNING IND,
                     (SELECT T.ORGID AS ORGID,
                             ORG.ORGNAME AS ORGNAME,
                             ROUND(DECODE(T.PASSENGERCOUNT,
                                          0,
                                          NULL,
                                          (T.PASSENGERCOUNT - T.ACCUSECOUNT +
                                          T.SATISFYCOUNT) / T.PASSENGERCOUNT),
                                   4) AS PUBLICSATISFYRATE
                        FROM MCORGINFOGS ORG, JZ_ROUTEDAYSTORAGE T
                       WHERE T.ORGID = ORG.ORGID
                         AND T.JZDATE >= V_BEGIN_MONTH
                         AND T.JZDATE <= V_END_MONTH
                         AND T.DATASAVELEVEL = 2
                         AND T.STORAGEORGTYPE = 2
                         AND ORG.ORGTYPE = 1) T
               WHERE IND.INDICATORID = 5) T;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0;
    COMMIT;
    WRITE_LOG('INDICATOR_SATISFY', '公众满意度指标预警', V_DATE_IN, '结束');
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK; --回滚
      WRITE_EXCEPTION('INDICATOR_SATISFY',
                      '公众满意度指标预警',
                      NULL,
                      SQLCODE,
                      SQLERRM);
  END;
  PROCEDURE INDICATOR_UPDATE_ALL(V_DATE DATE) AS
    V_DATE_IN DATE := TRUNC(V_DATE);
  BEGIN
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1
       AND IND.JZDATE = V_DATE_IN;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 1
       AND IND.JZDATE = V_DATE_IN;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 0
     WHERE IND.INDICATORVALUE >= IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0
       AND IND.JZDATE = V_DATE_IN;
    COMMIT;
    UPDATE JZ_INDICATORWARNINGSTORAGE IND
       SET IND.ISREALIZE = 1
     WHERE IND.INDICATORVALUE < IND.INDICATORSTANDARDVALUE
       AND IND.INDICATORTYPE = 0
       AND IND.JZDATE = V_DATE_IN;
    COMMIT;
  END;
END PKG_OSE_RUNDATA1;
/

prompt
prompt Creating package body PKG_OSE_SPEED
prompt ===================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.PKG_OSE_SPEED IS

  PROCEDURE TREATE_SPEED AS
  BEGIN
    DELETE FROM JZ_STAINTERSPEED_NOW;
    INSERT INTO JZ_STAINTERSPEED_NOW
      (RECORDID,
       ROUTEID,
       STATIONNO,
       NEXTSTANO,
       ACTDATETIME,
       RUNTIMES,
       RUNMILES,
       RUNSPEED,
       RECDATE) WITH ACENTERTABLE AS
      (SELECT ROW_NUMBER() OVER(ORDER BY PRODUCTID, ACTDATETIME ASC) AS ROWNO,
              ROUTEID,
              SUBROUTEID,
              BUSSID,
              PRODUCTID,
              STATIONNUM,
              ISARRLFT,
              GPSMILE,
              ROUND((ACTDATETIME - TRUNC(SYSDATE)) * 24 * 60, 2) AS ACTDATETIME
         FROM BSVCBUSARRLFTLD5
        WHERE ACTDATETIME >= SYSDATE - 0.5 / 24
          AND ACTDATETIME < SYSDATE
          AND DATATYPE = '4'), BCENTERTABLE AS
      (SELECT A.ROUTEID,
              A.SUBROUTEID,
              A.BUSSID,
              B.STATIONNUM AS STATIONNO,
              A.STATIONNUM AS NEXTSTANO,
              SUM(A.ACTDATETIME - B.ACTDATETIME) AS RUNTIME,
              SUM(A.GPSMILE - B.GPSMILE) AS RUNMILE
         FROM (SELECT * FROM ACENTERTABLE WHERE ISARRLFT = '1') A
        INNER JOIN (SELECT * FROM ACENTERTABLE WHERE ISARRLFT = '2') B ON A.ROUTEID =
                                                                          B.ROUTEID
                                                                      AND A.SUBROUTEID =
                                                                          B.SUBROUTEID
                                                                      AND A.PRODUCTID =
                                                                          B.PRODUCTID
                                                                      AND A.ROWNO =
                                                                          B.ROWNO + 1
        WHERE A.ACTDATETIME > B.ACTDATETIME
        GROUP BY A.ROUTEID,
                 A.SUBROUTEID,
                 A.BUSSID,
                 B.STATIONNUM,
                 A.STATIONNUM), CCENTERTABLE AS
      (SELECT STATIONNO,
              NEXTSTANO,
              SUM(RUNTIME) AS RUNTIMES,
              SUM(RUNMILE) AS RUNMILES,
              ROUND(SUM(RUNMILE) / 1000 / (SUM(RUNTIME) / 60), 2) AS RUNSPEED
         FROM BCENTERTABLE
        GROUP BY STATIONNO, NEXTSTANO)
      SELECT S_SITESTORAGE.NEXTVAL AS RECORDID,
             NULL AS ROUTEID,
             STATIONNO,
             NEXTSTANO,
             SYSDATE AS ACTDATETIME,
             RUNTIMES,
             RUNMILES,
             RUNSPEED,
             SYSDATE AS RECDATE
        FROM CCENTERTABLE;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      NULL;
  END;

END PKG_OSE_SPEED;
/

prompt
prompt Creating package body QUEST_PPCM_SNAPSHOT_PKG
prompt =============================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.QUEST_PPCM_SNAPSHOT_PKG wrapped
0
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
3
b
9200000
1
4
0
157
2 :e:
1PACKAGE:
1BODY:
1QUEST_PPCM_SNAPSHOT_PKG:
1G_CURRENT_SNAPSHOT_ID:
1INTEGER:
1G_INSTANCE_ID:
1G_PREV_SNAPSHOT_ID:
1G_SNAPSHOT_DURATION:
1NUMBER:
1G_DB_RESTART_FLAG:
10:
1TYPE:
1NUM_TAB_TYP:
1BINARY_INTEGER:
1FUNCTION:
1JOB_INTERVAL_HRS:
1P_DBMS_JOB_INTERVAL:
1VARCHAR2:
1RETURN:
1V_SQLTEXT:
11000:
1V_HOURS:
1SELECT (:
1||:
1-sysdate)*24 from dual:
1EXECUTE:
1IMMEDIATE:
1STATCOM:
1Q:
1I:
1J:
1B:
1ZZ:
1Z:
1K:
11:
1WHILE:
1<=:
1LOOP:
1*:
1/:
1-:
1+:
12:
1T_PROB:
1P_T:
1P_DF:
1W:
1TH:
1STH:
1CTH:
1PI:
13.1415926:
1T:
1N:
1PROB_T:
1ABS:
1SQRT:
1ATAN:
1=:
14:
1SIN:
1COS:
1MOD:
13:
1PROB_R:
1P_N:
1P_R:
1L_T:
1L_P:
1POWER:
1DB_START_TIME:
1DATE:
1L_DB_START_TIME:
1STARTUP_TIME:
1V$INSTANCE:
1SELECT startup_time:n        INTO l_db_start_time:n        FROM v$instance:
1DBVERSION:
1DB_VERSION:
120:
1CURSOR:
1C1:
1SUBSTR:
1BANNER:
1INSTR:
1V$VERSION:
1SELECT SUBSTR (SUBSTR (banner, INSTR (banner, 'Release ') + 8),:n            +
1            1,:n                        INSTR (SUBSTR (banner, INSTR (banner,+
1 'Release ') + 8),:n                               ' ':n                     +
1         ):n                       ):n           FROM v$version:n          WH+
1ERE banner LIKE 'Oracle%' OR banner LIKE 'Personal Oracle%':
1OPEN:
1CLOSE:
1OTHERS:
1RAISE_APPLICATION_ERROR:
120100:
1Exception in version check:
1SQLCODE:
1:::
1SQLERRM:
1GET_INSTANCE_ID:
1L_INSTANCE_ID:
1V_COUNT:
1USERENV:
1DUAL:
1SELECT USERENV ('instance'):n        INTO l_instance_id:n        FROM DUAL:
1COUNT:
1QUEST_PPCM_INSTANCE:
1INSTANCE_ID:
1SELECT COUNT (*):n        INTO v_count:n        FROM quest_ppcm_instance:n   +
1    WHERE instance_id = l_instance_id:
1INSTANCE_NAME:
1HOST_NAME:
1INSERT INTO quest_ppcm_instance:n                     (instance_id, instance_+
1name, host_name):n            SELECT l_instance_id, instance_name, host_name+
1:n              FROM v$instance:
1COMMIT:
1PREV_SNAPSHOT:
1P_SNAPSHOT_ID:
1OUT:
1P_SNAPSHOT_TIMESTAMP:
1BOOLEAN:
1L_IS_PREV_SNAPSHOT:
1TRUE:
1SNAPSHOT_ID:
1SNAPSHOT_TIMESTAMP:
1QUEST_PPCM_SNAPSHOT:
1MAX:
1SELECT snapshot_id, snapshot_timestamp:n           INTO p_snapshot_id, p_snap+
1shot_timestamp:n           FROM quest_ppcm_snapshot:n          WHERE snapshot+
1_id = (SELECT MAX (snapshot_id):n                                 FROM quest_+
1ppcm_snapshot):
1NO_DATA_FOUND:
1FALSE:
1SECONDS_BETWEEN:
1P_HI_DATE:
1P_LOW_DATE:
1FLOAT:
124:
160:
1NEXT_SNAPSHOT_ID:
1L_SNAPSHOT_ID:
1QUEST_PPCM_SNAPSHOT_ID_S:
1NEXTVAL:
1SELECT quest_ppcm_snapshot_id_s.NEXTVAL:n        INTO l_snapshot_id:n        +
1FROM DUAL:
1SET_PPCM_PARAMETER:
1P_PARAMETER_NAME:
1P_PARAMETER_VALUE:
1QUEST_PPCM_PARAMETERS:
1PARAMETER_NAME:
1UPPER:
1SELECT count(*):n           INTO v_count:n           FROM quest_ppcm_paramete+
1rs:n           WHERE parameter_name = UPPER(p_parameter_name):
1PARAMETER_VALUE:
1INSERT INTO quest_ppcm_parameters:n               (parameter_name, parameter_+
1value):n            VALUES:n               (UPPER(p_parameter_name), p_parame+
1ter_value):
1UPDATE quest_ppcm_parameters:n              SET parameter_value = p_parameter+
1_value:n            WHERE:n               parameter_name = UPPER(p_parameter_+
1name):
1PPCM_PARAMETER:
1L_VALUE:
1SELECT parameter_value:n           INTO l_value:n           FROM quest_ppcm_p+
1arameters:n          WHERE parameter_name = p_parameter_name:
1DELETE_SNAPSHOT:
1CASCADE:
1DELETE FROM quest_ppcm_snapshot CASCADE:n            WHERE snapshot_id = p_sn+
1apshot_id:
1PURGE_SNAPSHOTS:
1L_SNAPSHOT_RETENTION_DAYS:
1L_SNAPSHOT_LIST:
1SNAPSHOT_RETENTION_DAYS:
1IS NOT NULL:
1BULK:
1COLLECT:
1S:
1SYSDATE:
1SELECT snapshot_id:n         BULK COLLECT INTO l_snapshot_list:n           FR+
1OM quest_ppcm_snapshot s:n          WHERE s.instance_id > 0 and:n            +
1    s.snapshot_timestamp < SYSDATE - l_snapshot_retention_days:
1INIT_SNAPSHOT_INTERNAL:
1P_RESET:
1L_SNAPSH
/

prompt
prompt Creating package body QUEST_SOO_ALERTTRACE
prompt ==========================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.quest_soo_alerttrace wrapped
0
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
3
b
9200000
1
4
0
11c
2 :e:
1PACKAGE:
1BODY:
1QUEST_SOO_ALERTTRACE:
1MC_FILE_READ:
1CONSTANT:
1NUMBER:
18192:
1MC_PREVIOUS:
13:
10:
1MC_FORWARD:
11:
1MC_SEARCH:
12:
1MC_FIND_START:
1MC_FIND_BUFFFWD:
14:
1MC_FIND_END:
15:
1MC_FIND_BUFFBACK:
16:
1MC_RESET_FILE:
1-:
1MC_RESET_ALL:
1MC_FILE_START:
1100:
1MC_FILE_END:
1101:
1MC_FILE_START_POS:
1MC_CASE_INSENSITIVE:
1MC_CASE_SENSITIVE:
1GV_LINES:
1GV_CHUNKSIZE:
1GV_INSTANCE:
1VARCHAR2:
1GV_DUMP_DIR:
11000:
1GV_BFILE:
1BFILE:
1GV_FILE_IDX:
1PLS_INTEGER:
1GV_FILE_SIZE:
1TYPE:
1TYP_FILE:
1LONG:
1GARR_FILE_IDX:
1TYP_TEXT_REC:
1RECORD:
1STARTPOS:
1ENDPOS:
1LINEDATE:
1DATE:
1TEXT:
14000:
1TYP_TEXT_REC_ARR:
1BINARY_INTEGER:
1TYP_IDX:
1TYP_FILE_REC:
1DIRNAME:
1FILENAME:
1FILE_LENGTH:
1ARR_BUFF_START:
1ARR_BUFF_END:
1CURR_BUFF:
1TYP_FILE_REC_ARR:
1GARR_FILE_REC:
1INITFILE:
1P_FILE:
1P_DIRPATH:
1DELETE:
1||:
1LP_SEPERATE_FILE_NAME:
1P_FILENAME:
1O_DIRNAME:
1OUT:
1O_FILE:
1LV_DELIM:
1CHAR:
1/:
1LV_STR_POS:
1IS NULL:
1alert_:
1.log:
1EXISTS:
1NOT:
1ELSIF:
1INSTR:
1=:
1\:
1SUBSTR:
1+:
1COUNT:
1CLOSE_FILE:
1DBMS_LOB:
1FILEISOPEN:
1FILECLOSE:
1CREATE_DIRECTORY:
1P_DIRNAME:
1PRAGMA:
1AUTONOMOUS_TRANSACTION:
1V_SQL_TEXT:
1CREATE OR REPLACE DIRECTORY :
1 AS ':
1':
1EXECUTE:
1IMMEDIATE:
1LP_VALIDATE_DIRECTORY:
1IV_DIRECTORY_PATH:
1OV_DIRECTORY_NAME:
1LV_TEST:
1DIRECTORY_NAME:
1ALL_DIRECTORIES:
1DIRECTORY_PATH:
1ROWNUM:
1SELECT directory_name:n           INTO ov_directory_name:n           FROM all+
1_directories:n          WHERE directory_path = iv_directory_path AND ROWNUM <+
1 2:
1NO_DATA_FOUND:
1QUEST_SOO_BDUMP_DIR:
1IDX:
110000:
1LOOP:
1QUEST_SOO_DIR_:
1SELECT 1:n                       INTO lv_test:n                       FROM al+
1l_directories:n                      WHERE directory_name = ov_directory_name+
1 AND ROWNUM < 2:
1EXIT:
1LP_OPEN_FILE:
1LV_DIRECTORY:
1LV_FILE_NAME:
1LV_DIR_PATH:
1OTHERS:
1RAISE_APPLICATION_ERROR:
120001:
1Error seperating file name from directory:::
1SQLERRM:
120002:
1Error validating or creating directory:::
1BFILENAME:
120003:
1Error opening file:::
1FILEOPEN:
1LOB_READONLY:
1ISDATE:
1INPUTSTRING:
1DATEVALUE:
1TO_DATE:
1DY MON DD HH24::MI::SS YYYY:
1FIND_DATE:
1P_START_POS:
1O_DATE_POS:
1O_DATE:
1LV_START:
1LV_END:
1LV_TMP_READ:
1LV_TMP_END:
1LV_TEXT:
1LV_TMP_DATE:
1LV_ISDATE:
1LV_IDX:
1<=:
110:
1<:
10A:
1UTL_RAW:
1CAST_TO_VARCHAR2:
1>=:
1IS NOT NULL:
1RESET_CACHE:
1P_DIRECTION:
1P_START:
1P_END:
1LV_BUFFER:
1FUNCTION:
1LF_READ_LINES:
1O_START_POS:
1O_END_POS:
1PO_RESET:
1P_RERUN:
1P_SIZE_MULT:
1RETURN:
1LARR_READ_LINES:
1LARR_TMP_READ:
1LV_LINES:
1LV_START_POS:
1LV_DATE_START_POS:
1LV_TMP_START:
1LV_TMP_SRCH_END:
1LV_CURRENT_DATE:
1*:
1NVL:
1>:
1FIRST:
1LF_SEARCH:
1P_SEARCH:
1P_CASESENSITIVE:
1P_SEARCH_SECONDS:
1LARR_LINES:
1LV_FIND_IDX:
1LV_TMP_IDX:
1LV_COMP_IDX:
1LV_SECONDS:
1LV_START_DATE:
1LV_CURR_DATE:
1LV_TMP_TEXT:
18196:
1LV_FIND:
1400:
1UPPER:
1SYSDATE:
120:
160:
124:
1LEAST:
1STRING NOT FOUND:
1INITIALIZELINES:
1P_LINES:
1P_CHUNKSIZE:
1MOVE_CACHE:
1LAST:
1PRINT_CACHE:
1DBMS_OUTPUT:
1PUT_LINE:
1Forward :
1Previous :
1File Start :
1File End :
1Search :
1CASE_NOT_FOUND:
1WHILE:
1Buff Number:: :
1 - Start:::
1 - End:::
1NEXT:
1READFILE:
1P_NAV:
1P_READ_SECONDS:
1QUEST_SOO_ALERTTRACE_LOG_TYP:
1LV_END_POS:
1LV_CACHE_ID:
1LV_RESET:
1LV_READ_SECONDS:
1LNT_ALERT:
1GETLENGTH:
120004:
1Error reading to EOF:::
120005:
1Error searching from EOF for :::
1 - Error:::
120006:
1Error reading from SOF:::
120007:
1Error searching for :
1 from SOF:::
120008:
1Error moving forward from position :
120009:
1Error searching forward from position :
1 for text:::
1. Error is :::
120010:
1Error moving backwards through file from position :
1. Error:::
120011:
1Error searching for string:: :
1 backwards through file from start position:::
1TO_NUMBER:
120012:
1Error moving to position :
1NEW:
1EXTEND:
1QUEST_SOO_ALERTTRACE_LINE_TYP:
120013:
1Error creating nested table
/

prompt
prompt Creating package body QUEST_SOO_PKG
prompt ===================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.QUEST_SOO_PKG wrapped
0
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
3
b
8106000
1
4
0
491
2 :e:
1PACKAGE:
1BODY:
1QUEST_SOO_PKG:
1TYPE:
1VARCHAR_TAB_TYP:
1VARCHAR2:
1120:
1BINARY_INTEGER:
1NUMBER_TAB_TYP:
1NUMBER:
1EVENT_INDX_TAB:
1EVENT_NAME_TAB:
1EVENT_CATEGORY_TAB:
1G_EVENT_COUNT:
10:
1L_EVENT_INITIALIZED:
1BOOLEAN:
1FALSE:
1CURSOR:
1C_LOCK:
1ROWNUM:
1SID:
1LTYPE:
1REQUEST:
1LMODE:
1LOCK_TYPE_DECODE:
1ID2:
1LOCK_TYPE:
1LOCK_MODE_DECODE:
1MODE_HELD:
1MODE_REQUESTED:
1ID1:
1BLOCK:
1BLOCKING:
1DECODE:
11:
1BLOCKED:
1V$LOCK:
1!=:
12:
1C_LOCK_41:
1LOCK_TYPE_DECODE_41:
1LOCK_MODE_DECODE_41:
1VTABTYPE:
1200:
1NTABTYPE:
1PRINTED:
1BLOCKED_LIST:
1BLOCKED_LIST_CNT:
1BLOCKING_LIST:
1BLOCKING_LIST_CNT:
1LOCK_COUNT:
1TREE_DEPTH:
1TREE_SEQUENCE:
1LOCK_HASH_TABLE:
1SID_HASH_TABLE:
1SOO_LOCKTREE_ROW:
1QUEST_SOO_LOCK_TREE:
1ROWTYPE:
1FULL_VERSION:
120:
1FUNCTION:
1GET_SEG_NAME:
1P_FILENO:
1P_BLOCKNO:
1RETURN:
1GET_SEG_NAME_41:
1INITIALIZE_OBJECT_CACHE:
1DBVERSION:
1FORMAT_SQL:
1P_SQL_TEXT:
1P_MAX_LEN:
1256:
1I:
1L_TEXT_LEN:
1L_THIS_CHAR:
1CHAR:
1L_LAST_CHAR:
1L_FROM_POS:
1L_DUP_SP_POS:
1L_RETURN_TEXT:
12000:
1TRANSLATE:
1CHR:
110:
1||:
113:
1  :
1INSTR:
1WHILE:
1LOOP:
1SUBSTR:
1+:
1EXIT:
1>:
140:
1UPPER:
16:
1=:
1SELECT:
1FROM:
1 ... :
1DEBUG:
1IN_STRING:
1G_DEBUG:
1DBMS_OUTPUT:
1PUT_LINE:
1FILE_ID:
1EXTENT_ID:
1BLOCK_ID:
1BLOCKS:
1OWNER:
1.:
1SEGMENT_NAME:
1BULK:
1COLLECT:
1OBJECT_CACHE_FILENO:
1OBJECT_CACHE_EXTNO:
1OBJECT_CACHE_BLOCKNO:
1OBJECT_CACHE_LENGTH:
1OBJECT_CACHE_SEGNAME:
1SYS:
1DBA_EXTENTS:
1OBJECT_CACHE_COUNT:
1COUNT:
1G_OBJECT_CACHE_INITIALIZED:
1HI:
1LO:
1NEXT:
1PREV:
1Extent at file :
1, block :
1TRUNC:
1-:
1/:
1MAIN_LOOP:
1checking entry :
1:: :
1, :
1TO_CHAR:
1found match at :
1 :: :
1ELSIF:
1<:
1too low:
1CEIL:
1too high:
1chopped down to nothing (next entry:
1):
1Unknown, temporary or new segment:
1UNK:
1GET_EXT_NO:
1EVENT_CATEGORY:
1P_EVENT:
1TAG:
1pre 4.0:
1CAT:
1100:
1Unknown:
1SoO ERROR:: Event category table not initialized:
1 ^ :
13:
1P_INDX:
1Spotlight On Oracle internal error:
1NO_DATA_FOUND:
1ISSPOK:
1SP_OK1:
1REQUEST_FAILURES:
1LAST_FAILURE_SIZE:
1MAX_FREE_SIZE:
1FREE_SPACE:
1REQUEST_MISSES:
1V$SHARED_POOL_RESERVED:
1SP_OK2:
1TRANSLATE_PARAMETER:
1VALUE:
1V$PARAMETER:
1NAME:
1shared_pool_reserved_min_alloc:
1RES_SPOK:
1REQUEST_F:
1LAST_FS:
1MAX_FS:
1FS:
1REQUEST_M:
1SPS_VAL:
1OPEN:
1CLOSE:
1SGAOTHER:
1SGA_OTHER1:
1java_pool_size:
1SGA_OTHER2:
1SUM:
1V$SGA:
1Variable Size:
1SGA_OTHER3:
1SGA_OTHER4:
1DC:
1SHARABLE_MEM:
1V$DB_OBJECT_CACHE:
1SGA_OTHER5:
1SA:
1V$SQLAREA:
1SGA_OTHER6:
1250:
1*:
1USERS_OPENING:
1SGA_OTHER7:
1V$SESSTAT:
1S:
1V$STATNAME:
1N:
1STATISTIC#:
1session uga memory max:
1SGA_OTHER_SZ:
1JPSZ:
1SGA_NV_SZ:
1SGA_TOT:
1OBJECT_MEM:
1SHARED_SQL:
1CURSOR_MEM:
1MTS_MEM:
1NVL:
1ORACLEEVENTCLASS:
1P_EVENT_NAME:
1CS:
1SELECT wait_class FROM v$event_name WHERE name = ::event_name:
1CH:
1INTEGER:
1WAITCLASS:
1RV:
1VERSION:
1TO_NUMBER:
1DBMS_SQL:
1OPEN_CURSOR:
1PARSE:
1NATIVE:
1BIND_VARIABLE:
1event_name:
1DEFINE_COLUMN:
1EXECUTE:
1FETCH_ROWS:
1COLUMN_VALUE:
1CLOSE_CURSOR:
1POPULATE_EVENT_TABLE:
1STMT:
13200:
1STMT7:
1SELECT /*+ORDERED USE_HASH(E) */:n:n                    s.event event,:n:n   +
1                 e.topcategory || ' - ' || e.subcategory || ' ^ ' || e.catego+
1ry category,:n:n                    NVL(total_waits, -1)       total_waits,:n+
1:n                    NVL(S.INDX, -1)            indx:n:n               FROM +
1(SELECT /*+  ORDERED */:n:n                            0 inst_id,:n:n        +
1                    D.KSLEDNAM event,:n:n                            S.KSLESW+
1TS total_waits,:n:n                            S.KSLESTMO total_timeouts,:n:n+
1                            S.KSLESTIM time_waited,:n:n                      +
1      S.KSLESTIM / DECODE(S.KSLESWTS,0,1,S.KSLESWTS) average_wait,:n:n       +
1                     S.INDX indx:n:n                       FROM X$KSLED D, X$+
1KSLEI S:n:n                      WHERE S.INDX = D.INDX:n:n
/

prompt
prompt Creating package body QUEST_SOO_SCHEMA_MGR
prompt ==========================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.QUEST_SOO_SCHEMA_MGR wrapped
0
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
3
b
8106000
1
4
0
3a
2 :e:
1PACKAGE:
1BODY:
1QUEST_SOO_SCHEMA_MGR:
1TYPE:
1CVTYPE:
1REF:
1CURSOR:
1FUNCTION:
1TABLE_EXISTS:
1P_TABLE_NAME:
1VARCHAR2:
1RETURN:
1BOOLEAN:
1L_COUNT:
1INTEGER:
10:
1L_TABLE_EXISTS:
1FALSE:
1COUNT:
1USER_TABLES:
1TABLE_NAME:
1=:
1>:
1TRUE:
1CREATE_SCHEMA_VERSION_TABLE:
1SQLTEXT:
12000:
1CREATE TABLE quest_soo_schema_versions:n               (schema_id varchar2(25+
16) primary key,:n                version  number not null):
1EXECUTE:
1IMMEDIATE:
1GET_VERSION:
1P_SCHEMA_ID:
1NUMBER:
1L_VERSION:
1VERSION_CSR:
1OPEN:
1SELECT version FROM quest_soo_schema_versions :
1||:
1 WHERE schema_id=::b_schema_id :
1USING:
1NOTFOUND:
1-:
11:
1CLOSE:
1SET_VERSION:
1P_VERSION:
1L_CURRENT_VERSION:
1IS NULL:
1INSERT INTO quest_soo_schema_versions :
1(schema_id,version) VALUES(::b_schema_id,::b_version) :
1ELSIF:
1!=:
1UPDATE quest_soo_schema_versions :
1SET version=::b_version WHERE schema_id=::b_schema_id :
1COMMIT:
1INIT:
1QUEST_SOO_SCHEMA_VERSIONS:
1NOT:
0

0
0
119
2
0 a0 1d a0 97 a0 9d :2 a0
c8 77 a0 8d 8f a0 b0 3d
b4 :2 a0 a3 2c 6a a0 1c 51
81 b0 a3 a0 1c a0 81 b0
a0 d2 9f ac :2 a0 b2 ee :2 a0
7e b4 2e ac e5 d0 b2 e9
a0 7e 51 b4 2e :2 a0 d b7
19 3c :2 a0 5a 65 b7 a4 b1
11 68 4f 9a a3 b4 55 6a
a0 51 a5 1c 6e 81 b0 :3 a0
11e 11d b7 a4 b1 11 68 4f
a0 8d 8f a0 b0 3d b4 :2 a0
a3 2c 6a a0 1c 81 b0 a3
a0 1c 81 b0 :2 a0 6e 7e 6e
a0 b4 2e a0 112 11c 11a 11d
:2 a0 e9 d3 :2 a0 f a0 7e 51
b4 2e d b7 19 3c :2 a0 e9
c1 :2 a0 5a 65 b7 a4 b1 11
68 4f 9a 8f a0 b0 3d 8f
a0 b0 3d b4 a3 55 6a a0
1c 81 b0 :3 a0 a5 b d a0
:2 7e 51 b4 2e b4 2e a0 7e
b4 2e 52 10 :2 a0 6e 7e 6e
a0 b4 2e a0 112 a0 112 11e
11a 11d a0 b7 :2 a0 7e b4 2e
:2 a0 6e 7e 6e a0 b4 2e a0
112 a0 112 11e 11a 11d b7 :2 19
3c a0 57 a0 b4 e9 b7 a4
b1 11 68 4f 9a b4 55 6a
a0 6e a5 b 7e b4 2e a0
57 b3 b7 19 3c b7 a4 b1
11 68 4f b1 b7 a4 11 b1
56 4f 17 b5
119
2
0 3 7 8 14 10 2a 1e
22 26 c 31 35 4e 4a 49
56 46 5b 5f 82 67 6b 6f
73 7b 7e 66 a1 8d 91 99
9d 63 89 a8 ac af b0 b4
b8 b9 c0 c4 c8 cb cc d1
d2 d8 dc dd e2 e6 e9 ec
ed f2 f6 fa fe 100 104 107
10b 10f 112 116 118 11c 11e 12a
12e 130 167 145 146 14a 14e 152
155 156 15e 163 144 16e 172 176
17a 17e 141 182 186 188 194 198
19a 19e 1b7 1b3 1b2 1bf 1af 1c4
1c8 1e8 1d0 1d4 1d8 1dc 1e4 1cf
203 1f3 1f7 1ff 1cc 1ef 20a 20e
213 216 21b 21f 220 225 229 22a
22d 22e 232 236 23a 23f 244 248
24c 251 255 258 25b 25c 261 265
267 26b 26e 272 276 27b 27d 281
285 288 28c 28e 292 294 2a0 2a4
2a6 2bf 2bb 2ba 2c7 2d4 2d0 2b7
2dc 2cf 2fd 2e5 2e9 2ed 2f1 2f9
2cc 2e1 304 308 30c 30d 30f 313
317 31a 31d 320 321 326 327 32c
330 333 334 1 339 33e 342 346
34b 34e 353 357 358 35d 361 362
366 367 36b 36c 370 374 376 37a
37e 381 382 387 38b 38f 394 397
39c 3a0 3a1 3a6 3aa 3ab 3af 3b0
3b4 3b5 3b9 3bb 3bf 3c3 3c6 3ca
3cf 3d3 3d4 3d9 3db 3df 3e1 3ed
3f1 3f3 404 405 409 40d 411 416
417 419 41c 41d 422 426 42b 42c
42e 432 435 437 43b 43d 449 44d
44f 451 453 457 463 465 468 46a
473
119
2
0 :2 1 9 e 4 9 13 17
13 :2 4 d 1b 28 :2 1b 1a 7
e 7 :2 4 :2 18 23 18 :2 7 :2 18
23 18 7 :6 e 9 :2 e 1b :3 19
9 :4 7 a 12 14 :2 12 a 1c
a :4 7 f e 7 :6 4 e 7
0 :2 4 11 1b 1a 11 d 11
:2 7 f 19 :2 7 :7 4 d 1a 26
:2 1a 19 7 e 7 :2 4 :3 15 :2 7
:3 15 :2 7 c 1f 1c 1f 40 :2 1f
7 40 :3 7 :2 d :2 7 a 16 :2 a
17 18 :2 17 a :4 7 d :3 7 f
e 7 :6 4 e 1b 27 :2 1b 31
3b :2 31 1a 7 :2 4 :3 1b :2 7 1c
29 :2 1c 7 a 1c 1e 1f :2 1e
:2 1c :4 24 :3 a 12 1f 1c 1f 16
:2 1f 1c 16 29 27 :3 a :2 7 d
22 :3 1f a 12 1f 1c 1f 16
:2 1f 1c 16 27 25 :3 a :9 7 :6 4
e 0 :2 4 e 1c :2 e :6 a :3 7
:a 4 :5 1
119
2
0 :4 1 :6 3 :7 5 :2 6 8 :2 5 :5 8
:6 9 :4 b c :3 d :5 e d :4 b :5 10
:3 12 11 :2 10 :4 15 :2 a :3 5 16 18
1a 0 :2 18 :4 1a 1b :2 1a :5 1f :2 1e
:3 18 20 :7 22 :2 23 25 :2 22 :4 25 :5 26
:3 28 :3 29 :2 28 2a 29 :3 28 2c 2d
:2 2c :3 2f :6 31 30 :2 2f :4 34 :4 36 :2 27
:3 22 37 :a 39 3b :2 39 :4 3b :6 3d :e 3f
:3 41 :2 42 43 :2 41 :4 43 :3 41 44 40
:5 44 :3 46 :2 47 48 :2 46 :4 48 :3 46 45
4
/

prompt
prompt Creating package body QUEST_SOO_SQLTRACE
prompt ========================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.quest_soo_sqltrace wrapped
0
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
3
b
9200000
1
4
0
32f
2 :e:
1PACKAGE:
1BODY:
1QUEST_SOO_SQLTRACE:
1G_DEBUG:
1NUMBER:
10:
1G_FETCH_BUNCHING_TIME:
15000000:
1G_SQL_ID:
1-:
11:
1G_SQL_ZERO:
1G_TRACE_FILE_ID:
1G_SESSION_ID:
1G_SERIAL:
1G_CURRENTLY_BINDING_SQL:
1G_LOAD_ALL_LINES:
1BOOLEAN:
1TRUE:
1G_PROCESS_WAITS:
1G_PROCESS_BINDS:
1G_LOAD_RECURSIVE:
1G_PREVIOUS_LINE_TYPE:
1VARCHAR2:
120:
1G_MAJOR_ORACLE_VERSION:
1G_MINOR_ORACLE_VERSION:
1G_LAST_DEBUG_MESSAGE:
132767:
1G_SESSION_PGA_MEMORY_STAT#:
1G_PGA_LIMIT:
1BULK_ERRORS:
1PRAGMA:
1EXCEPTION_INIT:
124381:
1TYPE:
1VARCHAR_TAB_TYP:
1200:
1BINARY_INTEGER:
1NUMBER_TAB_TYP:
1SQL_EXEC_TYP:
1RECORD:
1SQL_ID:
1PARSE_ID:
1CURSOR_TO_STMT_MAP_TYP:
1CURSOR_TO_STMT_MAP:
1PARSE_TYP:
1QUEST_SOO_AT_PARSE_CURSOR:
1ROWTYPE:
1G_PARSE_LIST:
1EXEC_TYP:
1QUEST_SOO_AT_SQL_EXECUTIONS:
1G_EXEC_LIST:
1FETCH_TYP:
1QUEST_SOO_AT_SQL_FETCH:
1G_FETCH_LIST:
1SQL_STATEMENT_TYP:
1QUEST_SOO_AT_SQL_STATEMENT:
1G_SQL_STATEMENT_LIST:
1WAIT_NAM_TYP:
1QUEST_SOO_AT_WAIT_NAMES:
1WAIT_NAM_IDX:
1INTEGER:
1256:
1G_WAIT_NAMES:
1G_WAIT_NAM_IDX:
1SQL_WAIT_TYP:
1QUEST_SOO_AT_SQL_WAITS:
1G_WAIT_LIST:
1G_PENDING_WAITS:
1NESTED_NUM_TYP:
1G_PENDING_WAITS_SQL_IDX:
1SQL_TEXT_TYP:
1QUEST_SOO_AT_SQL_STMT_PIECES:
1G_SQL_STMT_PIECES:
1STAT_TYP:
1QUEST_SOO_AT_EXECUTION_PLAN:
1G_STAT_LIST:
1EXEC_ERROR_TYP:
1QUEST_SOO_AT_SQL_EXEC_ERROR:
1G_ERROR_LIST:
1EXEC_WAIT_TYP:
1VARCHAR:
130:
1EXEC_WAIT_LIST_TYP:
1BIND_SET_TYP:
14000:
1SQL_BINDS_TYP:
1G_SQL_BINDS:
1BIND_TYP:
1QUEST_SOO_AT_SQL_BINDS:
1G_BIND_LIST:
1SQL_STMT_TYP:
1SQL_STMT:
1PARSE_LIST:
1SQL_TEXT_LIST:
1EXEC_LIST:
1EXEC_WAIT_LIST:
1FETCH_LIST:
1STAT_LIST:
1SQL_KNOWN:
1FALSE:
1SQL_LIST_TYP:
1G_SQL_LIST:
1SQL_ADDRESS_LIST:
1G_SQL_LOOKUP:
1G_DIRECTORY_NAME:
160:
1G_TRACE_FILE:
1QUEST_SOO_AT_TRACE_FILE:
1G_PGA_SIZE:
1PGA_TYP:
1G_PGA_USAGE:
1OPERATIONS_TYP:
1QUEST_SOO_AT_OPERATIONS:
1OPERATIONS_IDX_TYP:
1OPERATION_STRING:
1G_OPERATIONS_LIST:
1G_OPERATIONS_IDX:
1PROCESS_PENDING_WAITS:
1P_SQL_ID:
1RESET_PACKAGE:
1DEBUG:
1P_LEVEL:
1P_TEXT:
1=:
1>=:
1DBMS_OUTPUT:
1PUT_LINE:
1LOAD_WAIT_LOOKUP:
1DELETE:
1EVENT_ID:
1NAM:
1BULK:
1COLLECT:
1SELECT event_id,:n             nam:n      BULK COLLECT INTO g_wait_names:n   +
1     FROM quest_soo_at_wait_names:
1POPULATE_WAIT_LOOKUP:
1AUTONOMOUS_TRANSACTION:
1EVENT#:
1NAME:
1V$EVENT_NAME:
1INSERT INTO quest_soo_at_wait_names:n                  (event_id, nam):n     +
1    SELECT event#, NAME:n           FROM v$event_name:
1COMMIT:
1INITIALIZE_WAIT_LOOKUP:
1V_WAIT_NAME:
1V_EVENT_ID:
1COUNT:
1||:
1 events loaded:
1I:
1LOOP:
1Creatining index for :
1 to id :
1FUNCTION:
1NEW_WAIT_ID:
1P_WAIT_NAME:
1RETURN:
1V_WAIT_ID:
1LOCK TABLE quest_soo_at_wait_names IN EXCLUSIVE MODE:
1NVL:
1MAX:
1SELECT NVL (MAX (event_id), 0) + 1:n        INTO v_wait_id:n        FROM ques+
1t_soo_at_wait_names:
1INSERT INTO quest_soo_at_wait_names:n                  (event_id, nam:n      +
1            ):n           VALUES (v_wait_id, p_wait_name:n                  ):
1GET_WAIT_ID:
1NO_DATA_FOUND:
1SESSION_PGA_MEMORY:
1L_PGA_SIZE:
1IS NULL:
1STATISTIC#:
1V$STATNAME:
1SELECT statistic#:n           INTO g_session_pga_memory_stat#:n           FRO+
1M v$statname:n          WHERE NAME = 'session pga memory':
1VALUE:
1V$MYSTAT:
1SELECT VALUE:n        INTO l_pga_size:n        FROM v$mystat:n       WHERE st+
1atistic# = g_session_pga_memory_stat#:
1TRACK_PGA:
1P_CATEGORY:
1L_START_PGA:
1L_END_PGA:
1L_PGA_DELTA:
1>:
1EXISTS:
1+:
1PRINT_PGA:
1L_CATEGORY:
1FIRST:
1EXIT:
12:
1:::
1NEXT:
1MYSTAT:
1P_STATNAME:
1L_VALUE:
1JOIN:
1USING:
1SELECT VALUE:n           INTO l_value:n           FROM v$mystat JOIN v$statna+
1me USING (statistic#):n          WHERE NAME = p_statname:
1 = :
1GET_STRING:
1P_LINE:
1START_STRING:
1RETURNVALUE:
11000:
1START_POS:
1TMP:
1INSTR:
1LENGTH:
1SUBSTR:
1END_STRING:
1END_POS:
1LOG_ERROR:
1P_FILE_NAME:
1P_ERROR_STACK:
1P_CALL_STACK:
1P_ERROR_LINE_NO:
1LOAD_STATUS:
1ERROR_TEXT:
1ERROR_LINE_NO:
1LAS
/

prompt
prompt Creating package body QUEST_SOO_USER_MANAGER
prompt ============================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.quest_soo_user_manager wrapped
0
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
3
b
8106000
1
4
0
df
2 :e:
1PACKAGE:
1BODY:
1QUEST_SOO_USER_MANAGER:
1EXE:
1P_SQL_TEXT:
1VARCHAR2:
1COMPILATION_ERROR:
1PRAGMA:
1EXCEPTION_INIT:
1-:
124344:
1L_CURSOR:
1INTEGER:
10:
1RC:
1STMT:
11000:
1DBMS_SQL:
1OPEN_CURSOR:
1PARSE:
12:
1EXECUTE:
1CLOSE_CURSOR:
1OTHERS:
1RAISE_APPLICATION_ERROR:
120101:
1SQLERRM:
1||:
1  when executing ':
1'   :
1GRANT_USER:
1USER_P:
1CURSOR:
1OBJECT_C:
1OBJECT_NAME:
1NAME:
1OBJECT_TYPE:
1TYPE:
1USER_OBJECTS:
1LIKE:
1QUEST_SOO_%:
1STATUS:
1=:
1VALID:
1VIEW:
1TABLE:
1PROCEDURE:
1FUNCTION:
1!=:
1sys.:
1REPLACE:
1V$:
1V_$:
1SYS:
1V_$FIXED_TABLE:
1V$%:
1EXISTING_OBJECTS:
1DBA_OBJECTS:
1OWNER:
1UPPER:
1100:
1ORA_VERSION:
164:
1TABLE_ALREADY_EXISTS:
1955:
1TABLE_NOT_EXISTS:
1942:
1SYNONYM_EXCEPTION:
1PACKAGE_NOT_EXISTS:
14030:
1R:
1LOOP:
1drop :
1 :
1.:
1grant select on :
1 to :
1ELSIF:
1grant select,insert,update,delete on :
1grant execute on :
1NOT_LIKE:
1sys.%:
1PUBLIC:
1drop public synonym :
1drop synonym :
1create public synonym :
1 for :
1create synonym :
1grant select on sys.v_$rollname to :
1grant select on sys.X_$BH       to :
1grant select on sys.X_$KSLES    to :
1grant select on sys.X_$KSLED    to :
1grant select on sys.X_$KSUSESTA to :
1grant select on sys.X_$KSPPI    to :
1grant select on sys.X_$KSPPCV   to :
1grant select on sys.X_$KSQRS    to :
1grant select on sys.X_$KSLEI    to :
1grant select on sys.X_$KSLLT    to :
1grant select on sys.X_$KSLLD    to :
1grant select on sys.X_$KSMLRU   to :
1grant select on sys.X_$KCBFWAIT to :
1grant select on sys.X_$KSMSP    to :
1grant select on sys.X_$KSQST    to :
1grant select on sys.X_$KSBDP    to :
1grant select on sys.X_$KSUSECST to :
1SUBSTR:
1BANNER:
1INSTR:
11:
15:
1VERSION:
1V$VERSION:
1ROWNUM:
18:
19:
110:
1grant select on sys.X_$KCBWDS                 to :
1grant select on sys.X_$KCBWBPD                to :
13:
18.1:
1grant select on sys.X_$KTFBUE              to :
1grant select on sys.X_$KTFBFE              to :
1grant select on sys.X_$KTFBHC              to :
1grant select on sys.dba_temp_files         to :
1grant select any dictionary             to :
1grant select  on sys.obj$            to :
1grant select  on sys.ts$             to :
1grant select  on sys.fet$            to :
1grant select  on sys.uet$            to :
1grant select  on sys.file$           to :
1grant select  on sys.user$           to :
1grant select  on sys.seg$            to :
1grant select  on sys.undo$           to :
1grant select  on sys.dba_extents     to :
1grant select  on sys.dba_free_space  to :
1grant select  on sys.dba_indexes     to :
1grant select  on sys.dba_ind_columns to :
1grant select  on sys.dba_tab_columns to :
1grant select  on sys.dba_tab_privs   to :
1grant select  on sys.dba_jobs        to :
1grant select  on sys.dba_data_files  to :
1grant select  on sys.dba_objects     to :
1grant execute on sys.dbms_system     to :
1REVOKE_USER:
1NOT_GRANT:
11927:
1revoke all privileges on :
1 from :
1VALIDATE_USER:
1RETURN:
1V_SYN_NUM:
1V_VIEW_PRIV:
1V_VIEW_NUM:
1X_SYN_NUM:
1X_VIEW_PRIV:
1X_VIEW_NUM:
1SYS_OBJ_PRIV:
1USER_OBJ_PRIV1:
1USER_OBJ_PRIV2:
1USER_OBJ_PRIV:
1RETURN_VALUE:
1COUNT:
1SYNONYM:
1DBA_TAB_PRIVS:
1TABLE_NAME:
1V_$%:
1PRIVILEGE:
1SELECT:
1GRANTEE:
1X$KSLES:
1X$KSLED:
1X$KSUSESTA:
1X$KSPPI:
1X$KSPPCV:
1X$KSQRS:
1X$KSLEI:
1X$KSLLT:
1X$KSLLD:
1X$KSMLRU:
1X$KCBFWAIT:
1X$KSMSP:
1X$KSQST:
1X$KSUSECST:
1X$BH:
1X$KSBDP:
1X$KCBWDS:
1X$KCBWBPD:
1X$KTFBUE:
1X$KTFBFE:
1X$KTFBHC:
1OBJ$:
1TS$:
1FET$:
1UET$:
1FILE$:
1USER$:
1SEG$:
1UNDO$:
1DBA_EXTENTS:
1DBA_FREE_SPACE:
1DBA_INDEXES:
1DBA_IND_COLUMNS:
1DBA_TAB_COLUMNS:
1DBA_JOBS:
1DBA_DATA_FILES:
1DBA_TEMP_FILES:
1DBMS_SYSTEM:
1>=:
135:
117:
17.3:
1>:
180:
116:
18.0:
1130:
118:
19.0:
1170:
121:
19.2:
110.:
1250:
0

0
0
851
2
0 a0 1d a0 97 9a 8f a0
b0 3d b4 8b 55 6a b0 2a
:3 a0 7e 51 b4 2e b4 5d a3
a0 1c 51 81 b0 a3 a0 1c
51 81 b0 a3 a0 51 a5 1c
81 b0 :3 a0 6b d :2 a0 6b :2 a0
51 a5
/

prompt
prompt Creating package body QUEST_SOO_UTIL
prompt ====================================
prompt
CREATE OR REPLACE PACKAGE BODY OSECD.quest_soo_util wrapped
0
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
abcd
3
b
8106000
1
4
0
260
2 :e:
1PACKAGE:
1BODY:
1QUEST_SOO_UTIL:
1TYPE:
1TYP_LOCK_TYPE_DESC:
1VARCHAR2:
1100:
1BINARY_INTEGER:
1TYP_LOCK_MODE_DESC:
120:
1TYP_LOCK_TYPE:
12:
1TYP_LOCK_IDX:
1PLS_INTEGER:
1ARR_LOCK_TYPE_DESC:
1ARR_LOCK_TYPE:
1ARR_LOCK_TYPE_IDX:
1ARR_LOCK_MODE_DESC:
1ARR_LOCK_MODE:
1ARR_LOCK_MODE_IDX:
1MV_SEARCHING:
1{searching...}:
1MV_CACHE:
110:
1cache#:
1MV_RBS:
1RBS#:
1MV_LATCH:
1latch#:
1MV_MODE:
1mode:::
1MV_OBJECT:
1Object:
1MV_DATAFILE:
1TEMP datafile:::
1MV_FILE:
1file:
1MV_SCAN:
130:
1Full table scan on %s:
1MV_COMPLETE:
1(%s%% complete):
1MV_UNKNOWN:
140:
1Unknown, temporary or new segment:
1FUNCTION:
1ENCODE_INDEX:
1P_VALUE:
1RETURN:
1NUMBER:
1LV_CHAR:
11:
1LV_POS:
15:
1LV_TMP:
1IDX:
1LENGTH:
1LOOP:
1SUBSTR:
1ASCII:
148:
157:
10:
1||:
1TO_CHAR:
1-:
164:
1+:
1TO_NUMBER:
1GET_LOCK_TYPE_DESC:
1P_LOCK_TYPE:
1P_ID2:
1LV_IDX:
1IS NULL:
1=:
1TS:
1T0:
1ELSIF:
1T1:
1EXISTS:
1GET_LOCK_MODE_DESC:
1P_IDX:
1IO_EVENT:
1P_EVENT:
1P_P1:
1P_P2:
1P_TYPE:
1512:
1NAME:
1V$DBFILE:
1FILE#:
1ROWNUM:
1NO_DATA_FOUND:
1EXECUTE:
1IMMEDIATE:
1BEGIN SELECT t.name INTO ::1 FROM v$tempfile t, v$parameter p :
1 WHERE p.name = 'db_files' AND t.file#=::2-p.value; :
1EXCEPTION WHEN NO_DATA_FOUND THEN ::1 ::= NULL; END;:
1USING:
1OUT:
1 (file#=:
1):
1!=:
1DFS db file lock:
1Extent at file :
1, block :
1, :
1ENQUEUE_EVENT:
1LV_LOCK_TYPE:
1LV_LOCK_MODE:
1CHR:
1BITAND:
116777216:
1/:
116777215:
116711680:
165535:
1LATCH_EVENT:
1V$LATCHNAME:
1LATCH#:
1DBA_EVENT:
1P_PX:
1 :
1DBMS_UTILITY:
1DATA_BLOCK_ADDRESS_FILE:
1DATA_BLOCK_ADDRESS_BLOCK:
1UNDO_EVENT:
1V$ROLLNAME:
1USN:
1ROW_EVENT:
1PARAMETER:
1V$ROWCACHE:
1CACHE#:
1EVENT_DETAIL:
1P_P1TEXT:
1P_P2TEXT:
1P_P3TEXT:
1P_P3:
1LV_RETURN:
12048:
1file#:
1block#:
1file number:
1first dba:
1enqueue:
1LIKE:
1enq::%:
1latch activity:
1latch free:
1dba:
1undo segment recovery:
1row cache lock:
1TRIM:
1>:
1LOAD_LOCKS:
1Buffer hash table instance lock:
1Control file schema global enqueue lock:
1Cross-instance function invocation instance lock:
13:
14:
1Cursor bind lock:
1Data file instance lock:
16:
1Direct loader parallel index create:
17:
1Mount/startup db primary/secondary instance lock:
18:
1Distributed recovery process lock:
19:
1Distributed transaction entry lock:
1SGA open-file information lock:
111:
1File set lock:
112:
1Space management operations on a specific segment lock:
113:
1Instance number lock:
114:
1Instance recovery serialization global enqueue lock:
115:
1Instance state lock:
116:
1Library cache invalidation instance lock:
117:
1Job queue lock:
118:
1Thread kick lock:
119:
1Master buffer hash table instance lock:
1Mount definition gloabal enqueue lock:
121:
1Media recovery lock:
122:
1Password file lock:
123:
1Parallel operation lock:
124:
1Process startup lock:
125:
126:
1USE_ROW_ENQUEUE enforcement lock:
127:
1Redo thread global enqueue lock:
128:
1Row wait enqueue lock:
129:
1System commit number instance lock:
1System commit number high water mark enqueue lock:
131:
1SMON lock:
132:
1Sequence number instance lock:
133:
1Sequence number enqueue lock:
134:
1Sort segment lock:
135:
1Space transaction enqueue lock:
136:
1Sequence number value lock:
137:
1Generic enqueue lock:
138:
1DDL enqueue lock:
139:
1Extend-segment enqueue lock:
1DML enqueue lock:
141:
1Temporary object operations lock:
142:
1Temporary table enqueue lock:
143:
1Transaction enqueue lock:
144:
1User supplied lock:
145:
1User name lock:
146:
1Undo segment DDL lock:
147:
1Being-written redo log instance lock:
1Write-atomic-log-switch global enqueue lock:
149:
1Temporary segment or new block allocation enqueue lock:
150:
1Log start/log switch enqueue lock:
151:
1Default Temporary Tablespace Enqueue:
152:
1Diana Version Enqueue:
153:
1Internet Application Server Enqueue:
154:
1Scheduler Modification and Loading Enqueue:
155:
1Scheduler Top Plan Enqueue:
156:
1Synchronized Replication Enqueue:
1Change Data Captu
/


spool off
